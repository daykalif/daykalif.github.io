<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【转载】为什么要拥抱React Hooks</title>
    <url>/2022/03/31/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%8B%A5%E6%8A%B1React-Hooks/</url>
    <content><![CDATA[<h3 id="什么是-React-Hooks"><a href="#什么是-React-Hooks" class="headerlink" title="什么是 React Hooks"></a>什么是 React Hooks</h3><p>Hooks 是 React 16.8 新增的特性，在你不需要写 class 组件的情况下，就赋予了函数式组件 state 状态管理及生命周期函数的特性</p>
<h4 id="Hooks-的优势"><a href="#Hooks-的优势" class="headerlink" title="Hooks 的优势"></a>Hooks 的优势</h4><h5 id="all-in-函数式编程"><a href="#all-in-函数式编程" class="headerlink" title="all in 函数式编程"></a>all in 函数式编程</h5><p>在你编写 React 应用时，不需要再纠结在 函数式组件、class 类组件、高阶组件、render props 之间的切换</p>
<ul>
<li><p>1.开发人员首先需要根据页面 UI 及业务场景，对页面进行抽象和组件拆分，做出人为划分：</p>
<ul>
<li>1).需要逻辑状态的使用 class 组件</li>
<li>2).纯 UI 展示的使用函数式组件</li>
</ul>
</li>
<li><p>2.哪天需求有变动，需要原来的函数式组件需要状态管理，你需要决定是否需要把状态提升到父级组件 或者 将原函数式组件重写为 class 组件</p>
</li>
<li><p>3.逻辑复用需要考虑使用 高阶组件 还是 render props</p>
</li>
<li><p>4.组合优于继承的理念，使用 class 类组件的继承会使得应用更复杂，难以维护，同时复用性降低</p>
</li>
</ul>
<p>有了 Hooks，以上问题统统解决，使用 Hooks + 函数式组件可以完成满足所有场景</p>
<h4 id="class-类组件相关逻辑的割裂、不相关逻辑的耦合"><a href="#class-类组件相关逻辑的割裂、不相关逻辑的耦合" class="headerlink" title="class 类组件相关逻辑的割裂、不相关逻辑的耦合"></a>class 类组件相关逻辑的割裂、不相关逻辑的耦合</h4><p>1.class 类组件，各个阶段的声明周期函数，往往把相关的逻辑割裂开<br>比如你要在 componentDidMount 中设置定时器，在 componentWillUnmount 中移除定时器；你要在 componentDidMount componentDidUpdate 中写重复的逻辑<br>2.class 类组件，componentDidMount 钩子函数中往往需要将不相关的逻辑都写在这一个钩子函数中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Timer</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">second</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleClick</span> = <span class="variable language_">this</span>.<span class="property">handleClick</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">conponentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">`You clicked <span class="subst">$&#123;<span class="variable language_">this</span>.state.count&#125;</span> times`</span>; <span class="comment">// 不相关的两个逻辑写到一起</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">interval</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">count</span>: state.<span class="property">second</span> + <span class="number">1</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">componentDidUpdate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">`You clicked <span class="subst">$&#123;<span class="variable language_">this</span>.state.count&#125;</span> times`</span>; <span class="comment">// 相同的逻辑在conponentDidMount中也写了一遍</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">componentWillUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">interval</span>); <span class="comment">// 处理定时器的逻辑被分散到不同生命周期函数中</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>Second: &#123;this.state.second&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>count: &#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 hooks，可以将相关逻辑都放在一个 useEffect 中，不相关逻辑放在各自 useEffect 中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Timer</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [second, setSecond] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">`You clicked <span class="subst">$&#123;count&#125;</span> times`</span>;</span><br><span class="line">  &#125;, [count]);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> interval = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setSecond</span>(<span class="function">(<span class="params">second</span>) =&gt;</span> second + <span class="number">1</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="built_in">clearInterval</span>(interval);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Second: &#123;second&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;setCount(count</span> + <span class="attr">1</span>)&#125;&gt;</span>count: .count&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="提高状态逻辑的复用性"><a href="#提高状态逻辑的复用性" class="headerlink" title="提高状态逻辑的复用性"></a>提高状态逻辑的复用性</h4><p>1.在 Hooks 之前，我们往往通过 HOC、render props 的方式来完成逻辑复用，但是 HOC、render props 等方法都会遇到多层嵌套地狱的问题，当嵌套多层时可能会存在 props 的传值冲突的问题、排查线上问题时某一个 state 无法快速辨别到底是哪一层高阶组件传进来等问题 2.而基于 Hooks，我们可以把可复用的状态逻辑抽离到一个函数中作为自定义 Hooks，通过多个 Hooks 的组合完成复杂逻辑共享 3.多处复用同一个 Hooks 时，只是复用 Hooks 的处理状态的逻辑，每一个 Hooks 中的状态都是独立的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useTimer</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">const</span> [second, setSecond] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> interval = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="title function_">setSecond</span>(<span class="function"><span class="params">second</span> =&gt;</span> second + <span class="number">1</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="built_in">clearInterval</span>(interval)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> second</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Timer1</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">const</span> second = <span class="title function_">useTimer</span>()</span><br><span class="line"><span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>second: &#123;second&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Timer2</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">const</span> second = <span class="title function_">useTimer</span>()</span><br><span class="line"><span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>second: &#123;second&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>组件多状态需求<br>函数式组件结合 hooks，组件的每一次渲染获得的 state 都是独立的，可以实现多种状态的组件需求，而 class 类组件中访问的 this 永远是指向最新的实例状态</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">alertMe</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`You clicked <span class="subst">$&#123;count&#125;</span> times`</span>);</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>You clicked &#123;count&#125; times<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;alertMe&#125;</span>&gt;</span>Alert me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先点击 Alert me，开启 3 秒定时器，然后快速点击 Click me3 次，页面计数累加到 3，3s 后执行定时器回调，打印的是 You clicked 0 times<br>参考<br>Why We Switched to React Hooks</p>
<p>转载链接：<br><a href="https://juejin.cn/post/6854573219421585416">https://juejin.cn/post/6854573219421585416</a></p>
]]></content>
  </entry>
  <entry>
    <title>卡老师的硬核React面试题（视频：卡颂）</title>
    <url>/2022/04/03/%E5%8D%A1%E8%80%81%E5%B8%88%E7%9A%84%E7%A1%AC%E6%A0%B8React%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E8%A7%86%E9%A2%91%EF%BC%9A%E5%8D%A1%E9%A2%82%EF%BC%89/</url>
    <content><![CDATA[<h3 id="1-聊聊-React-生命周期"><a href="#1-聊聊-React-生命周期" class="headerlink" title="1.聊聊 React 生命周期"></a>1.聊聊 React 生命周期</h3><p>UI&#x3D;fn(state)<br>用户交互触发了 this.setState，</p>
<p>state：被称为 Reconciler，用于计算出状态变化。在 reconciler 中会执行一个被称为 reconcile 的算法，也就是 diff 算法。此阶段为 render 阶段。</p>
<p>fn：被称为 Renderer（渲染器），用于将状态变化渲染在视图中。此阶段为 commit 阶段。</p>
<p>这两个阶段会执行所有的生命周期函数。</p>
<blockquote>
<p>render 阶段：</p>
</blockquote>
<ul>
<li>Mount<ul>
<li>constructor</li>
<li>componentWillMount【react17 废弃】</li>
<li>getDerivedStateFromProps（替代 componentWillMount）</li>
<li>render</li>
</ul>
</li>
<li>Update<ul>
<li>componentWillReceiveProps【react17 废弃】</li>
<li>getDerivedStateFromProps</li>
<li>shouldComponentUpdate</li>
<li>componentWillUpdate【react17 废弃】</li>
<li>render</li>
</ul>
</li>
<li>Error<ul>
<li>getDerivedStateFromError（新）</li>
</ul>
</li>
</ul>
<blockquote>
<p>commit 阶段：</p>
</blockquote>
<ul>
<li>Mount<ul>
<li>componentDidMount</li>
</ul>
</li>
<li>Update<ul>
<li>getSnapshotBeforeUpdate</li>
<li>componentDidUpdate</li>
</ul>
</li>
<li>Unmount<ul>
<li>componentWillUnmount</li>
</ul>
</li>
<li>Error<ul>
<li>componentDidCatch</li>
</ul>
</li>
</ul>
<h4 id="生命周期过程"><a href="#生命周期过程" class="headerlink" title="生命周期过程"></a>生命周期过程</h4><p>1.调用 ReactDOM.render</p>
<p>2.进入 Render 阶段</p>
<p>3.采用深度优先遍历创建 fiber 树</p>
<p>4.进入 Commit 阶段</p>
<p>a.用户调用 this.setState,将 c2 变为绿色</p>
<p>b.进入 Render 阶段</p>
<p>c.采用深度优先遍历创建 fiber 树</p>
<p>d.reconcile 算法标记变化</p>
<p>e.进入 Commit 阶段</p>
<p>f.执行 4 中的变化对应的视图操作</p>
<h3 id="2-this-setState-是同步还是异步"><a href="#2-this-setState-是同步还是异步" class="headerlink" title="2.this.setState 是同步还是异步"></a>2.this.setState 是同步还是异步</h3><p>我们完全不需要依赖这个特性。<br>如果我们要依赖状态更新后的值，对于 classComponent，我们可以在 componentDidMount 或者 componentDidUpdate 中执行。<br>对于 function Component，我们可以在 useEffect 的回调函数中执行。</p>
<p>React 当前有 3 种模式，<br>1.legacy 模式<br>ReactDOM.render(<App/>,rootNode)。这是当前 React app 使用的方式。当前没有计划删除本模式，但这个模式可能不支持这些新功能。<br>legacy 模式命中 batchUpdates 时异步<br>legacy 模式未命中 batchUpdates 时同步</p>
<p>2.blocking 模式<br>ReactDOM.createBlockingRoot(rootNode).render(<App/>)。目前正在试验中。作为迁移到 concurrent 模式的第一个步骤。</p>
<p>3.concurrent 模式<br>ReactDOM.createRoot(rootNode).render(<App/>)。目前在试验中，未来稳定之后，打算作为 React 的默认开发模式。这个模式开启了所有的新功能。</p>
<p>创建的更新拥有不同优先级，更新的过程也可以打断<br>concurrent 模式都是异步</p>
<h3 id="3-useEffect-fn-与-componentDidMount-有什么区别？"><a href="#3-useEffect-fn-与-componentDidMount-有什么区别？" class="headerlink" title="3.useEffect(fn,[])与 componentDidMount 有什么区别？"></a>3.useEffect(fn,[])与 componentDidMount 有什么区别？</h3><p>其实是 fn 与 componentDidMount 的执行时机有什么区别。<br>fn 的执行时机与 useEffect 第二个参数有关。所以这个问题问的是：</p>
<blockquote>
<p>1.useEffect 第二个参数[]如何影响 fn 的执行？</p>
</blockquote>
<p>render 阶段通过一种被称为 EFFECT 的数据结构【在新版 react 中它又被称作 FLAGS】将状态变化传递给 commit 阶段。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">对于需要              我们会在对应的fiber节点上增加           的effect</span><br><span class="line">        插入DOM的元素                           Placement</span><br><span class="line">        更新DOM的元素                           Update</span><br><span class="line">        删除DOM的元素                           Deletion</span><br><span class="line">        更新Ref属性的元素                        Ref</span><br><span class="line">        useEffect回调的元素                     Passive</span><br><span class="line"></span><br><span class="line">useEffect回调的元素 时：</span><br><span class="line">useEffect(fn) 会在 Mount和UPDTATE 时，创建Passive的effect</span><br><span class="line">useEffect(fn,[]) 会在 Mount 时，创建Passive的effect</span><br><span class="line">useEffect(fn,[dep]) 会在 Mount和DPEP 时，创建Passive的effect</span><br><span class="line"></span><br><span class="line">插入DOM时：</span><br><span class="line">classComponent 会在 Mount 时创建 Placement的effect</span><br><span class="line"></span><br><span class="line">所以render阶段到commit阶段传递的是一条包含了不同fiber节点的effect的链表</span><br><span class="line"></span><br><span class="line">commit阶段如何处理链表上的每个effect的呢？</span><br><span class="line">commit阶段将状态变化渲染在视图中，转而言之就是将EFFECT渲染在视图中。</span><br><span class="line"></span><br><span class="line">commit阶段可分为：</span><br><span class="line">1.渲染视图前（beforeMutation阶段）</span><br><span class="line"></span><br><span class="line">2.渲染视图（mutation阶段）</span><br><span class="line">对于Placement来说，它会在mutation阶段执行对应DOM节点appendChild操作。这样我们的DOM节点会被插入到视图中。</span><br><span class="line"></span><br><span class="line">3.渲染视图后（layout阶段）</span><br><span class="line">之后，Placement会在layout阶段调用componentDidMount，同步调用。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">对于Passive Effect来说【也就是useEffect(fn,[])】，它会在我们commit阶段的三个子阶段执行完成以后，异步调用useEffect回调。</span><br><span class="line"></span><br><span class="line">useLayoutEffect的调用时机和componentDidMount一致。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>2.fn 与 componentDidMount 的执行时机</p>
</blockquote>
<h3 id="4-什么时候使用-useLayoutEffect-代替-useEffect？"><a href="#4-什么时候使用-useLayoutEffect-代替-useEffect？" class="headerlink" title="4.什么时候使用 useLayoutEffect 代替 useEffect？"></a>4.什么时候使用 useLayoutEffect 代替 useEffect？</h3><p>useEffect 和 useLayoutEffect，是两个工作方式很相似的 React Hook。</p>
<p>你可以像下面这样使用它们：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 执行副作用</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// clean up</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;, [dependency, arr]);</span><br><span class="line"></span><br><span class="line"><span class="title function_">useLayoutEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 执行副作用</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// clean up</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;, [dependency, array]);</span><br></pre></td></tr></table></figure>

<p>但是它们不是完全一样的。通过阅读下面的内容，你将知道两者之间有何不同，以及每一种的适用场景。（大部分场景都适用于 useEffect）</p>
<h4 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h4><p>一句话总结：两者的不同在于执行时机。</p>
<h5 id="useEffect-是在渲染函数执行完成，并绘制到屏幕之后，再异步执行。"><a href="#useEffect-是在渲染函数执行完成，并绘制到屏幕之后，再异步执行。" class="headerlink" title="useEffect 是在渲染函数执行完成，并绘制到屏幕之后，再异步执行。"></a>useEffect 是在渲染函数执行完成，并绘制到屏幕之后，再异步执行。</h5><p>大致流程如下：</p>
<ul>
<li>1.触发渲染函数执行（改变状态，或者父组件重新渲染）</li>
<li>2.React 调用组件的渲染函数</li>
<li>3.屏幕中重绘完成</li>
<li>4.执行 useEffect</li>
</ul>
<h5 id="useLayoutEffect，是在渲染函数执行之后，但是屏幕重绘前同步执行。（注意：它可能会影响渲染体验）"><a href="#useLayoutEffect，是在渲染函数执行之后，但是屏幕重绘前同步执行。（注意：它可能会影响渲染体验）" class="headerlink" title="useLayoutEffect，是在渲染函数执行之后，但是屏幕重绘前同步执行。（注意：它可能会影响渲染体验）"></a>useLayoutEffect，是在渲染函数执行之后，但是屏幕重绘前同步执行。（注意：它可能会影响渲染体验）</h5><p>大致流程如下：</p>
<ul>
<li>1.触发渲染函数执行（改变状态，或者父组件重新渲染）</li>
<li>2.React 调用组件的渲染函数</li>
<li>3.执行 useLayoutEffect，并且 React 等待它执行完成</li>
<li>4.屏幕中重绘完成</li>
</ul>
<h4 id="99-的场景，适用于-useEffect"><a href="#99-的场景，适用于-useEffect" class="headerlink" title="99%的场景，适用于 useEffect"></a>99%的场景，适用于 useEffect</h4><p>大部分的场景都是通过 effect 同步一些状态或者 props，这些是不需要立即执行的，或者做一些不影响页面显示的事情。</p>
<p>例如请求远程数据，是不需要立即应用结果修改的。<br>或者设置某个事件监听，或者在弹窗显示&#x2F;消失的时候，重置某些状态。</p>
<p>大部分的场景，useEffect 足够了。</p>
<h4 id="什么时候使用-useLayoutEffect"><a href="#什么时候使用-useLayoutEffect" class="headerlink" title="什么时候使用 useLayoutEffect?"></a>什么时候使用 useLayoutEffect?</h4><p>什么样的场景需要使用 useLayoutEffect？当你看见的时候，你就知道了。（字面意思）</p>
<p>如果状态更新，导致组件渲染闪烁，这个时候，就应该用 useLayoutEffect，例如初次渲染只有部分状态正确，然后立刻使用最终状态重新渲染时，可能会发生上述情况。</p>
<p>让我用一个例子来说明具体情况。</p>
<p>当你点击页面时，状态立即发生改变（value 重置为 0），此时会立刻出发组件重新渲染，并重绘到屏幕上，然后 effect 执行，将 value 设置为某个随机数，同时再次立刻触发重新渲染。</p>
<p>这样就会导致 2 次渲染连续发生。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useLayoutEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">BlinkyRender</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [value, setValue] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useLayoutEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (value === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="title function_">setValue</span>(<span class="number">10</span> + <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [value]);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;render&quot;</span>, value);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setValue(0)&#125;&gt;value: &#123;&#123; value &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">BlinkyRender</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#root&quot;</span>));</span><br></pre></td></tr></table></figure>

<blockquote>
<p>一般情况下，在 div 上绑定 onClick 事件是不推荐的（使用 button 代替），但是这只是一个演示例子。【只是想提醒一下】</p>
</blockquote>
<p>可以自己尝试用 useLayoutEffect 和 useEffect 分别实现看看。<br>ps：我自己实践了一下，没啥区别，可能是优化了～<br>相信你已经注意到了，使用 useLayoutEffect 时，虽然渲染函数执行 2 次，但是页面重绘只执行一次。而使用 useEffect 时，渲染函数执行 2 次，页面也重绘 2 次，你会看见有一个快速闪烁的 0。</p>
<h4 id="我应该使用-useEffect-还是-useLayoutEffect"><a href="#我应该使用-useEffect-还是-useLayoutEffect" class="headerlink" title="我应该使用 useEffect 还是 useLayoutEffect?"></a>我应该使用 useEffect 还是 useLayoutEffect?</h4><p>大部分场景中，useEffect 是正确的选择。如果遇到闪烁的场景，可以换到 useLayoutEffect，看一下是否能解决问题。</p>
<p>因为 useLayoutEffect 是同步执行的，因此会发生阻塞，直到 effect 执行完成才会进行页面重绘，如果你的 effect 内部有执行很慢的代码，可能会引起性能问题。</p>
<p>参考视频：<br><a href="https://www.bilibili.com/video/BV16t4y1r7oJ">https://www.bilibili.com/video/BV16t4y1r7oJ</a><br><a href="https://juejin.cn/post/6844904177521426439">https://juejin.cn/post/6844904177521426439</a></p>
]]></content>
  </entry>
  <entry>
    <title>TypeScript &amp;&amp; 面向对象</title>
    <url>/2021/03/20/%20Typescript/TypeScript-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h2 id="揭开-TypeScript-的面纱"><a href="#揭开-TypeScript-的面纱" class="headerlink" title="揭开 TypeScript 的面纱"></a>揭开 TypeScript 的面纱</h2><h3 id="什么是-TypeScript"><a href="#什么是-TypeScript" class="headerlink" title="什么是 TypeScript"></a>什么是 TypeScript</h3><p>Typescript 是 JavaScript 的、带有类型的超集，并且能够编译为普通的 JavaScript</p>
<h3 id="为什么用-TypeScript"><a href="#为什么用-TypeScript" class="headerlink" title="为什么用 TypeScript"></a>为什么用 TypeScript</h3><ul>
<li>01.类型检查</li>
<li>02.代码补全</li>
<li>03.易于维护</li>
<li>04.入门简单</li>
</ul>
<h3 id="编写并运行-Typescript"><a href="#编写并运行-Typescript" class="headerlink" title="编写并运行 Typescript"></a>编写并运行 Typescript</h3><h4 id="安装编译器"><a href="#安装编译器" class="headerlink" title="安装编译器"></a>安装编译器</h4><h5 id="1-nodejs-环境：npm-install-g-typescript"><a href="#1-nodejs-环境：npm-install-g-typescript" class="headerlink" title="1.nodejs 环境：npm install -g typescript"></a>1.nodejs 环境：npm install -g typescript</h5><p>新建文件：index.ts 文件</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">number</span> = <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br></pre></td></tr></table></figure>

<p>运行命令：<br><code>tsc index.ts</code> 会自动生成一个 index.js 文件<br><code>npde index.js</code></p>
<h5 id="2-使用-deno"><a href="#2-使用-deno" class="headerlink" title="2.使用 deno"></a>2.使用 deno</h5><p>官方提供了 denoland&#x2F;deno_install 安装脚本，可以通过运行一个命令完成 Deno 的下载和安装：</p>
<p>macOS 和 Linux 系统上使用 shell:<br><code>curl -fsSL https://deno.land/x/install/install.sh | sh</code></p>
<p>Windows 系统上使用 PowerShell:<br><code>wr https://deno.land/x/install/install.ps1 -useb | iex</code></p>
<p>此时可以运行文件：<br><code>deno run index.ts</code></p>
<hr>
<h5 id="ts-默认编译成-ES3-的版本"><a href="#ts-默认编译成-ES3-的版本" class="headerlink" title="ts 默认编译成 ES3 的版本"></a>ts 默认编译成 ES3 的版本</h5><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">params: <span class="built_in">string</span></span>) &#123;&#125;</span><br></pre></td></tr></table></figure>

<p><code>tsc index.ts</code>编译之后会生成 ES3 的 index.js 文件代码:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> __awaiter =</span><br><span class="line">  (<span class="variable language_">this</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">__awaiter</span>) ||</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">thisArg, _arguments, P, generator</span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">adopt</span>(<span class="params">value</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> value <span class="keyword">instanceof</span> P</span><br><span class="line">        ? value</span><br><span class="line">        : <span class="keyword">new</span> <span class="title function_">P</span>(<span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(value);</span><br><span class="line">          &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> (P || (P = <span class="title class_">Promise</span>))(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">fulfilled</span>(<span class="params">value</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="title function_">step</span>(generator.<span class="title function_">next</span>(value));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          <span class="title function_">reject</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">rejected</span>(<span class="params">value</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="title function_">step</span>(generator[<span class="string">&quot;throw&quot;</span>](value));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          <span class="title function_">reject</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">step</span>(<span class="params">result</span>) &#123;</span><br><span class="line">        result.<span class="property">done</span></span><br><span class="line">          ? <span class="title function_">resolve</span>(result.<span class="property">value</span>)</span><br><span class="line">          : <span class="title function_">adopt</span>(result.<span class="property">value</span>).<span class="title function_">then</span>(fulfilled, rejected);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">step</span>((generator = generator.<span class="title function_">apply</span>(thisArg, _arguments || [])).<span class="title function_">next</span>());</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="keyword">var</span> __generator =</span><br><span class="line">  (<span class="variable language_">this</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">__generator</span>) ||</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">thisArg, body</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> _ = &#123;</span><br><span class="line">        <span class="attr">label</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">sent</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (t[<span class="number">0</span>] &amp; <span class="number">1</span>) <span class="keyword">throw</span> t[<span class="number">1</span>];</span><br><span class="line">          <span class="keyword">return</span> t[<span class="number">1</span>];</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">trys</span>: [],</span><br><span class="line">        <span class="attr">ops</span>: [],</span><br><span class="line">      &#125;,</span><br><span class="line">      f,</span><br><span class="line">      y,</span><br><span class="line">      t,</span><br><span class="line">      g;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      (g = &#123; <span class="attr">next</span>: <span class="title function_">verb</span>(<span class="number">0</span>), <span class="attr">throw</span>: <span class="title function_">verb</span>(<span class="number">1</span>), <span class="attr">return</span>: <span class="title function_">verb</span>(<span class="number">2</span>) &#125;),</span><br><span class="line">      <span class="keyword">typeof</span> <span class="title class_">Symbol</span> === <span class="string">&quot;function&quot;</span> &amp;&amp;</span><br><span class="line">        (g[<span class="title class_">Symbol</span>.<span class="property">iterator</span>] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">        &#125;),</span><br><span class="line">      g</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">verb</span>(<span class="params">n</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">v</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">step</span>([n, v]);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">step</span>(<span class="params">op</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (f) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;Generator is already executing.&quot;</span>);</span><br><span class="line">      <span class="keyword">while</span> (_)</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (</span><br><span class="line">            ((f = <span class="number">1</span>),</span><br><span class="line">            y &amp;&amp;</span><br><span class="line">              (t =</span><br><span class="line">                op[<span class="number">0</span>] &amp; <span class="number">2</span></span><br><span class="line">                  ? y[<span class="string">&quot;return&quot;</span>]</span><br><span class="line">                  : op[<span class="number">0</span>]</span><br><span class="line">                  ? y[<span class="string">&quot;throw&quot;</span>] || ((t = y[<span class="string">&quot;return&quot;</span>]) &amp;&amp; t.<span class="title function_">call</span>(y), <span class="number">0</span>)</span><br><span class="line">                  : y.<span class="property">next</span>) &amp;&amp;</span><br><span class="line">              !(t = t.<span class="title function_">call</span>(y, op[<span class="number">1</span>])).<span class="property">done</span>)</span><br><span class="line">          )</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">          <span class="keyword">if</span> (((y = <span class="number">0</span>), t)) op = [op[<span class="number">0</span>] &amp; <span class="number">2</span>, t.<span class="property">value</span>];</span><br><span class="line">          <span class="keyword">switch</span> (op[<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">              t = op;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">              _.<span class="property">label</span>++;</span><br><span class="line">              <span class="keyword">return</span> &#123; <span class="attr">value</span>: op[<span class="number">1</span>], <span class="attr">done</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">              _.<span class="property">label</span>++;</span><br><span class="line">              y = op[<span class="number">1</span>];</span><br><span class="line">              op = [<span class="number">0</span>];</span><br><span class="line">              <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">              op = _.<span class="property">ops</span>.<span class="title function_">pop</span>();</span><br><span class="line">              _.<span class="property">trys</span>.<span class="title function_">pop</span>();</span><br><span class="line">              <span class="keyword">continue</span>;</span><br><span class="line">            <span class="attr">default</span>:</span><br><span class="line">              <span class="keyword">if</span> (</span><br><span class="line">                !((t = _.<span class="property">trys</span>), (t = t.<span class="property">length</span> &gt; <span class="number">0</span> &amp;&amp; t[t.<span class="property">length</span> - <span class="number">1</span>])) &amp;&amp;</span><br><span class="line">                (op[<span class="number">0</span>] === <span class="number">6</span> || op[<span class="number">0</span>] === <span class="number">2</span>)</span><br><span class="line">              ) &#123;</span><br><span class="line">                _ = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> (op[<span class="number">0</span>] === <span class="number">3</span> &amp;&amp; (!t || (op[<span class="number">1</span>] &gt; t[<span class="number">0</span>] &amp;&amp; op[<span class="number">1</span>] &lt; t[<span class="number">3</span>]))) &#123;</span><br><span class="line">                _.<span class="property">label</span> = op[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> (op[<span class="number">0</span>] === <span class="number">6</span> &amp;&amp; _.<span class="property">label</span> &lt; t[<span class="number">1</span>]) &#123;</span><br><span class="line">                _.<span class="property">label</span> = t[<span class="number">1</span>];</span><br><span class="line">                t = op;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> (t &amp;&amp; _.<span class="property">label</span> &lt; t[<span class="number">2</span>]) &#123;</span><br><span class="line">                _.<span class="property">label</span> = t[<span class="number">2</span>];</span><br><span class="line">                _.<span class="property">ops</span>.<span class="title function_">push</span>(op);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> (t[<span class="number">2</span>]) _.<span class="property">ops</span>.<span class="title function_">pop</span>();</span><br><span class="line">              _.<span class="property">trys</span>.<span class="title function_">pop</span>();</span><br><span class="line">              <span class="keyword">continue</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          op = body.<span class="title function_">call</span>(thisArg, _);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          op = [<span class="number">6</span>, e];</span><br><span class="line">          y = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          f = t = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">if</span> (op[<span class="number">0</span>] &amp; <span class="number">5</span>) <span class="keyword">throw</span> op[<span class="number">1</span>];</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">value</span>: op[<span class="number">0</span>] ? op[<span class="number">1</span>] : <span class="keyword">void</span> <span class="number">0</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">params</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">__awaiter</span>(<span class="variable language_">this</span>, <span class="keyword">void</span> <span class="number">0</span>, <span class="keyword">void</span> <span class="number">0</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">__generator</span>(<span class="variable language_">this</span>, <span class="keyword">function</span> (<span class="params">_a</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> [<span class="number">2</span> <span class="comment">/*return*/</span>];</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果要生成 ES2017 版本，需要在项目根目录下新建：tsconfig.json 文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES2017&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>此时编译运行命令<code>tsc</code>,则会按照文件配置进行编译，如果编译时指定文件名，则会忽略这个配置文件</p>
<p>编译过后的 index.js 文件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">params</span>) &#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Typescript-基本语法"><a href="#Typescript-基本语法" class="headerlink" title="Typescript 基本语法"></a>Typescript 基本语法</h3><h4 id="1-基本类型"><a href="#1-基本类型" class="headerlink" title="1.基本类型"></a>1.基本类型</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// boolean, number, string, undefined, null</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">a = <span class="string">&quot;hello&quot;</span>; <span class="comment">//不能将类型“string”分配给类型“number”。ts(2322)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: <span class="built_in">boolean</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: <span class="built_in">any</span> = <span class="number">10</span>;</span><br><span class="line">c = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="comment">//add函数需要两个参数，传入参数a为number类型，传入参数b为number类型，返回值为number类型</span></span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> res1 = <span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="attr">res2</span>: <span class="built_in">string</span> = <span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">//不能将类型“number”分配给类型“string”。ts(2322)</span></span><br><span class="line"><span class="title function_">add</span>(<span class="string">&quot;1&quot;</span>, <span class="number">2</span>); <span class="comment">//类型“string”的参数不能赋给类型“number”的参数。ts(2345)</span></span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>); <span class="comment">//index.ts(11, 25): 未提供 &quot;b&quot; 的自变量。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">minus</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="comment">//没有返回值类型</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a - b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-组合类型"><a href="#2-组合类型" class="headerlink" title="2.组合类型"></a>2.组合类型</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">number</span> | <span class="built_in">string</span> = <span class="number">10</span>;</span><br><span class="line">a = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NumStr</span> = <span class="built_in">number</span> | <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: <span class="title class_">NumStr</span> = <span class="number">10</span>;</span><br><span class="line">b = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: <span class="title class_">NumStr</span> = <span class="string">&quot;world&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">d</span>: <span class="string">&quot;on&quot;</span> | <span class="string">&quot;off&quot;</span> = <span class="string">&quot;on&quot;</span>; <span class="comment">//只能取值on或者off</span></span><br><span class="line">d = <span class="string">&quot;off&quot;</span>;</span><br><span class="line">d = <span class="string">&quot;other&quot;</span>; <span class="comment">//不能将类型“&quot;other&quot;”分配给类型“&quot;on&quot; | &quot;off&quot;”。ts(2322)</span></span><br></pre></td></tr></table></figure>

<h4 id="3-对象类型"><a href="#3-对象类型" class="headerlink" title="3.对象类型"></a>3.对象类型</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Post</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">author</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">post</span>: <span class="title class_">Post</span> = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;标题&quot;</span>,</span><br><span class="line">  <span class="attr">author</span>: <span class="string">&quot;daykalif&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">post1</span>: <span class="title class_">Post</span> = &#123;</span><br><span class="line">  <span class="comment">//类型 &quot;&#123; title: string; &#125;&quot; 中缺少属性 &quot;author&quot;，但类型 &quot;Post&quot; 中需要该属性。ts(2741)</span></span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;标题&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">post2</span>: <span class="title class_">Post</span> = &#123;</span><br><span class="line">  <span class="comment">//不能将类型“&#123; title: string; author: string; other: string; &#125;”分配给类型“Post”。对象文字可以只指定已知属性，并且“other”不在类型“Post”中。ts(2322)</span></span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;标题&quot;</span>,</span><br><span class="line">  <span class="attr">author</span>: <span class="string">&quot;daykalif&quot;</span>,</span><br><span class="line">  <span class="attr">other</span>: <span class="string">&quot;other&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>函数中的使用：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Post</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">author</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getTitle</span>(<span class="params">post: Post</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(post.<span class="property">title</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> post = &#123;</span><br><span class="line">  <span class="comment">//如果想要严格检查，则let post:Post = &#123;...&#125;定义为接口类型</span></span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;标题&quot;</span>,</span><br><span class="line">  <span class="attr">author</span>: <span class="string">&quot;daykalif&quot;</span>,</span><br><span class="line">  <span class="attr">publishDate</span>: <span class="string">&quot;2021-03-20&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getTitle</span>(post); <span class="comment">//如果传递进来的参数没有定义类型的话，那么只要这个参数包括接口中定义的参数类型，就可以通过检查，哪怕它有额外的属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者直接给函数传递对象字面值，这样就会出错</span></span><br><span class="line"><span class="title function_">getTitle</span>(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;标题&quot;</span>,</span><br><span class="line">  <span class="attr">author</span>: <span class="string">&quot;daykalif&quot;</span>,</span><br><span class="line">  <span class="attr">publishDate</span>: <span class="string">&quot;2021-03-20&quot;</span>, <span class="comment">//类型“&#123; title: string; author: string; publishDate: string; &#125;”的参数不能赋给类型“Post”的参数。对象文字可以只指定已知属性，并且“publishDate”不在类型“Post”中。ts(2345)</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="4-数组类型"><a href="#4-数组类型" class="headerlink" title="4.数组类型"></a>4.数组类型</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用泛型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">new_arr</span>: <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 元祖（tuple）</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">tup</span>: [<span class="built_in">number</span>, <span class="built_in">string</span>, <span class="built_in">boolean</span>] = [<span class="number">1</span>, <span class="string">&quot;daykalif&quot;</span>, <span class="literal">true</span>];</span><br></pre></td></tr></table></figure>

<h3 id="面向对象编程基础：Typescript-实现"><a href="#面向对象编程基础：Typescript-实现" class="headerlink" title="面向对象编程基础：Typescript 实现"></a>面向对象编程基础：Typescript 实现</h3><p>定义:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Employee</span></span><br><span class="line">----------------</span><br><span class="line"><span class="attr">name</span>:string</span><br><span class="line"><span class="attr">age</span>:number</span><br><span class="line"><span class="attr">empNo</span>:number</span><br><span class="line">----------------</span><br><span class="line"><span class="title function_">signIn</span>():<span class="keyword">void</span></span><br><span class="line"><span class="title function_">askLeave</span>():<span class="keyword">void</span></span><br></pre></td></tr></table></figure>

<p>调用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> emp = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">22</span>, <span class="number">999</span>);</span><br><span class="line">emp.<span class="title function_">signIn</span>();</span><br><span class="line">emp.<span class="title function_">askLeave</span>();</span><br></pre></td></tr></table></figure>

<p>描述对象的两种形式:<br>class:【员工类】<br>Object:【员工对象】 （”张三”, 22, 999）</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">  <span class="comment">// 实例变量（它们的值在每个对象中都是独立的，互不影响）</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">empNo</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构造方法</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span>, empNo: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">empNo</span> = empNo;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实例方法</span></span><br><span class="line">  <span class="title function_">signIn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;上班打卡&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">askLeave</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;请假&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> emp = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">22</span>, <span class="number">999</span>);</span><br><span class="line">emp.<span class="title function_">signIn</span>(); <span class="comment">//张三上班打卡</span></span><br><span class="line">emp.<span class="title function_">askLeave</span>(); <span class="comment">//张三请假</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> emp2 = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">25</span>, <span class="number">888</span>);</span><br><span class="line">emp2.<span class="title function_">signIn</span>(); <span class="comment">//李四上班打卡</span></span><br><span class="line">emp2.<span class="title function_">askLeave</span>(); <span class="comment">//李四请假</span></span><br></pre></td></tr></table></figure>

<h3 id="封装与抽象"><a href="#封装与抽象" class="headerlink" title="封装与抽象"></a>封装与抽象</h3><p>封装：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">- 私有</span><br><span class="line">+ 公开</span><br><span class="line"></span><br><span class="line"><span class="title class_">Car</span></span><br><span class="line">----------------</span><br><span class="line">- <span class="title class_">Speed</span>:number</span><br><span class="line">- <span class="attr">make</span>:string</span><br><span class="line">----------------</span><br><span class="line">+ <span class="title function_">accelerate</span>():<span class="keyword">void</span></span><br><span class="line">+ <span class="title function_">decelerate</span>():<span class="keyword">void</span></span><br></pre></td></tr></table></figure>

<p>抽象：<br>对象方法的具体实现细节，外界是看不到的；外界只需要调用对象中的方法来查看或修改数据。</p>
<p>默认公开:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">  <span class="attr">speed</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">make</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">make: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">speed</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">make</span> = make;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以随意修改:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">car</span>: <span class="title class_">Car</span> = <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;Toyota&quot;</span>);</span><br><span class="line">car.<span class="property">make</span> = <span class="string">&quot;Honda&quot;</span>;</span><br><span class="line">car.<span class="property">speed</span> = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(car.<span class="property">make</span>); <span class="comment">//Honda</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(car.<span class="property">speed</span>); <span class="comment">//200</span></span><br></pre></td></tr></table></figure>

<p>private 私有属性:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">speed</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">make</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">make: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">speed</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">make</span> = make;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不可以访问和修改:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">car</span>: <span class="title class_">Car</span> = <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;Toyota&quot;</span>);</span><br><span class="line">car.<span class="property">make</span> = <span class="string">&quot;Honda&quot;</span>; <span class="comment">//属性“make”为私有属性，只能在类“Car”中访问。ts(2341)</span></span><br><span class="line">car.<span class="property">speed</span> = <span class="number">200</span>; <span class="comment">//属性“speed”为私有属性，只能在类“Car”中访问。ts(2341)</span></span><br></pre></td></tr></table></figure>

<p>修改车速：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">speed</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">make</span>: <span class="built_in">string</span>; <span class="comment">//品牌只读属性</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">make: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">speed</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">make</span> = make;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取当前车速</span></span><br><span class="line">  <span class="title function_">getCurrentSpeed</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;当前车速是：&quot;</span> + <span class="variable language_">this</span>.<span class="property">speed</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用Getters &amp;&amp; Setters</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">currentSpeed</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;当前车速是：&quot;</span> + <span class="variable language_">this</span>.<span class="property">speed</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 修改车速</span></span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">setSpeed</span>(<span class="params">delta: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (delta &gt; -<span class="number">100</span> &amp;&amp; delta &lt; <span class="number">100</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">speed</span> += delta;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;delta只能取-100到100之间的数字&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 加速</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">accelerate</span>(<span class="params">delta: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="comment">//方法默认公开</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setSpeed</span>(delta);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 减速</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">decelerate</span>(<span class="params">delta: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setSpeed</span>(-delta);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">car</span>: <span class="title class_">Car</span> = <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;Toyota&quot;</span>); <span class="comment">//make属性只能在定义的时候，或者构造函数中赋值，后面就不能修改了，但是可以访问</span></span><br><span class="line">car.<span class="title function_">accelerate</span>(<span class="number">10</span>);</span><br><span class="line">car.<span class="title function_">accelerate</span>(<span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(car.<span class="title function_">getCurrentSpeed</span>()); <span class="comment">//当前车速是：20</span></span><br><span class="line">car.<span class="title function_">accelerate</span>(<span class="number">200</span>); <span class="comment">//error delta只能取-100到100之间的数字</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取车速的另外方式：</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(car.<span class="title function_">currentSpeed</span>());</span><br></pre></td></tr></table></figure>

<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通按钮</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Button</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span>; <span class="comment">//可以被外部的任何代码访问</span></span><br><span class="line">  <span class="keyword">private</span> <span class="attr">shape</span>: <span class="built_in">string</span> = <span class="string">&quot;rectanglar&quot;</span>; <span class="comment">//私有的属性和方法 --  不能在子类中访问</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="attr">other</span>: <span class="built_in">string</span> = <span class="string">&quot;other&quot;</span>; <span class="comment">//受保护的属性和方法   --  可以在子类中访问，不能被外部代码访问</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">onClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;处理点击事件...&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`&lt;Button&gt;<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>&lt;/Button&gt;`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链接按钮</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Link</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Button</span> &#123;</span><br><span class="line">  <span class="comment">//子类可以访问所有父类的公开属性和方法，包括构造函数</span></span><br><span class="line">  <span class="keyword">private</span> <span class="attr">href</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, href: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name); <span class="comment">//调用父类的构造函数【必须放在第一行】</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">href</span> = href;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//在子类中可以定义同名的方法来覆盖父类的方法</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`&lt;a href=&quot;<span class="subst">$&#123;<span class="variable language_">this</span>.href&#125;</span>&quot;&gt;<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>&lt;/a&gt;`</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">      <span class="string">`&lt;a href=&quot;<span class="subst">$&#123;<span class="variable language_">this</span>.href&#125;</span>&quot; shape=<span class="subst">$&#123;<span class="variable language_">this</span>.shape&#125;</span> other=<span class="subst">$&#123;<span class="variable language_">this</span>.other&#125;</span>&gt;<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>&lt;/a&gt;`</span></span><br><span class="line">    ); <span class="comment">//属性“shape”为私有属性，只能在类“Button”中访问。ts(2341)</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">onClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>.<span class="title function_">onClick</span>(); <span class="comment">//调用父类的方法</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;事件处理完毕，开始跳转...&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> button = <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;按钮&quot;</span>);</span><br><span class="line">button.<span class="property">shape</span>; <span class="comment">//属性“shape”为私有属性，只能在类“Button”中访问。ts(2341)</span></span><br><span class="line">button.<span class="property">other</span>; <span class="comment">//属性“other”受保护，只能在类“Button”及其子类中访问。ts(2445)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> link = <span class="keyword">new</span> <span class="title class_">Link</span>(<span class="string">&quot;点击跳转&quot;</span>, <span class="string">&quot;https://www.daykalif.com&quot;</span>); <span class="comment">//构造函数可以继承，因此可以设置name属性的值</span></span><br><span class="line"><span class="comment">// 处理点击事件...</span></span><br><span class="line">link.<span class="title function_">onClick</span>(); <span class="comment">//调用父类的onClick</span></span><br><span class="line"><span class="comment">// &lt;a href=&quot;https://www.daykalif.com&quot;&gt;点击跳转&lt;/a&gt;</span></span><br><span class="line">link.<span class="title function_">render</span>(); <span class="comment">//调用子类自身的render</span></span><br></pre></td></tr></table></figure>

<h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>继承方式实现多态:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通按钮</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Button</span> &#123;</span><br><span class="line">  <span class="keyword">protected</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`&lt;Button&gt;<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>&lt;/Button&gt;`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链接按钮</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkButton</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Button</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`&lt;a&gt;<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>&lt;/a&gt;`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">comps</span>: <span class="title class_">Array</span>&lt;<span class="title class_">Button</span>&gt; = [<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;普通按钮&quot;</span>), <span class="keyword">new</span> <span class="title class_">LinkButton</span>(<span class="string">&quot;链接按钮&quot;</span>)]; <span class="comment">//具有继承关系，会有一个转型机制，所有Button子类对象，都会自动转型Button父类对象</span></span><br><span class="line"><span class="comment">// &lt;Button&gt;普通按钮&lt;/Button&gt;</span></span><br><span class="line"><span class="comment">// &lt;a&gt;链接按钮&lt;/a&gt;</span></span><br><span class="line">comps.<span class="title function_">forEach</span>(<span class="function">(<span class="params">comp</span>) =&gt;</span> comp.<span class="title function_">render</span>()); <span class="comment">//渲染时因为知道子类会继承父类的方法，所以直接调用render方法渲染组件</span></span><br></pre></td></tr></table></figure>

<p>渲染没有继承关系的组件则会出错:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Image组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Img</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`&lt;img /&gt;`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 类型 &quot;Img&quot; 中缺少属性 &quot;name&quot;，但类型 &quot;Button&quot; 中需要该属性。ts(2741) index.ts(5, 15): 在此处声明了 &quot;name&quot;。</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">comps</span>: <span class="title class_">Array</span>&lt;<span class="title class_">Button</span>&gt; = [</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;普通按钮&quot;</span>),</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">LinkButton</span>(<span class="string">&quot;链接按钮&quot;</span>),</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Img</span>(),</span><br><span class="line">]; <span class="comment">//要渲染没有继承关系的组件则会出错</span></span><br></pre></td></tr></table></figure>

<p>接口方式实现多态:【接口形式适合没有继承关系的类，且需要统一调用某个方法的情况】</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// renderable接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Renderable</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通按钮</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Button</span> <span class="keyword">implements</span> <span class="title class_">Renderable</span> &#123;</span><br><span class="line">  <span class="keyword">protected</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`&lt;Button&gt;<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>&lt;/Button&gt;`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链接按钮</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkButton</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Button</span> <span class="keyword">implements</span> <span class="title class_">Renderable</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`&lt;a&gt;<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>&lt;/a&gt;`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Image组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Img</span> <span class="keyword">implements</span> <span class="title class_">Renderable</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`&lt;img /&gt;`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">comps</span>: <span class="title class_">Array</span>&lt;<span class="title class_">Renderable</span>&gt; = [</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;普通按钮&quot;</span>),</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">LinkButton</span>(<span class="string">&quot;链接按钮&quot;</span>),</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Img</span>(),</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;Button&gt;普通按钮&lt;/Button&gt;</span></span><br><span class="line"><span class="comment">// &lt;a&gt;链接按钮&lt;/a&gt;</span></span><br><span class="line"><span class="comment">// &lt;img /&gt;</span></span><br><span class="line">comps.<span class="title function_">forEach</span>(<span class="function">(<span class="params">comp</span>) =&gt;</span> comp.<span class="title function_">render</span>());</span><br></pre></td></tr></table></figure>

<p>参考视频：<br><a href="https://www.bilibili.com/video/BV1xp4y1D7ux">https://www.bilibili.com/video/BV1xp4y1D7ux</a></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Typescript－系统入门到项目实战</title>
    <url>/2021/04/04/%20Typescript/Typescript%EF%BC%8D%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<h2 id="Typescript"><a href="#Typescript" class="headerlink" title="Typescript"></a>Typescript</h2><h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h3><p>Typescript 是 Javascript 类型的超集，它可以编译成纯 JavaScript。<br>Typescript 可以在任何浏览器、任何计算机和操作系统上运行，并且是开源的。</p>
<p>js:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 动态类型</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">123</span>;</span><br><span class="line">a = <span class="string">&quot;string&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">demo</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(data.<span class="property">x</span> ** <span class="number">2</span> + data.<span class="property">y</span> ** <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">demo</span>();</span><br></pre></td></tr></table></figure>

<p>ts:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 静态类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: <span class="built_in">number</span> = <span class="number">123</span>;</span><br><span class="line"><span class="comment">// b = &#x27;123&#x27;;</span></span><br><span class="line">b = <span class="number">456</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1).类型别名</span></span><br><span class="line"><span class="comment">// type Point = &#123; x: number, y: number &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2).定义接口类型</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ts带给我们很大的帮助，ts的静态类型使得我们在编写代码过程中，定位一些潜在问题。【1.开发过程中，发现潜在问题】</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">tyDemo</span>(<span class="params">data: Point</span>) &#123;</span><br><span class="line">  <span class="comment">//【3.代码语义更清晰易懂】</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(data.<span class="property">x</span> ** <span class="number">2</span> + data.<span class="property">y</span> ** <span class="number">2</span>); <span class="comment">//【2.更友好的编辑器自动提示】</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">tyDemo</span>(&#123; <span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">4</span> &#125;); <span class="comment">//如果不传参，会报错。</span></span><br></pre></td></tr></table></figure>

<h3 id="2-环境安装"><a href="#2-环境安装" class="headerlink" title="2.环境安装"></a>2.环境安装</h3><p>node、npm<br>typescript【sudo 下 npm install -g typescript】</p>
<p>编译时：<br><code>tsc demo.ts</code> –&gt; 生成 demo.js 文件<br><code>node demo.js</code></p>
<p>也可以安装：<br>npm install -g ts-node</p>
<p>可直接运行编译：<br><code>ts-node demo.ts</code></p>
<h3 id="3-静态类型"><a href="#3-静态类型" class="headerlink" title="3.静态类型"></a>3.静态类型</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 静态类型的变量类型不能修改；</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">ponit</span>: <span class="title class_">Point</span> = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">y</span>: <span class="number">4</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ponit.<span class="property">x</span>; <span class="comment">//这个静态类型的变量上的属性和方法也会确定；</span></span><br><span class="line">ponit.<span class="property">y</span>;</span><br></pre></td></tr></table></figure>

<h3 id="4-基础类型-对象类型"><a href="#4-基础类型-对象类型" class="headerlink" title="4.基础类型 &amp;&amp; 对象类型"></a>4.基础类型 &amp;&amp; 对象类型</h3><h4 id="1-基础类型"><a href="#1-基础类型" class="headerlink" title="1).基础类型"></a>1).基础类型</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基础类型【null，undefined，symbol，boolean，number，string，void】</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">count</span>: <span class="built_in">number</span> = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">teacherName</span>: <span class="built_in">string</span> = <span class="string">&quot;daykalif&quot;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="2-对象类型"><a href="#2-对象类型" class="headerlink" title="2).对象类型"></a>2).对象类型</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对象类型【包含对象类型，数组类型，类类型，函数类型】</span></span><br><span class="line"><span class="comment">// 1).对象类型&#123;&#125;</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">teacher</span>: &#123; <span class="attr">name</span>: <span class="built_in">string</span>; <span class="attr">age</span>: <span class="built_in">number</span> &#125; = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;daykalif&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2).数组类型[]</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">numbers</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3).类类型class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">daykalif</span>: <span class="title class_">Person</span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4).函数类型function</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">getTotal</span>: <span class="function">() =&gt;</span> <span class="built_in">number</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 冒号后面写的是类型，等号后面写的是具体的实现</span></span><br><span class="line"><span class="keyword">const</span> func = (<span class="attr">str</span>: <span class="built_in">string</span>): <span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//这里的返回值number可不写</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">parseInt</span>(str, <span class="number">10</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">func1</span>: <span class="function">(<span class="params">str: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">number</span> = <span class="function">(<span class="params">str</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//这里的返回值number需要写</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">parseInt</span>(str, <span class="number">10</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可直接类型推断</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">date</span>: <span class="title class_">Date</span> = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="keyword">const</span> date1 = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他的case</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;string&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> rawData = <span class="string">&#x27;&#123;&quot;name&quot;:&quot;daykalif&quot;&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">newData</span>: <span class="title class_">Person</span> = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(rawData);</span><br><span class="line"></span><br><span class="line"><span class="comment">// temp变量有可能是number，也可能是string</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">temp</span>: <span class="built_in">number</span> | <span class="built_in">string</span> = <span class="number">123</span>;</span><br><span class="line">temp = <span class="string">&quot;456&quot;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="5-类型注解-类型推断"><a href="#5-类型注解-类型推断" class="headerlink" title="5.类型注解 &amp;&amp; 类型推断"></a>5.类型注解 &amp;&amp; 类型推断</h3><h4 id="1-类型注解"><a href="#1-类型注解" class="headerlink" title="1).类型注解"></a>1).类型注解</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.type annotation 类型注解，我们来告诉TS变量是什么类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">count</span>: <span class="built_in">number</span>;</span><br><span class="line"><span class="attr">count</span>: <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果TS无法分析变量类型的话，我们就需要使用类型注解</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getTotal</span>(<span class="params">firstNumber: <span class="built_in">number</span>, secondNumber: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> firstNumber + secondNumber;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> total2 = <span class="title function_">getTotal</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<h4 id="2-类型推断"><a href="#2-类型推断" class="headerlink" title="2).类型推断"></a>2).类型推断</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.type inference 类型推断,TS会自动的去尝试分析变量的类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> countInference = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果TS能够自动分析变量的类型，我们就什么也不需要做了</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> firstNumber = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> secondNumber = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> total = firstNumber + secondNumber;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;daykalif&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="6-函数相关类型"><a href="#6-函数相关类型" class="headerlink" title="6.函数相关类型"></a>6.函数相关类型</h3><h4 id="1-定义返回值"><a href="#1-定义返回值" class="headerlink" title="1).定义返回值"></a>1).定义返回值</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hello</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> hello1 = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">hello2</span> = (<span class="params"></span>) =&gt; &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">first: <span class="built_in">number</span>, second: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> first + second;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> total = <span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">minus</span>(<span class="params">first: <span class="built_in">number</span>, second: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> first + second + <span class="string">&quot;&quot;</span>; <span class="comment">//报错</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">result</span>: <span class="built_in">number</span> = <span class="title function_">minus</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<h4 id="2-函数返回值为空"><a href="#2-函数返回值为空" class="headerlink" title="2).函数返回值为空"></a>2).函数返回值为空</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数的返回值为空</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params"></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">  <span class="comment">// return &#x27;&#x27;;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-函数返回值为-never"><a href="#3-函数返回值为-never" class="headerlink" title="3).函数返回值为 never"></a>3).函数返回值为 never</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数不可能执行完，因此函数返回值为never</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">errorEvent</span>(<span class="params"></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>); <span class="comment">//代码不会执行</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doSomeThing</span>(<span class="params"></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-解构赋值的类型注解写法"><a href="#4-解构赋值的类型注解写法" class="headerlink" title="4).解构赋值的类型注解写法"></a>4).解构赋值的类型注解写法</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">adds</span>(<span class="params">&#123; first, second &#125;: &#123; first: <span class="built_in">number</span>; second: <span class="built_in">number</span> &#125;</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> first + second;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> totals = <span class="title function_">adds</span>(&#123; <span class="attr">first</span>: <span class="number">1</span>, <span class="attr">second</span>: <span class="number">2</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getNumber</span>(<span class="params">&#123; first &#125;: &#123; first: <span class="built_in">number</span> &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">getNumber</span>(&#123; <span class="attr">first</span>: <span class="number">1</span> &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="7-数组和元祖"><a href="#7-数组和元祖" class="headerlink" title="7.数组和元祖"></a>7.数组和元祖</h3><h4 id="1-数组-Array"><a href="#1-数组-Array" class="headerlink" title="1).数组 Array"></a>1).数组 Array</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">arr</span>: (<span class="built_in">number</span> | <span class="built_in">string</span>)[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="attr">stringArr</span>: <span class="built_in">string</span>[] = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="attr">undefinedArr</span>: <span class="literal">undefined</span>[] = [<span class="literal">undefined</span>]; <span class="comment">//数组里面的内容只能是undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">objectArr</span>: &#123; <span class="attr">name</span>: <span class="built_in">string</span>; <span class="attr">age</span>: <span class="built_in">number</span> &#125;[] = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;daykalif&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型别名</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">User</span> = &#123; <span class="attr">name</span>: <span class="built_in">string</span>; <span class="attr">age</span>: <span class="built_in">number</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">objectArr1</span>: <span class="title class_">User</span>[] = [&#123; <span class="attr">name</span>: <span class="string">&quot;daykalif&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;];</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">objectArr2</span>: <span class="title class_">Teacher</span>[] = [<span class="keyword">new</span> <span class="title class_">Teacher</span>(), &#123; <span class="attr">name</span>: <span class="string">&quot;daykalif&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;];</span><br></pre></td></tr></table></figure>

<h4 id="2-元祖-Tuple"><a href="#2-元祖-Tuple" class="headerlink" title="2).元祖 Tuple"></a>2).元祖 Tuple</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">teacherInfo</span>: [<span class="built_in">string</span>, <span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">&quot;daykalif&quot;</span>, <span class="string">&quot;male&quot;</span>, <span class="number">18</span>];</span><br><span class="line"><span class="comment">// 元祖的应用 -- 如：csv的数据结构格式</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">teacherList</span>: [<span class="built_in">string</span>, <span class="built_in">string</span>, <span class="built_in">number</span>][] = [</span><br><span class="line">  [<span class="string">&quot;dell&quot;</span>, <span class="string">&quot;male&quot;</span>, <span class="number">18</span>],</span><br><span class="line">  [<span class="string">&quot;sun&quot;</span>, <span class="string">&quot;female&quot;</span>, <span class="number">20</span>],</span><br><span class="line">  [<span class="string">&quot;jeny&quot;</span>, <span class="string">&quot;female&quot;</span>, <span class="number">28</span>],</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<h3 id="8-Interface-接口"><a href="#8-Interface-接口" class="headerlink" title="8.Interface 接口"></a>8.Interface 接口</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getPersonName</span> = (<span class="params">person: &#123; name: <span class="built_in">string</span> &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">setPersonName</span> = (<span class="params">person: &#123; name: <span class="built_in">string</span> &#125;, name: <span class="built_in">string</span></span>) =&gt; &#123;</span><br><span class="line">  person.<span class="property">name</span> = name;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>使用 interface：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// interface和type相类似，但并不完全一致</span></span><br><span class="line"><span class="comment">// interface只可以注解对象的数据格式</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getPersonName</span> = (<span class="params">person: Person</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">setPersonName</span> = (<span class="params">person: Person, name: <span class="built_in">string</span></span>) =&gt; &#123;</span><br><span class="line">  person.<span class="property">name</span> = name;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>使用类型别名：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 类型别名【不仅可以注解对象的数据格式，也可以注解本身】</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Person1</span> = &#123;</span><br><span class="line">  <span class="comment">//可以注解对象的数据格式</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Person2</span> = <span class="built_in">string</span>; <span class="comment">//可以注解本身</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getPersonName</span> = (<span class="params">person: Person1</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">setPersonName</span> = (<span class="params">person: Person1, name: <span class="built_in">string</span></span>) =&gt; &#123;</span><br><span class="line">  person.<span class="property">name</span> = name;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>interface 定义详解：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// interface只可以注解对象的数据格式</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="comment">//Person类型的数据，必须得有name属性，但是age属性可有可无</span></span><br><span class="line">  <span class="comment">// readonly name: string;   //只读</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>; <span class="comment">//可选属性</span></span><br><span class="line">  [<span class="attr">propName</span>: <span class="built_in">string</span>]: <span class="built_in">any</span>; <span class="comment">//额外的属性名为字符串类型，属性值为any都可以</span></span><br><span class="line">  <span class="title function_">say</span>(): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口继承</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">teacher</span>(): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getPersonName = (<span class="attr">person</span>: <span class="title class_">Person</span>): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> setPersonName = (<span class="attr">person</span>: <span class="title class_">Teacher</span>, <span class="attr">name</span>: <span class="built_in">string</span>): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">  person.<span class="property">name</span> = name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;daykalif&quot;</span>,</span><br><span class="line">  <span class="attr">sex</span>: <span class="string">&quot;male&quot;</span>,</span><br><span class="line">  <span class="title function_">say</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;say hello&quot;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">teacher</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;teach&quot;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">getPersonName</span>(person); <span class="comment">//传入包装过的对象可以有额外的属性</span></span><br><span class="line"><span class="title function_">setPersonName</span>(person, <span class="string">&quot;Wang&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字面量的形式直接传递一个对象给变量的时候，ts会对对象进行强校验【如果interface写了[propName: string]: any;就不会报错】</span></span><br><span class="line"><span class="title function_">getPersonName</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;daykalif&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">sex</span>: <span class="string">&quot;male&quot;</span>,</span><br><span class="line">  <span class="title function_">say</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;say hello&quot;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类应用接口，这个类必须拥有这个接口中的属性</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  name = <span class="string">&quot;daykalif&quot;</span>;</span><br><span class="line">  <span class="title function_">say</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>interface 定义函数：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义函数类型的接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">SayHi</span> &#123;</span><br><span class="line">  (<span class="title class_">Word</span>: <span class="built_in">string</span>): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">say</span>: <span class="title class_">SayHi</span> = <span class="function">(<span class="params">Word: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;word&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="9-类的定义与继承"><a href="#9-类的定义与继承" class="headerlink" title="9.类的定义与继承"></a>9.类的定义与继承</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&quot;daykalif&quot;</span>;</span><br><span class="line">  <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">getName</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类的继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">  <span class="title function_">getTeacherName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Teacher&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 重写方法</span></span><br><span class="line">  <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">getName</span>() + <span class="string">&quot;Wang&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> teacher = <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(teacher.<span class="title function_">getName</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(teacher.<span class="title function_">getTeacherName</span>());</span><br></pre></td></tr></table></figure>

<h3 id="10-类中的访问类型和构造器"><a href="#10-类中的访问类型和构造器" class="headerlink" title="10.类中的访问类型和构造器"></a>10.类中的访问类型和构造器</h3><h4 id="1-访问类型"><a href="#1-访问类型" class="headerlink" title="1).访问类型"></a>1).访问类型</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// private,protected,public 访问类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// public允许我在类的内外被调用</span></span><br><span class="line"><span class="comment">// private允许在类内被使用</span></span><br><span class="line"><span class="comment">// protected允许在类内及继承的子类中使用</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">protected</span> <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">sayABC</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">sayHi</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">sayAge</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>; <span class="comment">//报错</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span>; <span class="comment">//不报错</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">sayABC</span>(); <span class="comment">//报错</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">sayHi</span>(); <span class="comment">//不报错</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">person.<span class="property">name</span> = <span class="string">&quot;daykalif&quot;</span>; <span class="comment">//报错</span></span><br><span class="line">person.<span class="property">age</span> = <span class="number">18</span>; <span class="comment">//报错</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); <span class="comment">//报错</span></span><br><span class="line">person.<span class="title function_">sayHi</span>();</span><br></pre></td></tr></table></figure>

<h4 id="2-constructor-构造器"><a href="#2-constructor-构造器" class="headerlink" title="2).constructor 构造器"></a>2).constructor 构造器</h4><p>1.constructor 传统写法</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;daykalif&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>);</span><br></pre></td></tr></table></figure>

<p>2.constructor 简化的语法</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;daykalif&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>);</span><br></pre></td></tr></table></figure>

<p>3.子类继承父类时，如果子类和父类都拥有 constructor，子类需要调用 super</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(<span class="string">&quot;daykalif&quot;</span>); <span class="comment">//调用父类的构造函数</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> teacher = <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="number">28</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(teacher.<span class="property">name</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(teacher.<span class="property">age</span>);</span><br></pre></td></tr></table></figure>

<h3 id="11-静态属性，Setter-和-Getter"><a href="#11-静态属性，Setter-和-Getter" class="headerlink" title="11.静态属性，Setter 和 Getter"></a>11.静态属性，Setter 和 Getter</h3><h4 id="1-Getter-Setter"><a href="#1-Getter-Setter" class="headerlink" title="1).Getter &amp;&amp; Setter"></a>1).Getter &amp;&amp; Setter</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> _name: <span class="built_in">string</span></span>) &#123;&#125; <span class="comment">//私有属性一般在属性名前加_</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">name</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_name</span> + <span class="string">&quot; Wang&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> realName = name.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_name</span> = realName;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;daykalif&quot;</span>);</span><br><span class="line"><span class="comment">// person.name; //报错</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>);</span><br><span class="line">person.<span class="property">name</span> = <span class="string">&quot;daykalif Wang&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>);</span><br></pre></td></tr></table></figure>

<p>工厂模式：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 工厂模式</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="title function_">getInstance</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="comment">//static表示把这个方法挂在类上，而不是挂在实例上面</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Demo</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// demo1和demo2指向的是不同的实例</span></span><br><span class="line"><span class="keyword">const</span> demo1 = <span class="title class_">Demo</span>.<span class="title function_">getInstance</span>(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> demo2 = <span class="title class_">Demo</span>.<span class="title function_">getInstance</span>(<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(demo1.<span class="property">name</span>); <span class="comment">//zhangsan</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(demo2.<span class="property">name</span>); <span class="comment">//lisi</span></span><br></pre></td></tr></table></figure>

<p>单例模式：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单例模式</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="attr">instance</span>: <span class="title class_">Demo</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">getInstance</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//static表示把这个方法挂在类上，而不是挂在实例上面</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">instance</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">instance</span> = <span class="keyword">new</span> <span class="title class_">Demo</span>(<span class="string">&quot;daykalif&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">instance</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// demo1和demo2指向的是相同的实例</span></span><br><span class="line"><span class="keyword">const</span> demo1 = <span class="title class_">Demo</span>.<span class="title function_">getInstance</span>();</span><br><span class="line"><span class="keyword">const</span> demo2 = <span class="title class_">Demo</span>.<span class="title function_">getInstance</span>();</span><br><span class="line"><span class="comment">// Demo.instance;   //报错</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(demo1.<span class="property">name</span>); <span class="comment">//daykalif</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(demo2.<span class="property">name</span>); <span class="comment">//daykalif</span></span><br></pre></td></tr></table></figure>

<p>只读属性：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;daykalif&quot;</span>);</span><br><span class="line">person.<span class="property">name</span> = <span class="string">&quot;zhangsan&quot;</span>; <span class="comment">//无法分配到 &quot;name&quot; ，因为它是只读属性。ts(2540)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>);</span><br></pre></td></tr></table></figure>

<h3 id="12-抽象类"><a href="#12-抽象类" class="headerlink" title="12.抽象类"></a>12.抽象类</h3><p>抽象类</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Geom</span> &#123;</span><br><span class="line">  <span class="comment">//抽象类--抽象类只能被继承，不能被实例化</span></span><br><span class="line">  <span class="attr">width</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="title function_">getType</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Gemo&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">abstract</span> <span class="title function_">getArea</span>(): <span class="built_in">number</span>; <span class="comment">//方法的具体的实现也是抽象的</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Geom</span> &#123;</span><br><span class="line">  <span class="title function_">getArea</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Triangle</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>interface 抽离:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">teachingAge</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> teacher = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;daykalif&quot;</span>,</span><br><span class="line">  <span class="attr">teachingAge</span>: <span class="number">3</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> student = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getUserInfo</span> = (<span class="params">user: Person</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">getUserInfo</span>(teacher);</span><br><span class="line"><span class="title function_">getUserInfo</span>(student);</span><br></pre></td></tr></table></figure>

<h2 id="进阶语法"><a href="#进阶语法" class="headerlink" title="进阶语法"></a>进阶语法</h2><h3 id="13-tsconfig-配置文件"><a href="#13-tsconfig-配置文件" class="headerlink" title="13.tsconfig 配置文件"></a>13.tsconfig 配置文件</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;include&quot;</span>: [<span class="string">&quot;./src/demo.ts&quot;</span>],</span><br><span class="line">  <span class="string">&quot;exclude&quot;</span>: [<span class="string">&quot;./src/demo1.ts&quot;</span>],</span><br><span class="line">  <span class="string">&quot;files&quot;</span>: [<span class="string">&quot;./src/demo.ts&quot;</span>],<span class="comment">/*和include相似*/</span></span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="comment">/* Visit https://aka.ms/tsconfig.json to read more about this file */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Basic Options */</span></span><br><span class="line">    <span class="string">&quot;incremental&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">/* 【增量编译：只编译变化内容的文件，已经编译过的内容就不编译了】Enable incremental compilation */</span></span><br><span class="line">    <span class="string">&quot;target&quot;</span>: <span class="string">&quot;es5&quot;</span>,</span><br><span class="line">    <span class="comment">/* Specify ECMAScript target version: &#x27;ES3&#x27; (default), &#x27;ES5&#x27;, &#x27;ES2015&#x27;, &#x27;ES2016&#x27;, &#x27;ES2017&#x27;, &#x27;ES2018&#x27;, &#x27;ES2019&#x27;, &#x27;ES2020&#x27;, or &#x27;ESNEXT&#x27;. */</span></span><br><span class="line">    <span class="string">&quot;module&quot;</span>: <span class="string">&quot;amd&quot;</span>,</span><br><span class="line">    <span class="comment">/* Specify module code generation: &#x27;none&#x27;, &#x27;commonjs&#x27;, &#x27;amd&#x27;, &#x27;system&#x27;, &#x27;umd&#x27;, &#x27;es2015&#x27;, &#x27;es2020&#x27;, or &#x27;ESNext&#x27;. */</span></span><br><span class="line">    <span class="comment">// &quot;lib&quot;: [],                                   /* Specify library files to be included in the compilation. */</span></span><br><span class="line">    <span class="string">&quot;allowJs&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">/* 【允许编译js文件】Allow javascript files to be compiled. */</span></span><br><span class="line">    <span class="string">&quot;checkJs&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">/* 【对js语法进行检测】Report errors in .js files. */</span></span><br><span class="line">    <span class="comment">// &quot;jsx&quot;: &quot;preserve&quot;,                           /* Specify JSX code generation: &#x27;preserve&#x27;, &#x27;react-native&#x27;, &#x27;react&#x27;, &#x27;react-jsx&#x27; or &#x27;react-jsxdev&#x27;. */</span></span><br><span class="line">    <span class="comment">// &quot;declaration&quot;: true,                         /* Generates corresponding &#x27;.d.ts&#x27; file. */</span></span><br><span class="line">    <span class="comment">// &quot;declarationMap&quot;: true,                      /* Generates a sourcemap for each corresponding &#x27;.d.ts&#x27; file. */</span></span><br><span class="line">    <span class="string">&quot;sourceMap&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">/* 【打包过程中，生成sourceMap文件】Generates corresponding &#x27;.map&#x27; file. */</span></span><br><span class="line">    <span class="string">&quot;outFile&quot;</span>: <span class="string">&quot;./dist/page.js&quot;</span>,                             <span class="comment">/* 【对输出文件统一打包成一个文件，并且要配合&quot;module&quot;:&quot;amd&quot;】Concatenate and emit output to single file. */</span></span><br><span class="line">    <span class="string">&quot;outDir&quot;</span>: <span class="string">&quot;./build&quot;</span>,</span><br><span class="line">    <span class="comment">/* 【指定输出文件的地址】Redirect output structure to the directory. */</span></span><br><span class="line">    <span class="string">&quot;rootDir&quot;</span>: <span class="string">&quot;./src&quot;</span>,</span><br><span class="line">    <span class="comment">/* 【指定输入的文件地址】Specify the root directory of input files. Use to control the output directory structure with --outDir. */</span></span><br><span class="line">    <span class="comment">// &quot;composite&quot;: true,                           /* Enable project compilation */</span></span><br><span class="line">    <span class="comment">// &quot;tsBuildInfoFile&quot;: &quot;./&quot;,                     /* Specify file to store incremental compilation information */</span></span><br><span class="line">    <span class="string">&quot;removeComments&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">/* 【设为true：去除掉ts文件中的注释】Do not emit comments to output. */</span></span><br><span class="line">    <span class="comment">// &quot;noEmit&quot;: true,                              /* Do not emit outputs. */</span></span><br><span class="line">    <span class="comment">// &quot;importHelpers&quot;: true,                       /* Import emit helpers from &#x27;tslib&#x27;. */</span></span><br><span class="line">    <span class="comment">// &quot;downlevelIteration&quot;: true,                  /* Provide full support for iterables in &#x27;for-of&#x27;, spread, and destructuring when targeting &#x27;ES5&#x27; or &#x27;ES3&#x27;. */</span></span><br><span class="line">    <span class="comment">// &quot;isolatedModules&quot;: true,                     /* Transpile each file as a separate module (similar to &#x27;ts.transpileModule&#x27;). */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Strict Type-Checking Options */</span></span><br><span class="line">    <span class="string">&quot;strict&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">/* Enable all strict type-checking options. */</span></span><br><span class="line">    <span class="string">&quot;noImplicitAny&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">/* 【必须对any增加类型说明】Raise error on expressions and declarations with an implied &#x27;any&#x27; type. */</span></span><br><span class="line">    <span class="comment">// 【不能把null赋值给其他基础类型】&quot;strictNullChecks&quot;: true,                    /* Enable strict null checks. */</span></span><br><span class="line">    <span class="comment">// &quot;strictFunctionTypes&quot;: true,                 /* Enable strict checking of function types. */</span></span><br><span class="line">    <span class="comment">// &quot;strictBindCallApply&quot;: true,                 /* Enable strict &#x27;bind&#x27;, &#x27;call&#x27;, and &#x27;apply&#x27; methods on functions. */</span></span><br><span class="line">    <span class="comment">// &quot;strictPropertyInitialization&quot;: true,        /* Enable strict checking of property initialization in classes. */</span></span><br><span class="line">    <span class="comment">// &quot;noImplicitThis&quot;: true,                      /* Raise error on &#x27;this&#x27; expressions with an implied &#x27;any&#x27; type. */</span></span><br><span class="line">    <span class="comment">// &quot;alwaysStrict&quot;: true,                        /* Parse in strict mode and emit &quot;use strict&quot; for each source file. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Additional Checks */</span></span><br><span class="line">    <span class="string">&quot;noUnusedLocals&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">/* 【检测没有被使用的局部变量】Report errors on unused locals. */</span></span><br><span class="line">    <span class="string">&quot;noUnusedParameters&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">/* 【针对函数的未被使用的参数】Report errors on unused parameters. */</span></span><br><span class="line">    <span class="comment">// &quot;noImplicitReturns&quot;: true,                   /* Report error when not all code paths in function return a value. */</span></span><br><span class="line">    <span class="comment">// &quot;noFallthroughCasesInSwitch&quot;: true,          /* Report errors for fallthrough cases in switch statement. */</span></span><br><span class="line">    <span class="comment">// &quot;noUncheckedIndexedAccess&quot;: true,            /* Include &#x27;undefined&#x27; in index signature results */</span></span><br><span class="line">    <span class="comment">// &quot;noPropertyAccessFromIndexSignature&quot;: true,  /* Require undeclared properties from index signatures to use element accesses. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Module Resolution Options */</span></span><br><span class="line">    <span class="comment">// &quot;moduleResolution&quot;: &quot;node&quot;,                  /* Specify module resolution strategy: &#x27;node&#x27; (Node.js) or &#x27;classic&#x27; (TypeScript pre-1.6). */</span></span><br><span class="line">    <span class="comment">// &quot;baseUrl&quot;: &quot;./&quot;,                             /* Base directory to resolve non-absolute module names. */</span></span><br><span class="line">    <span class="comment">// &quot;paths&quot;: &#123;&#125;,                                 /* A series of entries which re-map imports to lookup locations relative to the &#x27;baseUrl&#x27;. */</span></span><br><span class="line">    <span class="comment">// &quot;rootDirs&quot;: [],                              /* List of root folders whose combined content represents the structure of the project at runtime. */</span></span><br><span class="line">    <span class="comment">// &quot;typeRoots&quot;: [],                             /* List of folders to include type definitions from. */</span></span><br><span class="line">    <span class="comment">// &quot;types&quot;: [],                                 /* Type declaration files to be included in compilation. */</span></span><br><span class="line">    <span class="comment">// &quot;allowSyntheticDefaultImports&quot;: true,        /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */</span></span><br><span class="line">    <span class="string">&quot;esModuleInterop&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">/* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies &#x27;allowSyntheticDefaultImports&#x27;. */</span></span><br><span class="line">    <span class="comment">// &quot;preserveSymlinks&quot;: true,                    /* Do not resolve the real path of symlinks. */</span></span><br><span class="line">    <span class="comment">// &quot;allowUmdGlobalAccess&quot;: true,                /* Allow accessing UMD globals from modules. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Source Map Options */</span></span><br><span class="line">    <span class="comment">// &quot;sourceRoot&quot;: &quot;&quot;,                            /* Specify the location where debugger should locate TypeScript files instead of source locations. */</span></span><br><span class="line">    <span class="comment">// &quot;mapRoot&quot;: &quot;&quot;,                               /* Specify the location where debugger should locate map files instead of generated locations. */</span></span><br><span class="line">    <span class="comment">// &quot;inlineSourceMap&quot;: true,                     /* Emit a single file with source maps instead of having a separate file. */</span></span><br><span class="line">    <span class="comment">// &quot;inlineSources&quot;: true,                       /* Emit the source alongside the sourcemaps within a single file; requires &#x27;--inlineSourceMap&#x27; or &#x27;--sourceMap&#x27; to be set. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Experimental Options */</span></span><br><span class="line">    <span class="comment">// &quot;experimentalDecorators&quot;: true,              /* Enables experimental support for ES7 decorators. */</span></span><br><span class="line">    <span class="comment">// &quot;emitDecoratorMetadata&quot;: true,               /* Enables experimental support for emitting type metadata for decorators. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Advanced Options */</span></span><br><span class="line">    <span class="string">&quot;skipLibCheck&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">/* Skip type checking of declaration files. */</span></span><br><span class="line">    <span class="string">&quot;forceConsistentCasingInFileNames&quot;</span>: <span class="literal">true</span> <span class="comment">/* Disallow inconsistently-cased references to the same file. */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="14-联合类型和类型保护"><a href="#14-联合类型和类型保护" class="headerlink" title="14.联合类型和类型保护"></a>14.联合类型和类型保护</h3><p>联合声明类型 &amp;&amp; 1.通过类型断言的方式 进行 类型保护 &amp;&amp; 2.通过 in 语法 进行 类型保护</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Bird</span> &#123;</span><br><span class="line">  <span class="attr">fly</span>: <span class="built_in">boolean</span>;</span><br><span class="line">  <span class="attr">sing</span>: <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">  <span class="attr">fly</span>: <span class="built_in">boolean</span>;</span><br><span class="line">  <span class="attr">bark</span>: <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">trainAnimal</span>(<span class="params">animal: Bird | Dog</span>) &#123;</span><br><span class="line">  <span class="comment">//联合声明类型</span></span><br><span class="line">  <span class="comment">// 1.通过类型断言的方式 进行 类型保护</span></span><br><span class="line">  <span class="keyword">if</span> (animal.<span class="property">fly</span>) &#123;</span><br><span class="line">    (animal <span class="keyword">as</span> <span class="title class_">Bird</span>).<span class="title function_">sing</span>(); <span class="comment">//断言的方式，告诉ts  animal就是Bird</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    (animal <span class="keyword">as</span> <span class="title class_">Dog</span>).<span class="title function_">bark</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.通过 in 语法 进行 类型保护</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="string">&quot;sing&quot;</span> <span class="keyword">in</span> animal) &#123;</span><br><span class="line">    animal.<span class="title function_">sing</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    animal.<span class="title function_">bark</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.typeof 语法来做类型保护:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">first: <span class="built_in">string</span> | <span class="built_in">number</span>, second: <span class="built_in">string</span> | <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="comment">// 3.typeof语法来做类型保护</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> first === <span class="string">&quot;string&quot;</span> || <span class="keyword">typeof</span> second === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;first&#125;</span><span class="subst">$&#123;second&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> first + second;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4.使用 instanceof 语法来做类型保护:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NumberObj</span> &#123;</span><br><span class="line">  <span class="comment">//【只有class才能被instanceof调用的默认行为，不能使用interface】</span></span><br><span class="line">  <span class="attr">count</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addSecond</span>(<span class="params">first: <span class="built_in">object</span> | NumberObj, second: <span class="built_in">object</span> | NumberObj</span>) &#123;</span><br><span class="line">  <span class="comment">// 4.使用 instanceof 语法来做类型保护</span></span><br><span class="line">  <span class="keyword">if</span> (first <span class="keyword">instanceof</span> <span class="title class_">NumberObj</span> &amp;&amp; second <span class="keyword">instanceof</span> <span class="title class_">NumberObj</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> first.<span class="property">count</span> + second.<span class="property">count</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="15-Enum-枚举类型"><a href="#15-Enum-枚举类型" class="headerlink" title="15.Enum 枚举类型"></a>15.Enum 枚举类型</h3><p>安装依赖：</p>
<blockquote>
<p>npm init -y<br>npm install ts-node -D<br>npm install typescript -S</p>
</blockquote>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// const Status = &#123;</span></span><br><span class="line"><span class="comment">//   OFFLINE: 0,</span></span><br><span class="line"><span class="comment">//   ONLINE: 1,</span></span><br><span class="line"><span class="comment">//   DELETE: 2</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Status</span> &#123;</span><br><span class="line">  <span class="variable constant_">OFFLINE</span>,</span><br><span class="line">  <span class="variable constant_">ONLINE</span> = <span class="number">4</span>, <span class="comment">//设初始值</span></span><br><span class="line">  <span class="variable constant_">DELETE</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不写 = 4的话，默认0，1，2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Status</span>.<span class="property">OFFLINE</span>); <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Status</span>[<span class="number">4</span>]); <span class="comment">//ONLINE</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Status</span>.<span class="property">ONLINE</span>); <span class="comment">//4</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Status</span>.<span class="property">DELETE</span>); <span class="comment">//5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getResult</span>(<span class="params">status</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (status === <span class="title class_">Status</span>.<span class="property">OFFLINE</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;offline&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status === <span class="title class_">Status</span>.<span class="property">ONLINE</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;online&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status === <span class="title class_">Status</span>.<span class="property">DELETE</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;delete&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">getResult</span>(<span class="title class_">Status</span>.<span class="property">OFFLINE</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure>

<h3 id="16-函数泛型"><a href="#16-函数泛型" class="headerlink" title="16.函数泛型"></a>16.函数泛型</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 泛型 generic 泛指的类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> join&lt;T&gt;(<span class="attr">first</span>: T, <span class="attr">second</span>: T) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;first&#125;</span><span class="subst">$&#123;second&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line">join&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">join&lt;<span class="built_in">number</span>&gt;(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// join&lt;string&gt;(1, 1); //报错</span></span><br></pre></td></tr></table></figure>

<p>函数数组：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.T[]</span></span><br><span class="line"><span class="keyword">function</span> map&lt;T&gt;(<span class="attr">params</span>: T[]) &#123;</span><br><span class="line">  <span class="keyword">return</span> params;</span><br><span class="line">&#125;</span><br><span class="line">map&lt;<span class="built_in">string</span>&gt;([<span class="string">&quot;123&quot;</span>, <span class="string">&quot;456&quot;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 等价于：*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.Array&lt;T&gt;</span></span><br><span class="line"><span class="keyword">function</span> mapCopy&lt;T&gt;(<span class="attr">params</span>: <span class="title class_">Array</span>&lt;T&gt;) &#123;</span><br><span class="line">  <span class="keyword">return</span> params;</span><br><span class="line">&#125;</span><br><span class="line">mapCopy&lt;<span class="built_in">string</span>&gt;([<span class="string">&quot;123&quot;</span>, <span class="string">&quot;456&quot;</span>]);</span><br></pre></td></tr></table></figure>

<p>传多个参数:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> join2&lt;T, P&gt;(<span class="attr">first</span>: T, <span class="attr">second</span>: P) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;first&#125;</span><span class="subst">$&#123;second&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line">join2&lt;<span class="built_in">number</span>, <span class="built_in">number</span>&gt;(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">join2&lt;<span class="built_in">number</span>, <span class="built_in">string</span>&gt;(<span class="number">1</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line"><span class="comment">// 类型推断</span></span><br><span class="line"><span class="title function_">join2</span>(<span class="number">1</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line"><span class="title function_">join2</span>(<span class="string">&quot;1&quot;</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<p>函数返回类型也为 T:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> anotherJoin&lt;T&gt;(<span class="attr">first</span>: T, <span class="attr">second</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">return</span> first;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="17-类中的泛型以及泛型类型"><a href="#17-类中的泛型以及泛型类型" class="headerlink" title="17.类中的泛型以及泛型类型"></a>17.类中的泛型以及泛型类型</h3><p>示例 1:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DataManager</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> data: T[]</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getItem</span>(<span class="attr">index</span>: <span class="built_in">number</span>): T &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">data</span>[index];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = <span class="keyword">new</span> <span class="title class_">DataManager</span>&lt;<span class="built_in">string</span>&gt;([<span class="string">&quot;1&quot;</span>]);</span><br><span class="line">data.<span class="title function_">getItem</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p>示例 2:<br>extends:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Item</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DataManager</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Item</span>&gt; &#123;</span><br><span class="line">  <span class="comment">//T必须拥有Item中所有的东西</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> data: T[]</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getItem</span>(<span class="attr">index</span>: <span class="built_in">number</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">data</span>[index].<span class="property">name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = <span class="keyword">new</span> <span class="title class_">DataManager</span>([</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;dell&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">]);</span><br><span class="line">data.<span class="title function_">getItem</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p>示例 3:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DataManager</span>&lt;T <span class="keyword">extends</span> <span class="built_in">number</span> | <span class="built_in">string</span>&gt; &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> data: T[]</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getItem</span>(<span class="attr">index</span>: <span class="built_in">number</span>): T &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">data</span>[index];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = <span class="keyword">new</span> <span class="title class_">DataManager</span>&lt;<span class="title class_">Test</span>&gt;([]); <span class="comment">//报错</span></span><br><span class="line"><span class="keyword">const</span> data1 = <span class="keyword">new</span> <span class="title class_">DataManager</span>&lt;<span class="built_in">number</span>&gt;([]);</span><br></pre></td></tr></table></figure>

<p>示例 4:如何使用泛型作为一个具体类型的注解:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">func</span>: &lt;T&gt;<span class="function">() =&gt;</span> <span class="built_in">string</span> = &lt;T&gt;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//---------------------------------------------</span></span><br><span class="line"><span class="keyword">function</span> hello&lt;T&gt;(<span class="attr">params</span>: T) &#123;</span><br><span class="line">  <span class="keyword">return</span> params;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">funct</span>: &lt;T&gt;<span class="function">(<span class="params">params: T</span>) =&gt;</span> T = hello;</span><br></pre></td></tr></table></figure>

<h3 id="18-命名空间-namespace"><a href="#18-命名空间-namespace" class="headerlink" title="18.命名空间-namespace"></a>18.命名空间-namespace</h3><p>示例 1:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">Home</span> &#123;</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Header</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> elem = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">      elem.<span class="property">innerText</span> = <span class="string">&quot;This is Header&quot;</span>;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(elem);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Content</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> elem = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">      elem.<span class="property">innerText</span> = <span class="string">&quot;This is Content&quot;</span>;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(elem);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Footer</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> elem = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">      elem.<span class="property">innerText</span> = <span class="string">&quot;This is Footer&quot;</span>;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(elem);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Page</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Header</span>();</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Content</span>();</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Footer</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;<span class="keyword">new</span> <span class="title class_">Home</span>.<span class="title class_">Page</span>();&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>监控并编译 ts： tsc -w</p>
</blockquote>
<p>示例 2:</p>
<p>components.ts:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">Components</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">namespace</span> <span class="title class_">SubComponents</span> &#123;</span><br><span class="line">    <span class="comment">//控制台可调用Components.SubComponents.Test，输出f Test()&#123;&#125;</span></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Header</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> elem = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">      elem.<span class="property">innerText</span> = <span class="string">&quot;This is Header&quot;</span>;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(elem);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Content</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> elem = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">      elem.<span class="property">innerText</span> = <span class="string">&quot;This is Content&quot;</span>;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(elem);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Footer</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> elem = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">      elem.<span class="property">innerText</span> = <span class="string">&quot;This is Footer&quot;</span>;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(elem);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>page.ts</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">///&lt;reference path=&#x27;./components.ts&#x27; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Home</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Page</span> &#123;</span><br><span class="line">    <span class="attr">user</span>: <span class="title class_">Components</span>.<span class="property">User</span> = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;dell&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Components</span>.<span class="title class_">Header</span>();</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Components</span>.<span class="title class_">Content</span>();</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Components</span>.<span class="title class_">Footer</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>index.html:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">  &lt;script src=&#x27;./dist/page.js&#x27;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    new Home.Page();</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Typescript使用</title>
    <url>/2022/01/24/%20Typescript/%E3%80%90%E6%90%AC%E3%80%91Typescript%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="Typescript-使用"><a href="#Typescript-使用" class="headerlink" title="Typescript 使用"></a>Typescript 使用</h2><h3 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h3><p><a href="https://www.typescriptlang.org/">Typescript</a> 是一种由微软开发的自由和开源的编程语言。它是 JavaScript 的一个超集，而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。</p>
<h3 id="code-过程"><a href="#code-过程" class="headerlink" title="code 过程"></a>code 过程</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>桌面新建空文件夹</span><br><span class="line"><span class="number">2.</span>将文件夹拖入 vscode</span><br><span class="line"><span class="number">3.</span>终端运行 tsc --init，此时会自动生成一个 tsconfig.<span class="property">json</span> 文件；【也就是安装了 ts 的运行环境】</span><br><span class="line"><span class="number">4.</span>新建 ts 文件，如 index.<span class="property">ts</span></span><br><span class="line"><span class="number">5.</span>编写 ts 文件内容</span><br><span class="line"><span class="number">6.</span>点击 vscode 最上层操作栏：终端&gt;运行任务&gt;显示所有任务&gt;tsc 监视 xxxx/tsconfig.<span class="property">json</span>；【开启 ts 监听，会自动生成编译后的 js 文件】</span><br><span class="line"><span class="number">7.</span>终端运行 node ./index.<span class="property">js</span> 文件；【运行 ts 编译过后的文件，即可看到 ts 输出】</span><br></pre></td></tr></table></figure>

<h3 id="一、类型"><a href="#一、类型" class="headerlink" title="一、类型"></a>一、类型</h3><h4 id="1-原始数据类型"><a href="#1-原始数据类型" class="headerlink" title="1.原始数据类型"></a>1.原始数据类型</h4><ul>
<li>1).布尔值</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">isDone</span>: boolean = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>2).数值</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 十进制</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">decimal</span>: number = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二进制</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">binaryDecimal</span>: number = <span class="number">0b1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 八进制</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">octalDecimal</span>: number = <span class="number">0o744</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>3).字符串</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">text</span>: string = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模板字符串</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">sentence</span>: string = <span class="string">`Hello, my name is <span class="subst">$&#123;name&#125;</span>.`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解析后</span></span><br><span class="line"><span class="keyword">var</span> sentence = <span class="string">&quot;Hello, my name is &quot;</span> + name + <span class="string">&quot;.&quot;</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>4).空值</li>
</ul>
<blockquote>
<p>只能赋值为 undefined 和 null</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">unusable</span>: <span class="keyword">void</span> = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>): <span class="keyword">void</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>5).Null 和 Undefined</li>
</ul>
<blockquote>
<p>undefined 和 null 是所有类型的子类型, 可以赋值给其他类型的变量：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">u</span>: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">n</span>: <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这样不会报错</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">num</span>: number = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// void 类型不可赋值给其他类型, 会报错</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">u</span>: <span class="keyword">void</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">num</span>: number = u;</span><br></pre></td></tr></table></figure>

<h4 id="2-枚举"><a href="#2-枚举" class="headerlink" title="2.枚举"></a>2.枚举</h4><ul>
<li>1).数字</li>
</ul>
<blockquote>
<p>默认从 0 开始为元素编号, 可以手动指定成员的数值</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">enum <span class="title class_">Enum</span> &#123;</span><br><span class="line">  A,</span><br><span class="line">  B = <span class="number">2</span>,</span><br><span class="line">  C,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// A = 0, B = 2, C = 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Enum</span>); <span class="comment">// &#123; &#x27;0&#x27;: &#x27;A&#x27;, &#x27;2&#x27;: &#x27;B&#x27;, &#x27;3&#x27;: &#x27;C&#x27;, A: 0, B: 2, C: 3 &#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>2).字符串</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">enum <span class="title class_">Enum</span> &#123;</span><br><span class="line">  A = <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">  B = <span class="string">&#x27;B&#x27;</span>,</span><br><span class="line">  C = <span class="string">&#x27;C&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Enum</span>); <span class="comment">// &#123; A: &#x27;A&#x27;, B: &#x27;B&#x27;, C: &#x27;C&#x27; &#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>3).常量</li>
</ul>
<blockquote>
<p>不会为 ts 编译生成任何 js</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> enum <span class="title class_">Enum</span> &#123;</span><br><span class="line">  A = <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">  B = <span class="string">&#x27;B&#x27;</span>,</span><br><span class="line">  C = <span class="string">&#x27;C&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="title class_">Enum</span> = <span class="title class_">Enum</span>.<span class="property">B</span>;</span><br><span class="line"><span class="comment">// console.log(Enum); // 报错：&quot;const&quot; 枚举仅可在属性、索引访问表达式、导入声明的右侧、导出分配或类型查询中使用。ts(2475)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// B</span></span><br></pre></td></tr></table></figure>

<ul>
<li>4).异构</li>
</ul>
<blockquote>
<p>数字和字符串的混合</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 成功</span></span><br><span class="line">enum <span class="title class_">Enum</span> &#123;</span><br><span class="line">  A,</span><br><span class="line">  B = <span class="string">&#x27;B&#x27;</span>,</span><br><span class="line">  C = <span class="number">8</span>,</span><br><span class="line">  D</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Enum</span>); <span class="comment">// &#123; &#x27;0&#x27;: &#x27;A&#x27;, &#x27;8&#x27;: &#x27;C&#x27;, &#x27;9&#x27;: &#x27;D&#x27;, A: 0, B: &#x27;B&#x27;, C: 8, D: 9 &#125;</span></span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line">enum <span class="title class_">Enum</span> &#123;</span><br><span class="line">  A,</span><br><span class="line">  B = <span class="number">8</span>,</span><br><span class="line">  C = <span class="string">&#x27;B&#x27;</span>,</span><br><span class="line">  D <span class="comment">// 报错：枚举成员必须具有初始化表达式。ts(1061)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Enum</span>);</span><br></pre></td></tr></table></figure>

<h4 id="3-数组"><a href="#3-数组" class="headerlink" title="3.数组"></a>3.数组</h4><ul>
<li>1).类型 + 方括号</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">fibonacci</span>: number[] = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">fibonacci1</span>: number[] = [<span class="number">1</span>, <span class="string">&quot;2&quot;</span>];</span><br></pre></td></tr></table></figure>

<ul>
<li>2).泛型</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Array&lt;elemType&gt;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">fibonacci</span>: <span class="title class_">Array</span>&lt;number&gt; = [<span class="number">1</span>, <span class="number">2</span>];</span><br></pre></td></tr></table></figure>

<ul>
<li>3).接口</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface <span class="title class_">NumberArray</span> &#123;</span><br><span class="line">  [<span class="attr">index</span>: number]: number; <span class="comment">// 索引的类型是数字，值类型是数字</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">fibonacci</span>: <span class="title class_">NumberArray</span> = [<span class="number">1</span>, <span class="number">2</span>];</span><br></pre></td></tr></table></figure>

<h4 id="4-类数组"><a href="#4-类数组" class="headerlink" title="4.类数组"></a>4.类数组</h4><blockquote>
<p>非数组类型</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 报错：类型“IArguments”缺少类型“number[]”的以下属性: pop, push, concat, join 及其他 24 项。ts(2740)</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">args</span>: number[] = <span class="variable language_">arguments</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可用接口方式或内置对象 IArguments</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">args</span>: &#123;</span><br><span class="line">    [<span class="attr">index</span>: number]: number;</span><br><span class="line">    <span class="attr">length</span>: number;</span><br><span class="line">    <span class="attr">callee</span>: <span class="title class_">Function</span>;</span><br><span class="line">  &#125; = <span class="variable language_">arguments</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-对象"><a href="#5-对象" class="headerlink" title="5.对象"></a>5.对象</h4><ul>
<li>1).Object</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  ○ 所有 Object 类的实例的类型, 由两个接口定义: </span></span><br><span class="line"><span class="comment">    ■ Object 接口定义了 Object.prototype 原型对象上的属性</span></span><br><span class="line"><span class="comment">    ■ ObjectConstructor 接口定义了 Object 类的属性</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>: <span class="title class_">Object</span>; <span class="comment">// 或者 let obj = new Object();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  ○ 注意： </span></span><br><span class="line"><span class="comment">    ■ Object 类型包含了所有的原始/基础类型，所以可以给 Object 类型赋值为基础类型</span></span><br><span class="line"><span class="comment">    ■ 如果值对象属性名与 Object 接口中的属性冲突，则 ts 编译器会提示相应的错误</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">obj = <span class="string">&quot;hell oworld&quot;</span>;</span><br><span class="line">obj = <span class="number">1</span>;</span><br><span class="line">obj = <span class="literal">true</span>;</span><br><span class="line">obj = <span class="literal">undefined</span>; <span class="comment">// Error:Type &#x27;undefined&#x27; is not assignable to type &#x27;Object&#x27;.</span></span><br><span class="line">obj = &#123;</span><br><span class="line">  <span class="comment">// Type &#x27;number&#x27; is not assignable to type &#x27;string&#x27;</span></span><br><span class="line">  <span class="comment">// (对象中重写了toString方法，但是返回类型和Object中返回类型string冲突，所以报错；)</span></span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>2).object</li>
</ul>
<blockquote>
<p>表示非原始类型, 是键值对集合, 值也必须是 object</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>: object;</span><br><span class="line">obj = <span class="number">1</span>; <span class="comment">// Error:Type &#x27;number&#x27; is not assignable to type &#x27;object&#x27;.</span></span><br><span class="line">obj = <span class="literal">true</span>; <span class="comment">// Error: Type &#x27;boolean&#x27; is not assignable to type &#x27;object&#x27;.</span></span><br><span class="line">obj = <span class="string">&quot;a&quot;</span>; <span class="comment">// Error: Type &#x27;string&#x27; is not assignable to type &#x27;object&#x27;.</span></span><br><span class="line">obj = <span class="literal">undefined</span>; <span class="comment">//Error:Type &#x27;undefined&#x27; is not assignable to type &#x27;object&#x27;.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*注意: </span></span><br><span class="line"><span class="comment">  object 类型默认可以使用在 Object 类型上定义的所有属性和方法，</span></span><br><span class="line"><span class="comment">  这些属性和方法可通过 js 的原型链隐式地使用，</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="string">&quot;hell oworld&quot;</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  但是如果在 object 中重写了原型链中的属性或者方法，</span></span><br><span class="line"><span class="comment">   那么会直接覆盖，不受原型链上的影响</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">obj = &#123;</span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">toString</span>()); <span class="comment">// 123</span></span><br></pre></td></tr></table></figure>

<ul>
<li>3).{}</li>
</ul>
<blockquote>
<p>空对象类型，生成方式有两种：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// a).没有声明变量类型，初始值为 &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// b).直接声明变量类型为 &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>: &#123;&#125;;</span><br></pre></td></tr></table></figure>

<p>注意：当访问这个对象的任意属性时，ts 会产生一个编译时错误；但是可以使⽤在 Object 类型上定义的所有属性和⽅法，这些属性和⽅法可通过 js 的原型链隐式地使⽤：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>: &#123;&#125;;</span><br><span class="line">obj = <span class="literal">undefined</span>; <span class="comment">//Error:Type &#x27;undefined&#x27; is not assignable to type &#x27;&#123;&#125;&#x27;.</span></span><br><span class="line">obj = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="string">&quot;hello world&quot;</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">// &#123; a: &#x27;hello world&#x27;, b: 1, c: true, toString: [Function: toString] &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当访问这个对象的任意属性时，ts 会产生一个编译时错误；</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">a</span>); <span class="comment">// 可以正常打印&quot;hello world&quot;；报一个编译错误： Property &#x27;a&#x27; does not exist on type &#x27;&#123;&#125;&#x27;</span></span><br><span class="line"><span class="comment">// 但是可以使⽤在 Object 类型上定义的所有属性和⽅法，这些属性和⽅法可通过 js 的原型链隐式地使⽤：</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">toString</span>()); <span class="comment">// 123;</span></span><br></pre></td></tr></table></figure>

<h4 id="6-any"><a href="#6-any" class="headerlink" title="6.any"></a>6.any</h4><blockquote>
<p>任意类型, 也称为顶级类型, 一般用于不希望类型检查对值在编译阶段进行检查的时候</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">notSure</span>: any; <span class="comment">// 可以为任意类型</span></span><br></pre></td></tr></table></figure>

<h4 id="7-unknown"><a href="#7-unknown" class="headerlink" title="7.unknown"></a>7.unknown</h4><blockquote>
<p>所有类型都可赋值給 unknown, 除 any 外的另一种顶级类型, 但是 unknown 类型只能赋值給 unknown 和 any, 如果不缩小类型，就无法对 unknown 类型执行任何操作, 所以比 any 更安全, 用 any 前先用 unknown</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">uncertain</span>: unknown = <span class="string">&#x27;Hello&#x27;</span>!;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">notSure</span>: any = uncertain;</span><br></pre></td></tr></table></figure>

<h3 id="二、函数"><a href="#二、函数" class="headerlink" title="二、函数"></a>二、函数</h3><blockquote>
<p>包括匿名函数和非匿名函数</p>
</blockquote>
<h4 id="1-定义类型"><a href="#1-定义类型" class="headerlink" title="1.定义类型"></a>1.定义类型</h4><blockquote>
<p>给每个参数加类型, 再为函数返回值加类型</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x: number, y: number</span>): number &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-参数"><a href="#2-参数" class="headerlink" title="2.参数"></a>2.参数</h4><blockquote>
<p>包括可选参数和必须参数, 可选参数必须跟在必须参数后面</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x: number, y = <span class="number">2</span>, z?: number</span>): number &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y + z || <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>剩余参数: 当想同时操作多个参数, 但是并不知道有多少个的时候可以用 arguments, 也可以收集到一个变量里</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">buildName</span>(<span class="params">firstName: string, ...restOfName: string[]</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> firstName + <span class="string">&quot; &quot;</span> + restOfName.<span class="title function_">join</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> employeeName = <span class="title function_">buildName</span>(<span class="string">&quot;Joseph&quot;</span>, <span class="string">&quot;Samuel&quot;</span>, <span class="string">&quot;Lucas&quot;</span>, <span class="string">&quot;MacKinzie&quot;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="3-函数重载"><a href="#3-函数重载" class="headerlink" title="3.函数重载"></a>3.函数重载</h4><blockquote>
<p>1).函数重载或方法重载是使用相同名称和不同参数数量或类型创建多个方法的一种能力<br>2).重载顺序: 查找重载列表从前到后, 如果匹配的话就使用这个, 所以在定义重载的时候，一定要把最精确的定义放在最前面</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a: number, b: number</span>): number;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a: string, b: string</span>): string;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a: string, b: number</span>): string;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a: number, b: string</span>): string;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>)); <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="string">&#x27;1&#x27;</span>,<span class="number">2</span>)); <span class="comment">// &#x27;12&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="三、接口"><a href="#三、接口" class="headerlink" title="三、接口"></a>三、接口</h3><p>面向对象语言中，接口是一个很重要的概念, 它是对行为的抽象, 而具体如何行动需要由类去实现, 接口首字母一般大写, 赋值的时候，变量的形状必须和接口的形状保持一致</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 我们定义了一个接口 Person，接着定义了一个变量 tom，它的类型是 Person。</span></span><br><span class="line"><span class="comment"> * 这样，我们就约束了 tom 的形状必须和接口 Person 一致。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">interface <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: string;</span><br><span class="line">  <span class="attr">age</span>: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">tom</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Tom&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">25</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="1-可选属性"><a href="#1-可选属性" class="headerlink" title="1).可选属性"></a>1).可选属性</h4><p>可以不完全匹配</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: string;</span><br><span class="line">  age?: number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-任意属性"><a href="#2-任意属性" class="headerlink" title="2).任意属性"></a>2).任意属性</h4><p>允许有任意非必选和可选属性, 可以用索引签名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: string;</span><br><span class="line">  age?: number;</span><br><span class="line">  [<span class="attr">propName</span>: string]: any;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意:一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: string;</span><br><span class="line">  age?: number; <span class="comment">// Property &#x27;age&#x27; of type &#x27;number | undefined&#x27; is not assignable to &#x27;string&#x27;</span></span><br><span class="line">  [<span class="attr">propName</span>: string]: string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-只读属性"><a href="#3-只读属性" class="headerlink" title="3).只读属性"></a>3).只读属性</h4><p>属性只能在创建的时候被赋值, 可以用 readonly 定义</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface <span class="title class_">Person</span> &#123;</span><br><span class="line">    readonly <span class="attr">id</span>: number;</span><br><span class="line">    <span class="attr">name</span>: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">tom</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">89757</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">tom.<span class="property">id</span> = <span class="number">9527</span>; <span class="comment">// Cannot assign to &#x27;id&#x27; because it is a read-only property</span></span><br></pre></td></tr></table></figure>

<h3 id="四、类"><a href="#四、类" class="headerlink" title="四、类"></a>四、类</h3><p>在面向对象语言中，类是一种面向对象计算机编程语言的构造，是创建对象的蓝图，描述了所创建的对象共同的属性和方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可以通过 Class 来定义一个类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Greeter</span> &#123;</span><br><span class="line">  <span class="attr">greeting</span>: string;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">message: string</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">greeting</span> = message;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + <span class="variable language_">this</span>.<span class="property">greeting</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> greeter = <span class="keyword">new</span> <span class="title class_">Greeter</span>(<span class="string">&quot;world&quot;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="1-继承"><a href="#1-继承" class="headerlink" title="1).继承"></a>1).继承</h4><p>通过 extends 从基类中继承属性和方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">move</span>(<span class="params">distanceInMeters: number = <span class="number">0</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Animal moved <span class="subst">$&#123;distanceInMeters&#125;</span>m.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">bark</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Woof! Woof!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">dog.<span class="title function_">bark</span>();</span><br><span class="line">dog.<span class="title function_">move</span>(<span class="number">10</span>);</span><br><span class="line">dog.<span class="title function_">bark</span>();</span><br></pre></td></tr></table></figure>

<h4 id="2-公共，私有与受保护的修饰符"><a href="#2-公共，私有与受保护的修饰符" class="headerlink" title="2).公共，私有与受保护的修饰符"></a>2).公共，私有与受保护的修饰符</h4><ul>
<li>默认为 public<ul>
<li>可以自由访问被定义的成员, 可被继承类访问</li>
</ul>
</li>
<li>protected<ul>
<li>可以被继承</li>
</ul>
</li>
<li>private<ul>
<li>不能被继承</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  private <span class="attr">name</span>: string;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">theName: string</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = theName;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Animal</span>(<span class="string">&quot;Cat&quot;</span>).<span class="property">name</span>; <span class="comment">// 错误: 属性“name”为私有属性，只能在类“Animal”中访问。ts(2341)</span></span><br></pre></td></tr></table></figure>

<ul>
<li>私有字段<ul>
<li>不能被继承，也不能被检测</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  #<span class="attr">name</span>: string;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">theName: string</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = theName;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Animal</span>(<span class="string">&quot;Cat&quot;</span>).#name; <span class="comment">// 错误: &#x27;#name&#x27; 是私有的.</span></span><br></pre></td></tr></table></figure>

<ul>
<li>readonly<ul>
<li>将属性设置为只读，只读属性必须在声明时或构造函数里被初始化</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    readonly <span class="attr">name</span>: string;</span><br><span class="line">    <span class="title function_">constructor</span> (<span class="attr">theName</span>: string) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = theName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> dog = <span class="keyword">new</span> <span class="title class_">Animal</span>(<span class="string">&quot;金毛&quot;</span>);</span><br><span class="line">dog.<span class="property">name</span> = <span class="string">&quot;二哈&quot;</span>; <span class="comment">// 错误! name 是只读的.</span></span><br></pre></td></tr></table></figure>

<h4 id="3-抽象类"><a href="#3-抽象类" class="headerlink" title="3).抽象类"></a>3).抽象类</h4><p>使用 abstract 声明的类, 抽象类不能被实例化, 但是可以实例化抽象类的子类</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">abstract <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span> (<span class="attr">theName</span>: string) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = theName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Animal</span>(<span class="string">&#x27;dog&#x27;</span>); <span class="comment">// Cannot create an instance of an abstract class</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span> (<span class="attr">theName</span>: string) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(theName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;dog&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="4-类方法重载"><a href="#4-类方法重载" class="headerlink" title="4).类方法重载"></a>4).类方法重载</h4><p>类方法支持重载</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ProductService</span> &#123;</span><br><span class="line">    <span class="title function_">getProducts</span>(): <span class="keyword">void</span>;</span><br><span class="line">    <span class="title function_">getProducts</span>(<span class="attr">id</span>: number): <span class="keyword">void</span>;</span><br><span class="line">    <span class="title function_">getProducts</span>(<span class="params">id?: number</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">typeof</span> id === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`获取id为 <span class="subst">$&#123;id&#125;</span> 的产品信息`</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`获取所有的产品信息`</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> productService = <span class="keyword">new</span> <span class="title class_">ProductService</span>();</span><br><span class="line">productService.<span class="title function_">getProducts</span>(<span class="number">666</span>); <span class="comment">// 获取id为 666 的产品信息</span></span><br><span class="line">productService.<span class="title function_">getProducts</span>(); <span class="comment">// 获取所有的产品信息</span></span><br></pre></td></tr></table></figure>

<h3 id="五、断言"><a href="#五、断言" class="headerlink" title="五、断言"></a>五、断言</h3><h4 id="1-类型断言"><a href="#1-类型断言" class="headerlink" title="1).类型断言"></a>1).类型断言</h4><p>可以用来手动指定一个值的类型, 类型断言好比其他语言里的类型转换，但是不进行特殊的数据检查和解构。它没有运行时的影响，只是在编译阶段起作用。</p>
<ul>
<li>尖括号</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">someValue</span>: any = <span class="string">&quot;this is a string&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">strLength</span>: number = (&lt;string&gt;someValue).<span class="property">length</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>as</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">someValue</span>: any = <span class="string">&quot;this is a string&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">strLength</span>: number = (someValue <span class="keyword">as</span> string).<span class="property">length</span>;</span><br></pre></td></tr></table></figure>

<h4 id="2-非空断言-！"><a href="#2-非空断言-！" class="headerlink" title="2).非空断言 ！"></a>2).非空断言 ！</h4><p>在上下文中当类型检查器无法断定类型时，一个新的后缀表达式操作符 ! 可以用于断言操作对象是非 null 和非 undefined 类型。举例: x! 将从 x 值域中排除 null 和 undefined 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myFunc</span>(<span class="params">maybeString: string | <span class="literal">undefined</span> | <span class="literal">null</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">onlyString</span>: string = maybeString; <span class="comment">// Type &#x27;string | null | undefined&#x27; is not assignable to type &#x27;string&#x27;.</span></span><br><span class="line">                                          <span class="comment">// Type &#x27;undefined&#x27; is not assignable to type &#x27;string&#x27;.</span></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">ignoreUndefinedAndNull</span>: string = maybeString!; <span class="comment">// Ok</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用函数忽略null和undefined</span></span><br><span class="line">type <span class="title class_">NumGenerator</span> = <span class="function">() =&gt;</span> number;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunc</span>(<span class="params">numGenerator: NumGenerator | <span class="literal">undefined</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> num1 = <span class="title function_">numGenerator</span>();  <span class="comment">// Object is possibly &#x27;undefined&#x27;.(2532)</span></span><br><span class="line">                                <span class="comment">// Cannot invoke an object which is possibly &#x27;undefined&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> num2 = numGenerator!(); <span class="comment">//OK</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-确定赋值断言"><a href="#3-确定赋值断言" class="headerlink" title="3).确定赋值断言"></a>3).确定赋值断言</h4><p>即允许在实例属性和变量声明后面放置一个 ! 号，从而告诉 ts 该属性会被明确地赋值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">x</span>: number;</span><br><span class="line"><span class="title function_">initialize</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> * x); <span class="comment">// 正确打印20； 但是报错： Variable &#x27;x&#x27; is used before being assigned.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initialize</span>(<span class="params"></span>) &#123;</span><br><span class="line">  x = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x!: number;</span><br><span class="line"><span class="title function_">initialize</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> * x); <span class="comment">// Ok</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initialize</span>(<span class="params"></span>) &#123;</span><br><span class="line">  x = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="六、泛型"><a href="#六、泛型" class="headerlink" title="六、泛型"></a>六、泛型</h3><h4 id="1-多个类型参数"><a href="#1-多个类型参数" class="headerlink" title="1).多个类型参数"></a>1).多个类型参数</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> identity&lt;T, U&gt;(<span class="attr">value</span>: T, <span class="attr">message</span>: U): T &#123;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(identity &lt; <span class="title class_">Number</span>, string &gt; (<span class="number">68</span>, <span class="string">&quot;Semlinker&quot;</span>));</span><br></pre></td></tr></table></figure>

<h4 id="2-泛型约束"><a href="#2-泛型约束" class="headerlink" title="2).泛型约束"></a>2).泛型约束</h4><p>在函数内部使用泛型变量的时候，由于事先不知道它是哪种类型，所以不能随意的操作它的属性或方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> loggingIdentity&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>); <span class="comment">// Property &#x27;length&#x27; does not exist on type &#x27;T&#x27;.</span></span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// T中不一定包含 length 属性, 所以报错</span></span><br></pre></td></tr></table></figure>

<p>使用 extends 进行约束</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface <span class="title class_">Lengthwise</span> &#123;</span><br><span class="line">  <span class="attr">length</span>: number;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 必须包含length属性</span></span><br><span class="line"><span class="keyword">function</span> loggingIdentity&lt;T <span class="keyword">extends</span> <span class="title class_">Lengthwise</span>&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>);</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-泛型接口"><a href="#3-泛型接口" class="headerlink" title="3).泛型接口"></a>3).泛型接口</h4><p>可以使用接口的方式来定义一个函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface <span class="title class_">CreateArrayFunc</span> &#123;</span><br><span class="line">  &lt;T&gt;(<span class="attr">length</span>: number, <span class="attr">value</span>: T): <span class="title class_">Array</span>&lt;T&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">createArray</span>: <span class="title class_">CreateArrayFunc</span>;</span><br><span class="line">createArray = <span class="keyword">function</span> &lt;T&gt;(<span class="attr">length</span>: number, <span class="attr">value</span>: T): <span class="title class_">Array</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">result</span>: T[] = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    result[i] = value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">createArray</span>(<span class="number">3</span>, <span class="string">&quot;x&quot;</span>); <span class="comment">// [&#x27;x&#x27;, &#x27;x&#x27;, &#x27;x&#x27;]</span></span><br></pre></td></tr></table></figure>

<h4 id="4-泛型类"><a href="#4-泛型类" class="headerlink" title="4).泛型类"></a>4).泛型类</h4><p>实例化的时候传入具体的类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GenericNumber</span>&lt;T&gt; &#123;</span><br><span class="line">  zeroValue!: T;</span><br><span class="line">  add!: <span class="function">(<span class="params">x: T, y: T</span>) =&gt;</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myGenericNumber = <span class="keyword">new</span> <span class="title class_">GenericNumber</span>&lt;number&gt;();</span><br><span class="line">myGenericNumber.<span class="property">zeroValue</span> = <span class="number">0</span>;</span><br><span class="line">myGenericNumber.<span class="property">add</span> = <span class="keyword">function</span> (<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>[参考文档]：<br><a href="https://www.typescriptlang.org/docs/handbook/intro.html">https://www.typescriptlang.org/docs/handbook/intro.html</a><br><a href="https://www.tslang.cn/docs/home.html">https://www.tslang.cn/docs/home.html</a></p>
<p>[参考链接]：<br><a href="https://yuque.antfin-inc.com/docs/share/9edb0190-d91c-4ada-a9c0-859161b29094#mB734">https://yuque.antfin-inc.com/docs/share/9edb0190-d91c-4ada-a9c0-859161b29094#mB734</a></p>
<p><a href="https://www.cnblogs.com/cangqinglang/p/12896595.html">https://www.cnblogs.com/cangqinglang/p/12896595.html</a></p>
<p><a href="https://www.typescriptlang.org/%E2%80%8B">https://www.typescriptlang.org/​</a></p>
]]></content>
  </entry>
  <entry>
    <title>【转载】TS工具类型</title>
    <url>/2022/01/26/%20Typescript/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91TS%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h3 id="一、类型别名"><a href="#一、类型别名" class="headerlink" title="一、类型别名"></a>一、类型别名</h3><p>TypeScript 提供了为类型注解设置别名的便捷语法，你可以使用 type SomeName &#x3D; someValidTypeAnnotation 来创建别名，比如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">type <span class="title class_">Pet</span> = <span class="string">&quot;cat&quot;</span> | <span class="string">&quot;dog&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">pet</span>: <span class="title class_">Pet</span>;</span><br><span class="line"></span><br><span class="line">pet = <span class="string">&quot;cat&quot;</span>; <span class="comment">// Ok</span></span><br><span class="line">pet = <span class="string">&quot;dog&quot;</span>; <span class="comment">// Ok</span></span><br><span class="line">pet = <span class="string">&quot;zebra&quot;</span>; <span class="comment">// Compiler error</span></span><br></pre></td></tr></table></figure>

<h3 id="二、基础知识"><a href="#二、基础知识" class="headerlink" title="二、基础知识"></a>二、基础知识</h3><p>为了让大家能更好地理解并掌握 TypeScript 内置类型别名，我们先来介绍一下相关的一些基础知识。</p>
<h4 id="2-1-typeof"><a href="#2-1-typeof" class="headerlink" title="2.1 typeof"></a>2.1 typeof</h4><p>在 TypeScript 中， typeof 操作符可以用来获取一个变量声明或对象的类型。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: string;</span><br><span class="line">  <span class="attr">age</span>: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">sem</span>: <span class="title class_">Person</span> = &#123; <span class="attr">name</span>: <span class="string">&quot;semlinker&quot;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;;</span><br><span class="line">type <span class="title class_">Sem</span> = <span class="keyword">typeof</span> sem; <span class="comment">// -&gt; Person</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">toArray</span>(<span class="params">x: number</span>): <span class="title class_">Array</span>&lt;number&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> [x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type <span class="title class_">Func</span> = <span class="keyword">typeof</span> toArray; <span class="comment">// -&gt; (x: number) =&gt; number[]</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2-keyof"><a href="#2-2-keyof" class="headerlink" title="2.2 keyof"></a>2.2 keyof</h4><p>keyof 操作符可以用来一个对象中的所有 key 值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: string;</span><br><span class="line">    <span class="attr">age</span>: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type <span class="variable constant_">K1</span> = keyof <span class="title class_">Person</span>; <span class="comment">// &quot;name&quot; | &quot;age&quot;</span></span><br><span class="line">type <span class="variable constant_">K2</span> = keyof <span class="title class_">Person</span>[]; <span class="comment">// &quot;length&quot; | &quot;toString&quot; | &quot;pop&quot; | &quot;push&quot; | &quot;concat&quot; | &quot;join&quot;</span></span><br><span class="line">type <span class="variable constant_">K3</span> = keyof &#123; [<span class="attr">x</span>: string]: <span class="title class_">Person</span> &#125;;  <span class="comment">// string | number</span></span><br></pre></td></tr></table></figure>

<h4 id="2-3-in"><a href="#2-3-in" class="headerlink" title="2.3 in"></a>2.3 in</h4><p>in 用来遍历枚举类型：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">type <span class="title class_">Keys</span> = <span class="string">&quot;a&quot;</span> | <span class="string">&quot;b&quot;</span> | <span class="string">&quot;c&quot;</span></span><br><span class="line"></span><br><span class="line">type <span class="title class_">Obj</span> =  &#123;</span><br><span class="line">  [p <span class="keyword">in</span> <span class="title class_">Keys</span>]: any</span><br><span class="line">&#125; <span class="comment">// -&gt; &#123; a: any, b: any, c: any &#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-4-infer"><a href="#2-4-infer" class="headerlink" title="2.4 infer"></a>2.4 infer</h4><p>在条件类型语句中，可以用 infer 声明一个类型变量并且对它进行使用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">type <span class="title class_">ReturnType</span>&lt;T&gt; = T <span class="keyword">extends</span> (</span><br><span class="line">  ...<span class="attr">args</span>: any[]</span><br><span class="line">) =&gt; infer R ? R : any;</span><br></pre></td></tr></table></figure>

<p>以上代码中 infer R 就是声明一个变量来承载传入函数签名的返回值类型，简单说就是用它取到函数返回值的类型方便之后使用。</p>
<h4 id="2-5-extends"><a href="#2-5-extends" class="headerlink" title="2.5 extends"></a>2.5 extends</h4><p>有时候我们定义的泛型不想过于灵活或者说想继承某些类等，可以通过 extends 关键字添加泛型约束。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface <span class="title class_">ILengthwise</span> &#123;</span><br><span class="line">  <span class="attr">length</span>: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> loggingIdentity&lt;T <span class="keyword">extends</span> <span class="title class_">ILengthwise</span>&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>);</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在这个泛型函数被定义了约束，因此它不再是适用于任意类型：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">loggingIdentity</span>(<span class="number">3</span>); <span class="comment">// Error, number doesn&#x27;t have a .length property</span></span><br></pre></td></tr></table></figure>

<p>这时我们需要传入符合约束类型的值，必须包含必须的属性：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">loggingIdentity</span>(&#123; <span class="attr">length</span>: <span class="number">10</span>, <span class="attr">value</span>: <span class="number">3</span> &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="三、内置类型别名"><a href="#三、内置类型别名" class="headerlink" title="三、内置类型别名"></a>三、内置类型别名</h3><h4 id="3-1-Partial"><a href="#3-1-Partial" class="headerlink" title="3.1 Partial"></a>3.1 Partial</h4><p>Partial<T> 的作用就是将某个类型里的属性全部变为可选项 ? 。</p>
<h5 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// node_modules/typescript/lib/lib.es5.d.ts</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Make all properties in T optional</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">type <span class="title class_">Partial</span>&lt;T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> keyof T]?: T[P];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>在以上代码中，首先通过 keyof T 拿到 T 的所有属性名，然后使用 in 进行遍历，将值赋给 P ，最后通过 T[P] 取得相应的属性值。中间的 ? ，用于将所有属性变为可选。</p>
<h5 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface <span class="title class_">Todo</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: string;</span><br><span class="line">  <span class="attr">description</span>: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">updateTodo</span>(<span class="params">todo: Todo, fieldsToUpdate: Partial&lt;Todo&gt;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; ...todo, ...fieldsToUpdate &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> todo1 = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;organize desk&quot;</span>,</span><br><span class="line">  <span class="attr">description</span>: <span class="string">&quot;clear clutter&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> todo2 = <span class="title function_">updateTodo</span>(todo1, &#123;</span><br><span class="line">  <span class="attr">description</span>: <span class="string">&quot;throw out trash&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="3-2-Required"><a href="#3-2-Required" class="headerlink" title="3.2 Required"></a>3.2 Required</h4><p>Required<T> 的作用就是将某个类型里的属性全部变为必选项。</p>
<h5 id="定义：-1"><a href="#定义：-1" class="headerlink" title="定义："></a>定义：</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// node_modules/typescript/lib/lib.es5.d.ts</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Make all properties in T required</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">type <span class="title class_">Required</span>&lt;T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> keyof T]-?: T[P];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>以上代码中， -? 的作用就是移除可选项 ? 。</p>
<h5 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例："></a>示例：</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface <span class="title class_">Props</span> &#123;</span><br><span class="line">  a?: number;</span><br><span class="line">  b?: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">obj</span>: <span class="title class_">Props</span> = &#123; <span class="attr">a</span>: <span class="number">5</span> &#125;; <span class="comment">// OK</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">obj2</span>: <span class="title class_">Required</span>&lt;<span class="title class_">Props</span>&gt; = &#123; <span class="attr">a</span>: <span class="number">5</span> &#125;; <span class="comment">// Error: property &#x27;b&#x27; missing</span></span><br></pre></td></tr></table></figure>

<h4 id="3-3-Readonly"><a href="#3-3-Readonly" class="headerlink" title="3.3 Readonly"></a>3.3 Readonly</h4><p>Readonly<T> 的作用是将某个类型所有属性变为只读属性，也就意味着这些属性不能被重新赋值。</p>
<h5 id="定义：-2"><a href="#定义：-2" class="headerlink" title="定义："></a>定义：</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// node_modules/typescript/lib/lib.es5.d.ts</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Make all properties in T readonly</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">type <span class="title class_">Readonly</span>&lt;T&gt; = &#123;</span><br><span class="line">    readonly [P <span class="keyword">in</span> keyof T]: T[P];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如果将上面的 readonly 改成 -readonly ， 就是移除子属性的 readonly 标识。</p>
<h5 id="示例：-2"><a href="#示例：-2" class="headerlink" title="示例："></a>示例：</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface <span class="title class_">Todo</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">todo</span>: <span class="title class_">Readonly</span>&lt;<span class="title class_">Todo</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;Delete inactive users&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">todo.<span class="property">title</span> = <span class="string">&quot;Hello&quot;</span>; <span class="comment">// Error: cannot reassign a readonly property</span></span><br></pre></td></tr></table></figure>

<h4 id="3-4-Record"><a href="#3-4-Record" class="headerlink" title="3.4 Record"></a>3.4 Record</h4><p>Record&lt;K extends keyof any, T&gt; 的作用是将 K 中所有的属性的值转化为 T 类型。</p>
<h5 id="定义：-3"><a href="#定义：-3" class="headerlink" title="定义："></a>定义：</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// node_modules/typescript/lib/lib.es5.d.ts</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Construct a type with a set of properties K of type T</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">type <span class="title class_">Record</span>&lt;K <span class="keyword">extends</span> keyof any, T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> K]: T;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="示例：-3"><a href="#示例：-3" class="headerlink" title="示例："></a>示例：</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface <span class="title class_">PageInfo</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type <span class="title class_">Page</span> = <span class="string">&quot;home&quot;</span> | <span class="string">&quot;about&quot;</span> | <span class="string">&quot;contact&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">x</span>: <span class="title class_">Record</span>&lt;<span class="title class_">Page</span>, <span class="title class_">PageInfo</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">about</span>: &#123; <span class="attr">title</span>: <span class="string">&quot;about&quot;</span> &#125;,</span><br><span class="line">  <span class="attr">contact</span>: &#123; <span class="attr">title</span>: <span class="string">&quot;contact&quot;</span> &#125;,</span><br><span class="line">  <span class="attr">home</span>: &#123; <span class="attr">title</span>: <span class="string">&quot;home&quot;</span> &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="3-5-Pick"><a href="#3-5-Pick" class="headerlink" title="3.5 Pick"></a>3.5 Pick</h4><p>Pick&lt;T, K extends keyof T&gt; 的作用是将某个类型中的子属性挑出来，变成包含这个类型部分属性的子类型。</p>
<h5 id="定义：-4"><a href="#定义：-4" class="headerlink" title="定义："></a>定义：</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// node_modules/typescript/lib/lib.es5.d.ts</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * From T, pick a set of properties whose keys are in the union K</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">type <span class="title class_">Pick</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> K]: T[P];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="示例：-4"><a href="#示例：-4" class="headerlink" title="示例："></a>示例：</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface <span class="title class_">Todo</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: string;</span><br><span class="line">  <span class="attr">description</span>: string;</span><br><span class="line">  <span class="attr">completed</span>: boolean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type <span class="title class_">TodoPreview</span> = <span class="title class_">Pick</span>&lt;<span class="title class_">Todo</span>, <span class="string">&quot;title&quot;</span> | <span class="string">&quot;completed&quot;</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">todo</span>: <span class="title class_">TodoPreview</span> = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;Clean room&quot;</span>,</span><br><span class="line">  <span class="attr">completed</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="3-6-Exclude"><a href="#3-6-Exclude" class="headerlink" title="3.6 Exclude"></a>3.6 Exclude</h4><p>Exclude&lt;T, U&gt; 的作用是将某个类型中属于另一个的类型移除掉。</p>
<h5 id="定义：-5"><a href="#定义：-5" class="headerlink" title="定义："></a>定义：</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// node_modules/typescript/lib/lib.es5.d.ts</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Exclude from T those types that are assignable to U</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">type <span class="title class_">Exclude</span>&lt;T, U&gt; = T <span class="keyword">extends</span> U ? never : T;</span><br></pre></td></tr></table></figure>

<p>如果 T 能赋值给 U 类型的话，那么就会返回 never 类型，否则返回 T 类型。最终实现的效果就是将 T 中某些属于 U 的类型移除掉。</p>
<h5 id="示例：-5"><a href="#示例：-5" class="headerlink" title="示例："></a>示例：</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">type <span class="variable constant_">T0</span> = <span class="title class_">Exclude</span>&lt;<span class="string">&quot;a&quot;</span> | <span class="string">&quot;b&quot;</span> | <span class="string">&quot;c&quot;</span>, <span class="string">&quot;a&quot;</span>&gt;; <span class="comment">// &quot;b&quot; | &quot;c&quot;</span></span><br><span class="line">type <span class="variable constant_">T1</span> = <span class="title class_">Exclude</span>&lt;<span class="string">&quot;a&quot;</span> | <span class="string">&quot;b&quot;</span> | <span class="string">&quot;c&quot;</span>, <span class="string">&quot;a&quot;</span> | <span class="string">&quot;b&quot;</span>&gt;; <span class="comment">// &quot;c&quot;</span></span><br><span class="line">type <span class="variable constant_">T2</span> = <span class="title class_">Exclude</span>&lt;string | number | (<span class="function">() =&gt;</span> <span class="keyword">void</span>), <span class="title class_">Function</span>&gt;; <span class="comment">// string | number</span></span><br></pre></td></tr></table></figure>

<h4 id="3-7-Extract"><a href="#3-7-Extract" class="headerlink" title="3.7 Extract"></a>3.7 Extract</h4><p>Extract&lt;T, U&gt; 的作用是从 T 中提取出 U 。</p>
<h5 id="定义：-6"><a href="#定义：-6" class="headerlink" title="定义："></a>定义：</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// node_modules/typescript/lib/lib.es5.d.ts</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Extract from T those types that are assignable to U</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">type <span class="title class_">Extract</span>&lt;T, U&gt; = T <span class="keyword">extends</span> U ? T : never;</span><br></pre></td></tr></table></figure>

<p>如果 T 能赋值给 U 类型的话，那么就会返回 T 类型，否则返回 never 类型。</p>
<h5 id="示例：-6"><a href="#示例：-6" class="headerlink" title="示例："></a>示例：</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">type <span class="variable constant_">T0</span> = <span class="title class_">Extract</span>&lt;<span class="string">&quot;a&quot;</span> | <span class="string">&quot;b&quot;</span> | <span class="string">&quot;c&quot;</span>, <span class="string">&quot;a&quot;</span> | <span class="string">&quot;f&quot;</span>&gt;; <span class="comment">// &quot;a&quot;</span></span><br><span class="line">type <span class="variable constant_">T1</span> = <span class="title class_">Extract</span>&lt;string | number | (<span class="function">() =&gt;</span> <span class="keyword">void</span>), <span class="title class_">Function</span>&gt;; <span class="comment">// () =&gt; void</span></span><br></pre></td></tr></table></figure>

<h4 id="3-8-Omit"><a href="#3-8-Omit" class="headerlink" title="3.8 Omit"></a>3.8 Omit</h4><p>Omit&lt;T, K extends keyof any&gt; 的作用是使用 T 类型中除了 K 类型的所有属性，来构造一个新的类型。</p>
<h5 id="定义：-7"><a href="#定义：-7" class="headerlink" title="定义："></a>定义：</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// node_modules/typescript/lib/lib.es5.d.ts</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Construct a type with the properties of T except for those in type K.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">type <span class="title class_">Omit</span>&lt;T, K <span class="keyword">extends</span> keyof any&gt; = <span class="title class_">Pick</span>&lt;T, <span class="title class_">Exclude</span>&lt;keyof T, K&gt;&gt;;</span><br></pre></td></tr></table></figure>

<h5 id="示例：-7"><a href="#示例：-7" class="headerlink" title="示例："></a>示例：</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface <span class="title class_">Todo</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: string;</span><br><span class="line">  <span class="attr">description</span>: string;</span><br><span class="line">  <span class="attr">completed</span>: boolean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type <span class="title class_">TodoPreview</span> = <span class="title class_">Omit</span>&lt;<span class="title class_">Todo</span>, <span class="string">&quot;description&quot;</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">todo</span>: <span class="title class_">TodoPreview</span> = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;Clean room&quot;</span>,</span><br><span class="line">  <span class="attr">completed</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="3-9-NonNullable"><a href="#3-9-NonNullable" class="headerlink" title="3.9 NonNullable"></a>3.9 NonNullable</h4><p>NonNullable<T> 的作用是用来过滤类型中的 null 及 undefined 类型。</p>
<h5 id="定义：-8"><a href="#定义：-8" class="headerlink" title="定义："></a>定义：</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// node_modules/typescript/lib/lib.es5.d.ts</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Exclude null and undefined from T</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">type <span class="title class_">NonNullable</span>&lt;T&gt; = T <span class="keyword">extends</span> <span class="literal">null</span> | <span class="literal">undefined</span> ? never : T;</span><br></pre></td></tr></table></figure>

<h5 id="示例：-8"><a href="#示例：-8" class="headerlink" title="示例："></a>示例：</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">type <span class="variable constant_">T0</span> = <span class="title class_">NonNullable</span>&lt;string | number | <span class="literal">undefined</span>&gt;; <span class="comment">// string | number</span></span><br><span class="line">type <span class="variable constant_">T1</span> = <span class="title class_">NonNullable</span>&lt;string[] | <span class="literal">null</span> | <span class="literal">undefined</span>&gt;; <span class="comment">// string[]</span></span><br></pre></td></tr></table></figure>

<h4 id="3-10-ReturnType"><a href="#3-10-ReturnType" class="headerlink" title="3.10 ReturnType"></a>3.10 ReturnType</h4><p>ReturnType<T> 的作用是用于获取函数 T 的返回类型。</p>
<h5 id="定义：-9"><a href="#定义：-9" class="headerlink" title="定义："></a>定义：</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// node_modules/typescript/lib/lib.es5.d.ts</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Obtain the return type of a function type</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">type <span class="title class_">ReturnType</span>&lt;T <span class="keyword">extends</span> (...<span class="attr">args</span>: any) =&gt; any&gt; = T <span class="keyword">extends</span> (...<span class="attr">args</span>: any) =&gt; infer R ? R : any;</span><br></pre></td></tr></table></figure>

<h5 id="示例：-9"><a href="#示例：-9" class="headerlink" title="示例："></a>示例：</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">type <span class="variable constant_">T0</span> = <span class="title class_">ReturnType</span>&lt;<span class="function">() =&gt;</span> string&gt;; <span class="comment">// string</span></span><br><span class="line">type <span class="variable constant_">T1</span> = <span class="title class_">ReturnType</span>&lt;<span class="function">(<span class="params">s: string</span>) =&gt;</span> <span class="keyword">void</span>&gt;; <span class="comment">// void</span></span><br><span class="line">type <span class="variable constant_">T2</span> = <span class="title class_">ReturnType</span>&lt;&lt;T&gt;<span class="function">() =&gt;</span> T&gt;; <span class="comment">// &#123;&#125;</span></span><br><span class="line">type <span class="variable constant_">T3</span> = <span class="title class_">ReturnType</span>&lt;&lt;T <span class="keyword">extends</span> U, U <span class="keyword">extends</span> number[]&gt;<span class="function">() =&gt;</span> T&gt;; <span class="comment">// number[]</span></span><br><span class="line">type <span class="variable constant_">T4</span> = <span class="title class_">ReturnType</span>&lt;any&gt;; <span class="comment">// any</span></span><br><span class="line">type <span class="variable constant_">T5</span> = <span class="title class_">ReturnType</span>&lt;never&gt;; <span class="comment">// any</span></span><br><span class="line">type <span class="variable constant_">T6</span> = <span class="title class_">ReturnType</span>&lt;string&gt;; <span class="comment">// Error</span></span><br><span class="line">type <span class="variable constant_">T7</span> = <span class="title class_">ReturnType</span>&lt;<span class="title class_">Function</span>&gt;; <span class="comment">// Error</span></span><br></pre></td></tr></table></figure>

<h4 id="3-11-InstanceType"><a href="#3-11-InstanceType" class="headerlink" title="3.11 InstanceType"></a>3.11 InstanceType</h4><p>InstanceType 的作用是获取构造函数类型的实例类型。</p>
<h5 id="定义：-10"><a href="#定义：-10" class="headerlink" title="定义："></a>定义：</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// node_modules/typescript/lib/lib.es5.d.ts</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Obtain the return type of a constructor function type</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">type <span class="title class_">InstanceType</span>&lt;T <span class="keyword">extends</span> <span class="keyword">new</span> (...<span class="attr">args</span>: any) =&gt; any&gt; = T <span class="keyword">extends</span> <span class="keyword">new</span> (...<span class="attr">args</span>: any) =&gt; infer R ? R : any;</span><br></pre></td></tr></table></figure>

<h5 id="示例：-10"><a href="#示例：-10" class="headerlink" title="示例："></a>示例：</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">  x = <span class="number">0</span>;</span><br><span class="line">  y = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type <span class="variable constant_">T0</span> = <span class="title class_">InstanceType</span>&lt;<span class="keyword">typeof</span> C&gt;; <span class="comment">// C</span></span><br><span class="line">type <span class="variable constant_">T1</span> = <span class="title class_">InstanceType</span>&lt;any&gt;; <span class="comment">// any</span></span><br><span class="line">type <span class="variable constant_">T2</span> = <span class="title class_">InstanceType</span>&lt;never&gt;; <span class="comment">// any</span></span><br><span class="line">type <span class="variable constant_">T3</span> = <span class="title class_">InstanceType</span>&lt;string&gt;; <span class="comment">// Error</span></span><br><span class="line">type <span class="variable constant_">T4</span> = <span class="title class_">InstanceType</span>&lt;<span class="title class_">Function</span>&gt;; <span class="comment">// Error</span></span><br></pre></td></tr></table></figure>

<h4 id="3-12-ThisType"><a href="#3-12-ThisType" class="headerlink" title="3.12 ThisType"></a>3.12 ThisType</h4><p>ThisType<T> 的作用是用于指定上下文对象的类型。</p>
<h5 id="定义：-11"><a href="#定义：-11" class="headerlink" title="定义："></a>定义：</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// node_modules/typescript/lib/lib.es5.d.ts</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Marker for contextual &#x27;this&#x27; type</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">interface <span class="title class_">ThisType</span>&lt;T&gt; &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>注意：使用 ThisType<T> 时，必须确保 –noImplicitThis 标志设置为 true。</p>
<h5 id="示例：-11"><a href="#示例：-11" class="headerlink" title="示例："></a>示例：</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: string;</span><br><span class="line">  <span class="attr">age</span>: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">obj</span>: <span class="title class_">ThisType</span>&lt;<span class="title class_">Person</span>&gt; = &#123;</span><br><span class="line">  <span class="title function_">dosth</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>; <span class="comment">// string</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="3-13-Parameters"><a href="#3-13-Parameters" class="headerlink" title="3.13 Parameters"></a>3.13 Parameters</h4><p>Parameters<T> 的作用是用于获得函数的参数类型组成的元组类型。</p>
<h5 id="定义：-12"><a href="#定义：-12" class="headerlink" title="定义："></a>定义：</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// node_modules/typescript/lib/lib.es5.d.ts</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Obtain the parameters of a function type in a tuple</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">type <span class="title class_">Parameters</span>&lt;T <span class="keyword">extends</span> (...<span class="attr">args</span>: any) =&gt; any&gt; = T <span class="keyword">extends</span> (...<span class="attr">args</span>: infer P) =&gt; any</span><br><span class="line">  ? P : never;</span><br></pre></td></tr></table></figure>

<h5 id="示例：-12"><a href="#示例：-12" class="headerlink" title="示例："></a>示例：</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">type A = <span class="title class_">Parameters</span>&lt;<span class="function">() =&gt;</span> <span class="keyword">void</span>&gt;; <span class="comment">// []</span></span><br><span class="line">type B = <span class="title class_">Parameters</span>&lt;<span class="keyword">typeof</span> <span class="title class_">Array</span>.<span class="property">isArray</span>&gt;; <span class="comment">// [any]</span></span><br><span class="line">type C = <span class="title class_">Parameters</span>&lt;<span class="keyword">typeof</span> <span class="built_in">parseInt</span>&gt;; <span class="comment">// [string, (number | undefined)?]</span></span><br><span class="line">type D = <span class="title class_">Parameters</span>&lt;<span class="keyword">typeof</span> <span class="title class_">Math</span>.<span class="property">max</span>&gt;; <span class="comment">// number[]</span></span><br></pre></td></tr></table></figure>

<h4 id="3-14-ConstructorParameters"><a href="#3-14-ConstructorParameters" class="headerlink" title="3.14 ConstructorParameters"></a>3.14 ConstructorParameters</h4><p>ConstructorParameters<T> 的作用是提取构造函数类型的所有参数类型。它会生成具有所有参数类型的元组类型（如果 T 不是函数，则返回的是 never 类型）。</p>
<h5 id="定义：-13"><a href="#定义：-13" class="headerlink" title="定义："></a>定义：</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// node_modules/typescript/lib/lib.es5.d.ts</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Obtain the parameters of a constructor function type in a tuple</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">type <span class="title class_">ConstructorParameters</span>&lt;T <span class="keyword">extends</span> <span class="keyword">new</span> (...<span class="attr">args</span>: any) =&gt; any&gt; = T <span class="keyword">extends</span> <span class="keyword">new</span> (...<span class="attr">args</span>: infer P) =&gt; any ? P : never;</span><br></pre></td></tr></table></figure>

<h5 id="示例：-13"><a href="#示例：-13" class="headerlink" title="示例："></a>示例：</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">type A = <span class="title class_">ConstructorParameters</span>&lt;<span class="title class_">ErrorConstructor</span>&gt;; <span class="comment">// [(string | undefined)?]</span></span><br><span class="line">type B = <span class="title class_">ConstructorParameters</span>&lt;<span class="title class_">FunctionConstructor</span>&gt;; <span class="comment">// string[]</span></span><br><span class="line">type C = <span class="title class_">ConstructorParameters</span>&lt;<span class="title class_">RegExpConstructor</span>&gt;; <span class="comment">// [string, (string | undefined)?]</span></span><br></pre></td></tr></table></figure>

<p>转载链接：<br><a href="https://www.cnblogs.com/cangqinglang/p/12896595.html">https://www.cnblogs.com/cangqinglang/p/12896595.html</a></p>
]]></content>
  </entry>
  <entry>
    <title>【搬】Dva入门</title>
    <url>/2023/01/31/Dva/%E3%80%90%E6%90%AC%E3%80%91Dva%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h3 id="React-没有解决的问题"><a href="#React-没有解决的问题" class="headerlink" title="React 没有解决的问题"></a>React 没有解决的问题</h3><p>React 本身只是一个 DOM 的抽象层，在虚拟 DOM 的基础上开发组件。</p>
<p>如果开发复杂的大型应用，还需要解决两个问题。</p>
<h3 id="架构问题"><a href="#架构问题" class="headerlink" title="架构问题"></a>架构问题</h3><p>React 没有规定大型应用的架构。</p>
<p>到底哪一种架构最合适 React ？</p>
<ul>
<li>MVC</li>
<li>MVVM</li>
<li>Observer</li>
<li>Reactive</li>
<li>…</li>
</ul>
<p>通信问题</p>
<ul>
<li>通信：组件之间如何通信？</li>
<li>数据流：数据如何和视图串联起来？路由和数据如何绑定？如何编写异步逻辑？等等</li>
</ul>
<p>怎么解决下面三种通信？</p>
<ul>
<li>向子组件发消息</li>
<li>向父组件发消息</li>
<li>向其他组件发消息<br>React 只提供了一种组件之间的通信手段：传参。对于大应用，很不方便。</li>
</ul>
<p>组件通信的示例 1：想一想父组件如何拿到子组件的值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Son</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里显示 Son 组件的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Father</span> /&gt;</span></span>, mountNode);</span><br></pre></td></tr></table></figure>

<p>组件通信的示例 2：看懂以下代码，理解子组件如何通过父组件传入的函数，将自己的值再传回父组件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.props.onChange&#125;</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">son</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">changeHandler</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">son</span>: e.<span class="property">target</span>.<span class="property">value</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Son</span> <span class="attr">onChange</span>=<span class="string">&#123;this.changeHandler.bind(this)&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里显示 Son 组件的内容：&#123;this.state.son&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Father</span> /&gt;</span></span>, mountNode);</span><br></pre></td></tr></table></figure>

<h3 id="数据流问题"><a href="#数据流问题" class="headerlink" title="数据流问题"></a>数据流问题</h3><p>目前流行的数据流方案有：</p>
<ul>
<li>Flux，单项数据流方案，以 Redux 为代表</li>
<li>Reactive，响应式数据流方案，以 Mobx 为代表</li>
<li>其他，比如 rxjs 等</li>
</ul>
<p>到底哪一种架构最合适 React ？</p>
<h3 id="目前最流行的数据流方案"><a href="#目前最流行的数据流方案" class="headerlink" title="目前最流行的数据流方案"></a>目前最流行的数据流方案</h3><p>截止 2017.1，最流行的社区 React 应用架构方案如下。</p>
<ul>
<li>路由： React-Router</li>
<li>架构： Redux</li>
<li>异步操作： Redux-saga</li>
</ul>
<p>缺点：要引入多个库，项目结构复杂。</p>
<h3 id="dva-是什么"><a href="#dva-是什么" class="headerlink" title="dva 是什么"></a>dva 是什么</h3><p>dva 是体验技术部开发的 React 应用框架，将上面三个 React 工具库包装在一起，简化了 API，让开发 React 应用更加方便和快捷。<br>dva &#x3D; React-Router + Redux + Redux-saga</p>
<p>React 应用的架构<br><img src="https://www.daykalif.com/blog_img/jiagou.jpeg" alt="daykalif"></p>
<h4 id="dva-的设计思想"><a href="#dva-的设计思想" class="headerlink" title="dva 的设计思想"></a>dva 的设计思想</h4><p>应用的拆分：</p>
<ul>
<li>视图（view）</li>
<li>逻辑（logic）</li>
<li>状态（state）</li>
</ul>
<p>以上三者完全分离。</p>
<p>运行过程如下。</p>
<ol>
<li>初始状态 &#x3D;&gt; 初始视图</li>
<li>用户浏览视图 &#x3D;&gt; 业务逻辑生效</li>
<li>业务逻辑 &#x3D;&gt; 状态变化</li>
<li>状态变化 &#x3D;&gt; 视图变化</li>
</ol>
<h4 id="dva-的运行模型"><a href="#dva-的运行模型" class="headerlink" title="dva 的运行模型"></a>dva 的运行模型</h4><ol>
<li>dva 提供一个 Model 层，保存全局状态</li>
<li>组件发送消息给 Model</li>
<li>Model 调用业务逻辑，导致 state 发生变化，触发 UI 层重新渲染</li>
</ol>
<p>核心概念如下。</p>
<ul>
<li>Action：一个对象，描述 UI 事件</li>
<li>dispatch: 一个函数，发送 Action 到 State</li>
<li>State：一个对象，保存整个应用状态</li>
<li>View：React 组件构成的视图层</li>
</ul>
<p>最大特点：数据单向流动。<br><img src="https://www.daykalif.com/blog_img/shujuliu.jpeg" alt="daykalif"></p>
<h3 id="dva-应用的最简结构"><a href="#dva-应用的最简结构" class="headerlink" title="dva 应用的最简结构"></a>dva 应用的最简结构</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> dva <span class="keyword">from</span> <span class="string">&quot;dva&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello dva<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建应用</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">dva</span>();</span><br><span class="line"><span class="comment">// 注册视图</span></span><br><span class="line">app.<span class="title function_">router</span>(<span class="function">() =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>);</span><br><span class="line"><span class="comment">// 启动应用</span></span><br><span class="line">app.<span class="title function_">start</span>(<span class="string">&quot;#root&quot;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="数据流图"><a href="#数据流图" class="headerlink" title="数据流图"></a>数据流图</h4><p><img src="https://www.daykalif.com/blog_img/shujuliu2.jpeg" alt="daykalif"></p>
<h4 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h4><ul>
<li>State：一个对象，保存整个应用状态</li>
<li>View：React 组件构成的视图层</li>
<li>Action：一个对象，描述事件</li>
<li>connect 方法：一个函数，绑定 State 到 View</li>
<li>dispatch 方法：一个函数，发送 Action 到 State</li>
</ul>
<p>State 和 View</p>
<p>State 是储存数据的地方，收到 Action 以后，会更新数据。</p>
<p>View 就是 React 组件构成的 UI 层，从 State 取数据后，渲染成 HTML 代码。只要 State 有变化，View 就会自动更新。</p>
<p>Action</p>
<p>Action 是用来描述 UI 层事件的一个对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;click-submit-button&#x27;</span>,</span><br><span class="line">  <span class="attr">payload</span>: <span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">data</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>connect 方法</p>
<p>connect 是一个函数，绑定 State 到 View。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&quot;dva&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mapStateToProps</span>(<span class="params">state</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">todos</span>: state.<span class="property">todos</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">connect</span>(mapStateToProps)(<span class="title class_">App</span>);</span><br></pre></td></tr></table></figure>

<p>connect 方 法返回的也是一个 React 组件，通常称为容器组件。因为它是原始 UI 组件的容器，即在外面包了一层 State。</p>
<p>connect 方法传入的第一个参数是 mapStateToProps 函数，mapStateToProps 函数会返回一个对象，用于建立 State 到 Props 的映射关系。</p>
<h4 id="dispatch-方法"><a href="#dispatch-方法" class="headerlink" title="dispatch 方法"></a>dispatch 方法</h4><p>dispatch 是一个函数方法，用来将 Action 发送给 State。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">dispatch</span>(&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;click-submit-button&quot;</span>,</span><br><span class="line">  <span class="attr">payload</span>: <span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">data</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>dispatch 方法从哪里来？被 connect 的 Component 会自动在 props 中拥有 dispatch 方法。</p>
<blockquote>
<p>connect 的数据从哪里来?</p>
</blockquote>
<p>dva 应用的最简结构（带 model)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建应用</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">dva</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册 Model</span></span><br><span class="line">app.<span class="title function_">model</span>(&#123;</span><br><span class="line">  <span class="attr">namespace</span>: <span class="string">&quot;count&quot;</span>,</span><br><span class="line">  <span class="attr">state</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">reducers</span>: &#123;</span><br><span class="line">    <span class="title function_">add</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> state + <span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">effects</span>: &#123;</span><br><span class="line">    *<span class="title function_">addAfter1Second</span>(<span class="params">action, &#123; call, put &#125;</span>) &#123;</span><br><span class="line">      <span class="keyword">yield</span> <span class="title function_">call</span>(delay, <span class="number">1000</span>);</span><br><span class="line">      <span class="keyword">yield</span> <span class="title function_">put</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;add&quot;</span> &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册视图</span></span><br><span class="line">app.<span class="title function_">router</span>(<span class="function">() =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">ConnectedApp</span> /&gt;</span></span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动应用</span></span><br><span class="line">app.<span class="title function_">start</span>(<span class="string">&quot;#root&quot;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="数据流图-1-数据流图-2"><a href="#数据流图-1-数据流图-2" class="headerlink" title="数据流图 1 &amp; 数据流图 2"></a>数据流图 1 &amp; 数据流图 2</h4><p><img src="https://www.daykalif.com/blog_img/shujuliu3.jpeg" alt="daykalif"></p>
<p>app.model</p>
<p>dva 提供 app.model 这个对象，所有的应用逻辑都定义在它上面。具有消息中心、状态保存、定义应用逻辑等功能。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="title function_">dva</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增这一行</span></span><br><span class="line">app.<span class="title function_">model</span>(&#123; <span class="regexp">/\*\*/</span> &#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">router</span>(<span class="function">() =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>);</span><br><span class="line">app.<span class="title function_">start</span>(<span class="string">&#x27;#root&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>Model 对象的例子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">namespace</span>: <span class="string">&#x27;count&#x27;</span>,</span><br><span class="line">  <span class="attr">state</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">reducers</span>: &#123;</span><br><span class="line">  <span class="title function_">add</span>(<span class="params">state</span>) &#123; <span class="keyword">return</span> state + <span class="number">1</span> &#125;,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">effects</span>: &#123;</span><br><span class="line">  *<span class="title function_">addAfter1Second</span>(<span class="params">action, &#123; call, put &#125;</span>) &#123;</span><br><span class="line">      <span class="keyword">yield</span> <span class="title function_">call</span>(delay, <span class="number">1000</span>);</span><br><span class="line">      <span class="keyword">yield</span> <span class="title function_">put</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;add&#x27;</span> &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Model-对象的属性"><a href="#Model-对象的属性" class="headerlink" title="Model 对象的属性"></a>Model 对象的属性</h3><ul>
<li>namespace: 当前 Model 的名称。整个应用的 State，由多个小的 Model 的 State 以 namespace 为 key 合成</li>
<li>state: 该 Model 当前的状态。数据保存在这里，直接决定了视图层的输出</li>
<li>reducer: Action 处理器，处理同步动作，用来算出最新的 State</li>
<li>effects：Action 处理器，处理异步动作</li>
</ul>
<h4 id="Reducer"><a href="#Reducer" class="headerlink" title="Reducer"></a>Reducer</h4><p>Reducer 是 Action 处理器，用来处理同步操作，可以看做是 state 的计算器。它的作用是根据 Action，从上一个 State 算出当前 State。</p>
<p>一些例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// count +1</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">state</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> state + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 往 [] 里添加一个新 todo</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addTodo</span>(<span class="params">state, action</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> [...state, action.<span class="property">payload</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 往 &#123; todos: [], loading: true &#125; 里添加一个新 todo，并标记 loading 为 false</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addTodo</span>(<span class="params">state, action</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...state,</span><br><span class="line">    <span class="attr">todos</span>: state.<span class="property">todos</span>.<span class="title function_">concat</span>(action.<span class="property">payload</span>),</span><br><span class="line">    <span class="attr">loading</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Effect"><a href="#Effect" class="headerlink" title="Effect"></a>Effect</h4><p>Action 处理器，处理异步动作，基于 Redux-saga 实现。Effect 指的是副作用。根据函数式编程，计算以外的操作都属于 Effect，典型的就是 I&#x2F;O 操作、数据库读写。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> \*<span class="title function_">addAfter1Second</span>(<span class="params">action, &#123; put, call &#125;</span>) &#123;</span><br><span class="line"><span class="keyword">yield</span> <span class="title function_">call</span>(delay, <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">yield</span> <span class="title function_">put</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;add&#x27;</span> &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Generator-函数"><a href="#Generator-函数" class="headerlink" title="Generator 函数"></a>Generator 函数</h4><p>Effect 是一个 Generator 函数，内部使用 yield 关键字，标识每一步的操作（不管是异步或同步）。</p>
<h4 id="call-和-put"><a href="#call-和-put" class="headerlink" title="call 和 put"></a>call 和 put</h4><p>dva 提供多个 effect 函数内部的处理函数，比较常用的是 call 和 put。</p>
<ul>
<li>call：执行异步函数</li>
<li>put：发出一个 Action，类似于 dispatch</li>
</ul>
<h3 id="dva-最小示例-count-count-–"><a href="#dva-最小示例-count-count-–" class="headerlink" title="dva 最小示例:count ++,count –"></a>dva 最小示例:count ++,count –</h3><blockquote>
<p><a href="https://riddle.alibaba-inc.com/riddles/c7c1afab">https://riddle.alibaba-inc.com/riddles/c7c1afab</a></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> dva, &#123; connect &#125; <span class="keyword">from</span> <span class="string">&#x27;dva&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Router</span>, <span class="title class_">Route</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;dva/router&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用初始化</span></span><br><span class="line"><span class="comment">// app 就代表前端应用</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">dva</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立 Model</span></span><br><span class="line">app.<span class="title function_">model</span>(&#123;</span><br><span class="line"><span class="comment">// 一个应用只有一个总的 Model，但可以分成多个子 Model</span></span><br><span class="line"><span class="comment">// namespace 是子 Model 的名字</span></span><br><span class="line"><span class="attr">namespace</span>: <span class="string">&#x27;counter&#x27;</span>,</span><br><span class="line"><span class="comment">// 应用的内部状态</span></span><br><span class="line"><span class="attr">state</span>: &#123;<span class="attr">num</span>: <span class="number">0</span>&#125;,</span><br><span class="line"><span class="comment">// 同步 action 处理器</span></span><br><span class="line"><span class="comment">// 方法名就是 action 的名字</span></span><br><span class="line"><span class="attr">reducers</span>: &#123;</span><br><span class="line"><span class="title function_">add</span>(<span class="params">counterState</span>) &#123; <span class="keyword">return</span> &#123;<span class="attr">num</span>: (counterState.<span class="property">num</span> + <span class="number">1</span>)&#125;; &#125;,</span><br><span class="line"><span class="title function_">minus</span>(<span class="params">counterState</span>) &#123; <span class="keyword">return</span> &#123;<span class="attr">num</span>: (counterState.<span class="property">num</span> - <span class="number">1</span>)&#125;; &#125;,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 异步 action 处理器</span></span><br><span class="line"><span class="comment">// 所有方法都是 Generator 函数</span></span><br><span class="line"><span class="comment">// 本例没有用到</span></span><br><span class="line"><span class="attr">effects</span>: &#123;</span><br><span class="line"> \*<span class="title function_">add</span>(<span class="params">action, &#123; put, call &#125;</span>) &#123;</span><br><span class="line"><span class="keyword">yield</span> <span class="title function_">call</span>(delay, <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">yield</span> <span class="title function_">put</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;minus&#x27;</span> &#125;);</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 Model 的 state 绑定到 View</span></span><br><span class="line"><span class="comment">// connect(state =&gt; props)(view)</span></span><br><span class="line"><span class="keyword">const</span> view = <span class="title function_">connect</span>(</span><br><span class="line"><span class="function">(<span class="params">state</span>) =&gt;</span> (&#123; <span class="attr">num</span>: state.<span class="property">counter</span>.<span class="property">num</span> &#125;)</span><br><span class="line">)(<span class="keyword">function</span> (<span class="params">props</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123; props.num &#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">key</span>=<span class="string">&quot;add&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">() =&gt;</span> &#123; props.dispatch(&#123; type: &#x27;counter/add&#x27; &#125;); &#125;&#125; &gt;+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">key</span>=<span class="string">&quot;minus&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">() =&gt;</span> &#123; props.dispatch(&#123; type: &#x27;counter/minus&#x27; &#125;); &#125;&#125; &gt;-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由</span></span><br><span class="line"><span class="comment">// URL 不带有参数时，加载 view 组件</span></span><br><span class="line">app.<span class="title function_">router</span>(<span class="function">(<span class="params">&#123; history &#125;</span>) =&gt;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Router</span> <span class="attr">history</span>=<span class="string">&#123;history&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">component</span>=<span class="string">&#123;view&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动应用</span></span><br><span class="line">app.<span class="title function_">start</span>(<span class="string">&#x27;#mountNode&#x27;</span>);</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>JSON.parse &amp; JSON.stringify</title>
    <url>/2020/02/19/JS/JSON-parse-JSON-stringify/</url>
    <content><![CDATA[<h4 id="妙用-JSON-stringify，区分-JSON-parse-和-JSON-stringify-的区别，论辩-toString-与-JSON-stringify-的异同点"><a href="#妙用-JSON-stringify，区分-JSON-parse-和-JSON-stringify-的区别，论辩-toString-与-JSON-stringify-的异同点" class="headerlink" title="妙用 JSON.stringify，区分 JSON.parse 和 JSON.stringify 的区别，论辩 toString 与 JSON.stringify 的异同点"></a>妙用 JSON.stringify，区分 JSON.parse 和 JSON.stringify 的区别，论辩 toString 与 JSON.stringify 的异同点</h4><h5 id="一-JSON-stringify-和-JSON-parse-的区别"><a href="#一-JSON-stringify-和-JSON-parse-的区别" class="headerlink" title="一.JSON.stringify()和 JSON.parse()的区别"></a>一.JSON.stringify()和 JSON.parse()的区别</h5><p>JSON.stringify()是将 JavaScript 对象转变成 JSON 字符串，JSON.parse()是将 JSON 字符串转变成一个对象，前者在数据进行本地缓存时用得最多，在拿数据时调用后者即可（但是需要只有 JSON 字符串才能进行转换）；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(a));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">toString</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(a); <span class="comment">//&#x27;[1,2,3]&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(b)); <span class="comment">// [1,2,3]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b2 = a.<span class="title function_">toString</span>(); <span class="comment">//&#x27;1,2,3&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(b2)); <span class="comment">//underfined:toString()得到的字符串并非JSON字符串</span></span><br></pre></td></tr></table></figure>

<h5 id="二-JSON-stringify-与-toString-的区别"><a href="#二-JSON-stringify-与-toString-的区别" class="headerlink" title="二.JSON.stringify 与 toString()的区别"></a>二.JSON.stringify 与 toString()的区别</h5><p>1.二者虽然都可以将数据转换成字符串，但二者所针对的受众目标并不相同。<br>前者不仅仅限于数组，更多的是进行对象的转换；<br>后者只针对对数组的转换，并不能对对象如之类的进行转换得到你所想要的值，有着很大的局限性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> c = &#123;</span><br><span class="line">  <span class="attr">time</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>(),</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;mk&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(c)); <span class="comment">//&#123;&quot;time&quot;:1596464272481,&quot;data&quot;:&#123;&quot;id&quot;:1,&quot;name&quot;:&quot;mk&quot;,&quot;age&quot;:20&#125;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c.<span class="title function_">toString</span>()); <span class="comment">//[object Object]</span></span><br></pre></td></tr></table></figure>

<p>2.JSON.stringify()将目标值转成 JSON 类型的字符串，toString()只是普通类型的字符串，如果在实际拿本地缓存中的数据时，如果调用 JSON.parse()来转换对象时，<br>如果不是 JSON 类型的字符串的话会报错的。</p>
<h5 id="三-JSON-stringify-的妙用"><a href="#三-JSON-stringify-的妙用" class="headerlink" title="三.JSON.stringify()的妙用"></a>三.JSON.stringify()的妙用</h5><p>1.利用 localStorage&#x2F;sessionStorage 来本地存储数据：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  <span class="attr">time</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>(),</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;mk&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">19</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;mk&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(a));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;mk&quot;</span>)));</span><br></pre></td></tr></table></figure>

<p>2.实现对象的深拷贝（出于安全性考虑）<br>在实际项目开发时，常需要对源数据进行任意操作，如果怕会影响到源数据，深拷贝倒是一种不错的选择</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]；</span><br><span class="line"><span class="keyword">let</span> b = &#123;</span><br><span class="line">    <span class="attr">time</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>(),</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;mk&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> b = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(b));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d); <span class="comment">//&#123; time: 1596465414379, data: &#123; id: 1, name: &#x27;mk&#x27;, age: 20 &#125; &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(a)));<span class="comment">//[1 , 2 , 3 ]</span></span><br></pre></td></tr></table></figure>

<p>转载文档：<br><a href="https://www.cnblogs.com/liangye/p/13430428.html">https://www.cnblogs.com/liangye/p/13430428.html</a></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JS创建对象、函数和数组</title>
    <url>/2020/02/19/JS/JS%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E3%80%81%E5%87%BD%E6%95%B0%E5%92%8C%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h4 id="一、JS-创建对象"><a href="#一、JS-创建对象" class="headerlink" title="一、JS 创建对象"></a>一、JS 创建对象</h4><h5 id="1-简单对象的创建-使用对象字面量的方式-创建一个对象（最简单，好理解，推荐使用"><a href="#1-简单对象的创建-使用对象字面量的方式-创建一个对象（最简单，好理解，推荐使用" class="headerlink" title="1. 简单对象的创建 使用对象字面量的方式{} 创建一个对象（最简单，好理解，推荐使用)"></a>1. 简单对象的创建 使用对象字面量的方式{} 创建一个对象（最简单，好理解，推荐使用)</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Cat</span> = &#123;&#125;; <span class="comment">//JSON</span></span><br><span class="line"><span class="title class_">Cat</span>.<span class="property">name</span> = <span class="string">&quot;kity&quot;</span>; <span class="comment">//添加属性并赋值</span></span><br><span class="line"><span class="title class_">Cat</span>.<span class="property">age</span> = <span class="number">2</span>;</span><br><span class="line"><span class="title class_">Cat</span>.<span class="property">sayHello</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;hello &quot;</span> + <span class="title class_">Cat</span>.<span class="property">name</span> + <span class="string">&quot;,今年&quot;</span> + <span class="title class_">Cat</span>[<span class="string">&quot;age&quot;</span>] + <span class="string">&quot;岁了&quot;</span>); <span class="comment">//可以使用“.”的方式访问属性，也可以使用HashMap的方式访问</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Cat</span>.<span class="title function_">sayHello</span>(); <span class="comment">//调用对象的（方法）函数</span></span><br></pre></td></tr></table></figure>

<h5 id="2-用-function-函数-来模拟-class-无参构造函数"><a href="#2-用-function-函数-来模拟-class-无参构造函数" class="headerlink" title="2.用 function(函数)来模拟 class (无参构造函数)"></a>2.用 function(函数)来模拟 class (无参构造函数)</h5><h6 id="2-1-创建一个对象，相当于-new-一个类的实例"><a href="#2-1-创建一个对象，相当于-new-一个类的实例" class="headerlink" title="2.1 创建一个对象，相当于 new 一个类的实例"></a>2.1 创建一个对象，相当于 new 一个类的实例</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> personOne = <span class="keyword">new</span> <span class="title class_">Person</span>(); <span class="comment">//定义一个function，如果有new关键字去&quot;实例化&quot;,那么该function可以看作是一个类</span></span><br><span class="line">personOne.<span class="property">name</span> = <span class="string">&quot;dylan&quot;</span>;</span><br><span class="line">personOne.<span class="property">hobby</span> = <span class="string">&quot;coding&quot;</span>;</span><br><span class="line">personOne.<span class="property">work</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(personOne.<span class="property">name</span> + <span class="string">&quot; is coding now...&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">personOne.<span class="title function_">work</span>();</span><br></pre></td></tr></table></figure>

<h6 id="2-2-可以使用有参构造函数来实现，这样定义更方便，扩展性更强（推荐使用）"><a href="#2-2-可以使用有参构造函数来实现，这样定义更方便，扩展性更强（推荐使用）" class="headerlink" title="2.2 可以使用有参构造函数来实现，这样定义更方便，扩展性更强（推荐使用）"></a>2.2 可以使用有参构造函数来实现，这样定义更方便，扩展性更强（推荐使用）</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Pet</span>(<span class="params">name, age, hobby</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name; <span class="comment">//this作用域：当前对象</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">hobby</span> = hobby;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">eat</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;我叫&quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;,我喜欢&quot;</span> + <span class="variable language_">this</span>.<span class="property">hobby</span> + <span class="string">&quot;,也是个吃货&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> maidou = <span class="keyword">new</span> <span class="title class_">Pet</span>(<span class="string">&quot;麦兜&quot;</span>, <span class="number">5</span>, <span class="string">&quot;睡觉&quot;</span>); <span class="comment">//实例化/创建对象</span></span><br><span class="line"></span><br><span class="line">maidou.<span class="title function_">eat</span>(); <span class="comment">//调用eat方法(函数)</span></span><br></pre></td></tr></table></figure>

<h5 id="3-使用工厂方式来创建（Object-关键字）"><a href="#3-使用工厂方式来创建（Object-关键字）" class="headerlink" title="3.使用工厂方式来创建（Object 关键字）"></a>3.使用工厂方式来创建（Object 关键字）</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> wcDog = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">wcDog.<span class="property">name</span> = <span class="string">&quot;旺财&quot;</span>;</span><br><span class="line">wcDog.<span class="property">age</span> = <span class="number">3</span>;</span><br><span class="line">wcDog.<span class="property">work</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;我是&quot;</span> + wcDog.<span class="property">name</span> + <span class="string">&quot;,汪汪汪......&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">wcDog.<span class="title function_">work</span>();</span><br></pre></td></tr></table></figure>

<h5 id="4-使用原型对象的方式-prototype-关键字"><a href="#4-使用原型对象的方式-prototype-关键字" class="headerlink" title="4.使用原型对象的方式 prototype 关键字"></a>4.使用原型对象的方式 prototype 关键字</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Dog</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&quot;旺财&quot;</span>;</span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eat</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;是个吃货&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> wangcai = <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">wangcai.<span class="title function_">eat</span>();</span><br></pre></td></tr></table></figure>

<h5 id="5-混合模式-原型和构造函数"><a href="#5-混合模式-原型和构造函数" class="headerlink" title="5.混合模式(原型和构造函数)"></a>5.混合模式(原型和构造函数)</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Car</span>(<span class="params">name, price</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Car</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sell</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;我是&quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;，我现在卖&quot;</span> + <span class="variable language_">this</span>.<span class="property">price</span> + <span class="string">&quot;万元&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> camry = <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;凯美瑞&quot;</span>, <span class="number">27</span>);</span><br><span class="line">camry.<span class="title function_">sell</span>();</span><br></pre></td></tr></table></figure>

<h5 id="6-动态原型的方式-可以看作是混合模式的一种特例"><a href="#6-动态原型的方式-可以看作是混合模式的一种特例" class="headerlink" title="6.动态原型的方式(可以看作是混合模式的一种特例)"></a>6.动态原型的方式(可以看作是混合模式的一种特例)</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Car</span>(<span class="params">name, price</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">Car</span>.<span class="property">sell</span> == <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">    <span class="title class_">Car</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sell</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&quot;我是&quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;，我现在卖&quot;</span> + <span class="variable language_">this</span>.<span class="property">price</span> + <span class="string">&quot;万元&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title class_">Car</span>.<span class="property">sell</span> = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> camry = <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;凯美瑞&quot;</span>, <span class="number">27</span>);</span><br><span class="line">camry.<span class="title function_">sell</span>();</span><br></pre></td></tr></table></figure>

<h4 id="二、JS-创建函数"><a href="#二、JS-创建函数" class="headerlink" title="二、JS 创建函数"></a>二、JS 创建函数</h4><p>⑴ 函数也是一个对象</p>
<p>⑵ 函数中可以封装一些功能（代码），在需要时可以执行这些功能（代码）</p>
<p>⑶ 函数中可以保存一些代码在需要的时候调用</p>
<p>⑷ 使用 typeof 检查一个函数对象时，会返回 function</p>
<p>⑸ 创建函数的三种方式：</p>
<p>① 构造函数</p>
<p>② 函数声明</p>
<p>③ 函数表达式</p>
<p>⑹ 示例：创建一个函数对象，用 typeof 检查</p>
<h5 id="1-函数声明"><a href="#1-函数声明" class="headerlink" title="1.函数声明"></a>1.函数声明</h5><p>⑴ 使用 函数声明 来创建一个函数</p>
<p>⑵ 语法：function 函数名（[形参 1，形参 2. . .形参 N]）{<br>语句. . .<br>}</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是函数声明创建的函数&quot;</span>);</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;哈哈哈哈&quot;</span>);</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;嘻嘻嘻嘻&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用函数</span></span><br><span class="line"><span class="title function_">fun2</span>();</span><br></pre></td></tr></table></figure>

<h5 id="2-函数表达式，又叫函数字面量"><a href="#2-函数表达式，又叫函数字面量" class="headerlink" title="2.函数表达式，又叫函数字面量"></a>2.函数表达式，又叫函数字面量</h5><p>⑴ 使用 函数表达式 来创建一个函数</p>
<p>⑵ 语法：var 函数名 &#x3D; function([形参 1，形参 2. . .形参 N]){<br>语句. . .<br>}</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sum2 = <span class="keyword">function</span> (<span class="params">n1, n2</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是函数表达式&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> n1 + n2;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//调用函数</span></span><br><span class="line"><span class="title function_">sum2</span>();</span><br></pre></td></tr></table></figure>

<p><strong>两者的区别：</strong> 解析器会先读取函数声明，并使其在执行任何代码之前可以访问；而函数表达式则必须等到解析器执行到它所在的代码行才会真正被解释执行。</p>
<p>自执行函数严格来说也叫函数表达式，它主要用于创建一个新的作用域，在此作用域内声明的变量，不会和其它作用域内的变量冲突或混淆，大多是以匿名函数方式存在，且立即自动执行。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params">n1, n2</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(n1 + n2);</span><br><span class="line">&#125;)(<span class="number">1</span>, <span class="number">3</span>); <span class="comment">//4</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//可用来传参</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x + y);</span><br><span class="line">&#125;)(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//带返回值</span></span><br><span class="line"><span class="keyword">var</span> sum = (<span class="keyword">function</span> (<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;)(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum);</span><br><span class="line"></span><br><span class="line">~(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&quot;~&quot;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">!(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&quot;!&quot;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&quot;;&quot;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&quot;-&quot;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">//逗号运算符</span></span><br><span class="line"><span class="number">1</span>,</span><br><span class="line">  (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">  &#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">//异或</span></span><br><span class="line"><span class="number">1</span> ^</span><br><span class="line">  (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&quot;^&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">  &#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">//比较运算符</span></span><br><span class="line"><span class="number">1</span> &gt;</span><br><span class="line">  (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&quot;&gt;&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">  &#125;)();</span><br><span class="line"></span><br><span class="line">~+-!(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&quot;~+-!&quot;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">~!(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&quot;~!&quot;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&quot;call&quot;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">&#125;).<span class="title function_">call</span>();</span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&quot;apply&quot;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">&#125;).<span class="title function_">apply</span>();</span><br></pre></td></tr></table></figure>

<h5 id="3-函数构造法，参数必须加引号"><a href="#3-函数构造法，参数必须加引号" class="headerlink" title="3.函数构造法，参数必须加引号"></a>3.函数构造法，参数必须加引号</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sum3 = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&quot;n1&quot;</span>, <span class="string">&quot;n2&quot;</span>, <span class="string">&quot;return n1+n2&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum3</span>(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">//5</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个函数对象</span></span><br><span class="line"><span class="comment">//可以将要封装的代码以字符串的形式传递给构造函数</span></span><br><span class="line"><span class="keyword">var</span> fun = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&quot;console.log(&#x27;hello 我是构造函数&#x27;);&quot;</span>);</span><br><span class="line"><span class="comment">//封装到函数中的代码不会立即执行</span></span><br><span class="line"><span class="comment">//函数中的代码会在函数调用的时候执行</span></span><br><span class="line"><span class="comment">//调用函数  语法：函数对象（）</span></span><br><span class="line"><span class="comment">//当调用函数时，函数中封装的代码会按照顺序执行</span></span><br><span class="line"><span class="title function_">fun</span>();</span><br><span class="line"><span class="title function_">fun</span>();</span><br><span class="line"><span class="title function_">fun</span>();</span><br><span class="line"><span class="comment">// hello 这是我的第一个函数</span></span><br><span class="line"><span class="comment">// hello 这是我的第一个函数</span></span><br><span class="line"><span class="comment">// hello 这是我的第一个函数</span></span><br></pre></td></tr></table></figure>

<p>从技术角度讲，这是一个函数表达式。一般不推荐用这种方法定义函数，因为这种语法会导致解析两次代码（第一次是解析常规 ECMAScript 代码，第二次是解析传入构造函数中的字符串），从而影响性能。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;daykalif&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&quot;return name&quot;</span>); <span class="comment">//不能获取局部变量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fun</span>()()); <span class="comment">//daykalif</span></span><br></pre></td></tr></table></figure>

<p>Function()构造函数每次执行时都会解析函数主体，并创建一个新的函数对象，所以当在一个循环或频繁执行的函数中调用 Function()构造函数效率是非常低的。而函数字面量却不是每次遇到都会重新编译的，用 Function()构造函数创建一个函数时并不遵循典型的作用域，它一直把它当作是顶级函数来执行。</p>
<h4 id="三、JS-创建数组"><a href="#三、JS-创建数组" class="headerlink" title="三、JS 创建数组"></a>三、JS 创建数组</h4><h5 id="1-常规方式-创建数组并给数组元素赋值"><a href="#1-常规方式-创建数组并给数组元素赋值" class="headerlink" title="1.常规方式 - 创建数组并给数组元素赋值"></a>1.常规方式 - 创建数组并给数组元素赋值</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myCars = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"></span><br><span class="line">myCars[<span class="number">0</span>] = <span class="string">&quot;Saab&quot;</span>;</span><br><span class="line"></span><br><span class="line">myCars[<span class="number">1</span>] = <span class="string">&quot;Volvo&quot;</span>;</span><br><span class="line"></span><br><span class="line">myCars[<span class="number">2</span>] = <span class="string">&quot;BMW&quot;</span>;</span><br></pre></td></tr></table></figure>

<h5 id="2-简洁方式-直接实例化"><a href="#2-简洁方式-直接实例化" class="headerlink" title="2.简洁方式 - 直接实例化"></a>2.简洁方式 - 直接实例化</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myCars = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&quot;Saab&quot;</span>, <span class="string">&quot;Volvo&quot;</span>, <span class="string">&quot;BMW&quot;</span>);</span><br></pre></td></tr></table></figure>

<h5 id="3-字面-隐式创建"><a href="#3-字面-隐式创建" class="headerlink" title="3.字面 - 隐式创建"></a>3.字面 - 隐式创建</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myCars = [<span class="string">&quot;Saab&quot;</span>, <span class="string">&quot;Volvo&quot;</span>, <span class="string">&quot;BMW&quot;</span>];</span><br></pre></td></tr></table></figure>

<blockquote>
<p>数组的属性</p>
</blockquote>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_constructor_array.asp">constructor</a></td>
<td align="left">返回对创建此对象的数组函数的引用。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_length_array.asp">length</a></td>
<td align="left">设置或返回数组中元素的数目。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_prototype_array.asp">prototype</a></td>
<td align="left">使您有能力向对象添加属性和方法。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JS本地存储方法</title>
    <url>/2020/01/24/JS/JS%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h4 id="javaScript-有三种数据存储方式"><a href="#javaScript-有三种数据存储方式" class="headerlink" title="javaScript 有三种数据存储方式"></a>javaScript 有三种数据存储方式</h4><h5 id="一、使用缓存的好处"><a href="#一、使用缓存的好处" class="headerlink" title="一、使用缓存的好处"></a>一、使用缓存的好处</h5><p>(1).当页面渲染的数据过多时，为了减轻对内存的占用，对初次接收且会用到的数据进行本地缓存，是有着大好处的.</p>
<p>(2).受网速等各种因素的影响，当渲染数据过多时，若存在频繁的切换页面，用户体验效果不佳。</p>
<h5 id="二、常见的本地缓存方式"><a href="#二、常见的本地缓存方式" class="headerlink" title="二、常见的本地缓存方式"></a>二、常见的本地缓存方式</h5><p>1、sessionStorage<br>临时的会话存储，只要当前的会话窗口未关闭，存储的信息就不会丢失，即便刷新了页面或者在编辑器中更改了代码，存储的会话信息也不会丢失。</p>
<p>用法:详情可见另一随笔 <code>JSON.parse &amp; JSON.stringify</code></p>
<p>2、localStorage</p>
<p>是一种如果你不主动去清除，会一直将数据存储在客户端的储存方式，即使关闭了浏览器，下次打开的时候仍然可以看到之前存储的未主动清除的数据（即便是杀毒软件或者浏览器自带的清除功能，也不能将 localStorage 存储的数据清除掉）.</p>
<p>用法：和 sessionStorgae 一致</p>
<p>3、cookie</p>
<p>cookie 属于较老且最常见用的最多的技术了，cookie 的优点很多，用起来也比较方便</p>
<ul>
<li>在 js 的脚本中，cookie 实际上是 document 的一个字符属性，当你读取 cookie 的值时，得到的是一个字符串，里面的是当前 web 存放的所有的 cookie 的 name,value,除此之外，</li>
<li>每一个 cookie 除了有 name，value，还有其他四个属性：expires 过期时间,path 路径，domain 域以及 secure 安全等。</li>
<li>cookie 中存储的数据，如果没有设置有效期的话，浏览器关闭的时候就会被清空（并非关系选项卡）</li>
<li>cookie 的区分是以域名的方式。</li>
</ul>
<p>缺点：</p>
<ul>
<li>cookie 兼容所有的浏览器，但其存储的数据是有大小限制的，一般同源是 4kb；</li>
<li>cookie 本地存储的数据会被发送到服务器（所以建议在服务器环境下使用 cookie）；</li>
<li>跨域访问问题；浪费带宽等等；</li>
</ul>
<p>cookie 的用法：以键值对的方式来存储数据（key：value 形式）,一个域名下能存储的 cookie 个数是不同的，具体的看浏览器的支持性了</p>
<p>当一个域名下有多个 cookie 时，输出 document.cookie 时输出的是当前域名下的所有 cookie，cookie 之间以分号加空格的形式隔开</p>
<p>存储格式：<br><code>document.cookie=&quot;name=&lt;value&gt;[;expires=&lt;date&gt;][;domain=&lt;domain&gt;][;secrue]&quot;</code></p>
<p>普通的存储数据如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;id=18&quot;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;name=liangye&quot;</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="variable language_">document</span>.<span class="property">cookie</span>); <span class="comment">//id=18; name=liangye 由于没有设置有效期expires,浏览器关闭后会自动来清理cookie（并非关闭标签）</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>js 中如果用 cookie 来存储数据的话，建议是自己写封装好的函数来简化美化下代码。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//封装函数的使用  如果不设置时间的话关闭浏览器时所存储的数据就会过期</span></span><br><span class="line"><span class="comment">//存储cookie 修改cookie也可调用次方法，覆盖</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setCookie</span>(<span class="params">name, value, iTime</span>) &#123;</span><br><span class="line">  <span class="comment">//name是cookie中的名，value是其值，iTime来预定过期的时间（以天为单位）</span></span><br><span class="line">  <span class="keyword">var</span> iDate = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">  iDate.<span class="title function_">setDate</span>(iDate.<span class="title function_">getDate</span>() + iTime); <span class="comment">//以天为单位,存储是需要将Date对象存储为格林威治时间形式的字符串</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">cookie</span> = name + <span class="string">&quot;=&quot;</span> + value + <span class="string">&quot;;expires=&quot;</span> + iDate.<span class="title function_">toGMTString</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取cookie</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getCookie</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="comment">//web中cookie是以分号+空格隔开的</span></span><br><span class="line">  <span class="keyword">var</span> res = <span class="variable language_">document</span>.<span class="property">cookie</span>.<span class="title function_">split</span>(<span class="string">&quot;; &quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; res.<span class="property">length</span>; i++)</span><br><span class="line">    <span class="keyword">if</span> (res[i].<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>)[<span class="number">0</span>] === name) <span class="keyword">return</span> res[i].<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>)[<span class="number">1</span>];</span><br><span class="line">  <span class="comment">//未找到</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//移除cookie 通过设置过期时间 再次打开浏览器会发现过期的cookie已经被清除</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">rmCookie</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="title function_">setCookie</span>(name, <span class="string">&quot;&quot;</span>, -<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="三、cookie、localStorage、sessionStorage-对比"><a href="#三、cookie、localStorage、sessionStorage-对比" class="headerlink" title="三、cookie、localStorage、sessionStorage 对比"></a>三、cookie、localStorage、sessionStorage 对比</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例: <span class="variable language_">localStorage</span>.<span class="property">a</span> = <span class="number">3</span>; <span class="comment">//设置a为&quot;3&quot;</span></span><br><span class="line"><span class="variable language_">localStorage</span>[<span class="string">&quot;a&quot;</span>] = <span class="string">&quot;sfsf&quot;</span>; <span class="comment">//设置a为&quot;sfsf&quot;，覆盖上面的值</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;isaac&quot;</span>); <span class="comment">//设置b为&quot;isaac&quot;</span></span><br><span class="line"><span class="keyword">var</span> a1 = <span class="variable language_">localStorage</span>[<span class="string">&quot;a&quot;</span>]; <span class="comment">//获取a的值</span></span><br><span class="line"><span class="keyword">var</span> a2 = <span class="variable language_">localStorage</span>.<span class="property">a</span>; <span class="comment">//获取a的值</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;b&quot;</span>); <span class="comment">//获取b的值</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&quot;c&quot;</span>); <span class="comment">//清除c的值</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>相同点：</p>
</blockquote>
<p>都保存在浏览器端</p>
<blockquote>
<p>不同点：</p>
</blockquote>
<p>1.传递方式不同</p>
<ul>
<li><p>cookie 数据始终在同源的 http 请求中携带（即使不需要），即 cookie 在浏览器和服务器间来回传递。</p>
</li>
<li><p>sessionStorage 和 localStorage 不会自动把数据发给服务器，仅在本地保存。</p>
<p>2.数据大小不同</p>
</li>
<li><p>cookie 数据还有路径（path）的概念，可以限制 cookie 只属于某个路径下。</p>
</li>
<li><p>存储大小限制也不同，cookie 数据不能超过 4k，同时因为每次 http 请求都会携带 cookie，所以 cookie 只适合保存很小的数据，如会话标识。</p>
</li>
<li><p>sessionStorage 和 localStorage 虽然也有存储大小的限制，但比 cookie 大得多，可以达到 5M 或更大。</p>
<p>3.数据有效期不同</p>
</li>
<li><p>sessionStorage：仅在当前浏览器窗口关闭前有效，自然也就不可能持久保持；</p>
</li>
<li><p>localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；（如果你不手动去删除的话）</p>
</li>
<li><p>cookie 只在设置的 cookie 过期时间之前一直有效，即使窗口或浏览器关闭。</p>
<p>4.作用域不同</p>
</li>
<li><p>sessionStorage 不在不同的浏览器窗口中共享，即使是同一个页面；</p>
</li>
<li><p>localStorage 在所有同源窗口中都是共享的；</p>
</li>
<li><p>cookie 也是在所有同源窗口中都是共享的。</p>
</li>
<li><p>Web Storage 支持事件通知机制，可以将数据更新的通知发送给监听者。</p>
</li>
<li><p>Web Storage 的 api 接口使用更方便。</p>
<p>5.⚠️ 注意点</p>
</li>
<li><p>一些浏览器处于安全的角度可能会禁用 cookie,但无法禁用 localStorage</p>
</li>
<li><p>cookie 兼容所有的浏览器（本地 cookie 谷歌不支持），storage 不支持 IE6~8;</p>
</li>
</ul>
<p>在使用本地 cookie 缓存时发现 chrome 竟然不支持 js 本地操作 cookie，其他市面上的主流浏览器基本都支持，因此在使用 cookie 前，先确认浏览器支不支持 cookie 先！！！</p>
<blockquote>
<p>检查当前浏览器是否支持或者禁用了 cookie，可用以下 js 代码：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dt = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">dt.<span class="title function_">setSeconds</span>(dt.<span class="title function_">getSeconds</span>() + <span class="number">60</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;cookietest=1; expires=&quot;</span> + dt.<span class="title function_">toGMTString</span>();</span><br><span class="line"><span class="keyword">var</span> cookiesEnabled = <span class="variable language_">document</span>.<span class="property">cookie</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;cookietest=&quot;</span>) != -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (!cookiesEnabled) &#123;</span><br><span class="line">  <span class="comment">//没有启用cookie</span></span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;没有启用cookie &quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">//已经启用cookie</span></span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;已经启用cookie &quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>实际项目中本地缓存都能来存储什么？</p>
</blockquote>
<p>cookie：记住用户名密码以便下次自动登录等等：当用户登录成功后，存储用户的部分信息，便可以在项目的任何页面知道当前的用户是谁了。<br>storage：存储一些不容易过期的数据（如从 api 接口中接收的用于渲染页面的数据），在存储时一般加入一个存储时间(time:Date.now()),以便在下次<br>刷新页面的时候判断存储的事件有没有超过预定的时间；也可以用来存储一些页面的源代码，比如 css 样式或者 html 等等（有必要的时候需要来结合前台的数据）；</p>
<p>参考文档：<br><a href="https://www.cnblogs.com/wwmm1996/p/10981958.html">https://www.cnblogs.com/wwmm1996/p/10981958.html</a><br><a href="https://www.cnblogs.com/liangye/p/13437107.html">https://www.cnblogs.com/liangye/p/13437107.html</a></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JS继承的六种方法</title>
    <url>/2021/01/28/JS/JS%E7%BB%A7%E6%89%BF%E7%9A%84%E5%85%AD%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="类的三大特性"><a href="#类的三大特性" class="headerlink" title="类的三大特性"></a>类的三大特性</h2><p>封装：低耦合高内聚<br>继承：子类继承父类中的属性和方法<br>多态：重载和重写</p>
<ul>
<li>重载：方法名相同，形参个数或者类型不一样（JS 中不存在真正意义上的重载，JS 中重载指的是同一个方法，根据传参不同，实现出不同的效果）</li>
<li>重写：在类的继承当中，子类可以重写父类中的方法</li>
</ul>
<!--
什么是面向对象？
    面向对象是一种编程思想，JS本身就是基于面向对象构建出来的（例如：JS中有很多内置类，像Promise就是ES6中新增的内置类，我们可以基于new Promise来创建一个实例，来管理异步编程，我在项目中，Promise也经常用，自己也研究过它的源码...），我之前看过一点框架源码，我们平时用到vue，react，jquery也是基于面向对象构建出来的，它们都是类，平时开发的时候，都是创建它们的实例来操作的；当然我自己在真实项目中，也封装过一些组件插件(例如：DIALOG、拖拽、轮播图)，也是基于面向对象开发的，这样可以创造不同的实例，来管理私有的属性和公有的方法，很方便...

JS中的面向对象，和其他编程语言还是略微不同的，JS中类和实例是基于原型和原型链机制来处理的；而且JS中关于类的重载、重写、继承也和其他语言不太一样...

-->

<h3 id="js-继承"><a href="#js-继承" class="headerlink" title="js 继承"></a>js 继承</h3><p>$\color{red}{平台1:}$</p>
<h4 id="视频详解："><a href="#视频详解：" class="headerlink" title="视频详解："></a>视频详解：</h4><p>继承：子类继承父类中的属性和方法（目的是让子类的实例能够调取父类中的属性和方法）</p>
<h4 id="SE5-中的继承方式："><a href="#SE5-中的继承方式：" class="headerlink" title="SE5 中的继承方式："></a>SE5 中的继承方式：</h4><h5 id="方案一：原型继承"><a href="#方案一：原型继承" class="headerlink" title="方案一：原型继承"></a>方案一：原型继承</h5><p><img src="https://www.daykalif.com/blog_img/yuanxinglian1.png" alt="原型继承"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 让父类中的属性和方法在子类实例的原型链上 </span></span><br><span class="line"><span class="comment"> CHILD.prototype = new PARENT();</span></span><br><span class="line"><span class="comment"> CHILD.prototype.constructor = CHILD;//保证原型重定向后的完整性</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 特点：</span></span><br><span class="line"><span class="comment"> 1.不像其他语言中的继承一样（其他语言继承一般是拷贝继承，也就是子类继承父类，会把父类中的属性和方法拷贝一份到子类中，供子类的实例调取使用）,</span></span><br><span class="line"><span class="comment"> 它是把父类的原型放到子类实例的原型链上。实例想调取这些方法，是基于__proto__原型链查找机制完成的。</span></span><br><span class="line"><span class="comment"> 2.子类可以重写父类上的方法（这样会导致父类其它的实例也受到影响）</span></span><br><span class="line"><span class="comment"> 3.父类中私有或者公有的属性方法最后都会变为子类中公有的属性和方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">&#125;</span><br><span class="line">A.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getX</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">B</span>(<span class="params">y</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">&#125;</span><br><span class="line">B.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title function_">A</span>(<span class="number">200</span>);</span><br><span class="line">B.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = B;</span><br><span class="line">B.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getY</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">y</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b1 = <span class="keyword">new</span> <span class="title function_">B</span>(<span class="number">100</span>);</span><br><span class="line"><span class="comment">// 当前可执行：</span></span><br><span class="line">b1.<span class="property">y</span>;</span><br><span class="line">b1.<span class="title function_">getY</span>();</span><br><span class="line"><span class="comment">// 继承之后可使用</span></span><br><span class="line">b1.<span class="title function_">getX</span>();</span><br></pre></td></tr></table></figure>

<h5 id="方案二：call-继承"><a href="#方案二：call-继承" class="headerlink" title="方案二：call 继承"></a>方案二：call 继承</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * CALL继承的特点：</span></span><br><span class="line"><span class="comment"> * 在CHILD方法当中，把PARENT当作普通函数执行，让PARENT中的THIS指向CHILD的实例，相当于给CHILD的实例设置了很多私有的属性或者方法</span></span><br><span class="line"><span class="comment"> * 1.只能继承父类私有的属性或者方法（因为是把PARENT当作普通函数执行，和其原型上的属性和方法没有关系）</span></span><br><span class="line"><span class="comment"> * 2.父类私有的变为子类私有的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">&#125;</span><br><span class="line">A.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getX</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">B</span>(<span class="params">y</span>) &#123;</span><br><span class="line">  <span class="comment">// A(200);//=&gt;相当于 window.x=200</span></span><br><span class="line">  A.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="number">200</span>); <span class="comment">//this属于B的实例b1 //=&gt; b1.x = 200;</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">&#125;</span><br><span class="line">B.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getY</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">y</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> b1 = <span class="keyword">new</span> <span class="title function_">B</span>(<span class="number">100</span>);</span><br><span class="line">b1.<span class="property">x</span>;</span><br><span class="line">b1.<span class="property">y</span>;</span><br></pre></td></tr></table></figure>

<h5 id="方案三：寄生组合继承（推荐）"><a href="#方案三：寄生组合继承（推荐）" class="headerlink" title="方案三：寄生组合继承（推荐）"></a>方案三：寄生组合继承（推荐）</h5><p><img src="https://www.daykalif.com/blog_img/jishengzuhejicheng1.png" alt="寄生组合继承"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 寄生组合继承：CALL继承+类似于原型继承</span></span><br><span class="line"><span class="comment"> * 特点：父类私有和公有的分别是子类实例的私有和公有属性和方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">&#125;</span><br><span class="line">A.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getX</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">B</span>(<span class="params">y</span>) &#123;</span><br><span class="line">  A.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="number">200</span>); <span class="comment">//this属于B的实例b1 //=&gt; b1.x = 200;</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">&#125;</span><br><span class="line">B.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(A.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">//Object.create(OBJ);创建一个空对象，让空对象的__proto__指向OBJ</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟Object.create：</span></span><br><span class="line"><span class="comment"> * Object.create = function(obj)&#123;</span></span><br><span class="line"><span class="comment"> *      //let oo = &#123;&#125;;</span></span><br><span class="line"><span class="comment"> *      //oo.__proto__ = obj;     //IE6不可使用__proto__,所以可以改写从下述方式</span></span><br><span class="line"><span class="comment"> *      //return oo;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      function Fn()&#123;&#125;</span></span><br><span class="line"><span class="comment"> *      Fn.prototype = obj;</span></span><br><span class="line"><span class="comment"> *      return new Fn();//创建一个空实例，其原型指向obj</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">B.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = B;</span><br><span class="line">B.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getY</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">y</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> b1 = <span class="keyword">new</span> <span class="title function_">B</span>(<span class="number">100</span>);</span><br><span class="line">b1.<span class="property">x</span>;</span><br><span class="line">b1.<span class="property">y</span>;</span><br></pre></td></tr></table></figure>

<h4 id="SE6-中的继承方式："><a href="#SE6-中的继承方式：" class="headerlink" title="SE6 中的继承方式："></a>SE6 中的继承方式：</h4><h5 id="方案四：extends-继承"><a href="#方案四：extends-继承" class="headerlink" title="方案四：extends 继承"></a>方案四：extends 继承</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ES6中基于CLASS创造出来的类不能当作普通函数执行（因此CALL继承的方式在ES6中就不能这么写了）</span></span><br><span class="line"><span class="comment"> * ES6也不允许重定向原型的指向</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getX</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">A.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">type</span> = <span class="number">100</span>; <span class="comment">//添加原型上公有属性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">y</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getY</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">y</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// B.prototype = Object.create(A.prototype);    //ES6不允许重定向原型的指向</span></span><br><span class="line"><span class="keyword">let</span> b1 = <span class="keyword">new</span> <span class="title function_">B</span>(<span class="number">200</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b1);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//=&gt;ES6中的继承  ==&gt; 原理就是寄生组合方式</span></span><br><span class="line"><span class="comment">// CLASS CHILD extends PARENT&#123;&#125;  ==&gt;相当于  B.prototype.__proto__ = A.prototype</span></span><br><span class="line"><span class="comment">// 实现父类原型上公有的变为子类公有的，父类私有的变为子类私有的</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getX</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">A</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">y</span>) &#123;</span><br><span class="line">    <span class="comment">//如果不写CONSTRUCTOR，浏览器会自己默认创建CONSTRUCTOR(...args)&#123; super(...args) &#125;，如果我们写了，就以我们写的代码为主</span></span><br><span class="line">    <span class="comment">// 子类只要继承父类，可以不写CONSTRUCTOR，一旦写了，则在CONSTRUCTOR中的第一句话必须是SUPER();</span></span><br><span class="line">    <span class="variable language_">super</span>(<span class="number">200</span>); <span class="comment">//super =&gt; 相当于A.call(this,200)  把父类当作普通方法执行，给方法传递参数，让方法中的THIS是子类的实例</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getY</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">y</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b1 = <span class="keyword">new</span> <span class="title function_">B</span>(<span class="number">100</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b1);</span><br></pre></td></tr></table></figure>

<h5 id="extends-应用"><a href="#extends-应用" class="headerlink" title="extends 应用"></a>extends 应用</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Login</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">componentWillMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(); <span class="comment">//React.Component.prototype.setState=...    //this.setState() 是写在React.Component 的公共方法；</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Promise.prototype:then catch finally...</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dialog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Promise</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">then</span>().<span class="title function_">then</span>(); <span class="comment">//this是Dialog的实例</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Utils</span> &#123;</span><br><span class="line">  <span class="title function_">query</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方式1:</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dialog</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Utils</span>().<span class="title function_">query</span>(); <span class="comment">//调用query</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方式2:</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dialog1</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Utils</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">query</span>(); <span class="comment">//调用query</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>$\color{red}{平台2:}$</p>
<h4 id="父类"><a href="#父类" class="headerlink" title="父类"></a>父类</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="comment">//给构造函数添加了参数</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sum</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">num</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="number">10</span>; <span class="comment">//给构造函数添加了原型属性</span></span><br></pre></td></tr></table></figure>

<h5 id="1-原型链继承"><a href="#1-原型链继承" class="headerlink" title="1.原型链继承"></a>1.原型链继承</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Per</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;haha&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Per</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Per</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">age</span>); <span class="comment">//10</span></span><br><span class="line"><span class="comment">// instanceof判断元素是否在另一个元素的原型链上</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1 <span class="keyword">instanceof</span> <span class="title class_">Person</span>); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">重点：让新实例的原型等于父类的实例。</span></span><br><span class="line"><span class="comment">特点：1、实例可继承的属性有：实例的构造函数的属性，父类构造函数属性，父类原型的属性。（新实例不会继承父类实例的属性！）</span></span><br><span class="line"><span class="comment">缺点：1、新实例无法向父类构造函数传参。</span></span><br><span class="line"><span class="comment">　　　2、继承单一。</span></span><br><span class="line"><span class="comment">　　　3、所有新实例都会共享父类实例的属性。（原型上的属性是共享的，一个实例修改了原型属性，另一个实例的原型属性也会被修改！）</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h5 id="2-构造函数继承"><a href="#2-构造函数继承" class="headerlink" title="2.构造函数继承"></a>2.构造函数继承</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Con</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="string">&quot;hehe&quot;</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">12</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> c1 = <span class="keyword">new</span> <span class="title class_">Con</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c1.<span class="property">name</span>); <span class="comment">//hehe</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c1.<span class="property">age</span>); <span class="comment">//12</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c1 <span class="keyword">instanceof</span> <span class="title class_">Person</span>); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">重点：用.call()和.apply()将父类构造函数引入子类函数（在子类函数中做了父类函数的自执行（复制））</span></span><br><span class="line"><span class="comment">　　　　特点：1、只继承了父类构造函数的属性，没有继承父类原型的属性。</span></span><br><span class="line"><span class="comment">　　　　　　　2、解决了原型链继承缺点1、2、3。</span></span><br><span class="line"><span class="comment">　　　　　　　3、可以继承多个构造函数属性（call多个）。</span></span><br><span class="line"><span class="comment">　　　　　　　4、在子实例中可向父实例传参。</span></span><br><span class="line"><span class="comment">　　　　缺点：1、只能继承父类构造函数的属性。</span></span><br><span class="line"><span class="comment">　　　　　　　2、无法实现构造函数的复用。（每次用每次都要重新调用）</span></span><br><span class="line"><span class="comment">　　　　　　　3、每个新实例都有父类构造函数的副本，臃肿。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h5 id="3-组合继承（组合原型链继承和借用构造函数继承）（常用）"><a href="#3-组合继承（组合原型链继承和借用构造函数继承）（常用）" class="headerlink" title="3.组合继承（组合原型链继承和借用构造函数继承）（常用）"></a>3.组合继承（组合原型链继承和借用构造函数继承）（常用）</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">SubType</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name); <span class="comment">//借用构造函数模式</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>(); <span class="comment">//原型链继承</span></span><br><span class="line"><span class="keyword">var</span> sub = <span class="keyword">new</span> <span class="title class_">SubType</span>(<span class="string">&quot;xixi&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sub.<span class="property">name</span>); <span class="comment">//xixi</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sub.<span class="property">age</span>); <span class="comment">//10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">重点：结合了两种模式的优点，传参和复用</span></span><br><span class="line"><span class="comment">　　　　特点：1、可以继承父类原型上的属性，可以传参，可复用。</span></span><br><span class="line"><span class="comment">　　　　　　　2、每个新实例引入的构造函数属性是私有的。</span></span><br><span class="line"><span class="comment">　　　　缺点：调用了两次父类构造函数（耗内存），子类的构造函数会代替原型上的那个父类构造函数。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h5 id="4-原型式继承"><a href="#4-原型式继承" class="headerlink" title="4.原型式继承"></a>4.原型式继承</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先封装一个函数容器，用来输出对象和承载继承的原型</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">content</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  F.<span class="property"><span class="keyword">prototype</span></span> = obj; <span class="comment">//继承了传入的参数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">F</span>(); <span class="comment">//返回函数对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> sup = <span class="keyword">new</span> <span class="title class_">Person</span>(); <span class="comment">//拿到父类的实例</span></span><br><span class="line"><span class="keyword">var</span> sup1 = <span class="title function_">content</span>(sup);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sup1.<span class="property">age</span>); <span class="comment">//10 继承了父类函数的属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">重点：用一个函数包装一个对象，然后返回这个函数的调用，这个函数就变成了个可以随意增添属性的实例或对象。object.create()就是这个原理。</span></span><br><span class="line"><span class="comment">　　　　特点：类似于复制一个对象，用函数来包装。</span></span><br><span class="line"><span class="comment">　　　　缺点：1、所有实例都会继承原型上的属性。</span></span><br><span class="line"><span class="comment">　　　　　　　2、无法实现复用。（新实例属性都是后面添加的）</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h5 id="5-寄生式继承"><a href="#5-寄生式继承" class="headerlink" title="5.寄生式继承"></a>5.寄生式继承</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">content</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  F.<span class="property"><span class="keyword">prototype</span></span> = obj;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">F</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> sup = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="comment">//以上是原型式继承，给原型式继承再套个壳子传递参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">subobject</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> sub = <span class="title function_">content</span>(obj);</span><br><span class="line">  sub.<span class="property">name</span> = <span class="string">&quot;lala&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> sub;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> sup2 = <span class="title function_">subobject</span>(sup);</span><br><span class="line"><span class="comment">// 这个函数经过声明之后就成了可增添属性的对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> subobject); <span class="comment">//function</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> sup2); <span class="comment">//object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sup2.<span class="property">name</span>); <span class="comment">//lala  返回了个sub对象，继承了sub的属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">重点：就是给原型式继承外面套了个壳子。</span></span><br><span class="line"><span class="comment">　　　　优点：没有创建自定义类型，因为只是套了个壳子返回对象（这个），这个函数顺理成章就成了创建的新对象。</span></span><br><span class="line"><span class="comment">　　　　缺点：没用到原型，无法复用。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h5 id="6-寄生组合继承（常用）"><a href="#6-寄生组合继承（常用）" class="headerlink" title="6.寄生组合继承（常用）"></a>6.寄生组合继承（常用）</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 寄生</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">content</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  F.<span class="property"><span class="keyword">prototype</span></span> = obj;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">F</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// content就是F实例的另一种表示法</span></span><br><span class="line"><span class="keyword">var</span> con = <span class="title function_">content</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="comment">// con实例（F实例）的原型继承了父类函数的原型</span></span><br><span class="line"><span class="comment">// 上述更像是原型链继承，只不过只继承了原型的属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 组合</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Sub</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>); <span class="comment">//这个继承了父类构造函数的属性</span></span><br><span class="line">&#125; <span class="comment">//解决了组合式两次调用构造函数属性的缺点</span></span><br><span class="line"><span class="title class_">Sub</span>.<span class="property"><span class="keyword">prototype</span></span> = con; <span class="comment">//继承了con实例</span></span><br><span class="line">con.<span class="property">constructor</span> = <span class="title class_">Sub</span>(); <span class="comment">//一定要修复实例</span></span><br><span class="line"><span class="keyword">var</span> sub1 = <span class="keyword">new</span> <span class="title class_">Sub</span>();</span><br><span class="line"><span class="comment">// Sub的实例就是继承了构造函数属性，父类实例，con的函数属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sub1.<span class="property">age</span>); <span class="comment">//10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">寄生：在函数内返回对象然后调用</span></span><br><span class="line"><span class="comment">组合：1、函数的原型等于另一个实例。2、在函数中用apply或者call引入另一个构造函数，可传参　</span></span><br><span class="line"><span class="comment">重点：修复了组合继承的问题</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<hr>
<p>$\color{red}{平台3:}$</p>
<p>要想实现继承，需要有子类和父类</p>
<h4 id="父类-1"><a href="#父类-1" class="headerlink" title="父类"></a>父类</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="comment">// 属性</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name || <span class="string">&quot;Animal&quot;</span>;</span><br><span class="line">  <span class="comment">// 方法</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">eat</span> = <span class="keyword">function</span> (<span class="params">food</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;在吃&quot;</span> + food);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 原型方法</span></span><br><span class="line"><span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sleep</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;正在睡觉！&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="1-原型链继承-1"><a href="#1-原型链继承-1" class="headerlink" title="1.原型链继承"></a>1.原型链继承</h5><p><strong>核心：</strong><br>让新实例的原型等于父类的实例</p>
<p><strong>特点：</strong><br>直接的继承关系<br>父类新增的方法或属性包括原型方法和原型属性，子类都可以访问</p>
<p><strong>缺点：</strong> 1.子类新增属性方法 2.创建子类实例时，无法向父类构造器函数传参</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Dog</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">type</span> = <span class="string">&quot;犬科&quot;</span>; <span class="comment">//2).子类新增属性方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Dog.prototype.age = 5;//不存在</span></span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&quot;菠太郎&quot;</span>;</span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sex</span> = <span class="string">&quot;公&quot;</span>; <span class="comment">//1).子类新增属性方法，需要在new之后</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化对象</span></span><br><span class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog.<span class="property">name</span>); <span class="comment">//菠太郎</span></span><br><span class="line">dog.<span class="title function_">eat</span>(<span class="string">&quot;米饭！&quot;</span>); <span class="comment">//菠太郎在吃米饭！</span></span><br><span class="line">dog.<span class="title function_">sleep</span>(); <span class="comment">//菠太郎正在睡觉！</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类的实例既是父类的实例，也是自身</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog <span class="keyword">instanceof</span> <span class="title class_">Animal</span>); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog <span class="keyword">instanceof</span> <span class="title class_">Dog</span>); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog); <span class="comment">//Dog&#123;type:&quot;犬科&quot;,__proto__:Animal&#125;</span></span><br></pre></td></tr></table></figure>

<h5 id="2-构造函数继承-1"><a href="#2-构造函数继承-1" class="headerlink" title="2.构造函数继承"></a>2.构造函数继承</h5><p><strong>核心：</strong><br>使用父类的构造函数来增强子类的实例</p>
<p><strong>特点：</strong><br>可以实现多继承<br>创建子类的实例可以向父类传递参数</p>
<p><strong>缺点：</strong><br>子类的实例是自身而不是父类的实例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Typeanimal</span>(<span class="params">type</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">type</span> = type;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Cat</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">Animal</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="string">&quot;猫&quot;</span>); <span class="comment">//call 对象的指针替换，第一个参数this，第二个参数以列表的形式传递参数</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现多继承</span></span><br><span class="line">  <span class="title class_">Typeanimal</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>, [<span class="string">&quot;猫科&quot;</span>]); <span class="comment">//apply 对象的指针替换，第一个参数this，第二个参数开始以集合的形式传递参数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat); <span class="comment">//Cat&#123;type:&quot;猫科&quot;,name:&quot;猫&quot;,eat:f(food),__proto__:Cat&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat <span class="keyword">instanceof</span> <span class="title class_">Cat</span>); <span class="comment">//true   //子类的实例是自身</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat <span class="keyword">instanceof</span> <span class="title class_">Animal</span>); <span class="comment">//false -- //子类的实例不是父类的实例 -- 所以也没有父类的原型方法（sleep方法）了</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat <span class="keyword">instanceof</span> <span class="title class_">Typeanimal</span>); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<h5 id="3-实例继承"><a href="#3-实例继承" class="headerlink" title="3.实例继承"></a>3.实例继承</h5><p><strong>核心：</strong><br>父类实例作为子类实例返回</p>
<p><strong>特点：</strong><br>实例继承可以 new 对象，也可以直接调用</p>
<p><strong>缺点：</strong><br>子类的实例是父类的实例，不是子类的实例（也就是本身）<br>不支持多继承</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Mouse</span>(<span class="params"></span>) &#123;</span><br><span class="line">  anim = <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line">  anim.<span class="property">name</span> = <span class="string">&quot;老鼠&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> anim;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Mouse</span>()); <span class="comment">//2).直接调用方法  //Animal&#123;name:&quot;老鼠&quot;,eat:f(food),__proto__:Animal&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mouse1 = <span class="keyword">new</span> <span class="title class_">Mouse</span>(); <span class="comment">//1).实例继承可以new对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mouse1); <span class="comment">//Animal&#123;name:&quot;老鼠&quot;,eat:f(food),__proto__:Animal&#125;  //子类的实例是父类的实例，不是子类的实例（也就是本身）</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mouse1 <span class="keyword">instanceof</span> <span class="title class_">Mouse</span>); <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mouse1 <span class="keyword">instanceof</span> <span class="title class_">Animal</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h5 id="4-拷贝继承"><a href="#4-拷贝继承" class="headerlink" title="4.拷贝继承"></a>4.拷贝继承</h5><p><strong>特点：</strong><br>支持多继承</p>
<p><strong>缺点：</strong><br>效率比较低<br>占的内存较多<br>子类的实例是自身而不是父类</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Fish</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> anim = <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> anim) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key); <span class="comment">// name eat sleep</span></span><br><span class="line">    <span class="title class_">Fish</span>.<span class="property"><span class="keyword">prototype</span></span>[key] = anim[key];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title class_">Fish</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&quot;金枪鱼&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fish = <span class="keyword">new</span> <span class="title class_">Fish</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fish); <span class="comment">//Fish&#123;__proto__:Fish&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fish <span class="keyword">instanceof</span> <span class="title class_">Fish</span>); <span class="comment">//true  //子类的实例是自身而不是父类</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fish <span class="keyword">instanceof</span> <span class="title class_">Animal</span>); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<h5 id="5-组合继承"><a href="#5-组合继承" class="headerlink" title="5.组合继承"></a>5.组合继承</h5><p><strong>特点：</strong><br>构造继承+原型继承</p>
<p><strong>优点：</strong><br>调用两次类的构造函数，生成了两次类的对象</p>
<p><strong>缺点：</strong></p>
<p>调用了两次父类构造函数（耗内存），子类的构造函数会代替原型上的那个父类构造函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Rabbit</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">Animal</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="string">&quot;兔子&quot;</span>); <span class="comment">//构造继承</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Rabbit</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Animal</span>(); <span class="comment">//原型继承</span></span><br><span class="line"><span class="title class_">Rabbit</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Rabbit</span>; <span class="comment">//修改原型构造方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rabbit = <span class="keyword">new</span> <span class="title class_">Rabbit</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rabbit); <span class="comment">//Rabbit&#123;eat:f(food),name:&quot;兔子&quot;,__proto__:Animal&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rabbit <span class="keyword">instanceof</span> <span class="title class_">Rabbit</span>); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rabbit <span class="keyword">instanceof</span> <span class="title class_">Animal</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h5 id="6-寄生继承（也叫包装继承）"><a href="#6-寄生继承（也叫包装继承）" class="headerlink" title="6.寄生继承（也叫包装继承）"></a>6.寄生继承（也叫包装继承）</h5><p><strong>特点：</strong><br>拥有以上优点</p>
<p><strong>缺点：</strong><br>复杂</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Pig</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">Animal</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>, [<span class="string">&quot;猪猪&quot;</span>]);</span><br><span class="line">&#125;</span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 创建一个新的实例</span></span><br><span class="line">  <span class="keyword">var</span> porcupine = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line">  porcupine.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">  <span class="title class_">Pig</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title function_">porcupine</span>();</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="keyword">var</span> pig = <span class="keyword">new</span> <span class="title class_">Pig</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pig); <span class="comment">//Pig&#123;eat:f(food),name:&quot;猪猪&quot;,__proto__:Animal&#125;</span></span><br><span class="line">pig.<span class="title function_">eat</span>(<span class="string">&quot;rice&quot;</span>); <span class="comment">//猪猪在吃rice</span></span><br><span class="line">pig.<span class="title function_">sleep</span>(); <span class="comment">//猪猪正在睡觉！</span></span><br></pre></td></tr></table></figure>

<p>更多文档：<br><a href="https://www.cnblogs.com/ranyonsue/p/11201730.html">https://www.cnblogs.com/ranyonsue/p/11201730.html</a></p>
<p>参考视频：<br><a href="https://www.bilibili.com/video/BV1BK41177hb?p=1">https://www.bilibili.com/video/BV1BK41177hb?p=1</a></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>this指向专题-看这篇文章就够了</title>
    <url>/2021/02/28/JS/this%E6%8C%87%E5%90%91%E4%B8%93%E9%A2%98-%E7%9C%8B%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%E5%B0%B1%E5%A4%9F%E4%BA%86/</url>
    <content><![CDATA[<h4 id="this-指向专题"><a href="#this-指向专题" class="headerlink" title="this 指向专题"></a>this 指向专题</h4><p>函数里面 this 的值，在执行时才知道。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一、函数中的this：</span></span><br><span class="line"><span class="comment">// 纯粹函数调用。</span></span><br><span class="line"><span class="comment">// 函数中的this表示的是window对象，无论函数中嵌套多少层，内部函数的this同样也指的window对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//window</span></span><br><span class="line">  <span class="keyword">var</span> ff = <span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>, <span class="number">1</span>); <span class="comment">//window</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>, <span class="number">2</span>); <span class="comment">//window</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fn2</span>();</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title function_">ff</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">x</span> = <span class="number">1</span>;</span><br><span class="line">  <span class="title function_">alert</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>(); <span class="comment">//其实这里的this就是全局变量。看下面的例子就能很好的理解其实this就是全局对象Global。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 二、构造函数中的this：</span></span><br><span class="line"><span class="comment">// 作为构造函数调用。所谓构造函数，就是生成一个新的对象。这时，这个this就是指这个对象</span></span><br><span class="line"><span class="comment">// 在构造函数中，this对象表示的是该构造函数创建的实例对象。</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;window name&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;constructor&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> thisFn = <span class="keyword">new</span> <span class="title class_">Fn</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(thisFn.<span class="property">name</span>); <span class="comment">//&#x27;constructor&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">x</span> = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="title function_">test</span>();</span><br><span class="line"><span class="title function_">alert</span>(o.<span class="property">x</span>); <span class="comment">//1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 三、匿名函数中的this：</span></span><br><span class="line"><span class="comment">// 匿名函数的执行环境是全局作用域，所以其this对象指向的是window对象</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;window name&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;constructor&quot;</span>; <span class="comment">//会修改window.name的值为&#x27;constructor&#x27;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>); <span class="comment">//输出window.name --&gt;  &#x27;constructor&#x27;</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Fn</span>()();</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 四、对象中的this</span></span><br><span class="line">在对象方法中，<span class="variable language_">this</span>的值就是该方法所在对象，此时<span class="variable language_">this</span>可以访问到该方法所在对象下的任意属性</span><br><span class="line">当然如果该对象的方法赋值给一个变量，然后通过变量调用，那么这个时候的<span class="variable language_">this</span>就不是该对象了。</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;window name&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> objThis = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;objThis name&#x27;</span>,</span><br><span class="line">    <span class="attr">sayName</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 通过对象调用</span></span><br><span class="line">objThis.<span class="title function_">sayName</span>();<span class="comment">//log:&#x27;objThis name&#x27;,objThis对象</span></span><br><span class="line"><span class="comment">// 将方法赋值给变量，再调用</span></span><br><span class="line"><span class="keyword">const</span> fn = objThis.<span class="property">sayName</span></span><br><span class="line"><span class="title function_">fn</span>()<span class="comment">//log:&#x27;window name&#x27;,window</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 五、在html元素事件属性中使用</span></span><br><span class="line">&lt;input type=”button” onclick=”<span class="title function_">showInfo</span>(<span class="variable language_">this</span>);” value=”点击一下”/&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 六、回调函数中的this</span></span><br><span class="line"><span class="comment">// 1).dom事件中的this</span></span><br><span class="line"><span class="comment">// 在事件中使用this，它表示的是这个事件绑定的那个元素的DOM</span></span><br><span class="line">&lt;div id=<span class="string">&quot;box&quot;</span> <span class="keyword">class</span>=<span class="string">&quot;this-box&quot;</span>&gt;这是事件dom&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)<span class="comment">//指向这个div节点</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span> <span class="attr">class</span>=<span class="string">&quot;this-box&quot;</span>&gt;</span>这是事件dom<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)<span class="comment">//指向window</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">input type=<span class="string">&quot;button&quot;</span> id=<span class="string">&quot;text&quot;</span> value=<span class="string">&quot;点击一下&quot;</span> /&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;text&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">value</span>);    <span class="comment">//此处的this是按钮元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2).jquery事件中的this：</span></span><br><span class="line"><span class="comment">// 此处的this表示，dom对象</span></span><br><span class="line">$(<span class="string">&#x27;.item&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);<span class="comment">//点击的dom对象</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//3).普通函数的this</span></span><br><span class="line">此处的<span class="variable language_">this</span>与调用回到的执行环境有关，一般为<span class="variable language_">window</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">arr.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">item,index</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)<span class="comment">//window</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 七、apply与call中的this</span></span><br><span class="line"><span class="comment">// apply()和call()方法都有改变this的指向，扩充函数执行作用域的功能，这两个方法中的this可以被指定引用到任何对象.this指向的是apply中的第一个参数。</span></span><br><span class="line"><span class="keyword">var</span> changeObj = &#123;</span><br><span class="line">    name;<span class="string">&#x27;changeObj nmae&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayName</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ask1 = sayName.<span class="title function_">apply</span>(changeObj);</span><br><span class="line"><span class="keyword">var</span> ask2 = sayName.<span class="title function_">call</span>(changeObj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;apply&quot;</span>,ask1);<span class="comment">//changeObj nmae</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;call&quot;</span>,ask2);<span class="comment">//changeObj nmae</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 八、箭头函数中的this</span></span><br><span class="line"><span class="comment">// 箭头函数本身是没有this的，它的this是来自其外层代码块中的this，无论箭头函数嵌套多少层，也只有一个this的存在，</span></span><br><span class="line"><span class="comment">// 这个this就是它们外层代码块中的this。在ES5中的this对象指的是其执行环境对象，而箭头函数的this对象不是，它指的是其定义时所在的对象，而非执行时所在的对象，因此它的this是固定不可变的。</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;fn name&quot;</span> &#125;;</span><br><span class="line"><span class="comment">// 箭头函数情况</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;window name&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = fn.<span class="title function_">call</span>(obj);</span><br><span class="line"><span class="title function_">a</span>(); <span class="comment">//fn name</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通函数情况</span></span><br><span class="line"><span class="keyword">var</span> name2 = <span class="string">&quot;window name&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a2 = fn2.<span class="title function_">call</span>(obj);</span><br><span class="line"><span class="title function_">a2</span>(); <span class="comment">//window name</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 九、严格模式下函数的this</span></span><br><span class="line">严格模式下函数的<span class="variable language_">this</span>是未定义的，因此调用<span class="variable language_">this</span>对象的时候会报未定义，因此如果直接执行函数，会报错</span><br><span class="line">把函数当作构造函数来用，则不会报错</span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;li&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title function_">fn</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)<span class="comment">//正常执行</span></span><br><span class="line"><span class="title function_">fn</span>()<span class="comment">//报错 Uncaught TypeError: Cannot set property &#x27;name&#x27; of undefined</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>AMD、CMD、CommonJs、ES6的对比</title>
    <url>/2020/09/17/JS/%E3%80%90%E5%8E%9F%E5%88%9B%E3%80%91AMD%E3%80%81CMD%E3%80%81CommonJs%E3%80%81ES6%E7%9A%84%E5%AF%B9%E6%AF%94/</url>
    <content><![CDATA[<h4 id="AMD、CMD、CommonJs、ES6-的对比"><a href="#AMD、CMD、CommonJs、ES6-的对比" class="headerlink" title="AMD、CMD、CommonJs、ES6 的对比"></a>AMD、CMD、CommonJs、ES6 的对比</h4><p>他们都是用于在模块化定义中使用的，AMD、CMD、CommonJs 是 ES5 中提供的模块化编程的方案，import&#x2F;export 是 ES6 中定义新增的</p>
<h5 id="1-CommonJS-规范"><a href="#1-CommonJS-规范" class="headerlink" title="1).CommonJS 规范"></a>1).CommonJS 规范</h5><h6 id="CommonJS-定义的模块分为-模块标识-module-、模块定义-exports-、模块引用-require"><a href="#CommonJS-定义的模块分为-模块标识-module-、模块定义-exports-、模块引用-require" class="headerlink" title="CommonJS 定义的模块分为: 模块标识(module)、模块定义(exports) 、模块引用(require)"></a>CommonJS 定义的模块分为: 模块标识(module)、模块定义(exports) 、模块引用(require)</h6><p>CommonJS 规范是通过 module.exports 定义的，在前端浏览器里面并不支持 module.exports,通过 node.js 后端使用的。NodeJS 是 CommonJS 规范的实现，webpack 也是以 CommonJS 的形式来书写。node.js 将 javascript 语言用于服务器端编程。前端浏览器一般使用 AMD、CMD、ES6 等定义模块化开发的。</p>
<p>CommonJS 最开始为了定义服务端模块标准，每个文件就是一个模块，并拥有自己的作用域和上下文。模块依赖通过 require 引入。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span>.<span class="property">area</span> = <span class="keyword">function</span> (<span class="params">r</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="property">PI</span> * r * r;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">circumference</span> = <span class="keyword">function</span> (<span class="params">r</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span> * <span class="title class_">Math</span>.<span class="property">PI</span> * r;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>输出方式有 2 种：默认输出—moudle.exports&#x3D; [function name]和带有名字的输出—exports.[function name] &#x3D; [function name]</p>
<blockquote>
<p>这样使用两者根本区别是:</p>
</blockquote>
<p><strong>exports</strong>返回的是模块函数<br><strong>module.exports</strong>返回的是模块对象本身，返回的是一个类</p>
<h5 id="2-AMD-异步模块定义"><a href="#2-AMD-异步模块定义" class="headerlink" title="2).AMD-异步模块定义"></a>2).AMD-异步模块定义</h5><p>基于 commonJS 规范的 nodeJS 出来以后，服务端的模块概念已经形成，很自然地，大家就想要客户端模块。而且最好两者能够兼容，一个模块不用修改，在服务器和浏览器都可以运行。但是，由于一个重大的局限，使得 CommonJS 规范不适用于浏览器环境。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> math = <span class="built_in">require</span>(<span class="string">&quot;math&quot;</span>);</span><br><span class="line">math.<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<p>第二行 math.add(2, 3)，在第一行 require(‘math’)之后运行，因此必须等 math.js 加载完成。也就是说，如果加载时间很长，整个应用就会停在那里等。<strong>您会注意到 require 是同步的</strong>。</p>
<p>这对服务器端不是一个问题，因为所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间。但是，对于浏览器，这却是一个大问题，因为模块都放在服务器端，等待时间取决于网速的快慢，可能要等很长时间，浏览器处于”假死”状态。</p>
<p>因此，浏览器端的模块，不能采用”同步加载”（synchronous），只能采用”异步加载”（asynchronous）。这就是 AMD 规范诞生的背景。</p>
<p><strong>AMD 是”Asynchronous Module Definition”的缩写，意思就是”异步模块定义”。它采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。</strong></p>
<p>AMD 是 RequireJS 在推广过程中对模块定义的规范化产出，它是一个概念，RequireJS 是对这个概念的实现，就好比 JavaScript 语言是对 ECMAScript 规范的实现。AMD 是一个组织，RequireJS 是在这个组织下自定义的一套脚本语言</p>
<p><strong>RequireJS：是一个 AMD 框架</strong>，可以异步加载 JS 文件，按照模块加载方法，通过 define()函数定义，第一个参数是一个数组，里面定义一些需要依赖的包，第二个参数是一个回调函数，通过变量来引用模块里面的方法，最后通过 return 来输出。</p>
<p>是一个<strong>依赖前置、异步定义</strong>的 AMD 框架（在参数里面引入 js 文件），在定义的同时如果需要用到别的模块，在最前面定义好即在参数数组里面进行引入，在回调里面加载</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">define</span>([<span class="string">&quot;package/lib&quot;</span>], <span class="keyword">function</span> (<span class="params">lib</span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    lib.<span class="title function_">log</span>(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">foo</span>: foo,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="3-CMD-通用模块加载规范"><a href="#3-CMD-通用模块加载规范" class="headerlink" title="3).CMD-通用模块加载规范"></a>3).CMD-通用模块加载规范</h5><p>CMD 推崇依赖就近，AMD 推崇依赖前置。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CMD</span></span><br><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span>(<span class="params"><span class="built_in">require</span>,<span class="built_in">exports</span>,<span class="variable language_">module</span></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">&#x27;./a&#x27;</span>)</span><br><span class="line">    a.<span class="title function_">doSomethine</span>()</span><br><span class="line">    <span class="comment">//此处省略100行</span></span><br><span class="line">    <span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">&#x27;./b&#x27;</span>)<span class="comment">//依赖可以就近书写    //CMD 推崇依赖就近</span></span><br><span class="line">    b.<span class="title function_">doSomething</span>()</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// AMD默认推荐的是</span></span><br><span class="line"><span class="title function_">define</span>([<span class="string">&#x27;./a&#x27;</span>，<span class="string">&#x27;./b&#x27;</span>],<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;<span class="comment">//依赖必须一开始就写好      //AMD 推崇依赖前置</span></span><br><span class="line">    a.<span class="title function_">doSomething</span>()</span><br><span class="line">    <span class="comment">//此处省略100行</span></span><br><span class="line">    b.<span class="title function_">doSomething</span>()</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>CMD 是 SeaJS 在推广过程中对模块定义的规范化产出，是一个同步模块定义，是 SeaJS 的一个标准，SeaJS 是 CMD 概念的一个实现，SeaJS 是淘宝团队提供的一个模块开发的 js 框架.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//所有模块都通过define来定义</span></span><br><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span> (<span class="params"><span class="built_in">require</span>, <span class="built_in">exports</span>, <span class="variable language_">module</span></span>) &#123;</span><br><span class="line">  <span class="comment">//通过require来引入依赖</span></span><br><span class="line">  <span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">&quot;jquery&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">Spinning</span> = <span class="built_in">require</span>(<span class="string">&quot;./spinning&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>通过 define()定义，没有依赖前置，通过 require 加载 jQuery 插件，CMD 是依赖就近，在什么地方使用到插件就在什么地方 require 该插件，即用即返，这是一个同步的概念</p>
<h5 id="4）ES6-特性，模块化—export-import-对模块进行导出导入的"><a href="#4）ES6-特性，模块化—export-import-对模块进行导出导入的" class="headerlink" title="4）ES6 特性，模块化—export&#x2F;import 对模块进行导出导入的"></a>4）ES6 特性，模块化—export&#x2F;import 对模块进行导出导入的</h5><p>ES6 模块化采用静态编译，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 模块，都只能在运行时确定这些东西。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&quot;num&quot;</span>],</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.$emit(<span class="string">&quot;incre&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">import</span>(<span class="string">&quot;../../util&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">decrement</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.$emit(<span class="string">&quot;decre&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="对于-CommonJS-和-ES6-中的模块化的两者区别是"><a href="#对于-CommonJS-和-ES6-中的模块化的两者区别是" class="headerlink" title="对于 CommonJS 和 ES6 中的模块化的两者区别是"></a>对于 CommonJS 和 ES6 中的模块化的两者区别是</h5><ul>
<li><p>前者支持动态导入，也就是 require(${path}&#x2F;xx.js)，后者目前不支持。</p>
</li>
<li><p>前者是同步导入，因为用于服务端，文件都在本地，同步导入即使卡住主线程影响也不大。而后者是异步导入，因为用于浏览器，需要下载文件，如果也采用同步导入会对渲染有很大影响。</p>
</li>
<li><p>前者在导出时都是值拷贝，就算导出的值变了，导入的值也不会改变，所以如果想更新值，必须重新导入一次。但是后者采用实时绑定的方式，导入导出的值都指向同一个内存地址，所以导入值会跟随导出值变化</p>
</li>
</ul>
<p>AMD 和 CommonJS 都在强调模块的依赖必须显示引入。为了方便在维护复杂模块是，不必操心模块引入顺序。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过exports将模块导出</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">getSum</span> = <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 或者：</span></span><br><span class="line"><span class="comment">// var getSum = function()&#123;</span></span><br><span class="line"><span class="comment">//     console.log(&#x27;hello&#x27;)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// module.exports = getSum;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过require函数引入</span></span><br><span class="line"><span class="keyword">const</span> math = <span class="built_in">require</span>(<span class="string">&quot;./math&quot;</span>);</span><br><span class="line">math.<span class="title function_">sum</span>(a, b);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//求和模块的定义</span></span><br><span class="line"><span class="title function_">define</span>(<span class="string">&#x27;getSum&#x27;</span>,[<span class="string">&#x27;math&#x27;</span>],<span class="keyword">function</span>(<span class="params">math</span>)&#123; <span class="comment">//第一个参数：当前模块定义（起名字）；第二个参数：当前模块依赖；第三个参数：函数【函数的返回值将定义的模块到处】或对象【这个对象本身就是当前模块的导出值】</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sum:&#x27;</span> + math.<span class="title function_">sum</span>(a,b));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;])</span><br></pre></td></tr></table></figure>

<p>ES6 Module【从无到有，到语法层面的原生支持进化过程】</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// import 导入</span></span><br><span class="line"><span class="keyword">import</span> math <span class="keyword">from</span> <span class="string">&quot;./math&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// export导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="nodejs-中-exports-和-module-exports-的区别"><a href="#nodejs-中-exports-和-module-exports-的区别" class="headerlink" title="nodejs 中 exports 和 module.exports 的区别"></a>nodejs 中 exports 和 module.exports 的区别</h4><p>module.exports 对象是由模块系统创建的。在我们自己写模块的时候，需要在模块最后写好模块接口，声明这个模块对外暴露什么内容，module.exports 提供了暴露接口的方法。</p>
<p><strong>1).返回一个 JSON Object:</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这种方法可以返回全局共享的变量或者方法。</span></span><br><span class="line"><span class="keyword">var</span> app = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;app&quot;</span>,</span><br><span class="line">  <span class="attr">version</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">sayName</span>: <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = app;</span><br></pre></td></tr></table></figure>

<p>调用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="built_in">require</span>(<span class="string">&quot;./app.js&quot;</span>);</span><br><span class="line">app.<span class="title function_">sayName</span>(<span class="string">&quot;hello&quot;</span>); <span class="comment">//hello</span></span><br></pre></td></tr></table></figure>

<p><strong>或者：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> func1 = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;func1&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> func2 = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;func2&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">function1</span> = func1;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">function2</span> = func2;</span><br></pre></td></tr></table></figure>

<p>调用方法为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> functions = <span class="built_in">require</span>(<span class="string">&quot;./functions&quot;</span>);</span><br><span class="line">functions.<span class="title function_">function1</span>();</span><br><span class="line">functions.<span class="title function_">function2</span>();</span><br></pre></td></tr></table></figure>

<p><strong>2).返回一个构造函数:</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CLASS.js:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="variable constant_">CLASS</span> = <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">args</span> = args;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="variable constant_">CLASS</span>;</span><br></pre></td></tr></table></figure>

<p>调用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="variable constant_">CLASS</span> = <span class="built_in">require</span>(<span class="string">&quot;./CLASS.js&quot;</span>);</span><br><span class="line">varc = <span class="keyword">new</span> <span class="title function_">CLASS</span>(<span class="string">&quot;arguments&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>3).返回一个实例对象:</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//CLASS.js</span></span><br><span class="line"><span class="keyword">var</span> <span class="variable constant_">CLASS</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;class&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable constant_">CLASS</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">func</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">new</span> <span class="title function_">CLASS</span>();</span><br></pre></td></tr></table></figure>

<p>调用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="built_in">require</span>(<span class="string">&quot;./CLASS.js&quot;</span>);</span><br><span class="line">c.<span class="title function_">func</span>(); <span class="comment">//&quot;class&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="问：exports-和-module-exports-区别"><a href="#问：exports-和-module-exports-区别" class="headerlink" title="问：exports 和 module.exports 区别?"></a>问：exports 和 module.exports 区别?</h5><p>通常 exports 方式使用方法是：</p>
<blockquote>
<p>exports.[function name] &#x3D; [function name]</p>
</blockquote>
<p>moudle.exports 方式使用方法是:</p>
<blockquote>
<p>moudle.exports&#x3D; [function name]</p>
</blockquote>
<p>这样使用两者根本区别是:</p>
<p>1.<strong>exports</strong>返回的是模块函数 2.<strong>module.exports</strong>返回的是模块对象本身，返回的是一个类</p>
<p>使用上的区别是:</p>
<p>1.exports 的方法可以直接调用<br>2.module.exports 需要 new 对象之后才可以调用</p>
<h6 id="1-exports-方式"><a href="#1-exports-方式" class="headerlink" title="1. exports 方式"></a>1. exports 方式</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先创建一个exports_mode.js</span></span><br><span class="line"><span class="keyword">var</span> sayHello = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">sayHello</span> = sayHelloconsole.<span class="title function_">log</span>(<span class="built_in">exports</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">module</span>.<span class="property">exports</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 然后写一个test.js调用下试试看</span></span><br><span class="line"><span class="keyword">var</span> exports_mode = <span class="built_in">require</span>(<span class="string">&quot;./exports_mode&quot;</span>);</span><br><span class="line">exports_mode.<span class="title function_">sayHello</span>();</span><br></pre></td></tr></table></figure>

<p>发现此时 exports 和 module.exports 对象输出的都是一个 sayHello 方法，<br>为什么 module.exports 也有 exports 方法了，简单点理解就是</p>
<blockquote>
<p>exports 是 module.exports 的一个引用，exports 指向的是 module.exports</p>
</blockquote>
<p>我们来验证下，在 exports_mode.js 最后一行添加一句代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sayHello = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">sayHello</span> = sayHello;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">exports</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">module</span>.<span class="property">exports</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">exports</span> === <span class="variable language_">module</span>.<span class="property">exports</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p>发现 console.log(exports &#x3D;&#x3D;&#x3D; module.exports)返回的是 true，<br>说明 exports 和 module.exports 是同一个对象</p>
<h6 id="2-module-exports-方式"><a href="#2-module-exports-方式" class="headerlink" title="2. module.exports 方式"></a>2. module.exports 方式</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 首先创建module_exports_mode.js</span></span><br><span class="line"><span class="keyword">var</span> sayHello = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = sayHello;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">module</span>.<span class="property">exports</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">exports</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">exports</span> === <span class="variable language_">module</span>.<span class="property">exports</span>);</span><br></pre></td></tr></table></figure>

<p>然后测试一下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> module_export_mode = <span class="built_in">require</span>(<span class="string">&quot;./module_exports_mode&quot;</span>);</span><br><span class="line">module_export_mode.<span class="title function_">sayHello</span>();</span><br></pre></td></tr></table></figure>

<p>发现输出报错了！</p>
<p>为什么呢，因为我们的调用方式错了，一开始就说到了:</p>
<p><strong>module.exports</strong>返回的是模块对象本身</p>
<p>正确的调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> module_export_mode = <span class="built_in">require</span>(<span class="string">&quot;./module_exports_mode&quot;</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="title function_">module_export_mode</span>();</span><br></pre></td></tr></table></figure>

<p>同时我们可以看到，输出的 module.exports 对象内容就是一个[Function]，在 javascript 里面是一个类<br>使用这样的好处是 exports 只能对外暴露单个函数，但是 module.exports 却能暴露一个类</p>
<p>我们把 module_exports_mode.js 扩展一下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xiaoming = <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sayHello</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello &quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sayGoodBye</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;goodbye &quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = xiaoming;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">module</span>.<span class="property">exports</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">exports</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">exports</span> === <span class="variable language_">module</span>.<span class="property">exports</span>);</span><br></pre></td></tr></table></figure>

<p>然后测试</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xiaoming = <span class="built_in">require</span>(<span class="string">&quot;./module_exports_mode&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> xiaoming = <span class="keyword">new</span> <span class="title function_">xiaoming</span>(<span class="string">&quot;daykalif&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xiaoming.<span class="title function_">sayHello</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xiaoming.<span class="title function_">sayGoodBye</span>());</span><br></pre></td></tr></table></figure>

<p>使用方法和 javascript 的类创建对象一模一样</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span>.[<span class="keyword">function</span> name] = [<span class="keyword">function</span> name]</span><br><span class="line">moudle.<span class="property">exports</span>= [<span class="keyword">function</span> name]</span><br></pre></td></tr></table></figure>

<p>以上就是这两种方式的使用区别。</p>
<p><strong>⚠️ 注意：</strong></p>
<blockquote>
<p>exports 是 module.exports 的一个引用，exports 指向的是 module.exports</p>
</blockquote>
<p>也就是说 exports 的方法 module.exports 也是一定能完成的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span>.[<span class="keyword">function</span> name] = [<span class="keyword">function</span> name]</span><br><span class="line">moudle.<span class="property">exports</span>= [<span class="keyword">function</span> name]</span><br></pre></td></tr></table></figure>

<p>所以，在使用上</p>
<p><strong>moudle.exports.[function name] &#x3D; [function name]</strong><br><strong>是完全和</strong><br><strong>exports.[function name] &#x3D; [function name]</strong><br><strong>相等的</strong></p>
<p>但是我们通常还是推荐使用 exports.[function name]，各司其职，代码逻辑清晰。</p>
<hr>
<h4 id="exports、module-exports-和-export、export-default-到底是咋回事"><a href="#exports、module-exports-和-export、export-default-到底是咋回事" class="headerlink" title="exports、module.exports 和 export、export default 到底是咋回事?"></a>exports、module.exports 和 export、export default 到底是咋回事?</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">require</span>: node 和 es6 都支持的引入</span><br><span class="line"><span class="keyword">export</span> / <span class="keyword">import</span> : 只有es6 支持的导出引入</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> / <span class="attr">exports</span>: 只有 node 支持的导出</span><br></pre></td></tr></table></figure>

<p><strong>node 模块</strong><br>Node 里面的模块系统遵循的是 CommonJS 规范。</p>
<p>那问题又来了，什么是 CommonJS 规范呢？<br>由于 js 以前比较混乱，各写各的代码，没有一个模块的概念，而这个规范出来其实就是对模块的一个定义。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">CommonJS</span>定义的模块分为: 模块标识(<span class="variable language_">module</span>)、模块定义(<span class="built_in">exports</span>) 、模块引用(<span class="built_in">require</span>)</span><br></pre></td></tr></table></figure>

<p>先解释 exports 和 module.exports<br>在一个 node 执行一个文件时，会给这个文件内生成一个 exports 和 module 对象，<br>而 module 又有一个 exports 属性。他们之间的关系如下图，都指向一块{}内存区域。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span> = <span class="variable language_">module</span>.<span class="property">exports</span> = &#123;&#125;;</span><br></pre></td></tr></table></figure>

<p><img src="https://www.daykalif.com/blog_img/module.png" alt="内存结构示意图"></p>
<p>那下面我们来看看代码的吧。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//utils.js</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">module</span>.<span class="property">exports</span>); <span class="comment">//能打印出结果为：&#123;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">exports</span>); <span class="comment">//能打印出结果为：&#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">a</span> = <span class="number">200</span>; <span class="comment">//这里辛苦劳作帮 module.exports 的内容给改成 &#123;a : 200&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span> = <span class="string">&quot;指向其他内存区&quot;</span>; <span class="comment">//这里把exports的指向指走</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//test.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">&quot;/utils&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 打印为 &#123;a : 200&#125;</span></span><br></pre></td></tr></table></figure>

<p>从上面可以看出，其实 require 导出的内容是 module.exports 的指向的内存块内容，并不是 exports 的。<br>简而言之，区分他们之间的区别就是 exports 只是 module.exports 的引用，辅助后者添加内容用的。</p>
<p>用白话讲就是，exports 只辅助 module.exports 操作内存中的数据，辛辛苦苦各种操作数据完，累得要死，结果到最后真正被 require 出去的内容还是 module.exports 的，真是好苦逼啊。</p>
<p>其实大家用内存块的概念去理解，就会很清楚了。</p>
<p>然后呢，为了避免糊涂，尽量都用 module.exports 导出，然后用 require 导入。</p>
<p><strong>ES 中的模块导出导入</strong><br>说实话，在 es 中的模块，就非常清晰了。不过也有一些细节的东西需要搞清楚。<br>比如 export 和 export default，还有 导入的时候，import a from ..,import {a} from ..，总之也有点乱，那么下面我们就开始把它们捋清楚吧。</p>
<p><strong>export 和 export default:</strong></p>
<p>首先我们讲这两个导出，下面我们讲讲它们的区别:</p>
<ul>
<li>1.export 与 export default 均可用于导出常量、函数、文件、模块等</li>
<li>2.在一个文件或模块中，export、import 可以有多个，export default 仅有一个</li>
<li>3.通过 export 方式导出，在导入时要加{ }，export default 则不需要<br>-4.export 能直接导出变量表达式，export default 不行。</li>
</ul>
<p>下面咱们看看代码去验证一下</p>
<p>testEs6Export.js:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="comment">//导出变量</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> a = <span class="string">&quot;100&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出方法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> dogSay = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;wang wang&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出方法第二种</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">catSay</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;miao miao&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123; catSay &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//export default导出</span></span><br><span class="line"><span class="keyword">const</span> m = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> m;</span><br><span class="line"><span class="comment">//export defult const m = 100;// 这里不能写这种格式。</span></span><br></pre></td></tr></table></figure>

<p>index.js:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; dogSay, catSay &#125; <span class="keyword">from</span> <span class="string">&quot;./testEs6Export&quot;</span>; <span class="comment">//导出了 export 方法</span></span><br><span class="line"><span class="keyword">import</span> m <span class="keyword">from</span> <span class="string">&quot;./testEs6Export&quot;</span>; <span class="comment">//导出了 export default</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> testModule <span class="keyword">from</span> <span class="string">&quot;./testEs6Export&quot;</span>; <span class="comment">//as 集合成对象导出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* GET home page. */</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="title function_">dogSay</span>();</span><br><span class="line">  <span class="title function_">catSay</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(m);</span><br><span class="line">  testModule.<span class="title function_">dogSay</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(testModule.<span class="property">m</span>); <span class="comment">// undefined , 因为  as 导出是 把 零散的 export 聚集在一起作为一个对象，而export default 是导出为 default属性。</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(testModule.<span class="property">default</span>); <span class="comment">// 100</span></span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&quot;恭喜你，成功验证&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure>

<!-- ![笔记整理](https://www.daykalif.com/blog_img/module.jpeg) -->

<p>参考文档：<br><a href="https://blog.csdn.net/tangxiujiang/article/details/81104174">https://blog.csdn.net/tangxiujiang/article/details/81104174</a><br><a href="https://www.cnblogs.com/kreo/p/11069640.html">https://www.cnblogs.com/kreo/p/11069640.html</a><br><a href="https://blog.csdn.net/qq_31967569/article/details/82461499">https://blog.csdn.net/qq_31967569/article/details/82461499</a><br><a href="https://www.cnblogs.com/chenguangliang/p/5856701.html">https://www.cnblogs.com/chenguangliang/p/5856701.html</a><br><a href="https://www.cnblogs.com/mengfangui/p/9067111.html">https://www.cnblogs.com/mengfangui/p/9067111.html</a></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>js</tag>
        <tag>模块化</tag>
      </tags>
  </entry>
  <entry>
    <title>【原创】for in/for of的本质区别是什么？</title>
    <url>/2023/04/15/JS/%E3%80%90%E5%8E%9F%E5%88%9B%E3%80%91for-in-for-of%E7%9A%84%E6%9C%AC%E8%B4%A8%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
    <content><![CDATA[<h2 id="for-in-for-of-的本质区别是什么？"><a href="#for-in-for-of-的本质区别是什么？" class="headerlink" title="for in&#x2F;for of 的本质区别是什么？"></a>for in&#x2F;for of 的本质区别是什么？</h2><h3 id="一、适用的目标不一样"><a href="#一、适用的目标不一样" class="headerlink" title="一、适用的目标不一样"></a>一、适用的目标不一样</h3><h4 id="1-for-in"><a href="#1-for-in" class="headerlink" title="1.for in"></a>1.for in</h4><p>for in 适用于 <strong>可枚举数据</strong>，例如对象、数组、字符串<br>🧒 什么是可枚举呢？<br>属性的 enumerate 值为 true，咱就称为是可枚举的，通过<code>Object.getOwnPropertyDescriptors()</code>验证&#x2F;查看。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对象</span></span><br><span class="line"><span class="keyword">const</span> o = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="number">477</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">188</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptors</span>(o));</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   name: &#123; value: 477, writable: true, enumerable: true, configurable: true &#125;,</span></span><br><span class="line"><span class="comment">//   age: &#123; value: 188, writable: true, enumerable: true, configurable: true &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptors</span>(a));</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字符串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptors</span>(b));</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   &#x27;0&#x27;: &#123; value: &#x27;a&#x27;, writable: true, enumerable: true, configurable: true &#125;,</span></span><br><span class="line"><span class="comment">//   &#x27;1&#x27;: &#123; value: &#x27;b&#x27;, writable: true, enumerable: true, configurable: true &#125;,</span></span><br><span class="line"><span class="comment">//   length: &#123; value: 2, writable: true, enumerable: false, configurable: false &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-for-of"><a href="#2-for-of" class="headerlink" title="2.for of"></a>2.for of</h4><p>for of 适用于<strong>可迭代数据</strong>，例如 Array、String、Map、Set、TypedArray、函数的 arguments 对象、NodeList 对象</p>
<p>🧒 什么是可迭代？<br>ES6 中，具有 symbol.iterator 属性，它对应的值是一个函数，调用这个函数后可以得到一个对象，每次调用对象的 next 方法能得到目标的每一项，只要符合这个特点就是可迭代的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Array</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> it = arr[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(it.<span class="title function_">next</span>()); <span class="comment">// &#123; value: &#x27;a&#x27;, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(it.<span class="title function_">next</span>()); <span class="comment">// &#123; value: &#x27;b&#x27;, done: false &#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// string</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> it = str[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(it.<span class="title function_">next</span>()); <span class="comment">// &#123; value: &#x27;a&#x27;, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(it.<span class="title function_">next</span>()); <span class="comment">// &#123; value: &#x27;b&#x27;, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(it.<span class="title function_">next</span>()); <span class="comment">// &#123; value: &#x27;c&#x27;, done: false &#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>]);</span><br><span class="line"><span class="keyword">const</span> it = str[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(it.<span class="title function_">next</span>()); <span class="comment">// &#123; value: &#x27;a&#x27;, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(it.<span class="title function_">next</span>()); <span class="comment">// &#123; value: &#x27;b&#x27;, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(it.<span class="title function_">next</span>()); <span class="comment">// &#123; value: &#x27;c&#x27;, done: false &#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="二、遍历的范围不一样"><a href="#二、遍历的范围不一样" class="headerlink" title="二、遍历的范围不一样"></a>二、遍历的范围不一样</h3><h4 id="1-for-in-1"><a href="#1-for-in-1" class="headerlink" title="1.for in"></a>1.for in</h4><p>for in 原型上的可枚举的属性也能被遍历到。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">foo</span> = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">7</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> attr <span class="keyword">in</span> arr) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[attr]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 7</span></span><br><span class="line"><span class="comment">// 4</span></span><br></pre></td></tr></table></figure>

<h4 id="2-for-of-1"><a href="#2-for-of-1" class="headerlink" title="2.for of"></a>2.for of</h4><p>for of 一般只能遍历自身的（具体和迭代器的内部实现有关）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">foo</span> = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">7</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 7</span></span><br></pre></td></tr></table></figure>

<p>改造迭代器：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">foo</span> = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">7</span>];</span><br><span class="line"></span><br><span class="line">arr[<span class="title class_">Symbol</span>.<span class="property">iterator</span>] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> _this = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>.<span class="property">__proto__</span>).<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">__proto__</span>[item])</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">i</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="title function_">next</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">i</span> &lt; _this.<span class="property">length</span></span><br><span class="line">        ? &#123;</span><br><span class="line">            <span class="attr">value</span>: _this[<span class="variable language_">this</span>.<span class="property">i</span>++],</span><br><span class="line">            <span class="attr">done</span>: <span class="literal">false</span>,</span><br><span class="line">          &#125;</span><br><span class="line">        : &#123;</span><br><span class="line">            <span class="attr">value</span>: <span class="literal">undefined</span>,</span><br><span class="line">            <span class="attr">done</span>: <span class="literal">true</span>,</span><br><span class="line">          &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 7</span></span><br><span class="line"><span class="comment">// 4</span></span><br></pre></td></tr></table></figure>

<h3 id="三、得到的结果不一样"><a href="#三、得到的结果不一样" class="headerlink" title="三、得到的结果不一样"></a>三、得到的结果不一样</h3><h4 id="1-for-in-2"><a href="#1-for-in-2" class="headerlink" title="1.for in"></a>1.for in</h4><p>for in 得到的是 key（并且不保证顺序）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">7</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> arr) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0</span></span><br></pre></td></tr></table></figure>

<h4 id="2-for-of-2"><a href="#2-for-of-2" class="headerlink" title="2.for of"></a>2.for of</h4><p>for of 一般得到的是 value（具体和迭代器的内部实现有关）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">7</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> val <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 7</span></span><br></pre></td></tr></table></figure>

<p>改造迭代器：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">7</span>];</span><br><span class="line"></span><br><span class="line">arr[<span class="title class_">Symbol</span>.<span class="property">iterator</span>] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> _this = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>.<span class="property">__proto__</span>).<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">__proto__</span>[item])</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">i</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="title function_">next</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">i</span> &lt; _this.<span class="property">length</span></span><br><span class="line">        ? &#123;</span><br><span class="line">            <span class="attr">value</span>: <span class="variable language_">this</span>.<span class="property">i</span>++,</span><br><span class="line">            <span class="attr">done</span>: <span class="literal">false</span>,</span><br><span class="line">          &#125;</span><br><span class="line">        : &#123;</span><br><span class="line">            <span class="attr">value</span>: <span class="literal">undefined</span>,</span><br><span class="line">            <span class="attr">done</span>: <span class="literal">true</span>,</span><br><span class="line">          &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> val <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>ES6-ES11新特性</title>
    <url>/2022/01/24/JS/%E3%80%90%E6%90%AC%E3%80%91ES6-ES11%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h3 id="1-let-关键字"><a href="#1-let-关键字" class="headerlink" title="1.let 关键字"></a>1.let 关键字</h3><p>特性:<br>let 关键字用来声明变量，使用 let 声明的变量有几个特点:</p>
<ul>
<li>1).不允许重复声明;</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> dog = <span class="string">&quot;狗&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> dog = <span class="string">&quot;狗&quot;</span>;</span><br><span class="line"><span class="comment">// 报错:Uncaught SyntaxError: Identifier &#x27;dog&#x27; has already been declared</span></span><br></pre></td></tr></table></figure>

<ul>
<li>2).块儿级作用域(局部变量);</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> cat = <span class="string">&quot;猫&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(cat);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat);</span><br><span class="line"><span class="comment">// 报错:Uncaught ReferenceError: cat is not defined</span></span><br></pre></td></tr></table></figure>

<ul>
<li>3).不存在变量提升;</li>
</ul>
<p>什么是变量提升:<br>就是在变量创建之前使用(比如输出:输出的是默认值)，let 不存在，var 存在;</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(people1); <span class="comment">// 可输出默认值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(people2); <span class="comment">// 报错:Uncaught ReferenceError: people2 is not</span></span><br><span class="line"><span class="keyword">var</span> people1 = <span class="string">&quot;大哥&quot;</span>; <span class="comment">// 存在变量提升 let people2 = &quot;二哥&quot;; // 不存在变量提升</span></span><br></pre></td></tr></table></figure>

<ul>
<li>4).不影响作用域链;<br>什么是作用域链:很简单，就是代码块内有代码块，跟常规编程语言一样，上级代码块中 的局部变量下级可用</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> p = <span class="string">&quot;大哥&quot;</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(p); <span class="comment">// 这里是可以使用的</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">fn</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、const-关键字"><a href="#2、const-关键字" class="headerlink" title="2、const 关键字"></a>2、const 关键字</h3><p>特性:<br>const 关键字用来声明常量，const 声明有以下特点:</p>
<ul>
<li>1).声明必须赋初始值;</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">CAT</span>; <span class="comment">// Missing initializer in const declaration</span></span><br></pre></td></tr></table></figure>

<ul>
<li>2).标识符一般为大写(习惯);</li>
<li>3).不允许重复声明;</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">CAT</span> = <span class="string">&quot;喵喵&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">CAT</span> = <span class="string">&quot;喵喵&quot;</span>; <span class="comment">//Identifier &#x27;CAT&#x27; has already been declared</span></span><br></pre></td></tr></table></figure>

<ul>
<li>4).值不允许修改;<br>注意:<br>对数组元素的修改和对对象内部的修改是可以的(数组和对象存的是引用地址);</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">CAT</span> = <span class="string">&quot;喵喵&quot;</span>;</span><br><span class="line"><span class="variable constant_">CAT</span> = <span class="string">&quot;咪咪&quot;</span>; <span class="comment">// Assignment to constant variable</span></span><br></pre></td></tr></table></figure>

<ul>
<li>5).块儿级作用域(局部变量);</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">CAT</span> = <span class="string">&quot;喵喵&quot;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">CAT</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">CAT</span>); <span class="comment">// CAT is not defined</span></span><br></pre></td></tr></table></figure>

<p>应用场景:<br>声明对象类型使用 const，非对象类型声明选择 let;</p>
<h3 id="3、变量和对象的解构赋值"><a href="#3、变量和对象的解构赋值" class="headerlink" title="3、变量和对象的解构赋值"></a>3、变量和对象的解构赋值</h3><p>什么是解构赋值:<br>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构赋值;</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构赋值;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、数组的解构赋值</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">F4</span> = [<span class="string">&quot;大哥&quot;</span>, <span class="string">&quot;二哥&quot;</span>, <span class="string">&quot;三哥&quot;</span>, <span class="string">&quot;四哥&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> [a, b, c, d] = <span class="variable constant_">F4</span>;</span><br><span class="line"><span class="comment">// 这就相当于我们声明4个变量a,b,c,d，其值分别对应&quot;大哥&quot;,&quot;二哥&quot;,&quot;三哥&quot;,&quot;四哥&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a + b + c + d); <span class="comment">// 大哥二哥三哥四哥</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、对象的解构赋值</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">F3</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;大哥&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">22</span>,</span><br><span class="line">  <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">  <span class="attr">xiaopin</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 常用</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我会演小品!&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123; name, age, sex, xiaopin &#125; = <span class="variable constant_">F3</span>; <span class="comment">// 注意解构对象这里用的是&#123;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name + age + sex + xiaopin); <span class="comment">// 大哥22男 xiaopin(); // 此方法可以正常调用</span></span><br></pre></td></tr></table></figure>

<p>应用场景:<br>频繁使用对象方法、数组元素，就可以使用解构赋值形式;</p>
<h3 id="4、模板字符串"><a href="#4、模板字符串" class="headerlink" title="4、模板字符串"></a>4、模板字符串</h3><p>模板字符串(template string)是增强版的字符串，用反引号(&#96;)标识，特点: 字符串中可以出现换行符;<br>可以使用 ${xxx} 形式引用变量;</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明字符串的方法:单引号(&#x27;&#x27;)、双引号(&quot;&quot;)、反引号(``)</span></span><br><span class="line"><span class="comment">// 声明</span></span><br><span class="line"><span class="keyword">let</span> string = <span class="string">`我也一个字符串哦!`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(string);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 特性</span></span><br><span class="line"><span class="comment">// 1、字符串中可以出现换行符</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">`&lt;ul&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;大哥&lt;/li&gt; &lt;li&gt;二哥&lt;/li&gt; &lt;li&gt;三哥&lt;/li&gt; &lt;li&gt;四哥&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、可以使用 $&#123;xxx&#125; 形式引用变量</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="string">&quot;大哥&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> out = <span class="string">`<span class="subst">$&#123;s&#125;</span>是我最大的榜样!`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(out);</span><br></pre></td></tr></table></figure>

<p>应用场景:<br>当遇到字符串与变量拼接的情况使用模板字符串;</p>
<h3 id="5、简化对象和函数写法"><a href="#5、简化对象和函数写法" class="headerlink" title="5、简化对象和函数写法"></a>5、简化对象和函数写法</h3><p>概述:<br>ES6 允许在大括号里面，直接写入变量和函数，作为对象的属性和方法。这样的书写更加简洁;</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6允许在对象的大括号内直接写入变量和函数作为对象的属性和方法</span></span><br><span class="line"><span class="comment">// 变量和函数</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;Daykalif&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> change = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;活着就是为了改变世界!&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line">  <span class="comment">// 完整写法</span></span><br><span class="line">  <span class="comment">// name:name,</span></span><br><span class="line">  <span class="comment">// change:change</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 简化写法</span></span><br><span class="line">  name,</span><br><span class="line">  change,</span><br><span class="line">  <span class="comment">// 声明方法的简化</span></span><br><span class="line">  <span class="title function_">say</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;言行一致!&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">school.<span class="title function_">change</span>();</span><br><span class="line">school.<span class="title function_">say</span>();</span><br></pre></td></tr></table></figure>

<h3 id="6、箭头函数"><a href="#6、箭头函数" class="headerlink" title="6、箭头函数"></a>6、箭头函数</h3><p>概述:<br>ES6 允许使用箭头(&#x3D;&gt;)定义函数，箭头函数提供了一种更加简洁的函数书写方式，箭头函数多用于匿 名函数的定义;</p>
<h4 id="箭头函数的注意点"><a href="#箭头函数的注意点" class="headerlink" title="箭头函数的注意点:"></a>箭头函数的注意点:</h4><ol>
<li>如果形参只有一个，则小括号可以省略;</li>
<li>函数体如果只有一条语句，则花括号可以省略，函数的返回值为该条语句的执行结果;</li>
<li>箭头函数 this 指向声明时所在作用域下 this 的值;</li>
<li>箭头函数不能作为构造函数实例化;</li>
<li>不能使用 arguments;</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6允许使用箭头(=&gt;)定义函数</span></span><br><span class="line"><span class="comment">// 传统写法:无参数</span></span><br><span class="line"><span class="keyword">var</span> say = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello!&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">say</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES写法2:无参数</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">speak</span> = (<span class="params"></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello 哈哈!&quot;</span>);</span><br><span class="line"><span class="title function_">speak</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传统写法:一个参数</span></span><br><span class="line"><span class="keyword">var</span> hello = <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;hello &quot;</span> + name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">hello</span>(<span class="string">&quot;Daykalif&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6箭头函数:一个参数</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">hi</span> = (<span class="params">name</span>) =&gt; <span class="string">&quot;hi &quot;</span> + name;</span><br><span class="line">运行结果: <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">hi</span>(<span class="string">&quot;Daykalif&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传统写法:多个参数</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="keyword">function</span> (<span class="params">a, b, c</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line"><span class="comment">// ES6箭头函数:多个参数</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">he</span> = (<span class="params">a, b, c</span>) =&gt; a + b + c;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">he</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br></pre></td></tr></table></figure>

<h4 id="特性"><a href="#特性" class="headerlink" title="特性:"></a>特性:</h4><ol>
<li>箭头函数的 this 是静态的，始终指向函数声明时所在作用域下的 this 的值;</li>
<li>不能作为构造实例化对象;</li>
<li>不能使用 arguments 变量;</li>
</ol>
<p>注意:箭头函数不会更改 this 指向，用来指定回调函数会非常合适;</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、箭头函数的this是静态的，始终指向函数声明时所在作用域下的this的值</span></span><br><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;大哥&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 传统函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;getName:&quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 箭头函数</span></span><br><span class="line">getName1 = <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;getName1:&quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">name</span> = <span class="string">&quot;Daykalif&quot;</span>;</span><br><span class="line"><span class="comment">// 直接调用</span></span><br><span class="line"><span class="title function_">getName</span>();</span><br><span class="line"><span class="title function_">getName1</span>();</span><br><span class="line"><span class="comment">// 使用call调用</span></span><br><span class="line">getName.<span class="title function_">call</span>(school);</span><br><span class="line">getName1.<span class="title function_">call</span>(school);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结论:箭头函数的this是静态的，始终指向函数声明时所在作用域下的this的值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、不能作为构造实例化对象</span></span><br><span class="line"><span class="comment">// let Persion = (name,age) =&gt; &#123;</span></span><br><span class="line"><span class="comment">// this.name = name;</span></span><br><span class="line"><span class="comment">// this.age = age;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// let me = new Persion(&quot;Daykalif&quot;,18);</span></span><br><span class="line"><span class="comment">// console.log(me);</span></span><br><span class="line"><span class="comment">// 报错:Uncaught TypeError: Persion is not a constructor</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、不能使用 arguments 变量</span></span><br><span class="line"><span class="comment">// let fn = () =&gt; console.log(arguments);</span></span><br><span class="line"><span class="comment">// fn(1,2,3);</span></span><br><span class="line"><span class="comment">// 报错:Uncaught ReferenceError: arguments is not defined</span></span><br></pre></td></tr></table></figure>

<h3 id="7、ES6-中函数参数的默认值"><a href="#7、ES6-中函数参数的默认值" class="headerlink" title="7、ES6 中函数参数的默认值"></a>7、ES6 中函数参数的默认值</h3><p>概述:<br>ES 允许给函数的参数赋初始值;</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 形参初始值 具有默认值的参数, 一般位置要靠后(潜规则)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b, c = <span class="number">10</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 13</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 与解构赋值结合</span></span><br><span class="line"><span class="comment">// 注意这里参数是一个对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">connect</span>(<span class="params">&#123; host = <span class="string">&quot;127.0.0.1&quot;</span>, username, password, port &#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(host);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(username);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(password);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(port);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">connect</span>(&#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&quot;atguigu.com&quot;</span>,</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="number">3306</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="8、rest-参数"><a href="#8、rest-参数" class="headerlink" title="8、rest 参数"></a>8、rest 参数</h3><p>概述:<br>ES6 引入 rest 参数，用于获取函数的实参，用来代替 arguments; 参考文章:<a href="https://www.jianshu.com/p/50bcb376a419">https://www.jianshu.com/p/50bcb376a419</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// // ES6 引入 rest 参数，用于获取函数的实参，用来代替 arguments;</span></span><br><span class="line"><span class="comment">// ES5获取实参的方式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>); <span class="comment">// [&quot;大哥&quot;, &quot;二哥&quot;, &quot;三哥&quot;, &quot;四哥&quot;]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">data</span>(<span class="string">&quot;大哥&quot;</span>, <span class="string">&quot;二哥&quot;</span>, <span class="string">&quot;三哥&quot;</span>, <span class="string">&quot;四哥&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6的rest参数...args，rest参数必须放在最后面</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">data</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(args); <span class="comment">// fliter some every map // [&quot;大哥&quot;, &quot;二哥&quot;, &quot;三哥&quot;, &quot;四哥&quot;]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">data</span>(<span class="string">&quot;大哥&quot;</span>, <span class="string">&quot;二哥&quot;</span>, <span class="string">&quot;三哥&quot;</span>, <span class="string">&quot;四哥&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="9、扩展运算符"><a href="#9、扩展运算符" class="headerlink" title="9、扩展运算符"></a>9、扩展运算符</h3><p>介绍:<br>… 扩展运算符能将数组转换为逗号分隔的参数序列; 扩展运算符(spread)也是三个点(…)。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参<br>数序列，对数组进行解包;</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ... 扩展运算符能将数组转换为逗号分隔的参数序列 //声明一个数组 ...</span></span><br><span class="line"><span class="keyword">const</span> tfboys = [<span class="string">&quot;易烊千玺&quot;</span>, <span class="string">&quot;王源&quot;</span>, <span class="string">&quot;王俊凯&quot;</span>]; <span class="comment">// =&gt; &#x27;易烊千玺&#x27;,&#x27;王源&#x27;,&#x27;王俊凯&#x27;</span></span><br><span class="line"><span class="comment">// 声明一个函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">chunwan</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">chunwan</span>(...tfboys); <span class="comment">// chunwan(&#x27;易烊千玺&#x27;,&#x27;王源&#x27;,&#x27;王俊凯&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 数组的合并 情圣</span></span><br><span class="line"><span class="keyword">const</span> kuaizi = [<span class="string">&quot;王太利&quot;</span>, <span class="string">&quot;肖央&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> fenghuang = [<span class="string">&quot;曾毅&quot;</span>, <span class="string">&quot;玲花&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传统的合并方式</span></span><br><span class="line"><span class="comment">// const zuixuanxiaopingguo = kuaizi.concat(fenghuang);</span></span><br><span class="line"><span class="keyword">const</span> zuixuanxiaopingguo = [...kuaizi, ...fenghuang];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zuixuanxiaopingguo);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 数组的克隆</span></span><br><span class="line"><span class="keyword">const</span> sanzhihua = [<span class="string">&quot;E&quot;</span>, <span class="string">&quot;G&quot;</span>, <span class="string">&quot;M&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> sanyecao = [...sanzhihua]; <span class="comment">// [&#x27;E&#x27;,&#x27;G&#x27;,&#x27;M&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sanyecao);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 将伪数组转为真正的数组</span></span><br><span class="line"><span class="keyword">const</span> divs = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> divArr = [...divs];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(divArr); <span class="comment">// arguments</span></span><br></pre></td></tr></table></figure>

<h3 id="10、Symbol"><a href="#10、Symbol" class="headerlink" title="10、Symbol"></a>10、Symbol</h3><p>Symbol 概述:<br>ES6 引入了一种新的原始数据类型 Symbol，表示独一无二的值。它是 JavaScript 语言的第七种数据类 型，是一种类似于字符串的数据类型;<br>参考文章:<a href="https://blog.csdn.net/fesfsefgs/article/details/108354248">https://blog.csdn.net/fesfsefgs/article/details/108354248</a></p>
<p>Symbol 特点:</p>
<ul>
<li><ol>
<li>Symbol 的值是唯一的，用来解决命名冲突的问题;</li>
</ol>
</li>
<li><ol start="2">
<li>Symbol 值不能与其他数据进行运算;</li>
</ol>
</li>
<li><ol start="3">
<li>Symbol 定义的对象属性不能使用 for…in 循环遍历 ，但是可以使用 Reflect.ownKeys 来获取对象的所有键名;</li>
</ol>
</li>
</ul>
<h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用:"></a>基本使用:</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建Symbol</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="comment">// console.log(s, typeof s);</span></span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> s3 = <span class="title class_">Symbol</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s2 == s3); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Symbol.for 创建</span></span><br><span class="line"><span class="keyword">let</span> s4 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> s5 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s4 == s5); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//不能与其他数据进行运算</span></span><br><span class="line"><span class="comment">// let result = s + 100;</span></span><br><span class="line"><span class="comment">// let result = s &gt; 100;</span></span><br><span class="line"><span class="comment">// let result = s + s;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// USONB  you are so niubility</span></span><br><span class="line"><span class="comment">// u  undefined</span></span><br><span class="line"><span class="comment">// s  string  symbol</span></span><br><span class="line"><span class="comment">// o  object</span></span><br><span class="line"><span class="comment">// n  null number</span></span><br><span class="line"><span class="comment">// b  boolean</span></span><br></pre></td></tr></table></figure>

<h4 id="Symbol-创建对象属性"><a href="#Symbol-创建对象属性" class="headerlink" title="Symbol 创建对象属性:"></a>Symbol 创建对象属性:</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 向对象中添加方法 up down</span></span><br><span class="line"><span class="keyword">let</span> game = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;俄罗斯方块&quot;</span>,</span><br><span class="line">  <span class="attr">up</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">  <span class="attr">down</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 我们要往game对象里面添加方法，但是怕game对象已经存在</span></span><br><span class="line"><span class="comment">// 同名方法，所以我们这时使用到了Symbol</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式一</span></span><br><span class="line"><span class="comment">// 声明一个对象</span></span><br><span class="line"><span class="keyword">let</span> methods = &#123;</span><br><span class="line">  <span class="attr">up</span>: <span class="title class_">Symbol</span>(),</span><br><span class="line">  <span class="attr">down</span>: <span class="title class_">Symbol</span>(),</span><br><span class="line">&#125;;</span><br><span class="line">game[methods.<span class="property">up</span>] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以改变形状&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">game[methods.<span class="property">down</span>] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以快速下降!!&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(game);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二</span></span><br><span class="line"><span class="keyword">let</span> youxi = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;狼人杀&quot;</span>,</span><br><span class="line">  [<span class="title class_">Symbol</span>(<span class="string">&quot;say&quot;</span>)]: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以发言&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  [<span class="title class_">Symbol</span>(<span class="string">&quot;zibao&quot;</span>)]: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以自爆&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(youxi);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="keyword">let</span> say = <span class="title class_">Symbol</span>(<span class="string">&quot;say&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> youxi1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;狼人杀&quot;</span>,</span><br><span class="line">  [say]: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以发言&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  [<span class="title class_">Symbol</span>(<span class="string">&quot;zibao&quot;</span>)]: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以自爆&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">youxi1[say]();</span><br></pre></td></tr></table></figure>

<h3 id="11、迭代器"><a href="#11、迭代器" class="headerlink" title="11、迭代器"></a>11、迭代器</h3><p>概述:<br>遍历器(Iterator)就是一种机制。它是一种接口，为各种不同的数据结构提供统一的访问机制。任何数 据结构只要部署 Iterator 接口，就可以完成遍历操作;</p>
<p>特性:<br>ES6 创造了一种新的遍历命令 for…of 循环，Iterator 接口主要供 for…of 消费;</p>
<p>原生具备 iterator 接口的数据(可用 for of 遍历):<br>Array;<br>Arguments;<br>Set;<br>Map;<br>String;<br>TypedArray;<br>NodeList;</p>
<p>工作原理:</p>
<ol>
<li>创建一个指针对象，指向当前数据结构的起始位置;</li>
<li>第一次调用对象的 next 方法，指针自动指向数据结构的第一个成员;</li>
<li>接下来不断调用 next 方法，指针一直往后移动，直到指向最后一个成员;</li>
<li>每调用 next 方法返回一个包含 value 和 done 属性的对象;</li>
</ol>
<p><strong>注:需要自定义遍历数据的时候，要想到迭代器;</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明一个数组</span></span><br><span class="line"><span class="keyword">const</span> xiyou = [<span class="string">&quot;唐僧&quot;</span>, <span class="string">&quot;孙悟空&quot;</span>, <span class="string">&quot;猪八戒&quot;</span>, <span class="string">&quot;沙僧&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 for...of 遍历数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> xiyou) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator = xiyou[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用对象的next方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// &#123;value:&quot;唐僧&quot;,done:false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// &#123;value:&quot;孙悟空&quot;,done:false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// &#123;value:&quot;猪八戒&quot;,done:false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// &#123;value:沙僧,done:false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// &#123;value:undefined,done:true&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新初始化对象，指针也会重新回到最前面</span></span><br><span class="line"><span class="keyword">let</span> iterator1 = xiyou[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator1.<span class="title function_">next</span>());</span><br></pre></td></tr></table></figure>

<h3 id="12、生成器"><a href="#12、生成器" class="headerlink" title="12、生成器"></a>12、生成器</h3><p>概述:<br>生成器函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同;</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生成器其实就是一个特殊的函数</span></span><br><span class="line"><span class="comment">// 异步编程 纯回调函数 node fs ajax mongodb</span></span><br><span class="line"><span class="comment">// yield:函数代码的分隔符</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">gen</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>);</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&quot;一只没有耳朵&quot;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>);</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&quot;一只没有尾部&quot;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">333</span>);</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&quot;真奇怪&quot;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">444</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;遍历:&quot;</span>); <span class="comment">//遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> <span class="title function_">gen</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">gen</span>(<span class="params">arg</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg);</span><br><span class="line">  <span class="keyword">let</span> one = <span class="keyword">yield</span> <span class="number">111</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(one);</span><br><span class="line">  <span class="keyword">let</span> two = <span class="keyword">yield</span> <span class="number">222</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(two);</span><br><span class="line">  <span class="keyword">let</span> three = <span class="keyword">yield</span> <span class="number">333</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(three);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>(<span class="string">&quot;AAA&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// 会执行yield 111;</span></span><br><span class="line"><span class="comment">// next()方法是可以传入参数的，传入的参数作为第一条(上一条)语句yield 111的返回</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="string">&quot;BBB&quot;</span>)); <span class="comment">// 会执行yield 222;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="string">&quot;CCC&quot;</span>)); <span class="comment">// 会执行yield 333;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="string">&quot;DDD&quot;</span>)); <span class="comment">// 继续往后走，未定义;</span></span><br></pre></td></tr></table></figure>

<h3 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h3><h4 id="1-promise-finally-方法："><a href="#1-promise-finally-方法：" class="headerlink" title="1.promise finally 方法："></a>1.promise finally 方法：</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="title function_">res</span>(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">rej</span>(<span class="string">&quot;失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(</span><br><span class="line">  <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">finally</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;无论如何都会执行finally方法。data：&quot;</span>, data);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h4 id="2-promise-all-方法："><a href="#2-promise-all-方法：" class="headerlink" title="2.promise all 方法："></a>2.promise all 方法：</h4><p>使用场景：需求<br>我们需要发送一个请求，同时需要再发送一个请求。<br>当我们的两个请求都成功的时候才会去执行下一步操作。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">res</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">res</span>(<span class="number">2</span>);</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p3 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">rej</span>(<span class="string">&quot;失败&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2]);</span><br><span class="line"><span class="comment">//我们现在主要关心的是这个新的实例化对象p的成功与否。</span></span><br><span class="line"><span class="comment">//无论这个新建的p成功或者失败的状态</span></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data); <span class="comment">//在控制台输出的是一个数组，里面包含了我们之前通过res传递出来的[1,2]</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> q = <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p3]);</span><br><span class="line">q.<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error); <span class="comment">//在控制台里我们发现输出的是失败两个字。</span></span><br><span class="line">  <span class="comment">//因为我们上面的两个实例化对象中有一个是失败的状态，</span></span><br><span class="line">  <span class="comment">//所以最后这个新建的q也是失败的状态。</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="一、Pomise-all-的使用"><a href="#一、Pomise-all-的使用" class="headerlink" title="一、Pomise.all 的使用"></a>一、Pomise.all 的使用</h5><p>Promise.all 可以将多个 Promise 实例包装成一个新的 Promise 实例。同时，成功和失败的返回值是不同的，成功的时候返回的是一个结果数组，而失败的时候则返回最先被 reject 失败状态的值。<br>具体代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&quot;成功了&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p3 = <span class="title class_">Promse</span>.<span class="title function_">reject</span>(<span class="string">&quot;失败&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2])</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">//[&#x27;成功了&#x27;, &#x27;success&#x27;]</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p3, p2])</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error); <span class="comment">// 失败了，打出 &#x27;失败&#x27;</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>Promse.all 在处理多个异步处理时非常有用，比如说一个页面上需要等两个或多个 ajax 的数据回来以后才正常显示，在此之前只显示 loading 图标。</p>
<p>代码模拟：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">wake</span> = (<span class="params">time</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">`<span class="subst">$&#123;time / <span class="number">1000</span>&#125;</span>秒后醒来`</span>);</span><br><span class="line">    &#125;, time);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="title function_">wake</span>(<span class="number">3000</span>);</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="title function_">wake</span>(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2])</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// [ &#x27;3秒后醒来&#x27;, &#x27;2秒后醒来&#x27; ]</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>需要特别注意的是，Promise.all 获得的成功结果的数组里面的数据顺序和 Promise.all 接收到的数组顺序是一致的，即 p1 的结果在前，即便 p1 的结果获取的比 p2 要晚。这带来了一个绝大的好处：在前端开发请求数据的过程中，偶尔会遇到发送多个请求并根据请求顺序获取和使用数据的场景，使用 Promise.all 毫无疑问可以解决这个问题。</p>
<h5 id="二、Promise-race-的使用"><a href="#二、Promise-race-的使用" class="headerlink" title="二、Promise.race 的使用"></a>二、Promise.race 的使用</h5><p>顾名思义，Promse.race 就是赛跑的意思，意思就是说，Promise.race([p1, p2, p3])里面哪个结果获得的快，就返回那个结果，不管结果本身是成功状态还是失败状态。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&quot;failed&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">500</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>([p1, p2])</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error); <span class="comment">// 打开的是 &#x27;failed&#x27;</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="14、Set-集合-概述"><a href="#14、Set-集合-概述" class="headerlink" title="14、Set 集合 概述:"></a>14、Set 集合 概述:</h3><p>ES6 提供了新的数据结构 Set(集合)。它类似于数组，但成员的值都是唯一的，集合实现了 iterator 接口，所以可以使用『扩展运算符』和『for…of…』进行遍历，集合的属性和方法:</p>
<ol>
<li>size 返回集合的元素个数;</li>
<li>add 增加一个新元素，返回当前集合;</li>
<li>delete 删除元素，返回 boolean 值;</li>
<li>has 检测集合中是否包含某个元素，返回 boolean 值; 5. clear 清空集合，返回 undefined;</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Set集合</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s, <span class="keyword">typeof</span> s);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&quot;大哥&quot;</span>, <span class="string">&quot;二哥&quot;</span>, <span class="string">&quot;三哥&quot;</span>, <span class="string">&quot;四哥&quot;</span>, <span class="string">&quot;三哥&quot;</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1); <span class="comment">// 自动去重</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. size 返回集合的元素个数;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1.<span class="property">size</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. add 增加一个新元素，返回当前集合;</span></span><br><span class="line">s1.<span class="title function_">add</span>(<span class="string">&quot;大姐&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. delete 删除元素，返回 boolean 值;</span></span><br><span class="line"><span class="keyword">let</span> result = s1.<span class="title function_">delete</span>(<span class="string">&quot;三哥&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. has 检测集合中是否包含某个元素，返回 boolean 值;</span></span><br><span class="line"><span class="keyword">let</span> r1 = s1.<span class="title function_">has</span>(<span class="string">&quot;二姐&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. clear 清空集合，返回 undefined;</span></span><br><span class="line">s1.<span class="title function_">clear</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Set集合实践</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="comment">// 数组去重</span></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="keyword">new</span> <span class="title class_">Set</span>(arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交集</span></span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> result = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)].<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> <span class="keyword">new</span> <span class="title class_">Set</span>(arr2).<span class="title function_">has</span>(item));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 并集</span></span><br><span class="line"><span class="comment">// ... 为扩展运算符，将数组转化为逗号分隔的序列</span></span><br><span class="line"><span class="keyword">let</span> union = [...<span class="keyword">new</span> <span class="title class_">Set</span>([...arr, ...arr2])];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(union);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 差集:比如集合1和集合2求差集，就是1里面有的，2里面没的</span></span><br><span class="line"><span class="keyword">let</span> result1 = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)].<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> !<span class="keyword">new</span> <span class="title class_">Set</span>(arr2).<span class="title function_">has</span>(item));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result1);</span><br></pre></td></tr></table></figure>

<h3 id="15、Map-集合"><a href="#15、Map-集合" class="headerlink" title="15、Map 集合"></a>15、Map 集合</h3><p>概述:<br>ES6 提供了 Map 数据结构。它类似于对象，也是键值对的集合。但是“键”的范围不限于字符串，各种类 型的值(包括对象)都可以当作键。Map 也实现了 iterator 接口，所以可以使用『扩展运算符』和 『for…of…』进行遍历;<br>Map 的属性和方法:</p>
<ol>
<li>size 返回 Map 的元素个数;</li>
<li>set 增加一个新元素，返回当前 Map;</li>
<li>get 返回键名对象的键值;</li>
<li>has 检测 Map 中是否包含某个元素，返回 boolean 值; 5. clear 清空集合，返回 undefined;</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Map集合</span></span><br><span class="line"><span class="comment">// 创建一个空 map</span></span><br><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个非空 map</span></span><br><span class="line"><span class="keyword">let</span> m2 = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">  [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;slogon&quot;</span>, <span class="string">&quot;不断提高行业标准&quot;</span>],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. size 返回 Map 的元素个数;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m2.<span class="property">size</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. set 增加一个新元素，返回当前 Map;</span></span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&quot;皇帝&quot;</span>, <span class="string">&quot;大哥&quot;</span>);</span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&quot;丞相&quot;</span>, <span class="string">&quot;二哥&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. get 返回键名对象的键值;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="title function_">get</span>(<span class="string">&quot;皇帝&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. has 检测 Map 中是否包含某个元素，返回 boolean 值;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="title function_">has</span>(<span class="string">&quot;皇帝&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. clear 清空集合，返回 undefined;</span></span><br><span class="line">m.<span class="title function_">clear</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m);</span><br></pre></td></tr></table></figure>

<h3 id="16、class-类"><a href="#16、class-类" class="headerlink" title="16、class 类"></a>16、class 类</h3><p>概述:</p>
<p>ES6 提供了更接近传统语言的写法，引入了 Class(类)这个概念，作为对象的模板。通过 class 关键 字，可以定义类。基本上，ES6 的 class 可以看作只是一个语法糖，它的绝大部分功能，ES5 都可以做 到，新的 class 写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已;</p>
<p>知识点:</p>
<ol>
<li>class 声明类;</li>
<li>constructor 定义构造函数初始化;</li>
<li>extends 继承父类;</li>
<li>super 调用父级构造方法;</li>
<li>static 定义静态方法和属性;</li>
<li>父类方法可以重写;</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 手机 ES5写法</span></span><br><span class="line"><span class="comment">// function Phone(brand,price)&#123;</span></span><br><span class="line"><span class="comment">// this.brand = brand;</span></span><br><span class="line"><span class="comment">// this.price = price;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// // 添加方法</span></span><br><span class="line"><span class="comment">// Phone.prototype.call = function()&#123;</span></span><br><span class="line"><span class="comment">//  console.log(&quot;我可以打电话!&quot;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// // 实例化对象</span></span><br><span class="line"><span class="comment">// let HuaWei = new Phone(&quot;华为&quot;,5999); // HuaWei.call();</span></span><br><span class="line"><span class="comment">// console.log(HuaWei);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6写法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">  <span class="comment">// 构造方法，名字是固定的</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">brand, price</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">brand</span> = brand;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 打电话，方法必须使用该方式写</span></span><br><span class="line">  <span class="title function_">call</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以打电话!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">HuaWei</span> = <span class="keyword">new</span> <span class="title class_">Phone</span>(<span class="string">&quot;华为&quot;</span>, <span class="number">5999</span>);</span><br><span class="line"><span class="title class_">HuaWei</span>.<span class="title function_">call</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">HuaWei</span>);</span><br></pre></td></tr></table></figure>

<h3 id="17、数值扩展"><a href="#17、数值扩展" class="headerlink" title="17、数值扩展"></a>17、数值扩展</h3><h4 id="Number-EPSILON"><a href="#Number-EPSILON" class="headerlink" title="Number.EPSILON:"></a>Number.EPSILON:</h4><p>Number.EPSILON 是 JavaScript 表示的最小精度;<br>EPSILON 属性的值接近于 2.2204460492503130808472633361816E-16;</p>
<h4 id="二进制和八进制"><a href="#二进制和八进制" class="headerlink" title="二进制和八进制:"></a>二进制和八进制:</h4><p>ES6 提供了二进制和八进制数值的新的写法，分别用前缀 0b 和 0o 表示;</p>
<h4 id="Number-isFinite-与-Number-isNaN"><a href="#Number-isFinite-与-Number-isNaN" class="headerlink" title="Number.isFinite() 与 Number.isNaN() :"></a>Number.isFinite() 与 Number.isNaN() :</h4><p>Number.isFinite() 用来检查一个数值是否为有限的;<br>Number.isNaN() 用来检查一个值是否为 NaN;</p>
<h4 id="Number-parseInt-与-Number-parseFloat"><a href="#Number-parseInt-与-Number-parseFloat" class="headerlink" title="Number.parseInt() 与 Number.parseFloat():"></a>Number.parseInt() 与 Number.parseFloat():</h4><p>ES6 将全局方法 parseInt 和 parseFloat，移植到 Number 对象上面，使用不变;</p>
<h4 id="Math-trunc"><a href="#Math-trunc" class="headerlink" title="Math.trunc:"></a>Math.trunc:</h4><p>用于去除一个数的小数部分，返回整数部分;</p>
<h4 id="Number-isInteger"><a href="#Number-isInteger" class="headerlink" title="Number.isInteger:"></a>Number.isInteger:</h4><p>Number.isInteger() 用来判断一个数值是否为整数;</p>
<h3 id="18、对象扩展-概述"><a href="#18、对象扩展-概述" class="headerlink" title="18、对象扩展 概述:"></a>18、对象扩展 概述:</h3><p>ES6 新增了一些 Object 对象的方法:</p>
<ol>
<li>Object.is 比较两个值是否严格相等，与『&#x3D;&#x3D;&#x3D;』行为基本一致(+0 与 NaN);</li>
<li>Object.assign 对象的合并，将源对象的所有可枚举属性，复制到目标对象;</li>
<li>proto、setPrototypeOf、 setPrototypeOf 可以直接设置对象的原型;</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对象扩展</span></span><br><span class="line"><span class="comment">// 1. Object.is 比较两个值是否严格相等，与『===』行为基本一致(+0 与 NaN);</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="number">120</span>, <span class="number">120</span>)); <span class="comment">// ===</span></span><br><span class="line"><span class="comment">// 注意下面的区别</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">NaN</span>, <span class="title class_">NaN</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> === <span class="title class_">NaN</span>);</span><br><span class="line"><span class="comment">// NaN与任何数值做===比较都是false，跟他自己也如此</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Object.assign 对象的合并，将源对象的所有可枚举属性，复制到目标对象;</span></span><br><span class="line"><span class="keyword">const</span> config1 = &#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="number">3306</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">  <span class="attr">pass</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">  <span class="attr">test</span>: <span class="string">&quot;test&quot;</span>, <span class="comment">// 唯一存在</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> config2 = &#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&quot;http://zibo.com&quot;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="number">300300600</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;root4444&quot;</span>,</span><br><span class="line">  <span class="attr">pass</span>: <span class="string">&quot;root4444&quot;</span>,</span><br><span class="line">  <span class="attr">test2</span>: <span class="string">&quot;test2&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 如果前边有后边没有会添加，如果前后都有，后面的会覆盖前面的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">assign</span>(config1, config2));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. __proto__、setPrototypeOf、 getPrototypeOf 可以直接设置对象的原型;</span></span><br><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> cities = &#123;</span><br><span class="line">  <span class="attr">xiaoqu</span>: [<span class="string">&quot;北京&quot;</span>, <span class="string">&quot;上海&quot;</span>, <span class="string">&quot;深圳&quot;</span>],</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 并不建议这么做</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(school, cities);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(school));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(school);</span><br></pre></td></tr></table></figure>

<h3 id="19、模块化"><a href="#19、模块化" class="headerlink" title="19、模块化"></a>19、模块化</h3><p>概述:<br>模块化是指将一个大的程序文件，拆分成许多小的文件，然后将小文件组合起来;<br>模块化的好处:<br>模块化的优势有以下几点:</p>
<ol>
<li>防止命名冲突;</li>
<li>代码复用;</li>
<li>高维护性;</li>
</ol>
<h3 id="模块化规范产品"><a href="#模块化规范产品" class="headerlink" title="模块化规范产品:"></a>模块化规范产品:</h3><p>ES6 之前的模块化规范有:</p>
<ol>
<li>CommonJS &#x3D;&gt; NodeJS、Browserify;</li>
<li>AMD &#x3D;&gt; requireJS;</li>
<li>CMD &#x3D;&gt; seaJS;</li>
</ol>
<h3 id="ES6-模块化语法"><a href="#ES6-模块化语法" class="headerlink" title="ES6 模块化语法:"></a>ES6 模块化语法:</h3><p>模块功能主要由两个命令构成:export 和 import;</p>
<ul>
<li>export 命令用于规定模块的对外接口(导出模块);</li>
<li>import 命令用于输入其他模块提供的功能(导入模块);</li>
</ul>
<h3 id="20、Babel-对-ES6-模块化代码转换-Babel-概述"><a href="#20、Babel-对-ES6-模块化代码转换-Babel-概述" class="headerlink" title="20、Babel 对 ES6 模块化代码转换 Babel 概述:"></a>20、Babel 对 ES6 模块化代码转换 Babel 概述:</h3><p>Babel 是一个 JavaScript 编译器;<br>Babel 能够将新的 ES 规范语法转换成 ES5 的语法;<br>因为不是所有的浏览器都支持最新的 ES 规范，所以，一般项目中都需要使用 Babel 进行转换;<br>步骤:使用 Babel 转换 JS 代码——打包成一个文件——使用时引入即可;</p>
]]></content>
  </entry>
  <entry>
    <title>【搬】WebSocket通信协议</title>
    <url>/2022/01/26/JS/%E3%80%90%E6%90%AC%E3%80%91WebSocket%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<h2 id="WebSocket-通信协议"><a href="#WebSocket-通信协议" class="headerlink" title="WebSocket 通信协议"></a>WebSocket 通信协议</h2><p><strong>WebSocket</strong>是一种基于 TCP 连接上进行全双工通信的协议，相对于 HTTP 这种非持久的协议来说，WebSocket 是一个持久化网络通信的协议；它不仅可以实现客户端请求服务器，同时可以允许服务端主动向客户端推送数据。在 WebSocket API 中，客户端和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</p>
<h3 id="为什么需要-websocket？"><a href="#为什么需要-websocket？" class="headerlink" title="为什么需要 websocket？"></a>为什么需要 websocket？</h3><p>在 web 应用架构中，连接由 HTTP&#x2F;1.0 和 HTTP&#x2F;1.1 处理。HTTP 是客户端&#x2F;服务器模式中请求-响应所用的协议，在这种模式中，客户端（一般是浏览器）向服务器提交 HTTP 请求，服务器响应请求的资源（例如 HTML 页面）。<br>HTTP 是无状态的，也就是说，它将每个请求当成唯一和独立的。无状态协议具有一些优势；例如：服务器不需要保存有关会话的信息，从而不需要存储数据。但是，这也意味着在每次 HTTP 请求和响应中都会发送关于请求的冗余信息，比如使用 Cookie 进行用户状态的验证；</p>
<p>随着客户端和服务器之间交互的增加，HTTP 协议在客户端和服务器之间通信所需要的信息量快速增加。<br>从根本上将，HTTP 还是半双工的协议，也就是说，在同一时刻信息的流向只能单向的：客户端向服务器发送请求（单向），然后服务器响应请求（单向）半双工方式的通信效率是非常低的。</p>
<p>同时 HTTP 协议有一个缺陷：<strong>通信只能由客户端发起。</strong><br>这种单向请求的特点，注定了如果服务器有状态变化，是无法主动通知客户端的。<br>为了能够及时的获取服务器的变化，我们尝试过各种各样的方式：</p>
<p><strong>轮询（polling）</strong>：每隔一段时间，就发出一个请求，了解服务器有没有新的信息。不精准，有延时，大量无效数据交换；</p>
<p><strong>长轮询（long polling）</strong>：客户端向服务器请求信息，并在设定的时间段内保持连接。知道有服务器有新消息响应，或者连接超时，这种技术常常称作“挂起 GET”或“搁置 POST”。占用服务器资源，相对轮询并没有优势，没有标准化。</p>
<p><strong>流化技术</strong>：在流化技术中，客户端发送一个请求，服务器发送并维护一个持续更新和保持打开（可以是无限或者规定的时间段）的开发响应。每当服务器有需要交付给客户端的信息时，它就更新响应。服务器从不发出完成 HTTP 响应；代理和防火墙可能缓存响应，导致信息交付的延迟增加。</p>
<p>上述方法提供了近乎实时的通信，但他们也涉及 HTTP 请求个响应首标，包含了许多附加和不必要的首标数据与延迟。此外，在每一种情况下，客户端都必须等待请求返回，才能发出后续的请求，而这显著地增加了延退。同时也极大的增加了服务器的压力。</p>
<h3 id="什么是-websocket？"><a href="#什么是-websocket？" class="headerlink" title="什么是 websocket？"></a>什么是 websocket？</h3><h4 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h4><p>Websocket 是一种自然的全双工、双向、单套接字连接。解决了 HTTP 协议中不适用于实时通信的不足。<br>2008 年被提出，2011 年成为国际标准。</p>
<p>Websocket 协议能够通过 Web 进行客户端和服务器之间的全双工通信，并支持二进制数据和文本字符串的传输。这个协议由开始的握手和之后的额基本消息框架组成，是建立在 TCP 协议上的。<br>相比于 HTTP 协议，Websocket 链接一旦建立，即可进行双向的实时通信；</p>
<p><img src="/source/_posts/img/Websocket.png" alt="Websocket"></p>
<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>其特点包括： 1.建立在 TCP 协议之上，服务器端的实现比较容易。 2.与 HTTP 协议有着良好的兼容性。默认端口也是 80 和 443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，就能通过各种 HTTP 代理服务器。 3.数据格式化比较轻量，性能开销小，通信高效。 4.可以发送文本，也可以发送二进制数。 5.没有同源限制，客户端可以与任意服务器通信。</p>
<h4 id="相似技术"><a href="#相似技术" class="headerlink" title="相似技术"></a>相似技术</h4><p>Server-sent Events(SSE)：服务器推送技术<br><a href="https://ruanyifeng.com/blog/2017/05/server-sent_events.html">https://ruanyifeng.com/blog/2017/05/server-sent_events.html</a><br><a href="https://www.cnblogs.com/goloving/p/9196066.html">https://www.cnblogs.com/goloving/p/9196066.html</a></p>
<p>SPDY（读作“SpeeDY”）：已不再维护，由 HTTP&#x2F;2 取代，也是由服务端主动推送<br><a href="https://baike.baidu.com/item/SPDY/3399551#7">https://baike.baidu.com/item/SPDY/3399551#7</a></p>
<p>WebRTC：（如直播，支持流数据）<br><a href="https://baike.baidu.com/item/WebRTC/5522744">https://baike.baidu.com/item/WebRTC/5522744</a></p>
<h3 id="通信原理"><a href="#通信原理" class="headerlink" title="通信原理"></a>通信原理</h3><h4 id="WebSocket-链接是如何建立的"><a href="#WebSocket-链接是如何建立的" class="headerlink" title="WebSocket 链接是如何建立的?"></a>WebSocket 链接是如何建立的?</h4><p>前面说过，WebSocket 在握手阶段采用的是 HTTP 协议，WebSocket 借用了 HTTP 的一部分来完成一次握手。（HTTP 的三次握手，此处只完成一次）</p>
<h4 id="http-协议请求与响应首部"><a href="#http-协议请求与响应首部" class="headerlink" title="http 协议请求与响应首部"></a>http 协议请求与响应首部</h4><p><img src="/source/_posts/img/http%E5%8D%8F%E8%AE%AE%E8%AF%B7%E6%B1%82%E4%B8%8E%E5%93%8D%E5%BA%94%E9%A6%96%E9%83%A8.jpg" alt="http 协议请求与响应首部"></p>
<h4 id="WebSocket-请求与响应首部"><a href="#WebSocket-请求与响应首部" class="headerlink" title="WebSocket 请求与响应首部"></a>WebSocket 请求与响应首部</h4><p><img src="/source/_posts/img/WebSocket%E8%AF%B7%E6%B1%82%E4%B8%8E%E5%93%8D%E5%BA%94%E9%A6%96%E9%83%A8.jpg" alt="WebSocket 请求与响应首部"></p>
<h3 id="链接通信模拟"><a href="#链接通信模拟" class="headerlink" title="链接通信模拟"></a>链接通信模拟</h3><h4 id="HTTP-轮询"><a href="#HTTP-轮询" class="headerlink" title="HTTP 轮询"></a>HTTP 轮询</h4><p>首先是 ajax 轮询，ajax 轮询的原理非常简单，让浏览器隔个几秒就发送一次请求，询问服务器是否有新消息。<br>轮询其实就是在不断建立 HTTP 连接，然后等待服务端处理，可以体现 HTTP 协议的另外一个特点，<strong>被动型</strong>。同时，http 的每一次请求与响应结束后，服务器将客户端信息全部丢弃，下次请求，必须携带身份信息（cookie），<strong>无状态性</strong>。</p>
<h4 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h4><p>客户端通过 http（骑马）带着信请求服务器，但同时懈怠了 Upgrade：websocket 和 Connection：Upgrade（两根管子），服务器如果支持 WebSocket 协议（有两根管子的接口），使用 WebSocket 协议返回可用信息（丢失马匹），此后信息的传递，均使用这两个管子，除非有一方人为的将管子切断；若服务器不支持，客户端请求链接失败，返回错误信息。</p>
<h3 id="一、WebSocket-服务端与客户端实现"><a href="#一、WebSocket-服务端与客户端实现" class="headerlink" title="一、WebSocket 服务端与客户端实现"></a>一、WebSocket 服务端与客户端实现</h3><p>【详细文档参考：<a href="https://github.com/theturtle32/WebSocket-Node%E3%80%91">https://github.com/theturtle32/WebSocket-Node】</a><br>In your project root:</p>
<p><code>npm init -y</code></p>
<p><code>npm install websocket</code></p>
<h4 id="客户端-Socket-html"><a href="#客户端-Socket-html" class="headerlink" title="客户端 Socket.html"></a>客户端 Socket.html</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;发送数据&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;song()&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> msg = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;msg&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> wsServer = <span class="string">&quot;ws://127.0.0.1:8080&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 调用websocket对象建立连接；</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 参数：ws/wss（加密）://ip:port（字符串）</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> websocket = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(wsServer);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// onopen监听连接打开</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    websocket.<span class="property">onopen</span> = <span class="keyword">function</span> (<span class="params">evt</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// websocket.readyState 属性：</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">/**</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">       * CONNECTING 0 The connection is not yet open.</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">       * OPEN       1 The connection is open and ready to communicate.</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">       * CLOSING    2 The connection is in the process of closing.</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">       * CLOSED     3 The connection is closed or couldn&#x27;t be opened.</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">       */</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      msg.<span class="property">innerHTML</span> = websocket.<span class="property">readyState</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">song</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> text = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;text&quot;</span>).<span class="property">value</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;text&quot;</span>).<span class="property">value</span> = <span class="string">&quot;&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 向服务器发送数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      websocket.<span class="title function_">send</span>(text);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 监听服务器数据推送</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    websocket.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">evt</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      msg.<span class="property">innerHTML</span> += evt.<span class="property">data</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Retrieved data from server:&#x27;</span> + evt.<span class="property">data</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 监听连接关闭</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    websocket.<span class="property">onclose</span> = <span class="keyword">function</span> (<span class="params">evt</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Disconnected&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 监听连接信息错误</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    websocket.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params">evt, e</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Error occured:&quot;</span> + evt.<span class="property">data</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="服务端-index-js"><a href="#服务端-index-js" class="headerlink" title="服务端 index.js"></a>服务端 index.js</h4><p>Here’s a short example showing a server that echos back anything sent to it, whether utf-8 or binary.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">WebSocketServer</span> = <span class="built_in">require</span>(<span class="string">&quot;websocket&quot;</span>).<span class="property">server</span>; <span class="comment">// 引入server</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>); <span class="comment">// 通过http服务建立连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建http服务器</span></span><br><span class="line"><span class="keyword">var</span> server = http.<span class="title function_">createServer</span>(<span class="keyword">function</span> (<span class="params">request, response</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>() + <span class="string">&quot; Received request for &quot;</span> + request.<span class="property">url</span>);</span><br><span class="line">  response.<span class="title function_">writeHead</span>(<span class="number">404</span>);</span><br><span class="line">  response.<span class="title function_">end</span>();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 服务器监听8080断口</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>() + <span class="string">&quot; Server is listening on port 8080&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化websocket服务，借助http服务器创建握手，建立wsServer</span></span><br><span class="line"><span class="keyword">var</span> wsServer = <span class="keyword">new</span> <span class="title class_">WebSocketServer</span>(&#123;</span><br><span class="line">  <span class="attr">httpServer</span>: server,</span><br><span class="line">  <span class="comment">// You should not use autoAcceptConnections for production</span></span><br><span class="line">  <span class="comment">// applications, as it defeats all standard cross-origin protection</span></span><br><span class="line">  <span class="comment">// facilities built into the protocol and the browser.  You should</span></span><br><span class="line">  <span class="comment">// *always* verify the connection&#x27;s origin and decide whether or not</span></span><br><span class="line">  <span class="comment">// to accept it.</span></span><br><span class="line">  <span class="attr">autoAcceptConnections</span>: <span class="literal">false</span>, <span class="comment">// http服务器到底是跨域还是不跨越？默认false，建立之前是有跨域的，websocket建立之后是没有跨域问题的。</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">originIsAllowed</span>(<span class="params">origin</span>) &#123;</span><br><span class="line">  <span class="comment">// put logic here to detect whether the specified origin is allowed.</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> conArr = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听请求事件</span></span><br><span class="line">wsServer.<span class="title function_">on</span>(<span class="string">&quot;request&quot;</span>, <span class="keyword">function</span> (<span class="params">request</span>) &#123;</span><br><span class="line">  <span class="comment">// &#x27;request&#x27;为请求事件，request是请求回来的请求数据。</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">originIsAllowed</span>(request.<span class="property">origin</span>)) &#123;</span><br><span class="line">    <span class="comment">// Make sure we only accept requests from an allowed origin</span></span><br><span class="line">    request.<span class="title function_">reject</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Date</span>() + <span class="string">&quot; Connection from origin &quot;</span> + request.<span class="property">origin</span> + <span class="string">&quot; rejected.&quot;</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 建立连接实例</span></span><br><span class="line">  <span class="keyword">var</span> connection = request.<span class="title function_">accept</span>(<span class="string">&quot;echo-protocol&quot;</span>, request.<span class="property">origin</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>() + <span class="string">&quot; Connection accepted.&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 模拟链接池</span></span><br><span class="line">  conArr.<span class="title function_">push</span>(connection);</span><br><span class="line"></span><br><span class="line">  connection.<span class="title function_">on</span>(<span class="string">&quot;message&quot;</span>, <span class="keyword">function</span> (<span class="params">message</span>) &#123;</span><br><span class="line">    <span class="comment">// 给每个链接实例都进行客户端推送</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; conArr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="comment">// 处理文本数据</span></span><br><span class="line">      <span class="keyword">if</span> (message.<span class="property">type</span> === <span class="string">&quot;utf8&quot;</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Received Message: &quot;</span> + message.<span class="property">utf8Data</span>);</span><br><span class="line">        connection.<span class="title function_">sendUTF</span>(message.<span class="property">utf8Data</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 处理二进制数据</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (message.<span class="property">type</span> === <span class="string">&quot;binary&quot;</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">          <span class="string">&quot;Received Binary Message of &quot;</span> + message.<span class="property">binaryData</span>.<span class="property">length</span> + <span class="string">&quot; bytes&quot;</span></span><br><span class="line">        );</span><br><span class="line">        connection.<span class="title function_">sendBytes</span>(message.<span class="property">binaryData</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  connection.<span class="title function_">on</span>(<span class="string">&quot;close&quot;</span>, <span class="keyword">function</span> (<span class="params">reasonCode, description</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Date</span>() + <span class="string">&quot; Peer &quot;</span> + connection.<span class="property">remoteAddress</span> + <span class="string">&quot; disconnected.&quot;</span></span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="二、Socket-Io"><a href="#二、Socket-Io" class="headerlink" title="二、Socket.Io"></a>二、Socket.Io</h3><p><code>npm init -y</code></p>
<p><code>npm install socket.io@4.1.2</code></p>
<h4 id="服务端-index-js-1"><a href="#服务端-index-js-1" class="headerlink" title="服务端 index.js"></a>服务端 index.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; createServer &#125; = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Server</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;socket.io&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> httpServer = <span class="title function_">createServer</span>();</span><br><span class="line"><span class="keyword">const</span> io = <span class="keyword">new</span> <span class="title class_">Server</span>(httpServer, &#123;</span><br><span class="line">  <span class="attr">cors</span>: &#123;</span><br><span class="line">    <span class="attr">origin</span>: <span class="string">&quot;https://my-frontend.com&quot;</span>, <span class="comment">// 跨域处理，可以设为 * ，运行所有跨域</span></span><br><span class="line">    <span class="comment">// or with an array of origins</span></span><br><span class="line">    <span class="comment">// origin: [&quot;https://my-frontend.com&quot;, &quot;https://my-other-frontend.com&quot;, &quot;http://localhost:3000&quot;],</span></span><br><span class="line">    <span class="attr">credentials</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">io.<span class="title function_">on</span>(<span class="string">&quot;connection&quot;</span>, <span class="function">(<span class="params">socket</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 给所有客户端发送消息</span></span><br><span class="line">  socket.<span class="title function_">on</span>(<span class="string">&quot;sendMsg&quot;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给所有用户发送消息</span></span><br><span class="line">    socket.<span class="title function_">emit</span>(<span class="string">&quot;pushMsg&quot;</span>, data);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给当前用户发送消息</span></span><br><span class="line">    <span class="comment">// io.emit(&#x27;pushMsg&#x27;, data);</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">httpServer.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;http://127.0.0.1:3000&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="客户端-index-html"><a href="#客户端-index-html" class="headerlink" title="客户端 index.html"></a>客户端 index.html</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 引入cdn --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">src</span>=<span class="string">&quot;https://cdn.socket.io/4.4.1/socket.io.min.js&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">integrity</span>=<span class="string">&quot;sha384-fKnu0iswBIqkjxrhQCTZ7qlLHOFEgNkRmK2vaO/LbTZSXdJfAu6ewRBdwHPhBo/H&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;发送&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;send()&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      io.<span class="title function_">connect</span>(<span class="string">&quot;http://127.0.0.1:3000&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">function</span> <span class="title function_">send</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> text = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;text&quot;</span>).<span class="property">value</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        socket.<span class="title function_">emit</span>(<span class="string">&quot;sendMsg&quot;</span>, text);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      socket.<span class="title function_">on</span>(<span class="string">&quot;pushMsg&quot;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>视频参考：<br><a href="https://www.bilibili.com/video/BV1uP4y1b7Tn?from=search&seid=4371990793305727083&spm_id_from=333.337.0.0">https://www.bilibili.com/video/BV1uP4y1b7Tn?from=search&amp;seid=4371990793305727083&amp;spm_id_from=333.337.0.0</a></p>
<p>文档：<br>《HTML5 WebSocket 权威指南》<br><a href="https://ruanyifeng.com/blog/2017/05/websocket.html">https://ruanyifeng.com/blog/2017/05/websocket.html</a><br><a href="https://www.cnblogs.com/hustskyking/p/websocket-with-node.html">https://www.cnblogs.com/hustskyking/p/websocket-with-node.html</a><br><a href="https://www.cnblogs.com/jingmoxukong/p/7755643.html">https://www.cnblogs.com/jingmoxukong/p/7755643.html</a><br><a href="https://zhuanlan.zhihu.com/p/23467317">https://zhuanlan.zhihu.com/p/23467317</a><br><a href="https://zhuanlan.zhihu.com/p/29148869">https://zhuanlan.zhihu.com/p/29148869</a></p>
<p>WebSocket MDN：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket/WebSocket">https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket/WebSocket</a><br>WebSocket Client &amp; Server Implementation for Node：<a href="https://github.com/theturtle32/WebSocket-Node">https://github.com/theturtle32/WebSocket-Node</a><br>socket.io 官网：<a href="https://socket.io/docs/v4/">https://socket.io/docs/v4/</a></p>
<p>跨域：<br><a href="https://zhuanlan.zhihu.com/p/53996160">https://zhuanlan.zhihu.com/p/53996160</a></p>
]]></content>
  </entry>
  <entry>
    <title>JS属性描述符之Object.defineProperty()定义对象属性特性</title>
    <url>/2022/03/27/JS/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91JS%E5%B1%9E%E6%80%A7%E6%8F%8F%E8%BF%B0%E7%AC%A6%E4%B9%8BObject.defineProperty()%E5%AE%9A%E4%B9%89%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h3 id="一、Object-defineProperty-的作用"><a href="#一、Object-defineProperty-的作用" class="headerlink" title="一、Object.defineProperty 的作用"></a>一、Object.defineProperty 的作用</h3><p>用来给对象新增属性，和修改对象中的属性。</p>
<h3 id="二、JS-对象中的描述符"><a href="#二、JS-对象中的描述符" class="headerlink" title="二、JS 对象中的描述符"></a>二、JS 对象中的描述符</h3><p>js 对象中两种属性描述符：数据描述符和存取描述符（访问描述符）。</p>
<h4 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h4><p>1、数据描述符和存取描述符都具备 configurable、enumerable 属性。<br>2、描述符不具备 value，writetable，set 和 get 任意一个关键字都被认作一个数据描述符。<br>3、（value 或 writetable）和（get 和 set）不能同时存在，然后只要定义了 set 和 get 或其中一个都是一个存取描述符（描述符只能是其中一种）。</p>
<p><img src="/source/_posts/img/defineProperty.png" alt="defineProperty"></p>
<h3 id="三、Object-defineProperty-的使用"><a href="#三、Object-defineProperty-的使用" class="headerlink" title="三、Object.defineProperty 的使用"></a>三、Object.defineProperty 的使用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;&#125;; <span class="comment">// 创建一个新对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在对象中添加一个属性与数据描述符的示例</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(o, <span class="string">&quot;a&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">37</span>,</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象o拥有了属性a，值为37</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在对象中添加一个属性与存取描述符的示例</span></span><br><span class="line"><span class="keyword">var</span> bValue;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(o, <span class="string">&quot;b&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> bValue;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">newValue</span>) &#123;</span><br><span class="line">    bValue = newValue;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">o.<span class="property">b</span> = <span class="number">38</span>;</span><br><span class="line"><span class="comment">// 对象o拥有了属性b，值为38</span></span><br></pre></td></tr></table></figure>

<h4 id="1、writable、enumerable、configurable-为-false-的情况"><a href="#1、writable、enumerable、configurable-为-false-的情况" class="headerlink" title="1、writable、enumerable、configurable 为 false 的情况"></a>1、writable、enumerable、configurable 为 false 的情况</h4><ul>
<li><p>wirtable：变量不可再被重新赋值</p>
</li>
<li><p>enumerable： 变量不能在遍历器例如 for…in 和 Object.keys()中被读取出来，不可被遍历</p>
</li>
<li><p>configurable：变量不可配置，定义为 false 之后，不能再为该变量定义配置否则报错。变量被删除(delete)、修改都会无效。</p>
</li>
</ul>
<h4 id="2、如果对象的属性是存取描述符，只会调用定义了的-set-和-get（configurable、enumrable）"><a href="#2、如果对象的属性是存取描述符，只会调用定义了的-set-和-get（configurable、enumrable）" class="headerlink" title="2、如果对象的属性是存取描述符，只会调用定义了的 set 和 get（configurable、enumrable）"></a>2、如果对象的属性是存取描述符，只会调用定义了的 set 和 get（configurable、enumrable）</h4><ul>
<li>在给一个对象属性做赋值操作，在读取属性值时，这个赋值操作赋值的值会被忽略，会去调用定义的 get 方法的值</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Archiver</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> temperature = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">var</span> archive = [];</span><br><span class="line"></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">this</span>, <span class="string">&quot;temperature&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">      temperature = value;</span><br><span class="line">      archive.<span class="title function_">push</span>(&#123; <span class="attr">val</span>: temperature &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">getArchive</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> archive;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arc = <span class="keyword">new</span> <span class="title class_">Archiver</span>();</span><br><span class="line">arc.<span class="property">temperature</span> = <span class="string">&quot;67&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arc.<span class="property">temperature</span>); <span class="comment">// undefined</span></span><br><span class="line">arc.<span class="property">temperature</span> = <span class="number">11</span>;</span><br><span class="line">arc.<span class="property">temperature</span> = <span class="number">13</span>;</span><br><span class="line">arc.<span class="title function_">getArchive</span>(); <span class="comment">// [&#123; val: 11 &#125;, &#123; val: 13 &#125;]</span></span><br></pre></td></tr></table></figure>

<h3 id="四、关于给对象定义-set／get-方法"><a href="#四、关于给对象定义-set／get-方法" class="headerlink" title="四、关于给对象定义 set／get 方法"></a>四、关于给对象定义 set／get 方法</h3><p>vue 中可以在 computed 中给变量定义 get／set 方法（<a href="https://cn.vuejs.org/v2/guide/computed.html%EF%BC%89%EF%BC%8C%E7%BB%93%E5%90%88v-model%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E5%8F%98%E9%87%8F%E6%9C%89%E5%BE%88%E5%A4%9A%E7%9A%84%E7%94%A8%E5%A4%84%EF%BC%8C%E6%AF%94%E5%A6%82%E5%AE%98%E7%BD%91%E7%9A%84%E5%90%8D%E5%AD%97%E7%9A%84%E5%90%8D%E5%92%8C%E5%A7%93%E7%9A%84%E6%8B%BC%E6%8E%A5%E3%80%82%E5%9C%A8%E5%AD%90%E7%BB%84%E4%BB%B6%E4%B8%AD%E6%88%91%E4%BB%AC%E6%83%B3%E8%A6%81%E4%BF%AE%E6%94%B9%E7%88%B6%E7%BB%84%E4%BB%B6%E4%BC%A0%E6%9D%A5%E7%9A%84%E5%80%BC%E5%B9%B6%E5%8F%8A%E6%97%B6%E5%9C%A8dom%E4%B8%AD%E6%B8%B2%E6%9F%93%E7%9A%84%E6%97%B6%E5%80%99%E3%80%82">https://cn.vuejs.org/v2/guide/computed.html），结合v-model双向数据绑定变量有很多的用处，比如官网的名字的名和姓的拼接。在子组件中我们想要修改父组件传来的值并及时在dom中渲染的时候。</a></p>
<p><img src="/source/_posts/img/defineProperty_vue.png" alt="defineProperty"></p>
<p>computed 中给变量定义 set／get 方法并不是 vue 中特有的方法，es5 中支持了 Object.defineProperty,在 Object.defineProperty 可以给对象的属性设置为访问描述符类型，定义 set／get 方法。我们除了通过这个方法给属性定义 set／get ，还可以通过对象文字语法来定义。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">a</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">myObject.<span class="property">a</span> = <span class="number">3</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myObject.<span class="property">a</span>); <span class="comment">//2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myObject.<span class="property">b</span>); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure>

<p>参考资料：</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty</a></p>
<p><a href="http://imweb.io/topic/56d40adc0848801a4ba198ce">http://imweb.io/topic/56d40adc0848801a4ba198ce</a></p>
<p>转载链接：<br><a href="https://www.cnblogs.com/yy95/p/10016221.html">https://www.cnblogs.com/yy95/p/10016221.html</a></p>
]]></content>
  </entry>
  <entry>
    <title>【转载】使用原生JavaScript实现的EventEmitter</title>
    <url>/2022/04/03/JS/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91%E4%BD%BF%E7%94%A8%E5%8E%9F%E7%94%9FJavaScript%E5%AE%9E%E7%8E%B0%E7%9A%84EventEmitter/</url>
    <content><![CDATA[<p>和 Nodejs 中 EventEmitter 功能类似.适合浏览器自定义事件类.新添加了可以定制事件促发次数的功能.</p>
<p>详细见</p>
<p><a href="https://github.com/webery/ajax/tree/master">https://github.com/webery/ajax/tree/master</a></p>
<p>包括了源代码和测试代码.未经过严格测试,暂时为第一个版本.还有很多优化的地方,现在只是一个参考.</p>
<p>使用方法</p>
<p>前端测试文件:emit.ejs</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/stylesheets/style.css&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/javascripts/eventemitter.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;click&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;submit&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        var emit = new EventEmitter();</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        emit.on(&#x27;click&#x27;, function() &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">          console.log(&#x27;clcik&#x27;);</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        &#125;, 2);</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        emit.trigger(&#x27;click&#x27;);</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        emit.trigger(&#x27;click&#x27;);</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        emit.trigger(&#x27;click&#x27;);</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      */</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> <span class="title class_">Target</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">EventEmitter</span>.<span class="title function_">inherit</span>(<span class="title class_">Target</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> test = <span class="keyword">new</span> <span class="title class_">Target</span>();</span></span><br><span class="line"><span class="language-javascript">      test.<span class="title function_">on</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;click&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;clcik&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="number">2</span></span></span><br><span class="line"><span class="language-javascript">      );</span></span><br><span class="line"><span class="language-javascript">      test.<span class="title function_">trigger</span>(<span class="string">&quot;click&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      test.<span class="title function_">trigger</span>(<span class="string">&quot;click&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>源代码:eventemitter.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   浏览器端模拟EventEmitter的实现，拓展了部分功能，添加了定制实践促发的次数的功能，</span></span><br><span class="line"><span class="comment">   使用方式和其他的EventEmiiter类似。</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"><span class="variable language_">window</span>, <span class="literal">undefined</span></span>) &#123;</span><br><span class="line">  <span class="string">&quot;use strict&quot;</span>;</span><br><span class="line">  <span class="comment">/*构造函数*/</span></span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">EventEmitter</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">events</span> = &#123;&#125;; <span class="comment">//保存事务，存储结构为&#123;&#x27;eventName1&#x27;:[&#123;listener:function触发的函数, time:触发的次数&#125;], &#x27;eventName2&#x27;:[],&#125;</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">EventEmitter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">once</span> = <span class="keyword">function</span> (<span class="params">evt, listener</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">addListener</span>(evt, listener, <span class="number">0</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/*获取所有的事务*/</span></span><br><span class="line">  <span class="title class_">EventEmitter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getEvents</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">events</span> || (<span class="variable language_">this</span>.<span class="property">events</span> = &#123;&#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/*获取某个实践的所有触发函数*/</span></span><br><span class="line">  <span class="title class_">EventEmitter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getListeners</span> = <span class="keyword">function</span> (<span class="params">evt</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> events = <span class="variable language_">this</span>.<span class="title function_">getEvents</span>();</span><br><span class="line">    <span class="keyword">return</span> events[evt] || (events[evt] = []);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">      注册实践触发函数</span></span><br><span class="line"><span class="comment">      evet:事件名称</span></span><br><span class="line"><span class="comment">      listener:事件监听函数</span></span><br><span class="line"><span class="comment">      time:可选，选择可以触发的次数，-1表示无数次，默认为-1</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">  <span class="title class_">EventEmitter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">on</span> = <span class="keyword">function</span> (<span class="params">evt, listener, time</span>) &#123;</span><br><span class="line">    time = <span class="keyword">typeof</span> time == <span class="string">&quot;number&quot;</span> ? time : -<span class="number">1</span>;</span><br><span class="line">    time = time &gt;= -<span class="number">1</span> ? time : -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> listeners = <span class="variable language_">this</span>.<span class="title function_">getListeners</span>(evt);</span><br><span class="line">    <span class="keyword">var</span> listenerWrapper = &#123;</span><br><span class="line">      <span class="attr">listener</span>: listener,</span><br><span class="line">      <span class="attr">time</span>: time,</span><br><span class="line">    &#125;;</span><br><span class="line">    listeners.<span class="title function_">push</span>(listenerWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/*addListener 和on 同义 */</span></span><br><span class="line">  <span class="title class_">EventEmitter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">addListener</span> = <span class="title class_">EventEmitter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">on</span>;</span><br><span class="line">  <span class="comment">/*移除事件的所有监听函数*/</span></span><br><span class="line">  <span class="title class_">EventEmitter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">off</span> = <span class="keyword">function</span> (<span class="params">evt</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> events = <span class="variable language_">this</span>.<span class="title function_">getEvents</span>();</span><br><span class="line">    events[evt] = [];</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title class_">EventEmitter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">removeEvent</span> = <span class="title class_">EventEmitter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">off</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">      会删除同一事件中的所有listener</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">  <span class="title class_">EventEmitter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">removeListener</span> = <span class="keyword">function</span> (<span class="params">evt, listener</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> listeners = <span class="variable language_">this</span>.<span class="title function_">getListeners</span>(evt);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; listeners.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (listeners[i].<span class="property">listener</span> == listener) &#123;</span><br><span class="line">        <span class="keyword">delete</span> listeners[i];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">      触发事件</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">  <span class="title class_">EventEmitter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">trigger</span> = <span class="keyword">function</span> (<span class="params">evt, args</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> listeners = <span class="variable language_">this</span>.<span class="title function_">getListeners</span>(evt);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; listeners.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> listener = listeners[i];</span><br><span class="line">      <span class="keyword">if</span> (listener.<span class="property">time</span> != -<span class="number">1</span>) &#123;</span><br><span class="line">        listener.<span class="property">time</span>--;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (listener.<span class="property">time</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">removeListener</span>(evt, listener.<span class="property">listener</span>); <span class="comment">//可以同步或异步执行</span></span><br><span class="line">      &#125;</span><br><span class="line">      listener.<span class="property">listener</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args || []);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title class_">EventEmitter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">fire</span> = <span class="title class_">EventEmitter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">trigger</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">      触发事件</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line"></span><br><span class="line">  <span class="title class_">EventEmitter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">emit</span> = <span class="keyword">function</span> (<span class="params">evt</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">trigger</span>(evt, args);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">EventEmitter</span>.<span class="property">inherit</span> = <span class="keyword">function</span> (<span class="params">target</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> target.<span class="property"><span class="keyword">prototype</span></span> == <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="string">&quot;target:&quot;</span> + target + <span class="string">&quot;must have prototype&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> souPto = <span class="title class_">EventEmitter</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">    <span class="keyword">var</span> tarPto = target.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> souPto) &#123;</span><br><span class="line">      tarPto[key] = souPto[key];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">EventEmitter</span> = <span class="title class_">EventEmitter</span>;</span><br><span class="line">&#125;)(<span class="variable language_">window</span>);</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>彻底弄懂JavaScript执行机制（宏任务和微任务）</title>
    <url>/2021/01/19/JS/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91%E5%BD%BB%E5%BA%95%E5%BC%84%E6%87%82JavaScript%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6%EF%BC%88%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%92%8C%E5%BE%AE%E4%BB%BB%E5%8A%A1%EF%BC%89/</url>
    <content><![CDATA[<h4 id="彻底弄懂-JavaScript-执行机制（宏任务和微任务）"><a href="#彻底弄懂-JavaScript-执行机制（宏任务和微任务）" class="headerlink" title="彻底弄懂 JavaScript 执行机制（宏任务和微任务）"></a>彻底弄懂 JavaScript 执行机制（宏任务和微任务）</h4><p>本文的目的就是要保证你彻底弄懂 javascript 的执行机制，如果读完本文还不懂，可以揍我。<br>不论你是 javascript 新手还是老鸟，不论是面试求职，还是日常开发工作，我们经常会遇到这样的情况：给定的几行代码，我们需要知道其输出内容和顺序。因为 javascript 是一门单线程语言，所以我们可以得出结论：</p>
<ul>
<li>javascript 是按照语句出现的顺序执行的</li>
</ul>
<p>看到这里读者要打人了：我难道不知道 js 是一行一行执行的？还用你说？稍安勿躁，正因为 js 是一行一行执行的，所以我们以为 js 都是这样的：</p>
<p><img src="https://www.daykalif.com/blog_img/eventloop1.png" alt="eventloop1"></p>
<p><img src="https://www.daykalif.com/blog_img/eventloop2.png" alt="eventloop2"></p>
<p>然而实际上 js 是这样的：</p>
<p><img src="https://www.daykalif.com/blog_img/eventloop3.png" alt="eventloop3"></p>
<p><img src="https://www.daykalif.com/blog_img/eventloop4.png" alt="eventloop4"></p>
<p>依照 js 是按照语句出现的顺序执行这个理念，我自信的写下输出结果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//&quot;定时器开始啦&quot;</span></span><br><span class="line"><span class="comment">//&quot;马上执行for循环啦&quot;</span></span><br><span class="line"><span class="comment">//&quot;执行then函数啦&quot;</span></span><br><span class="line"><span class="comment">//&quot;代码执行结束&quot;复制代码</span></span><br></pre></td></tr></table></figure>

<p>去 chrome 上验证下，结果完全不对，瞬间懵了，说好的一行一行执行的呢？</p>
<p><img src="https://www.daykalif.com/blog_img/eventloop5.png" alt="eventloop5"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params">param</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;定时器开始啦&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;马上执行for循环啦&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    i == <span class="number">99</span> &amp;&amp; <span class="title function_">resolve</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">param</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;执行then函数啦&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;代码执行结束&quot;</span>);</span><br><span class="line"><span class="comment">// 马上执行for循环啦</span></span><br><span class="line"><span class="comment">// 代码执行结束</span></span><br><span class="line"><span class="comment">// 执行then函数啦</span></span><br><span class="line"><span class="comment">// 定时器开始啦</span></span><br></pre></td></tr></table></figure>

<p>我们真的要彻底弄明白 javascript 的执行机制了。</p>
<h5 id="1-关于-javascript"><a href="#1-关于-javascript" class="headerlink" title="1.关于 javascript"></a>1.关于 javascript</h5><p>javascript 是一门单线程语言，在最新的 HTML5 中提出了 Web-Worker，但 javascript 是单线程这一核心仍未改变。所以一切 javascript 版的”多线程”都是用单线程模拟出来的，一切 javascript 多线程都是纸老虎！</p>
<h5 id="2-javascript-事件循环"><a href="#2-javascript-事件循环" class="headerlink" title="2.javascript 事件循环"></a>2.javascript 事件循环</h5><p>既然 js 是单线程，那就像只有一个窗口的银行，客户需要排队一个一个办理业务，同理 js 任务也要一个一个顺序执行。如果一个任务耗时过长，那么后一个任务也必须等着。那么问题来了，假如我们想浏览新闻，但是新闻包含的超清图片加载很慢，难道我们的网页要一直卡着直到图片完全显示出来？因此聪明的程序员将任务分为两类：</p>
<ul>
<li>同步任务</li>
<li>异步任务</li>
</ul>
<p>当我们打开网站时，网页的渲染过程就是一大堆同步任务，比如页面骨架和页面元素的渲染。而像加载图片音乐之类占用资源大耗时久的任务，就是异步任务。关于这部分有严格的文字定义，但本文的目的是用最小的学习成本彻底弄懂执行机制，所以我们用导图来说明：</p>
<p><img src="https://www.daykalif.com/blog_img/eventloop6.png" alt="eventloop6"></p>
<p>导图要表达的内容用文字来表述的话：</p>
<ul>
<li>同步和异步任务分别进入不同的执行”场所”，同步的进入主线程，异步的进入 Event Table 并注册函数。</li>
<li>当指定的事情完成时，Event Table 会将这个函数移入 Event Queue。</li>
<li>主线程内的任务执行完毕为空，会去 Event Queue 读取对应的函数，进入主线程执行。</li>
<li>上述过程会不断重复，也就是常说的 Event Loop(事件循环)。</li>
</ul>
<p>我们不禁要问了，那怎么知道主线程执行栈为空啊？js 引擎存在 monitoring process 进程，会持续不断的检查主线程执行栈是否为空，一旦为空，就会去 Event Queue 那里检查是否有等待被调用的函数。<br>说了这么多文字，不如直接一段代码更直白：</p>
<p><img src="https://www.daykalif.com/blog_img/eventloop7.png" alt="eventloop7"></p>
<p>上面是一段简易的 ajax 请求代码：</p>
<ul>
<li>ajax 进入 Event Table，注册回调函数 success。</li>
<li>执行 console.log(‘代码执行结束’)。</li>
<li>ajax 事件完成，回调函数 success 进入 Event Queue。</li>
<li>主线程从 Event Queue 读取回调函数 success 并执行。</li>
</ul>
<p>相信通过上面的文字和代码，你已经对 js 的执行顺序有了初步了解。接下来我们来研究进阶话题：setTimeout。</p>
<h5 id="3-又爱又恨的-setTimeout"><a href="#3-又爱又恨的-setTimeout" class="headerlink" title="3.又爱又恨的 setTimeout"></a>3.又爱又恨的 setTimeout</h5><p>大名鼎鼎的 setTimeout 无需再多言，大家对他的第一印象就是异步可以延时执行，我们经常这么实现延时 3 秒执行：</p>
<p><img src="https://www.daykalif.com/blog_img/eventloop8.png" alt="eventloop8"></p>
<p>渐渐的 setTimeout 用的地方多了，问题也出现了，有时候明明写的延时 3 秒，实际却 5，6 秒才执行函数，这又咋回事啊？<br>先看一个例子：</p>
<p><img src="https://www.daykalif.com/blog_img/eventloop9.png" alt="eventloop9"></p>
<p>根据前面我们的结论，setTimeout 是异步的，应该先执行 console.log 这个同步任务，所以我们的结论是：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//执行console</span></span><br><span class="line"><span class="comment">//task()</span></span><br></pre></td></tr></table></figure>

<p>去验证一下，结果正确！<br>然后我们修改一下前面的代码：</p>
<p><img src="https://www.daykalif.com/blog_img/eventloop10.png" alt="eventloop10"></p>
<p>乍一看其实差不多嘛，但我们把这段代码在 chrome 执行一下，却发现控制台执行 task()需要的时间远远超过 3 秒，说好的延时三秒，为啥现在需要这么长时间啊？<br>这时候我们需要重新理解 setTimeout 的定义。我们先说上述代码是怎么执行的：</p>
<ul>
<li>task()进入 Event Table 并注册,计时开始。</li>
<li>执行 sleep 函数，很慢，非常慢，计时仍在继续。</li>
<li>3 秒到了，计时事件 timeout 完成，task()进入 Event Queue，但是 sleep 也太慢了吧，还没执行完，只好等着。</li>
<li>sleep 终于执行完了，task()终于从 Event Queue 进入了主线程执行。</li>
</ul>
<p>上述的流程走完，我们知道 setTimeout 这个函数，是经过指定时间后，把要执行的任务(本例中为 task())加入到 Event Queue 中，又因为是单线程任务要一个一个执行，如果前面的任务需要的时间太久，那么只能等着，导致真正的延迟时间远远大于 3 秒。<br>我们还经常遇到 setTimeout(fn,0)这样的代码，0 秒后执行又是什么意思呢？是不是可以立即执行呢？</p>
<p>答案是不会的，setTimeout(fn,0)的含义是，指定某个任务在主线程最早可得的空闲时间执行，意思就是不用再等多少秒了，只要主线程执行栈内的同步任务全部执行完成，栈为空就马上执行。举例说明：</p>
<p><img src="https://www.daykalif.com/blog_img/eventloop11.png" alt="eventloop11"></p>
<p>代码 1 的输出结果是：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先执行这里</span></span><br><span class="line"><span class="comment">//执行啦</span></span><br></pre></td></tr></table></figure>

<p>代码 2 的输出结果是：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先执行这里</span></span><br><span class="line"><span class="comment">// ... 3s later</span></span><br><span class="line"><span class="comment">// 执行啦</span></span><br></pre></td></tr></table></figure>

<p>关于 setTimeout 要补充的是，即便主线程为空，0 毫秒实际上也是达不到的。根据 HTML 的标准，最低是 4 毫秒。有兴趣的同学可以自行了解。</p>
<h5 id="4-又恨又爱的-setInterval"><a href="#4-又恨又爱的-setInterval" class="headerlink" title="4.又恨又爱的 setInterval"></a>4.又恨又爱的 setInterval</h5><p>上面说完了 setTimeout，当然不能错过它的孪生兄弟 setInterval。他俩差不多，只不过后者是循环的执行。对于执行顺序来说，setInterval 会每隔指定的时间将注册的函数置入 Event Queue，如果前面的任务耗时太久，那么同样需要等待。</p>
<p>唯一需要注意的一点是，对于 setInterval(fn,ms)来说，我们已经知道不是每过 ms 秒会执行一次 fn，而是每过 ms 秒，会有 fn 进入 Event Queue。一旦 setInterval 的回调函数 fn 执行时间超过了延迟时间 ms，那么就完全看不出来有时间间隔了。这句话请读者仔细品味。</p>
<h5 id="5-Promise-与-process-nextTick-callback"><a href="#5-Promise-与-process-nextTick-callback" class="headerlink" title="5.Promise 与 process.nextTick(callback)"></a>5.Promise 与 process.nextTick(callback)</h5><p>传统的定时器我们已经研究过了，接着我们探究 Promise 与 process.nextTick(callback)的表现。</p>
<p>Promise 的定义和功能本文不再赘述，不了解的读者可以学习一下阮一峰老师的 Promise。而 process.nextTick(callback)类似 node.js 版的”setTimeout”，在事件循环的下一次循环中调用 callback 回调函数。</p>
<p>我们进入正题，除了广义的同步任务和异步任务，我们对任务有更精细的定义：</p>
<ul>
<li>macro-task(宏任务)：包括整体代码 script，setTimeout，setInterval</li>
<li>micro-task(微任务)：Promise，process.nextTick</li>
</ul>
<p>不同类型的任务会进入对应的 Event Queue，比如 setTimeout 和 setInterval 会进入相同的 Event Queue。</p>
<p>事件循环的顺序，决定 js 代码的执行顺序。进入整体代码(宏任务)后，开始第一次循环。接着执行所有的微任务。然后再次从宏任务开始，找到其中一个任务队列执行完毕，再执行所有的微任务。听起来有点绕，我们用文章最开始的一段代码说明：</p>
<p><img src="https://www.daykalif.com/blog_img/eventloop12.png" alt="eventloop12"></p>
<ul>
<li>这段代码作为宏任务，进入主线程。</li>
<li>先遇到 setTimeout，那么将其回调函数注册后分发到宏任务 Event Queue。(注册过程与上同，下文不再描述)</li>
<li>接下来遇到了 Promise，new Promise 立即执行，then 函数分发到微任务 Event Queue。</li>
<li>遇到 console.log()，立即执行。</li>
<li>好啦，整体代码 script 作为第一个宏任务执行结束，看看有哪些微任务？我们发现了 then 在微任务 Event Queue 里面，执行。</li>
<li>ok，第一轮事件循环结束了，我们开始第二轮循环，当然要从宏任务 Event Queue 开始。我们发现了宏任务 Event Queue 中 setTimeout 对应的回调函数，立即执行。</li>
<li>结束。</li>
</ul>
<p>事件循环，宏任务，微任务的关系如图所示：</p>
<p><img src="https://www.daykalif.com/blog_img/eventloop13.png" alt="eventloop13"></p>
<p>我们来分析一段较复杂的代码，看看你是否真的掌握了 js 的执行机制：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">  process.<span class="title function_">nextTick</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">    <span class="title function_">resolve</span>();</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;5&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">process.<span class="title function_">nextTick</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;6&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;7&quot;</span>);</span><br><span class="line">  <span class="title function_">resolve</span>();</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;8&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;9&quot;</span>);</span><br><span class="line">  process.<span class="title function_">nextTick</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;10&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;11&quot;</span>);</span><br><span class="line">    <span class="title function_">resolve</span>();</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;12&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>第一轮事件循环流程分析如下：</p>
<ul>
<li>整体 script 作为第一个宏任务进入主线程，遇到 console.log，输出 1。</li>
<li>遇到 setTimeout，其回调函数被分发到宏任务 Event Queue 中。我们暂且记为 setTimeout1。</li>
<li>遇到 process.nextTick()，其回调函数被分发到微任务 Event Queue 中。我们记为 process1。</li>
<li>遇到 Promise，new Promise 直接执行，输出 7。then 被分发到微任务 Event Queue 中。我们记为 then1。</li>
<li>又遇到了 setTimeout，其回调函数被分发到宏任务 Event Queue 中，我们记为 setTimeout2。</li>
</ul>
<p><img src="https://www.daykalif.com/blog_img/eventloop14.png" alt="eventloop14"></p>
<ul>
<li>上表是第一轮事件循环宏任务结束时各 Event Queue 的情况，此时已经输出了 1 和 7。</li>
<li>我们发现了 process1 和 then1 两个微任务。</li>
<li>执行 process1,输出 6。</li>
<li>执行 then1，输出 8。</li>
</ul>
<p>好了，第一轮事件循环正式结束，这一轮的结果是输出 1，7，6，8。那么第二轮时间循环从 setTimeout1 宏任务开始：</p>
<ul>
<li>首先输出 2。接下来遇到了 process.nextTick()，同样将其分发到微任务 Event Queue 中，记为 process2。new Promise 立即执行输出 4，then 也分发到微任务 Event Queue 中，记为 then2。</li>
</ul>
<p><img src="https://www.daykalif.com/blog_img/eventloop15.png" alt="eventloop15"></p>
<p>第二轮事件循环宏任务结束，我们发现有 process2 和 then2 两个微任务可以执行。</p>
<ul>
<li>输出 3。</li>
<li>输出 5。</li>
<li>第二轮事件循环结束，第二轮输出 2，4，3，5。</li>
<li>第三轮事件循环开始，此时只剩 setTimeout2 了，执行。</li>
<li>直接输出 9。</li>
<li>将 process.nextTick()分发到微任务 Event Queue 中。记为 process3。</li>
<li>直接执行 new Promise，输出 11。</li>
<li>将 then 分发到微任务 Event Queue 中，记为 then3。</li>
</ul>
<p><img src="https://www.daykalif.com/blog_img/eventloop16.png" alt="eventloop16"></p>
<ul>
<li>第三轮事件循环宏任务执行结束，执行两个微任务 process3 和 then3。</li>
<li>输出 10。</li>
<li>输出 12。</li>
<li>第三轮事件循环结束，第三轮输出 9，11，10，12。</li>
</ul>
<p>整段代码，共进行了三次事件循环，完整的输出为 1，7，6，8，2，4，3，5，9，11，10，12。</p>
<p>(请注意，node 环境下的事件监听依赖 libuv 与前端环境不完全相同，输出顺序可能会有误差)</p>
<h5 id="6-写在最后"><a href="#6-写在最后" class="headerlink" title="6.写在最后"></a>6.写在最后</h5><p>(1)js 的异步</p>
<p>我们从最开头就说 javascript 是一门单线程语言，不管是什么新框架新语法糖实现的所谓异步，其实都是用同步的方法去模拟的，牢牢把握住单线程这点非常重要。</p>
<p>(2)事件循环 Event Loop</p>
<p>事件循环是 js 实现异步的一种方法，也是 js 的执行机制。</p>
<p>(3)javascript 的执行和运行</p>
<p>执行和运行有很大的区别，javascript 在不同的环境下，比如 node，浏览器，Ringo 等等，执行方式是不同的。而运行大多指 javascript 解析引擎，是统一的。</p>
<p>(4)setImmediate</p>
<p>微任务和宏任务还有很多种类，比如 setImmediate 等等，执行都是有共同点的，有兴趣的同学可以自行了解。</p>
<p>(5)最后的最后</p>
<p>javascript 是一门单线程语言<br>Event Loop 是 javascript 的执行机制</p>
<p>牢牢把握两个基本点，以认真学习 javascript 为中心，早日实现成为前端高手的伟大梦想！</p>
<p>转载文档：<br><a href="https://mp.weixin.qq.com/s?__biz=MzU5NDM5MDg1Mw==&mid=2247483862&idx=1&sn=628b274a6828c9784cb10e1b53ccb952">https://mp.weixin.qq.com/s?__biz=MzU5NDM5MDg1Mw==&amp;mid=2247483862&amp;idx=1&amp;sn=628b274a6828c9784cb10e1b53ccb952</a></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>要就来45道Promise面试题一次爽到底</title>
    <url>/2020/11/26/JS/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91%E8%A6%81%E5%B0%B1%E6%9D%A545%E9%81%93Promise%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%80%E6%AC%A1%E7%88%BD%E5%88%B0%E5%BA%95/</url>
    <content><![CDATA[<ul>
<li>Promise 的几道基础题</li>
<li>Promise 结合 setTimeout</li>
<li>Promise 中的 then、catch、finally</li>
<li>Promise 中的 all 和 race</li>
<li>async&#x2F;await 的几道题</li>
<li>async 处理错误</li>
<li>综合题</li>
<li>几道大厂的面试题</li>
</ul>
<blockquote>
<p>前期准备</p>
</blockquote>
<p>在做下面 👇 的题目之前，我希望你能清楚几个知识点。</p>
<p><em>event loop 它的执行顺序：</em></p>
<ul>
<li>一开始整个脚本作为一个宏任务执行</li>
<li>执行过程中同步代码直接执行，宏任务进入宏任务队列，微任务进入微任务队列</li>
<li>当前宏任务执行完出队，检查微任务列表，有则依次执行，直到全部执行完</li>
<li>执行浏览器 UI 线程的渲染工作</li>
<li>检查是否有 Web Worker 任务，有则执行</li>
<li>执行完本轮的宏任务，回到 2，依此循环，直到宏任务和微任务队列都为空</li>
</ul>
<p><strong>微任务包括：</strong> MutationObserver、Promise.then()或 reject()、Promise 为基础开发的其它技术，比如 fetch API、V8 的垃圾回收过程、Node 独有的 process.nextTick。</p>
<p><strong>宏任务包括：</strong> script、script 、setTimeout、setInterval 、setImmediate 、I&#x2F;O 、UI rendering。</p>
<p><strong>注意 ⚠️：</strong> 在所有任务开始的时候，由于宏任务中包括了 script，所以浏览器会先执行一个宏任务，在这个过程中你看到的延迟任务(例如 setTimeout)将被放到下一轮宏任务中来执行。</p>
<h4 id="1-Promise-的几道基础题"><a href="#1-Promise-的几道基础题" class="headerlink" title="1. Promise 的几道基础题"></a>1. Promise 的几道基础题</h4><h5 id="1-1-题目一"><a href="#1-1-题目一" class="headerlink" title="1.1 题目一"></a>1.1 题目一</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise1&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1&quot;</span>, promise1);</span><br></pre></td></tr></table></figure>

<p>过程分析：</p>
<ul>
<li>从上至下，先遇到 new Promise，执行该构造函数中的代码 promise1</li>
<li>然后执行同步代码 1，此时 promise1 没有被 resolve 或者 reject，因此状态还是 pending</li>
</ul>
<p>结果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;promise1&#x27;</span></span><br><span class="line"><span class="string">&#x27;1&#x27;</span> <span class="title class_">Promise</span>&#123;&lt;pending&gt;&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-2-题目二"><a href="#1-2-题目二" class="headerlink" title="1.2 题目二"></a>1.2 题目二</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);</span><br></pre></td></tr></table></figure>

<p>过程分析：</p>
<ul>
<li>从上至下，先遇到 new Promise，执行其中的同步代码 1</li>
<li>再遇到 resolve(‘success’)， 将 promise 的状态改为了 resolved 并且将值保存下来</li>
<li>继续执行同步代码 2</li>
<li>跳出 promise，往下执行，碰到 promise.then 这个微任务，将其加入微任务队列</li>
<li>执行同步代码 4</li>
<li>本轮宏任务全部执行完毕，检查微任务队列，发现 promise.then 这个微任务且状态为 resolved，执行它。</li>
</ul>
<p>结果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>

<h5 id="1-3-题目三"><a href="#1-3-题目三" class="headerlink" title="1.3 题目三"></a>1.3 题目三</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);</span><br></pre></td></tr></table></figure>

<p>过程分析:</p>
<ul>
<li>和题目二相似，只不过在 promise 中并没有 resolve 或者 reject</li>
<li>因此 promise.then 并不会执行，它只有在被改变了状态之后才会执行。</li>
</ul>
<p>结果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">4</span></span><br></pre></td></tr></table></figure>

<h5 id="1-4-题目四"><a href="#1-4-题目四" class="headerlink" title="1.4 题目四"></a>1.4 题目四</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise1&quot;</span>);</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&quot;resolve1&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> promise2 = promise1.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1&quot;</span>, promise1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2&quot;</span>, promise2);</span><br></pre></td></tr></table></figure>

<p>过程分析：</p>
<ul>
<li>从上至下，先遇到 new Promise，执行该构造函数中的代码 promise1</li>
<li>碰到 resolve 函数, 将 promise1 的状态改变为 resolved, 并将结果保存下来</li>
<li>碰到 promise1.then 这个微任务，将它放入微任务队列</li>
<li>promise2 是一个新的状态为 pending 的 Promise</li>
<li>执行同步代码 1， 同时打印出 promise1 的状态是 resolved</li>
<li>执行同步代码 2，同时打印出 promise2 的状态是 pending</li>
<li>宏任务执行完毕，查找微任务队列，发现 promise1.then 这个微任务且状态为 resolved，执行它。</li>
</ul>
<p>结果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;promise1&#x27;</span></span><br><span class="line"><span class="string">&#x27;1&#x27;</span> <span class="title class_">Promise</span>&#123;&lt;resolved&gt;: <span class="string">&#x27;resolve1&#x27;</span>&#125;</span><br><span class="line"><span class="string">&#x27;2&#x27;</span> <span class="title class_">Promise</span>&#123;&lt;pending&gt;&#125;</span><br><span class="line"><span class="string">&#x27;resolve1&#x27;</span></span><br></pre></td></tr></table></figure>

<h5 id="1-5-题目五"><a href="#1-5-题目五" class="headerlink" title="1.5 题目五"></a>1.5 题目五</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="title function_">fn</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;start&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>这道题里最先执行的是’start’吗 🤔️ ？</p>
<p>请仔细看看哦，fn 函数它是直接返回了一个 new Promise 的，而且 fn 函数的调用是在 start 之前，所以它里面的内容应该会先执行。</p>
<p>结果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>;</span><br><span class="line">(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">(<span class="string">&quot;success&quot;</span>);</span><br></pre></td></tr></table></figure>

<h5 id="1-6-题目六"><a href="#1-6-题目六" class="headerlink" title="1.6 题目六"></a>1.6 题目六</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;start&quot;</span>);</span><br><span class="line"><span class="title function_">fn</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>是的，现在 start 就在 1 之前打印出来了，因为 fn 函数是之后执行的。</p>
<p><strong>注意 ⚠️：</strong> 之前我们很容易就以为看到 new Promise()就执行它的第一个参数函数了，其实这是不对的，就像这两道题中，我们得注意它是不是被包裹在函数当中，如果是的话，只有在函数调用的时候才会执行。</p>
<p>答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;start&quot;</span>;</span><br><span class="line"><span class="number">1</span>;</span><br><span class="line">(<span class="string">&quot;success&quot;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="2-Promise-结合-setTimeout"><a href="#2-Promise-结合-setTimeout" class="headerlink" title="2. Promise 结合 setTimeout"></a>2. Promise 结合 setTimeout</h4><h5 id="2-1-题目一"><a href="#2-1-题目一" class="headerlink" title="2.1 题目一"></a>2.1 题目一</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;start&quot;</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;time&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;resolve&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;end&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>过程分析：</p>
<ul>
<li>刚开始整个脚本作为一个宏任务来执行，对于同步代码直接压入执行栈进行执行，因此先打印出 start 和 end。</li>
<li>setTimout 作为一个宏任务被放入宏任务队列(下一个)</li>
<li>Promise.then 作为一个微任务被放入微任务队列</li>
<li>本次宏任务执行完，检查微任务，发现 Promise.then，执行它</li>
<li>接下来进入下一个宏任务，发现 setTimeout，执行。</li>
</ul>
<p>结果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;start&quot;</span>;</span><br><span class="line"><span class="string">&quot;end&quot;</span>;</span><br><span class="line"><span class="string">&quot;resolve&quot;</span>;</span><br><span class="line"><span class="string">&quot;time&quot;</span>;</span><br></pre></td></tr></table></figure>

<h5 id="2-2-题目二"><a href="#2-2-题目二" class="headerlink" title="2.2 题目二"></a>2.2 题目二</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;timerStart&quot;</span>);</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;timerEnd&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);</span><br></pre></td></tr></table></figure>

<p>过程分析：</p>
<p>和<strong>题目 1.2</strong>很像，不过在 resolve 的外层加了一层 setTimeout 定时器。</p>
<ul>
<li>从上至下，先遇到 new Promise，执行该构造函数中的代码 1</li>
<li>然后碰到了定时器，将这个定时器中的函数放到下一个宏任务的延迟队列中等待执行</li>
<li>执行同步代码 2</li>
<li>跳出 promise 函数，遇到 promise.then，但其状态还是为 pending，这里理解为先不执行</li>
<li>执行同步代码 4</li>
<li>一轮循环过后，进入第二次宏任务，发现延迟队列中有 setTimeout 定时器，执行它</li>
<li>首先执行 timerStart，然后遇到了 resolve，将 promise 的状态改为 resolved 且保存结果并将之前的 promise.then 推入微任务队列</li>
<li>继续执行同步代码 timerEnd</li>
<li>宏任务全部执行完毕，查找微任务队列，发现 promise.then 这个微任务，执行它。</li>
</ul>
<p>因此执行结果为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>;</span><br><span class="line"><span class="number">2</span>;</span><br><span class="line"><span class="number">4</span>;</span><br><span class="line">(<span class="string">&quot;timerStart&quot;</span>);</span><br><span class="line">(<span class="string">&quot;timerEnd&quot;</span>);</span><br><span class="line">(<span class="string">&quot;success&quot;</span>);</span><br></pre></td></tr></table></figure>

<h5 id="2-3-题目三"><a href="#2-3-题目三" class="headerlink" title="2.3 题目三"></a>2.3 题目三</h5><p>题目三分了两个题目，因为看着都差不多，不过执行的结果却不一样，大家不妨先猜猜下面两个题目分别执行什么：</p>
<h6 id="1"><a href="#1" class="headerlink" title="(1)"></a>(1)</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;timer1&quot;</span>);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;timer3&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;timer2&quot;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;start&quot;</span>);</span><br></pre></td></tr></table></figure>

<h6 id="2"><a href="#2" class="headerlink" title="(2)"></a>(2)</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;timer1&quot;</span>);</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;timer2&quot;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;start&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;start&quot;</span>;</span><br><span class="line"><span class="string">&quot;timer1&quot;</span>;</span><br><span class="line"><span class="string">&quot;timer2&quot;</span>;</span><br><span class="line"><span class="string">&quot;timer3&quot;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;start&quot;</span>;</span><br><span class="line"><span class="string">&quot;timer1&quot;</span>;</span><br><span class="line"><span class="string">&quot;promise&quot;</span>;</span><br><span class="line"><span class="string">&quot;timer2&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>这两个例子，看着好像只是把第一个定时器中的内容换了一下而已。</p>
<p>一个是为定时器 timer3，一个是为 Promise.then</p>
<p>但是如果是定时器 timer3 的话，它会在 timer2 后执行，而 Promise.then 却是在 timer2 之前执行。</p>
<p>你可以这样理解，Promise.then 是微任务，它会被加入到本轮中的微任务列表，而定时器 timer3 是宏任务，它会被加入到下一轮的宏任务中。</p>
<h5 id="2-4-题目四"><a href="#2-4-题目四" class="headerlink" title="2.4 题目四"></a>2.4 题目四</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise1&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> timer2 = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;timer2&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> timer1 = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;timer1&quot;</span>);</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise2&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;start&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>这道题稍微的难一些，在 promise 中执行定时器，又在定时器中执行 promise；</p>
<p>并且要注意的是，这里的 Promise 是直接 resolve 的，而之前的 new Promise 不一样。</p>
<p>因此过程分析为：</p>
<ul>
<li>刚开始整个脚本作为第一次宏任务来执行，我们将它标记为宏 1，从上至下执行</li>
<li>遇到 Promise.resolve().then 这个微任务，将 then 中的内容加入第一次的微任务队列标记为微 1</li>
<li>遇到定时器 timer1，将它加入下一次宏任务的延迟列表，标记为宏 2，等待执行(先不管里面是什么内容)</li>
<li>执行宏 1 中的同步代码 start</li>
<li>第一次宏任务(宏 1)执行完毕，检查第一次的微任务队列(微 1)，发现有一个 promise.then 这个微任务需要执行</li>
<li>执行打印出微 1 中同步代码 promise1，然后发现定时器 timer2，将它加入宏 2 的后面，标记为宏 3</li>
<li>第一次微任务队列(微 1)执行完毕，执行第二次宏任务(宏 2)，首先执行同步代码 timer1</li>
<li>后遇到了 promise2 这个微任务，将它加入此次循环的微任务队列，标记为微 2</li>
<li>宏 2 中没有同步代码可执行了，查找本次循环的微任务队列(微 2)，发现了 promise2，执行它</li>
<li>第二轮执行完毕，执行宏 3，打印出 timer2</li>
</ul>
<p>所以结果为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;start&quot;</span>;</span><br><span class="line"><span class="string">&quot;promise1&quot;</span>;</span><br><span class="line"><span class="string">&quot;timer1&quot;</span>;</span><br><span class="line"><span class="string">&quot;promise2&quot;</span>;</span><br><span class="line"><span class="string">&quot;timer2&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>如果感觉有点绕的话，可以看下面这张图，就一目了然了。</p>
<p><img src="https://www.daykalif.com/blog_img/promise1.png" alt="promise"></p>
<h5 id="2-5-题目五"><a href="#2-5-题目五" class="headerlink" title="2.5 题目五"></a>2.5 题目五</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> promise2 = promise1.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;error!!!&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise1&quot;</span>, promise1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise2&quot;</span>, promise2);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise1&quot;</span>, promise1);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise2&quot;</span>, promise2);</span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure>

<p>过程分析：</p>
<ul>
<li>从上至下，先执行第一个 new Promise 中的函数，碰到 setTimeout 将它加入下一个宏任务列表</li>
<li>跳出 new Promise，碰到 promise1.then 这个微任务，但其状态还是为 pending，这里理解为先不执行</li>
<li>promise2 是一个新的状态为 pending 的 Promise</li>
<li>执行同步代码 console.log(‘promise1’)，且打印出的 promise1 的状态为 pending</li>
<li>执行同步代码 console.log(‘promise2’)，且打印出的 promise2 的状态为 pending</li>
<li>碰到第二个定时器，将其放入下一个宏任务列表</li>
<li>第一轮宏任务执行结束，并且没有微任务需要执行，因此执行第二轮宏任务</li>
<li>先执行第一个定时器里的内容，将 promise1 的状态改为 resolved 且保存结果并将之前的 promise1.then 推入微任务队列</li>
<li>该定时器中没有其它的同步代码可执行，因此执行本轮的微任务队列，也就是 promise1.then，它抛出了一个错误，且将 promise2 的状态设置为了 rejected</li>
<li>第一个定时器执行完毕，开始执行第二个定时器中的内容</li>
<li>打印出’promise1’，且此时 promise1 的状态为 resolved</li>
<li>打印出’promise2’，且此时 promise2 的状态为 rejected</li>
</ul>
<p>完整的结果为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;promise1&#x27;</span> <span class="title class_">Promise</span>&#123;&lt;pending&gt;&#125;</span><br><span class="line"><span class="string">&#x27;promise2&#x27;</span> <span class="title class_">Promise</span>&#123;&lt;pending&gt;&#125;</span><br><span class="line">test5.<span class="property">html</span>:<span class="number">102</span> <span class="title class_">Uncaught</span> (<span class="keyword">in</span> promise) <span class="title class_">Error</span>: error!!! at test.<span class="property">html</span>:<span class="number">102</span></span><br><span class="line"><span class="string">&#x27;promise1&#x27;</span> <span class="title class_">Promise</span>&#123;&lt;resolved&gt;: <span class="string">&quot;success&quot;</span>&#125;</span><br><span class="line"><span class="string">&#x27;promise2&#x27;</span> <span class="title class_">Promise</span>&#123;&lt;rejected&gt;: <span class="title class_">Error</span>: error!!!&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-6-题目六"><a href="#2-6-题目六" class="headerlink" title="2.6 题目六"></a>2.6 题目六</h5><p>如果你上面这道题搞懂了之后，我们就可以来做做这道了，你应该能很快就给出答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;timer1&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise1里的内容&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> promise2 = promise1.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;error!!!&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise1&quot;</span>, promise1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise2&quot;</span>, promise2);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;timer2&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise1&quot;</span>, promise1);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise2&quot;</span>, promise2);</span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;promise1里的内容&#x27;</span></span><br><span class="line"><span class="string">&#x27;promise1&#x27;</span> <span class="title class_">Promise</span>&#123;&lt;pending&gt;&#125;</span><br><span class="line"><span class="string">&#x27;promise2&#x27;</span> <span class="title class_">Promise</span>&#123;&lt;pending&gt;&#125;</span><br><span class="line"><span class="string">&#x27;timer1&#x27;</span></span><br><span class="line">test5.<span class="property">html</span>:<span class="number">102</span> <span class="title class_">Uncaught</span> (<span class="keyword">in</span> promise) <span class="title class_">Error</span>: error!!! at test.<span class="property">html</span>:<span class="number">102</span></span><br><span class="line"><span class="string">&#x27;timer2&#x27;</span></span><br><span class="line"><span class="string">&#x27;promise1&#x27;</span> <span class="title class_">Promise</span>&#123;&lt;resolved&gt;: <span class="string">&quot;success&quot;</span>&#125;</span><br><span class="line"><span class="string">&#x27;promise2&#x27;</span> <span class="title class_">Promise</span>&#123;&lt;rejected&gt;: <span class="title class_">Error</span>: error!!!&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-Promise-中的-then、catch、finally"><a href="#3-Promise-中的-then、catch、finally" class="headerlink" title="3. Promise 中的 then、catch、finally"></a>3. Promise 中的 then、catch、finally</h4><p><strong>总结：</strong></p>
<ul>
<li>Promise 的状态一经改变就不能再改变。(见 3.1)</li>
<li>.then 和.catch 都会返回一个新的 Promise。(上面的 👆1.4 证明了)</li>
<li>catch 不管被连接到哪里，都能捕获上层的错误。(见 3.2)</li>
<li>在 Promise 中，返回任意一个非 promise 的值都会被包裹成 promise 对象，例如 return 2 会被包装为 return Promise.resolve(2)。</li>
<li>Promise 的 .then 或者 .catch 可以被调用多次, 当如果 Promise 内部的状态一经改变，并且有了一个值，那么后续每次调用.then 或者.catch 的时候都会直接拿到该值。(见 3.5)</li>
<li>.then 或者 .catch 中 return 一个 error 对象并不会抛出错误，所以不会被后续的 .catch 捕获。(见 3.6)</li>
<li>.then 或 .catch 返回的值不能是 promise 本身，否则会造成死循环。(见 3.7)</li>
<li>.then 或者 .catch 的参数期望是函数，传入非函数则会发生值穿透。(见 3.8)</li>
<li>.then 方法是能接收两个参数的，第一个是处理成功的函数，第二个是处理失败的函数，再某些时候你可以认为 catch 是.then 第二个参数的简便写法。(见 3.9)</li>
<li>.finally 方法也是返回一个 Promise，他在 Promise 结束的时候，无论结果为 resolved 还是 rejected，都会执行里面的回调函数。</li>
</ul>
<h5 id="3-1-题目一"><a href="#3-1-题目一" class="headerlink" title="3.1 题目一"></a>3.1 题目一</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&quot;success1&quot;</span>);</span><br><span class="line">  <span class="title function_">reject</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&quot;success2&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">promise</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;then: &quot;</span>, res);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;catch: &quot;</span>, err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;then: success1&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>构造函数中的 resolve 或 reject 只有第一次执行有效，多次调用没有任何作用 。验证了第一个结论，Promise 的状态一经改变就不能再改变。</p>
<h5 id="3-2-题目二"><a href="#3-2-题目二" class="headerlink" title="3.2 题目二"></a>3.2 题目二</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">reject</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&quot;success2&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">promise</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;then1: &quot;</span>, res);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;then2: &quot;</span>, res);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;catch3: &quot;</span>, err);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;then4: &quot;</span>, res);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;catch3: &quot;</span> <span class="string">&quot;error&quot;</span></span><br><span class="line"><span class="string">&quot;then4: &quot;</span> <span class="literal">undefined</span></span><br></pre></td></tr></table></figure>

<p>验证了第三个结论，catch 不管被连接到哪里，都能捕获上层的错误。</p>
<h5 id="3-3-题目三"><a href="#3-3-题目三" class="headerlink" title="3.3 题目三"></a>3.3 题目三</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">1</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>;</span><br><span class="line"><span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p>Promise 可以链式调用，不过 promise 每次调用 .then 或者 .catch 都会返回一个新的 promise，从而实现了链式调用, 它并不像一般我们任务的链式调用一样 return this。</p>
<p>上面的输出结果之所以依次打印出 1 和 2，那是因为 resolve(1)之后走的是第一个 then 方法，并没有走 catch 里，所以第二个 then 中的 res 得到的实际上是第一个 then 的返回值。</p>
<p>且 return 2 会被包装成 resolve(2)。</p>
<h5 id="3-4-题目四"><a href="#3-4-题目四" class="headerlink" title="3.4 题目四"></a>3.4 题目四</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="number">1</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>;</span><br><span class="line"><span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<p>结果打印的当然是 1 和 3 啦，因为 reject(1)此时走的就是 catch，且第二个 then 中的 res 得到的就是 catch 中的返回值。</p>
<h5 id="3-5-题目五"><a href="#3-5-题目五" class="headerlink" title="3.5 题目五"></a>3.5 题目五</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;timer&quot;</span>);</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> start = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res, <span class="title class_">Date</span>.<span class="title function_">now</span>() - start);</span><br><span class="line">&#125;);</span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res, <span class="title class_">Date</span>.<span class="title function_">now</span>() - start);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;timer&#x27;</span></span><br><span class="line">success <span class="number">1001</span></span><br><span class="line">success <span class="number">1002</span></span><br></pre></td></tr></table></figure>

<p>当然，如果你足够快的话，也可能两个都是 1001。</p>
<p>Promise 的 .then 或者 .catch 可以被调用多次，但这里 Promise 构造函数只执行一次。或者说 promise 内部状态一经改变，并且有了一个值，那么后续每次调用 .then 或者 .catch 都会直接拿到该值。</p>
<h5 id="3-6-题目六"><a href="#3-6-题目六" class="headerlink" title="3.6 题目六"></a>3.6 题目六</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;error!!!&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;then: &quot;</span>, res);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;catch: &quot;</span>, err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>猜猜这里的结果输出的是什么 🤔️ ？</p>
<p>你可能想到的是进入.catch 然后被捕获了错误。</p>
<p>结果并不是这样的，它走的是.then 里面：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;then: &quot;</span> <span class="string">&quot;Error: error!!!&quot;</span></span><br></pre></td></tr></table></figure>

<p>这也验证了第 4 点和第 6 点，返回任意一个非 promise 的值都会被包裹成 promise 对象，因此这里的<strong>return new Error(‘error!!!’)</strong> 也被包裹成了**return Promise.resolve(new Error(‘error!!!’))**。</p>
<p>当然如果你抛出一个错误的话，可以用下面 👇 两的任意一种：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;error!!!&quot;</span>));</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;error!!!&quot;</span>);</span><br></pre></td></tr></table></figure>

<h5 id="3-7-题目七"><a href="#3-7-题目七" class="headerlink" title="3.7 题目七"></a>3.7 题目七</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;);</span><br><span class="line">promise.<span class="title function_">catch</span>(<span class="variable language_">console</span>.<span class="property">err</span>);</span><br></pre></td></tr></table></figure>

<p>.then 或 .catch 返回的值不能是 promise 本身，否则会造成死循环。</p>
<p>因此结果会报错：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Uncaught</span> (<span class="keyword">in</span> promise) <span class="title class_">TypeError</span>: <span class="title class_">Chaining</span> cycle detected <span class="keyword">for</span> promise #&lt;<span class="title class_">Promise</span>&gt;</span><br></pre></td></tr></table></figure>

<h5 id="3-8-题目八"><a href="#3-8-题目八" class="headerlink" title="3.8 题目八"></a>3.8 题目八</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">1</span>).<span class="title function_">then</span>(<span class="number">2</span>).<span class="title function_">then</span>(<span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">3</span>)).<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br></pre></td></tr></table></figure>

<p>记住原则 8：.then 或者 .catch 的参数期望是函数，传入非函数则会发生值穿透。</p>
<p>第一个 then 和第二个 then 中传入的都不是函数，一个是数字类型，一个是对象类型，因此发生了穿透，将 resolve(1) 的值直接传到最后一个 then 里。</p>
<p>所以输出结果为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h5 id="3-9-题目九"><a href="#3-9-题目九" class="headerlink" title="3.9 题目九"></a>3.9 题目九</h5><p>下面来介绍一下.then 函数中的两个参数。</p>
<p>第一个参数是用来处理 Promise 成功的函数，第二个则是处理失败的函数。</p>
<p>也就是说 Promise.resolve(‘1’)的值会进入成功的函数，Promise.reject(‘2’)的值会进入失败的函数。</p>
<h6 id="a"><a href="#a" class="headerlink" title="(a)"></a>(a)</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&quot;err!!!&quot;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(</span><br><span class="line">    <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;success&quot;</span>, res);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;error&quot;</span>, err);</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;catch&quot;</span>, err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>这里的执行结果是：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;error&#x27;</span> <span class="string">&#x27;err!!!&#x27;</span></span><br></pre></td></tr></table></figure>

<h6 id="b"><a href="#b" class="headerlink" title="(b)"></a>(b)</h6><p>它进入的是 then()中的第二个参数里面，而如果把第二个参数去掉，就进入了 catch()中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&quot;err!!!&quot;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;success&quot;</span>, res);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;catch&quot;</span>, err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;catch&#x27;</span> <span class="string">&#x27;error!!!&#x27;</span></span><br></pre></td></tr></table></figure>

<h6 id="c"><a href="#c" class="headerlink" title="(c)"></a>(c)</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">  .<span class="title function_">then</span>(</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;error!!!&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fail1</span>(<span class="params">err</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fail1&quot;</span>, err);</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> <span class="title function_">fail2</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fail2&quot;</span>, err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>由于 Promise 调用的是 resolve()，因此.then()执行的应该是 success()函数，可是 success()函数抛出的是一个错误，它会被后面的 catch()给捕获到，而不是被 fail1 函数捕获。</p>
<p>因此执行结果为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fail2 <span class="title class_">Error</span>: error!!!</span><br></pre></td></tr></table></figure>

<h5 id="3-10-题目十"><a href="#3-10-题目十" class="headerlink" title="3.10 题目十"></a>3.10 题目十</h5><p>接着来看看.finally()，这个功能一般不太用在面试中，不过如果碰到了你也应该知道该如何处理。</p>
<p>其实你只要记住它三个很重要的知识点就可以了：</p>
<ul>
<li>.finally()方法不管 Promise 对象最后的状态如何都会执行</li>
<li>.finally()方法的回调函数不接受任何的参数，也就是说你在.finally()函数中是没法知道 Promise 最终的状态是 resolved 还是 rejected 的</li>
<li>它最终返回的默认会是一个原来的 Promise 对象值，不过如果抛出的是一个异常则返回异常的 Promise 对象。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;finally&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">  .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;finally2&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;我是finally2返回的值&quot;</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;finally2后面的then函数&quot;</span>, res);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>这两个 Promise 的.finally 都会执行，且就算 finally2 返回了新的值，它后面的 then()函数接收到的结果却还是’2’，因此打印结果为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="string">&#x27;finally2&#x27;</span></span><br><span class="line"><span class="string">&#x27;finally&#x27;</span></span><br><span class="line"><span class="string">&#x27;finally2后面的then函数&#x27;</span> <span class="string">&#x27;2&#x27;</span></span><br></pre></td></tr></table></figure>

<p>至于为什么 finally2 的打印要在 finally 前面，请看下一个例子中的解析。</p>
<p>不过在此之前让我们再来确认一下，finally 中要是抛出的是一个异常是怎样的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">  .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;finally1&quot;</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;我是finally中抛出的异常&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;finally后面的then函数&quot;</span>, res);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;捕获错误&quot;</span>, err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>执行结果为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;finally1&#x27;</span></span><br><span class="line"><span class="string">&#x27;捕获错误&#x27;</span> <span class="title class_">Error</span>: 我是<span class="keyword">finally</span>中抛出的异常</span><br></pre></td></tr></table></figure>

<p>但是如果改为 return new Error(‘我是 finally 中抛出的异常’)，打印出来的就是’finally 后面的 then 函数 1’</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">promise1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise1&quot;</span>);</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">promise2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">promise1</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err))</span><br><span class="line">  .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;finally1&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="title function_">promise2</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err))</span><br><span class="line">  .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;finally2&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>执行过程：</p>
<ul>
<li>首先定义了两个函数 promise1 和 promise2，先不管接着往下看。</li>
<li>promise1 函数先被调用了，然后执行里面 new Promise 的同步代码打印出 promise1</li>
<li>之后遇到了 resolve(1)，将 p 的状态改为了 resolved 并将结果保存下来。</li>
<li>此时 promise1 内的函数内容已经执行完了，跳出该函数</li>
<li>碰到了 promise1().then()，由于 promise1 的状态已经发生了改变且为 resolved 因此将 promise1().then()这条微任务加入本轮的微任务列表(这是第一个微任务)</li>
<li>这时候要注意了，代码并不会接着往链式调用的下面走，也就是不会先将.finally 加入微任务列表，那是因为.then 本身就是一个微任务，它链式后面的内容必须得等当前这个微任务执行完才会执行，因此这里我们先不管.finally()</li>
<li>再往下走碰到了 promise2()函数，其中返回的 new Promise 中并没有同步代码需要执行，所以执行 reject(‘error’)的时候将 promise2 函数中的 Promise 的状态变为了 rejected</li>
<li>跳出 promise2 函数，遇到了 promise2().then()，将其加入当前的微任务队列(这是第二个微任务)，且链式调用后面的内容得等该任务执行完后才执行，和.then()一样。</li>
<li>OK， 本轮的宏任务全部执行完了，来看看微任务列表，存在 promise1().then()，执行它，打印出 1，然后遇到了.finally()这个微任务将它加入微任务列表(这是第三个微任务)等待执行</li>
<li>再执行 promise2().catch()打印出 error，执行完后将 finally2 加入微任务加入微任务列表(这是第四个微任务)</li>
<li>OK， 本轮又全部执行完了，但是微任务列表还有两个新的微任务没有执行完，因此依次执行 finally1 和 finally2。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;promise1&quot;</span>;</span><br><span class="line"><span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="string">&quot;error&quot;</span>;</span><br><span class="line"><span class="string">&quot;finally1&quot;</span>;</span><br><span class="line"><span class="string">&quot;finally2&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>在这道题中其实能扩展的东西挺多的，之前没有提到，那就是你可以理解为链式调用后面的内容需要等前一个调用执行完才会执行。</p>
<p>就像是这里的 finally()会等 promise1().then()执行完才会将 finally()加入微任务队列，其实如果这道题中你把 finally()换成是 then()也是这样的:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">promise1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise1&quot;</span>);</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">promise2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">promise1</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err))</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;finally1&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="title function_">promise2</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err))</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;finally2&quot;</span>));</span><br></pre></td></tr></table></figure>

<h4 id="4-Promise-中的-all-和-race"><a href="#4-Promise-中的-all-和-race" class="headerlink" title="4. Promise 中的 all 和 race"></a>4. Promise 中的 all 和 race</h4><p>通俗来说，.all()的作用是接收一组异步任务，然后并行执行异步任务，并且在所有异步操作执行完后才执行回调。</p>
<p>.race()的作用也是接收一组异步任务，然后并行执行异步任务，只保留取第一个执行完成的异步操作的结果，其他的方法仍在执行，不过执行结果会被抛弃。</p>
<h5 id="4-1-题目一"><a href="#4-1-题目一" class="headerlink" title="4.1 题目一"></a>4.1 题目一</h5><p>我们知道如果直接在脚本文件中定义一个 Promise，它构造函数的第一个参数是会立即执行的，就像这样：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">r</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;立即打印&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>控制台中会立即打印出 “立即打印”。</p>
<p>因此为了控制它什么时候执行，我们可以用一个函数包裹着它，在需要它执行的时候，调用这个函数就可以了：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">runP1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">r</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;立即打印&quot;</span>));</span><br><span class="line">  <span class="keyword">return</span> p1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">runP1</span>(); <span class="comment">// 调用此函数时才执行</span></span><br></pre></td></tr></table></figure>

<p>OK 👌， 让我们回归正题。</p>
<p>现在来构建这么一个函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">runAsync</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">r</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">r</span>(x, <span class="variable language_">console</span>.<span class="title function_">log</span>(x)), <span class="number">1000</span>));</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该函数传入一个值 x，调用 runAsync(x)然后间隔一秒后打印出这个 x。</p>
<p>如果我用.all()来执行它会怎样呢？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">runAsync</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">r</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">r</span>(x, <span class="variable language_">console</span>.<span class="title function_">log</span>(x)), <span class="number">1000</span>));</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([<span class="title function_">runAsync</span>(<span class="number">1</span>), <span class="title function_">runAsync</span>(<span class="number">2</span>), <span class="title function_">runAsync</span>(<span class="number">3</span>)]).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>先来想想此段代码在浏览器中会如何执行？</p>
<p>没错，当你打开页面的时候，在间隔一秒后，控制台会同时打印出 1, 2, 3，还有一个数组[1, 2, 3]。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>;</span><br><span class="line"><span class="number">2</span>;</span><br><span class="line">(<span class="number">3</span>)[(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)];</span><br></pre></td></tr></table></figure>

<p>所以你现在能理解这句话的意思了吗：有了 all，你就可以并行执行多个异步操作，并且在一个回调中处理所有的返回数据。</p>
<p>.all()后面的.then()里的回调函数接收的就是所有异步操作的结果。</p>
<p>而且这个结果中数组的顺序和 Promise.all()接收到的数组顺序一致！！！</p>
<p>👣 有一个场景是很适合用这个的，一些游戏类的素材比较多的应用，打开网页时，预先加载需要用到的各种资源如图片、flash 以及各种静态文件。所有的都加载完后，我们再进行页面的初始化。</p>
<h5 id="4-2-题目二"><a href="#4-2-题目二" class="headerlink" title="4.2 题目二"></a>4.2 题目二</h5><p>我新增了一个 runReject 函数，它用来在 1000 * x 秒后 reject 一个错误。<br>同时.catch()函数能够捕获到.all()里最先的那个异常，并且只执行一次。</p>
<p>想想这道题会怎样执行呢 🤔️？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">runAsync</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">r</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">r</span>(x, <span class="variable language_">console</span>.<span class="title function_">log</span>(x)), <span class="number">1000</span>));</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">runReject</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">rej</span>(<span class="string">`Error: <span class="subst">$&#123;x&#125;</span>`</span>, <span class="variable language_">console</span>.<span class="title function_">log</span>(x)), <span class="number">1000</span> * x)</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([<span class="title function_">runAsync</span>(<span class="number">1</span>), <span class="title function_">runReject</span>(<span class="number">4</span>), <span class="title function_">runAsync</span>(<span class="number">3</span>), <span class="title function_">runReject</span>(<span class="number">2</span>)])</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res, <span class="string">&quot;a&quot;</span>))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err, <span class="string">&quot;b&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>不卖关子了 😁，让我来公布答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="comment">// 2s后输出:</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="title class_">Error</span>: <span class="number">2</span> b</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4s后输出:</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>没错，就像我之前说的，.catch 是会捕获最先的那个异常，在这道题目中最先的异常就是 runReject(2)的结果。</p>
<p>另外，<strong>如果一组异步操作中有一个异常都不会进入.then()的第一个回调函数参数中</strong>。</p>
<p>注意，为什么不说是不进入.then()中呢 🤔️？</p>
<p>哈哈，大家别忘了.then()方法的第二个参数也是可以捕获错误的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([<span class="title function_">runAsync</span>(<span class="number">1</span>), <span class="title function_">runReject</span>(<span class="number">4</span>), <span class="title function_">runAsync</span>(<span class="number">3</span>), <span class="title function_">runReject</span>(<span class="number">2</span>)]).<span class="title function_">then</span>(</span><br><span class="line">  <span class="function">(<span class="params">res</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res),</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h5 id="4-3-题目三"><a href="#4-3-题目三" class="headerlink" title="4.3 题目三"></a>4.3 题目三</h5><p>.race()方法，它只会获取最先执行完成的那个结果，其它的异步任务虽然也会继续进行下去，不过 race 已经不管那些任务的结果了。</p>
<p>来，改造一下 4.1 这道题：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">runAsync</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">r</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">r</span>(x, <span class="variable language_">console</span>.<span class="title function_">log</span>(x)), <span class="number">1000</span>));</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>([<span class="title function_">runAsync</span>(<span class="number">1</span>), <span class="title function_">runAsync</span>(<span class="number">2</span>), <span class="title function_">runAsync</span>(<span class="number">3</span>)])</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result: &quot;</span>, res))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err));</span><br></pre></td></tr></table></figure>

<p>执行结果为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="string">&#x27;result: &#x27;</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>👣 这个 race 有什么用呢？使用场景还是很多的，比如我们可以用 race 给某个异步请求设置超时时间，并且在超时后执行相应的操作</p>
<h5 id="4-4-题目四"><a href="#4-4-题目四" class="headerlink" title="4.4 题目四"></a>4.4 题目四</h5><p>改造一下题目 4.2：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">runAsync</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">r</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">r</span>(x, <span class="variable language_">console</span>.<span class="title function_">log</span>(x)), <span class="number">1000</span>));</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">runReject</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">rej</span>(<span class="string">`Error: <span class="subst">$&#123;x&#125;</span>`</span>, <span class="variable language_">console</span>.<span class="title function_">log</span>(x)), <span class="number">1000</span> * x)</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>([<span class="title function_">runReject</span>(<span class="number">0</span>), <span class="title function_">runAsync</span>(<span class="number">1</span>), <span class="title function_">runAsync</span>(<span class="number">2</span>), <span class="title function_">runAsync</span>(<span class="number">3</span>)])</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result: &quot;</span>, res))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err));</span><br></pre></td></tr></table></figure>

<p>遇到错误的话，也是一样的，在这道题中，runReject(0)最先执行完，所以进入了 catch()中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>;</span><br><span class="line">(<span class="string">&quot;Error: 0&quot;</span>);</span><br><span class="line"><span class="number">1</span>;</span><br><span class="line"><span class="number">2</span>;</span><br><span class="line"><span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<p><strong>总结</strong>:<br>好的，让我们来总结一下.then()和.race()吧，😄</p>
<ul>
<li>Promise.all()的作用是接收一组异步任务，然后并行执行异步任务，并且在所有异步操作执行完后才执行回调。</li>
<li>.race()的作用也是接收一组异步任务，然后并行执行异步任务，只保留取第一个执行完成的异步操作的结果，其他的方法仍在执行，不过执行结果会被抛弃。</li>
<li>Promise.all().then()结果中数组的顺序和 Promise.all()接收到的数组顺序一致。</li>
</ul>
<h4 id="5-async-await-的几道题"><a href="#5-async-await-的几道题" class="headerlink" title="5. async&#x2F;await 的几道题"></a>5. async&#x2F;await 的几道题</h4><p>既然谈到了 Promise，那就肯定得再说说 async&#x2F;await，在很多时候 async 和 Promise 的解法差不多，又有些不一样。不信你来看看题目一。</p>
<h5 id="5-1-题目一"><a href="#5-1-题目一" class="headerlink" title="5.1 题目一"></a>5.1 题目一</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async1 start&quot;</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">async2</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async1 end&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;start1&quot;</span>);</span><br><span class="line"><span class="title function_">async1</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;start2&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;start1&quot;</span>;</span><br><span class="line"><span class="string">&quot;async1 start&quot;</span>;</span><br><span class="line"><span class="string">&quot;async2&quot;</span>;</span><br><span class="line"><span class="string">&quot;start2&quot;</span>;</span><br><span class="line"><span class="string">&quot;async1 end&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>过程分析：</p>
<ul>
<li>首先一进来是创建了两个函数的，我们先不看函数的创建位置，而是看它的调用位置</li>
<li>发现 async1 函数被调用了，然后去看看调用的内容</li>
<li>执行函数中的同步代码 async1 start，之后碰到了 await，它会阻塞 async1 后面代码的执行，因此会先去执行 async2 中的同步代码 async2，然后跳出 async1</li>
<li>跳出 async1 函数后，执行同步代码 start</li>
<li>在一轮宏任务全部执行完之后，再来执行刚刚 await 后面的内容 async1 end。<br>（在这里，你可以理解为 await 后面的内容就相当于放到了 Promise.then 的里面）</li>
</ul>
<p>来看看区别，如果我们把 await async2()换成一个 new Promise 呢？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async1 start&quot;</span>);</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async1 end&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">async1</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;start&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;async1 start&quot;</span>;</span><br><span class="line"><span class="string">&quot;promise&quot;</span>;</span><br><span class="line"><span class="string">&quot;async1 end&quot;</span>;</span><br><span class="line"><span class="string">&quot;start&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>可以看到 new Promise()并不会阻塞后面的同步代码 async1 end 的执行。</p>
<h5 id="5-2-题目二"><a href="#5-2-题目二" class="headerlink" title="5.2 题目二"></a>5.2 题目二</h5><p>现在将 async 结合定时器看看。</p>
<p>给题目一中的 async2 函数中加上一个定时器：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async1 start&quot;</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">async2</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async1 end&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;timer&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">async1</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;start&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>没错，定时器始终还是最后执行的，它被放到下一条宏任务的延迟队列中。</p>
<p>答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;async1 start&quot;</span>;</span><br><span class="line"><span class="string">&quot;async2&quot;</span>;</span><br><span class="line"><span class="string">&quot;start&quot;</span>;</span><br><span class="line"><span class="string">&quot;async1 end&quot;</span>;</span><br><span class="line"><span class="string">&quot;timer&quot;</span>;</span><br></pre></td></tr></table></figure>

<h5 id="5-3-题目三"><a href="#5-3-题目三" class="headerlink" title="5.3 题目三"></a>5.3 题目三</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async1 start&quot;</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">async2</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async1 end&quot;</span>);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;timer1&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;timer2&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">async1</span>();</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;timer3&quot;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;start&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>思考一下 🤔，执行结果会是什么？</p>
<p>其实如果你能做到这里了，说明你前面的那些知识点也都掌握了，我就不需要太过详细的步骤分析了。</p>
<p>直接公布答案吧：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;async1 start&quot;</span>;</span><br><span class="line"><span class="string">&quot;async2&quot;</span>;</span><br><span class="line"><span class="string">&quot;start&quot;</span>;</span><br><span class="line"><span class="string">&quot;async1 end&quot;</span>;</span><br><span class="line"><span class="string">&quot;timer2&quot;</span>;</span><br><span class="line"><span class="string">&quot;timer3&quot;</span>;</span><br><span class="line"><span class="string">&quot;timer1&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>定时器谁先执行，你只需要关注谁先被调用的以及延迟时间是多少，这道题中延迟时间都是 0，所以只要关注谁先被调用的。。</p>
<h5 id="5-4-题目四"><a href="#5-4-题目四" class="headerlink" title="5.4 题目四"></a>5.4 题目四</h5><p>正常情况下，async 中的 await 命令是一个 Promise 对象，返回该对象的结果。</p>
<p>但如果不是 Promise 对象的话，就会直接返回对应的值，相当于 Promise.resolve()</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// return await 1234</span></span><br><span class="line">  <span class="comment">// 等同于</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res));</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">123</span>;</span><br></pre></td></tr></table></figure>

<h5 id="5-5-题目五"><a href="#5-5-题目五" class="headerlink" title="5.5 题目五"></a>5.5 题目五</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async1 start&quot;</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise1&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async1 success&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;async1 end&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;srcipt start&quot;</span>);</span><br><span class="line"><span class="title function_">async1</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;srcipt end&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>在 async1 中 await 后面的 Promise 是没有返回值的，也就是它的状态始终是 pending 状态，因此相当于一直在 await，await，await 却始终没有响应…</p>
<p>所以在 await 之后的内容是不会执行的，也包括 async1 后面的 .then。</p>
<p>答案为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;script start&quot;</span>;</span><br><span class="line"><span class="string">&quot;async1 start&quot;</span>;</span><br><span class="line"><span class="string">&quot;promise1&quot;</span>;</span><br><span class="line"><span class="string">&quot;script end&quot;</span>;</span><br></pre></td></tr></table></figure>

<h5 id="5-6-题目六"><a href="#5-6-题目六" class="headerlink" title="5.6 题目六"></a>5.6 题目六</h5><p>让我们给 5.5 中的 Promise 加上 resolve：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async1 start&quot;</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise33&quot;</span>);</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;promise22 resolve&quot;</span>);</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res, <span class="string">&quot;55&quot;</span>));</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async11 success&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;async1 end&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;srcipt start&quot;</span>);</span><br><span class="line"><span class="title function_">async1</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res, <span class="string">&quot;44&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;srcipt end&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>现在 Promise 有了返回值了，因此 await 后面的内容将会被执行：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">srcipt start</span><br><span class="line">async1 start</span><br><span class="line">promise33</span><br><span class="line">srcipt end</span><br><span class="line">promise22 resolve <span class="number">55</span></span><br><span class="line">async11 success</span><br><span class="line">async1 end <span class="number">44</span></span><br></pre></td></tr></table></figure>

<h5 id="5-7-题目七"><a href="#5-7-题目七" class="headerlink" title="5.7 题目七"></a>5.7 题目七</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async1 start&quot;</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise1&quot;</span>);</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;promise resolve&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async1 success&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;async1 end&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;srcipt start&quot;</span>);</span><br><span class="line"><span class="title function_">async1</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise2&quot;</span>);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;timer&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这道题应该也不难，不过有一点需要注意的，在 async1 中的 new Promise 它的 resovle 的值和 async1().then()里的值是没有关系的，很多小伙伴可能看到 resovle(‘promise resolve’)就会误以为是 async1().then()中的返回值。</p>
<p>因此这里的执行结果为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;script start&quot;</span>;</span><br><span class="line"><span class="string">&quot;async1 start&quot;</span>;</span><br><span class="line"><span class="string">&quot;promise1&quot;</span>;</span><br><span class="line"><span class="string">&quot;promise2&quot;</span>;</span><br><span class="line"><span class="string">&quot;async1 success&quot;</span>;</span><br><span class="line"><span class="string">&quot;sync1 end&quot;</span>;</span><br><span class="line"><span class="string">&quot;timer&quot;</span>;</span><br></pre></td></tr></table></figure>

<h5 id="5-8-题目八"><a href="#5-8-题目八" class="headerlink" title="5.8 题目八"></a>5.8 题目八</h5><p>我们再来看一道头条曾经的面试题：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async1 start&quot;</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">async2</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async1 end&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;script start&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setTimeout&quot;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">async1</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise1&quot;</span>);</span><br><span class="line">  <span class="title function_">resolve</span>();</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise2&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;script end&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>自信的写下你们的答案吧。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;script start&quot;</span>;</span><br><span class="line"><span class="string">&quot;async1 start&quot;</span>;</span><br><span class="line"><span class="string">&quot;async2&quot;</span>;</span><br><span class="line"><span class="string">&quot;promise1&quot;</span>;</span><br><span class="line"><span class="string">&quot;script end&quot;</span>;</span><br><span class="line"><span class="string">&quot;async1 end&quot;</span>;</span><br><span class="line"><span class="string">&quot;promise2&quot;</span>;</span><br><span class="line"><span class="string">&quot;setTimeout&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>(这道题最后 async1 end 和 promise2 的顺序其实在网上饱受争议，我这里使用浏览器 Chrome V80，Node v12.16.1 的执行结果都是上面这个答案)</p>
<h5 id="5-9-题目九"><a href="#5-9-题目九" class="headerlink" title="5.9 题目九"></a>5.9 题目九</h5><p>好的 👌，async&#x2F;await 大法已练成，咱们继续：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">testSometing</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;执行testSometing&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;testSometing&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">testAsync</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;执行testAsync&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&quot;hello async&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;test start...&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> v1 = <span class="keyword">await</span> <span class="title function_">testSometing</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(v1);</span><br><span class="line">  <span class="keyword">const</span> v2 = <span class="keyword">await</span> <span class="title function_">testAsync</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(v2);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(v1, v2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise start...&quot;</span>);</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&quot;promise&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function">(<span class="params">val</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(val));</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;test end...&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;test start...&#x27;</span></span><br><span class="line"><span class="string">&#x27;执行testSometing&#x27;</span></span><br><span class="line"><span class="string">&#x27;promise start...&#x27;</span></span><br><span class="line"><span class="string">&#x27;test end...&#x27;</span></span><br><span class="line"><span class="string">&#x27;testSometing&#x27;</span></span><br><span class="line"><span class="string">&#x27;执行testAsync&#x27;</span></span><br><span class="line"><span class="string">&#x27;promise&#x27;</span></span><br><span class="line"><span class="string">&#x27;hello async&#x27;</span></span><br><span class="line"><span class="string">&#x27;testSometing&#x27;</span> <span class="string">&#x27;hello async&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="6-async-处理错误"><a href="#6-async-处理错误" class="headerlink" title="6. async 处理错误"></a>6. async 处理错误</h4><h5 id="6-1-题目一"><a href="#6-1-题目一" class="headerlink" title="6.1 题目一"></a>6.1 题目一</h5><p>在 async 中，如果 await 后面的内容是一个异常或者错误的话，会怎样呢？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">async2</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async1&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;async1 success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async2&quot;</span>);</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">async1</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res));</span><br></pre></td></tr></table></figure>

<p>例如这道题中，await 后面跟着的是一个状态为 rejected 的 promise。</p>
<p>如果在 async 函数中抛出了错误，则终止错误结果，不会继续向下执行。</p>
<p>所以答案为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;async2&#x27;</span></span><br><span class="line"><span class="title class_">Uncaught</span> (<span class="keyword">in</span> promise) error</span><br></pre></td></tr></table></figure>

<p>如果改为 throw new Error 也是一样的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async1&quot;</span>);</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;error!!!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;async1 success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">async1</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res));</span><br></pre></td></tr></table></figure>

<p>结果为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;async1&#x27;</span></span><br><span class="line"><span class="title class_">Uncaught</span> (<span class="keyword">in</span> promise) <span class="title class_">Error</span>: error!!!</span><br></pre></td></tr></table></figure>

<h5 id="6-2-题目二"><a href="#6-2-题目二" class="headerlink" title="6.2 题目二"></a>6.2 题目二</h5><p>如果想要使得错误的地方不影响 async 函数后续的执行的话，可以使用 try catch</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&quot;error!!!&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async1&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&quot;async1 success&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">async1</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;script start&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>这里的结果为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;script start&quot;</span>;</span><br><span class="line"><span class="string">&quot;error!!!&quot;</span>;</span><br><span class="line"><span class="string">&quot;async1&quot;</span>;</span><br><span class="line"><span class="string">&quot;async1 success&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>或者你可以直接在 Promise.reject 后面跟着一个 catch()方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// try &#123;</span></span><br><span class="line">  <span class="comment">//   await Promise.reject(&#x27;error!!!&#x27;)</span></span><br><span class="line">  <span class="comment">// &#125; catch(e) &#123;</span></span><br><span class="line">  <span class="comment">//   console.log(e)</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&quot;error!!!&quot;</span>).<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(e));</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async1&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&quot;async1 success&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">async1</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;script start&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>运行结果是一样的。</p>
<h4 id="7-综合题"><a href="#7-综合题" class="headerlink" title="7. 综合题"></a>7. 综合题</h4><h5 id="7-1-题目一"><a href="#7-1-题目一" class="headerlink" title="7.1 题目一"></a>7.1 题目一</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">first</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">7</span>);</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>);</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="number">6</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(p);</span><br><span class="line">      &#125;, <span class="number">0</span>);</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">2</span>);</span><br><span class="line">    p.<span class="title function_">then</span>(<span class="function">(<span class="params">arg</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(arg);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">first</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">arg</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);</span><br></pre></td></tr></table></figure>

<p>过程分析：</p>
<ul>
<li>第一段代码定义的是一个函数，所以我们得看看它是在哪执行的，发现它在 4 之前，所以可以来看看 first 函数里面的内容了。(这一步有点类似于题目 1.5)</li>
<li>函数 first 返回的是一个 new Promise()，因此先执行里面的同步代码 3</li>
<li>接着又遇到了一个 new Promise()，直接执行里面的同步代码 7</li>
<li>执行完 7 之后，在 p 中，遇到了一个定时器，先将它放到下一个宏任务队列里不管它，接着向下走</li>
<li>碰到了 resolve(1)，这里就把 p 的状态改为了 resolved，且返回值为 1，不过这里也先不执行</li>
<li>跳出 p，碰到了 resolve(2)，这里的 resolve(2)，表示的是把 first 函数返回的那个 Promise 的状态改了，也先不管它。</li>
<li>然后碰到了 p.then，将它加入本次循环的微任务列表，等待执行</li>
<li>跳出 first 函数，遇到了 first().then()，将它加入本次循环的微任务列表(p.then 的后面执行)</li>
<li>然后执行同步代码 4</li>
<li>本轮的同步代码全部执行完毕，查找微任务列表，发现 p.then 和 first().then()，依次执行，打印出 1 和 2</li>
<li>本轮任务执行完毕了，发现还有一个定时器没有跑完，接着执行这个定时器里的内容，执行同步代码 5</li>
<li>然后又遇到了一个 resolve(6)，它是放在 p 里的，但是 p 的状态在之前已经发生过改变了，- 因此这里就不会再改变，也就是说 resolve(6)相当于没任何用处，因此打印出来的 p 为<code>Promise&#123;&lt;resolved&gt;: 1&#125;</code>。(这一步类似于题目 3.1)</li>
</ul>
<p>结果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="title class_">Promise</span>&#123;&lt;resolved&gt;: <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure>

<h5 id="7-2-题目二"><a href="#7-2-题目二" class="headerlink" title="7.2 题目二"></a>7.2 题目二</h5><h6 id="A"><a href="#A" class="headerlink" title="A"></a>A</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">async1</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async1&quot;</span>); <span class="comment">//2</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;timer1&quot;</span>); <span class="comment">//h1 - 2s 8</span></span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise1&quot;</span>); <span class="comment">//3</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async1 end&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;async1 success&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;script start&quot;</span>); <span class="comment">//1</span></span><br><span class="line"><span class="title function_">async1</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;script end&quot;</span>); <span class="comment">//4</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">1</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="number">2</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">3</span>))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="number">4</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res)); <span class="comment">//w1 5-1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;timer2&quot;</span>); <span class="comment">//h2 - 1s 6</span></span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<p>注意的知识点：</p>
<ul>
<li>async 函数中 await 的 new Promise 要是没有返回值的话则不执行后面的内容(类似题 5.5)</li>
<li>.then 函数中的参数期待的是函数，如果不是函数的话会发生穿透(类似题 3.8 )</li>
<li>注意定时器的延迟时间</li>
</ul>
<p>因此本题答案为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;script start&quot;</span>;</span><br><span class="line"><span class="string">&quot;async1&quot;</span>;</span><br><span class="line"><span class="string">&quot;promise1&quot;</span>;</span><br><span class="line"><span class="string">&quot;script end&quot;</span>;</span><br><span class="line"><span class="number">1</span>;</span><br><span class="line">(<span class="string">&quot;timer2&quot;</span>);</span><br><span class="line">(<span class="string">&quot;timer1&quot;</span>);</span><br></pre></td></tr></table></figure>

<h6 id="B"><a href="#B" class="headerlink" title="B"></a>B</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">async1</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async1&quot;</span>); <span class="comment">//2</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;timer1&quot;</span>); <span class="comment">//h1 - 2s 9</span></span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise1&quot;</span>); <span class="comment">//3</span></span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async1 end&quot;</span>); <span class="comment">//w1 5</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;async1 success&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;script start&quot;</span>); <span class="comment">//1</span></span><br><span class="line"><span class="title function_">async1</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res)); <span class="comment">//w2 6async1 success</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;script end&quot;</span>); <span class="comment">//4</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">1</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="number">2</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">3</span>))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="number">4</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res)); <span class="comment">//w3 7 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;timer2&quot;</span>); <span class="comment">//h2 - 1s 8</span></span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">script start</span><br><span class="line">async1</span><br><span class="line">promise1</span><br><span class="line">script end</span><br><span class="line">async1 end</span><br><span class="line">async1 success</span><br><span class="line"><span class="number">1</span></span><br><span class="line">timer2</span><br><span class="line">timer1</span><br></pre></td></tr></table></figure>

<h5 id="7-3-题目三"><a href="#7-3-题目三" class="headerlink" title="7.3 题目三"></a>7.3 题目三</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;resolve3&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;timer1&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&quot;resovle1&quot;</span>);</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&quot;resolve2&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(p1);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">finally</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;finally&quot;</span>, res);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>注意的知识点：</p>
<ul>
<li>Promise 的状态一旦改变就无法改变(类似题目 3.5)</li>
<li>finally 不管 Promise 的状态是 resolved 还是 rejected 都会执行，且它的回调函数是没有参数的(类似 3.10)</li>
</ul>
<p>答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;resolve1&#x27;</span></span><br><span class="line"><span class="string">&#x27;finally&#x27;</span> <span class="literal">undefined</span></span><br><span class="line"><span class="string">&#x27;timer1&#x27;</span></span><br><span class="line"><span class="title class_">Promise</span>&#123;&lt;resolved&gt;: <span class="literal">undefined</span>&#125;</span><br></pre></td></tr></table></figure>

<h4 id="8-几道大厂的面试题"><a href="#8-几道大厂的面试题" class="headerlink" title="8. 几道大厂的面试题"></a>8. 几道大厂的面试题</h4><h5 id="8-1-使用-Promise-实现每隔-1-秒输出-1-2-3"><a href="#8-1-使用-Promise-实现每隔-1-秒输出-1-2-3" class="headerlink" title="8.1 使用 Promise 实现每隔 1 秒输出 1,2,3"></a>8.1 使用 Promise 实现每隔 1 秒输出 1,2,3</h5><p>这道题比较简单的一种做法是可以用 Promise 配合着 reduce 不停的在 promise 后面叠加.then，请看下面的代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="variable language_">console</span>.<span class="title function_">log</span>(b));</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="title class_">Promise</span>.<span class="title function_">resolve</span>());</span><br></pre></td></tr></table></figure>

<p>或者你可以更简单一点写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.<span class="title function_">reduce</span>(</span><br><span class="line">  <span class="function">(<span class="params">p, x</span>) =&gt;</span></span><br><span class="line">    p.<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">r</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">r</span>(<span class="variable language_">console</span>.<span class="title function_">log</span>(x)), <span class="number">1000</span>))),</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h5 id="8-2-使用-Promise-实现红绿灯交替重复亮"><a href="#8-2-使用-Promise-实现红绿灯交替重复亮" class="headerlink" title="8.2 使用 Promise 实现红绿灯交替重复亮"></a>8.2 使用 Promise 实现红绿灯交替重复亮</h5><p>红灯 3 秒亮一次，黄灯 2 秒亮一次，绿灯 1 秒亮一次；如何让三个灯不断交替重复亮灯？（用 Promise 实现）三个亮灯函数已经存在：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">red</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;red&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">green</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;green&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">yellow</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;yellow&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">red</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;red&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">green</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;green&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">yellow</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;yellow&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> light = <span class="keyword">function</span> (<span class="params">timer, cb</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">cb</span>();</span><br><span class="line">      <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;, timer);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> step = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">light</span>(<span class="number">3000</span>, red);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">light</span>(<span class="number">2000</span>, green);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">light</span>(<span class="number">1000</span>, yellow);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">step</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">step</span>();</span><br></pre></td></tr></table></figure>

<h5 id="8-3-实现-mergePromise-函数"><a href="#8-3-实现-mergePromise-函数" class="headerlink" title="8.3 实现 mergePromise 函数"></a>8.3 实现 mergePromise 函数</h5><p>实现 mergePromise 函数，把传进去的数组按顺序先后执行，并且把返回的数据先后放到数组 data 中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">time</span> = (<span class="params">timer</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;, timer);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ajax1</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">  <span class="title function_">time</span>(<span class="number">2000</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ajax2</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">  <span class="title function_">time</span>(<span class="number">1000</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ajax3</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">  <span class="title function_">time</span>(<span class="number">1000</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mergePromise</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 在这里写代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">mergePromise</span>([ajax1, ajax2, ajax3]).<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;done&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data); <span class="comment">// data 为 [1, 2, 3]</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要求分别输出</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// done</span></span><br><span class="line"><span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>

<p>这道题有点类似于 Promise.all()，不过.all()不需要管执行顺序，只需要并发执行就行了。但是这里需要等上一个执行完毕之后才能执行下一个。</p>
<p>解题思路：</p>
<ul>
<li>定义一个数组 data 用于保存所有异步操作的结果</li>
<li>初始化一个 const promise &#x3D; Promise.resolve()，然后循环遍历数组，在 promise 后面添加执行 ajax 任务，同时要将添加的结果重新赋值到 promise 上。</li>
</ul>
<p>答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mergePromise</span>(<span class="params">ajaxArray</span>) &#123;</span><br><span class="line">  <span class="comment">// 存放每个ajax的结果</span></span><br><span class="line">  <span class="keyword">const</span> data = [];</span><br><span class="line">  <span class="keyword">let</span> promise = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>();</span><br><span class="line">  ajaxArray.<span class="title function_">forEach</span>(<span class="function">(<span class="params">ajax</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 第一次的then为了用来调用ajax</span></span><br><span class="line">    <span class="comment">// 第二次的then是为了获取ajax的结果</span></span><br><span class="line">    promise = promise.<span class="title function_">then</span>(ajax).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      data.<span class="title function_">push</span>(res);</span><br><span class="line">      <span class="keyword">return</span> data; <span class="comment">// 把每次的结果返回</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 最后得到的promise它的值就是data</span></span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="8-4-根据-promiseA-实现一个自己的-promise"><a href="#8-4-根据-promiseA-实现一个自己的-promise" class="headerlink" title="8.4 根据 promiseA+实现一个自己的 promise"></a>8.4 根据 promiseA+实现一个自己的 promise</h5><p>说真的，这道题被问到的概率还是挺高的，而且要说的内容也很多…<br>霖呆呆这里偷个懒，不想细说了…<br>不过哈，我保证，下下题我一定仔细说 😼.</p>
<p>来吧，给你们一些好的宝典：<br>《Promise 不会？？看这里！！！史上最通俗易懂的 Promise！！！》<br>《写一个符合 Promises&#x2F;A+ 规范并可配合 ES7 async&#x2F;await 使用的 Promise》</p>
<h5 id="8-5-封装一个异步加载图片的方法"><a href="#8-5-封装一个异步加载图片的方法" class="headerlink" title="8.5 封装一个异步加载图片的方法"></a>8.5 封装一个异步加载图片的方法</h5><p>这个相对简单一些，只需要在图片的 onload 函数中，使用 resolve 返回一下就可以了。</p>
<p>来看看具体代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">loadImg</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">    img.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;一张图片加载完成&quot;</span>);</span><br><span class="line">      <span class="title function_">resolve</span>(img);</span><br><span class="line">    &#125;;</span><br><span class="line">    img.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Could not load image at&#x27;</span> + url));</span><br><span class="line">    &#125;;</span><br><span class="line">    img.<span class="property">src</span> = url;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h5 id="8-6-限制异步操作的并发个数并尽可能快的完成全部"><a href="#8-6-限制异步操作的并发个数并尽可能快的完成全部" class="headerlink" title="8.6 限制异步操作的并发个数并尽可能快的完成全部"></a>8.6 限制异步操作的并发个数并尽可能快的完成全部</h5><p>有 8 个图片资源的 url，已经存储在数组 urls 中。</p>
<p>urls 类似于[‘<a href="https://image1.png/">https://image1.png</a>‘, ‘<a href="https://image2.png/">https://image2.png</a>‘, ….]</p>
<p>而且已经有一个函数 function loadImg，输入一个 url 链接，返回一个 Promise，该 Promise 在图片下载完成的时候 resolve，下载失败则 reject。</p>
<p>但有一个要求，任何时刻同时下载的链接数量不可以超过 3 个。</p>
<p>请写一段代码实现这个需求，要求尽可能快速地将所有图片下载完成。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> urls = [</span><br><span class="line">  <span class="string">&quot;https://hexo-blog-1256114407.cos.ap-shenzhen-fsi.myqcloud.com/AboutMe-painting1.png&quot;</span>,</span><br><span class="line">  <span class="string">&quot;https://hexo-blog-1256114407.cos.ap-shenzhen-fsi.myqcloud.com/AboutMe-painting2.png&quot;</span>,</span><br><span class="line">  <span class="string">&quot;https://hexo-blog-1256114407.cos.ap-shenzhen-fsi.myqcloud.com/AboutMe-painting3.png&quot;</span>,</span><br><span class="line">  <span class="string">&quot;https://hexo-blog-1256114407.cos.ap-shenzhen-fsi.myqcloud.com/AboutMe-painting4.png&quot;</span>,</span><br><span class="line">  <span class="string">&quot;https://hexo-blog-1256114407.cos.ap-shenzhen-fsi.myqcloud.com/AboutMe-painting5.png&quot;</span>,</span><br><span class="line">  <span class="string">&quot;https://hexo-blog-1256114407.cos.ap-shenzhen-fsi.myqcloud.com/bpmn6.png&quot;</span>,</span><br><span class="line">  <span class="string">&quot;https://hexo-blog-1256114407.cos.ap-shenzhen-fsi.myqcloud.com/bpmn7.png&quot;</span>,</span><br><span class="line">  <span class="string">&quot;https://hexo-blog-1256114407.cos.ap-shenzhen-fsi.myqcloud.com/bpmn8.png&quot;</span>,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loadImg</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">    img.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;一张图片加载完成&quot;</span>);</span><br><span class="line">      <span class="title function_">resolve</span>(img);</span><br><span class="line">    &#125;;</span><br><span class="line">    img.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="title function_">newError</span>(<span class="string">&quot;Could not load image at&quot;</span> + url));</span><br><span class="line">    &#125;;</span><br><span class="line">    img.<span class="property">src</span> = url;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看到这道题时，我最开始的想法是：</p>
<p>拿到 urls，然后将这个数组每 3 个 url 一组创建成一个二维数组<br>然后用 Promise.all()每次加载一组 url（也就是并发 3 个），这一组加载完再加载下一组。<br>这个想法从技术上说并不难实现，有点类似于第三题。不过缺点也明显，那就是每次都要等到上一组全部加载完之后，才加载下一组，那如果上一组有 2 个已经加载完了，还有 1 个特别慢，还在加载，要等这个慢的也加载完才能进入下一组。这明显会照常卡顿，影响加载效率。</p>
<p>但是开始没有考虑这么多，因此有了第一个版本。</p>
<p>如果你有兴趣可以看看想法一的代码，虽然对你没什么帮助，想直接知道比较好的做法的小伙伴请跳到想法二</p>
<h6 id="想法一-💡："><a href="#想法一-💡：" class="headerlink" title="想法一 💡："></a>想法一 💡：</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">limitLoad</span>(<span class="params">urls, handler, limit</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> data = []; <span class="comment">// 存储所有的加载结果</span></span><br><span class="line">  <span class="keyword">let</span> p = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>();</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleUrls</span> = (<span class="params">urls</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 这个函数是为了生成3个url为一组的二维数组</span></span><br><span class="line">    <span class="keyword">const</span> doubleDim = [];</span><br><span class="line">    <span class="keyword">const</span> len = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(urls.<span class="property">length</span> / limit); <span class="comment">// Math.ceil(8 / 3) = 3</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(len); <span class="comment">// 3, 表示二维数组的长度为3</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">      doubleDim.<span class="title function_">push</span>(urls.<span class="title function_">slice</span>(i * limit, (i + <span class="number">1</span>) * limit));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> doubleDim;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">ajaxImage</span> = (<span class="params">urlCollect</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 将一组字符串url 转换为一个加载图片的数组</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(urlCollect);</span><br><span class="line">    <span class="keyword">return</span> urlCollect.<span class="title function_">map</span>(<span class="function">(<span class="params">url</span>) =&gt;</span> <span class="title function_">handler</span>(url));</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> doubleDim = <span class="title function_">handleUrls</span>(urls); <span class="comment">// 得到3个url为一组的二维数组</span></span><br><span class="line">  doubleDim.<span class="title function_">forEach</span>(<span class="function">(<span class="params">urlCollect</span>) =&gt;</span> &#123;</span><br><span class="line">    p = p</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(<span class="title function_">ajaxImage</span>(urlCollect)))</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        data.<span class="title function_">push</span>(...res); <span class="comment">// 将每次的结果展开，并存储到data中 (res为：[img, img, img])</span></span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">limitLoad</span>(urls, loadImg, <span class="number">3</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// 最终得到的是长度为8的img数组: [img, img, img, ...]</span></span><br><span class="line">  res.<span class="title function_">forEach</span>(<span class="function">(<span class="params">img</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(img);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h6 id="想法二-💡"><a href="#想法二-💡" class="headerlink" title="想法二 💡:"></a>想法二 💡:</h6><p>参考 LHH 大翰仔仔-Promise 面试题</p>
<p>既然题目的要求是保证每次并发请求的数量为 3，那么我们可以先请求 urls 中的前面三个(下标为 0,1,2)，并且请求的时候使用 Promise.race()来同时请求，三个中有一个先完成了(例如下标为 1 的图片)，我们就把这个当前数组中已经完成的那一项(第 1 项)换成还没有请求的那一项(urls 中下标为 3)。</p>
<p>直到 urls 已经遍历完了，然后将最后三个没有完成的请求(也就是状态没有改变的 Promise)用 Promise.all()来加载它们。</p>
<p>不多说，流程图都给你画好了，你可以结合流程图再来看代码。</p>
<p><img src="https://www.daykalif.com/blog_img/promise2.png" alt="promise"></p>
<p>为了方便你查看，我截了个图，不过代码在后面也有</p>
<p>(说真的，要我看这一大长串代码我也不愿意…)</p>
<p><img src="https://www.daykalif.com/blog_img/promise3.png" alt="promise"></p>
<p>代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">limitLoad</span>(<span class="params">urls, handler, limit</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> sequence = [].<span class="title function_">concat</span>(urls); <span class="comment">// 复制urls</span></span><br><span class="line">  <span class="comment">// 这一步是为了初始化 promises 这个&quot;容器&quot;</span></span><br><span class="line">  <span class="keyword">let</span> promises = sequence.<span class="title function_">splice</span>(<span class="number">0</span>, limit).<span class="title function_">map</span>(<span class="function">(<span class="params">url, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">handler</span>(url).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 返回下标是为了知道数组中是哪一项最先完成</span></span><br><span class="line">      <span class="keyword">return</span> index;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 注意这里要将整个变量过程返回，这样得到的就是一个Promise，可以在外面链式调用</span></span><br><span class="line">  <span class="keyword">return</span> sequence</span><br><span class="line">    .<span class="title function_">reduce</span>(<span class="function">(<span class="params">pCollect, url</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> pCollect</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">race</span>(promises); <span class="comment">// 返回已经完成的下标</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">fastestIndex</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 获取到已经完成的下标</span></span><br><span class="line">          <span class="comment">// 将&quot;容器&quot;内已经完成的那一项替换</span></span><br><span class="line">          promises[fastestIndex] = <span class="title function_">handler</span>(url).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> fastestIndex; <span class="comment">// 要继续将这个下标返回，以便下一次变量</span></span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;, <span class="title class_">Promise</span>.<span class="title function_">resolve</span>()) <span class="comment">// 初始化传入</span></span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 最后三个用.all来调用</span></span><br><span class="line">      returnPromise.<span class="title function_">all</span>(promises);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">limitLoad</span>(urls, loadImg, <span class="number">3</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;图片全部加载完毕&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>参考文档：<br>《ES6 之 Promise 常见面试题》<br>《如何让异步操作顺序执行》<br>《大白话讲解 Promise（一）<br>《LHH 大翰仔仔-Promise 面试题》<br>《今日头条 async&#x2F;await 面试题执行顺序》<br>《(2.4w 字,建议收藏)😇 原生 JS 灵魂之问(下), 冲刺 🚀 进阶最后一公里(附个人成长经验分享)》</p>
<p>转载文档：<br><a href="https://mp.weixin.qq.com/s/Y-DCZHpEI0g2K8n5vvBcAw">https://mp.weixin.qq.com/s/Y-DCZHpEI0g2K8n5vvBcAw</a></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>js</tag>
        <tag>异步</tag>
      </tags>
  </entry>
  <entry>
    <title>浅拷贝</title>
    <url>/2020/02/08/JS/%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">对于浅拷贝的理解：</span><br><span class="line">创建一个新对象，这个对象有着原始对象属性值得一份精确拷贝。如果属性是基本类型，拷贝得就是基本类型得值</span><br><span class="line">如果属性是引用类型，拷贝得就是内存地址，所以如果其中一个对象改变了地址，就会影响到另一个对象！</span><br></pre></td></tr></table></figure>

<h5 id="1-Object-assign"><a href="#1-Object-assign" class="headerlink" title="1.Object.assign()"></a>1.Object.assign()</h5><blockquote>
<p>语法：Object.assign(target,…resources)</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.ES6中拷贝对象的方法，接受的第一个参数是拷贝的目标，剩下的参数是拷贝的源对象（可以是多个）</span><br><span class="line">2.Object.assign是一个浅拷贝,它只是在根属性(对象的第一层级)创建了一个新的对象，但是对于属性的值是仍是对象的话依然是浅拷贝，只会拷贝一份相同的内存地址</span><br><span class="line">3.Object.assign还有一些注意的点是:</span><br><span class="line">    1).不会拷贝对象继承的属性</span><br><span class="line">    2).不可枚举的属性</span><br><span class="line">    3).属性的数据属性/访问器属性</span><br><span class="line">    4).可以拷贝Symbol类型</span><br><span class="line">可以理解为Object.assign就是使用简单的=来赋值,遍历从右往左遍历源对象(sources)的所有属性用 = 赋值到目标对象(target)上</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//示例1:</span></span><br><span class="line"><span class="keyword">var</span> target = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> source = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(target, source);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(target); <span class="comment">//&#123;a:1&#125;</span></span><br><span class="line">source.<span class="property">a</span> = <span class="number">2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(source); <span class="comment">//&#123;a:2&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(target); <span class="comment">//&#123;a:1&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例2:</span></span><br><span class="line"><span class="keyword">let</span> target = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> source = &#123;</span><br><span class="line">  <span class="attr">a</span>: &#123;</span><br><span class="line">    <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(target, source);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(target); <span class="comment">//&#123;a:&#123;b:2&#125;&#125;</span></span><br><span class="line">source.<span class="property">a</span>.<span class="property">b</span> = <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(source); <span class="comment">//&#123;a:&#123;b:10&#125;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(target); <span class="comment">//&#123;a:&#123;b:10&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例3:</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="number">30</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(obj, &#123; <span class="attr">d</span>: <span class="number">40</span> &#125;); <span class="comment">//追加</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">//&#123;a:10,b:20,c:30,d:40&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj1 = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, obj, &#123; <span class="attr">e</span>: <span class="number">50</span> &#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">//&#123;a:10,b:20,c:30,d:40&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1); <span class="comment">//&#123;a:10,b:20,c:30,d:40,e:50&#125;</span></span><br><span class="line"></span><br><span class="line">obj.<span class="property">a</span> = <span class="number">100</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1); <span class="comment">//&#123;a:10,b:20,c:30,d:40,e:50&#125;    不改变</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例4:</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">b</span>: &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">100</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> obj1 = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, obj, &#123; <span class="attr">c</span>: <span class="number">30</span> &#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">//&#123;a:10,b:&#123;x:100,y:100&#125;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1); <span class="comment">//&#123;a:10,b:&#123;x:100,y:100&#125;,c:30&#125;</span></span><br><span class="line">obj.<span class="property">b</span>.<span class="property">x</span> = <span class="number">101</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">//&#123;a:10,b:&#123;x:101,y:100&#125;,c:30&#125;  会改变</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//示例5:</span></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">a</span>: &#123;</span><br><span class="line">    <span class="attr">b</span>: <span class="number">1</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">sym</span>: <span class="title class_">Symbol</span>(<span class="number">1</span>),</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj1, <span class="string">&quot;innumerable&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&quot;不可枚举属性&quot;</span>,</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(obj2, obj1);</span><br><span class="line">obj1.<span class="property">a</span>.<span class="property">b</span> = <span class="number">2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;obj1&quot;</span>, obj1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;obj2&quot;</span>, obj2);</span><br></pre></td></tr></table></figure>

<p><img src="https://www.daykalif.com/blog_img/object_assign.png" alt="daykalif"></p>
<p>可以看到 Symbol 类型可以正确拷贝，但是不可枚举的属性被忽略了并且改变了 obj1.a.b 的值，obj2.a.b 的值也会跟着改变，说明依旧存在访问的是堆内存中同一个对象的问题</p>
<h5 id="2-扩展运算符"><a href="#2-扩展运算符" class="headerlink" title="2.扩展运算符"></a>2.扩展运算符</h5><blockquote>
<p>语法：var cloneObj &#x3D; { …obj };</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">利用扩展运算符可以在构造字面量对象时,进行克隆或者属性拷贝</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">1</span> &#125; &#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123; ...obj &#125;;</span><br><span class="line">obj.<span class="property">a</span> = <span class="number">2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">//&#123;a:2,b:&#123;c:1&#125;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2); <span class="comment">//&#123;a:1,b:&#123;c:1&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">obj.<span class="property">b</span>.<span class="property">c</span> = <span class="number">2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">//&#123;a:2,b:&#123;c:2&#125;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2); <span class="comment">//&#123;a:1,b:&#123;c:2&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p>扩展运算符 Object.assign()有同样的缺陷，对于值是对象的属性无法完全拷贝成 2 个不同对象,但是如果属性都是基本类型的值的话,使用扩展运算符更加方便</p>
<h5 id="3-Array-prototype-slice"><a href="#3-Array-prototype-slice" class="headerlink" title="3.Array.prototype.slice()"></a>3.Array.prototype.slice()</h5><blockquote>
<p>语法: arr.slice(begin, end);</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">slice() 方法返回一个新的数组对象，这一对象是一个由 begin和 end（不包括end）决定的原数组的浅拷贝。原始数组不会被改变。</span><br><span class="line">在ES6以前,没有剩余运算符,Array.from的时候可以用 Array.prototype.slice将arguments类数组转为真正的数组,它返回一个浅拷贝后的的新数组</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(&#123; <span class="number">0</span>: <span class="string">&quot;aaa&quot;</span>, <span class="attr">length</span>: <span class="number">1</span> &#125;); <span class="comment">//[&quot;aaa&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">slice</span>() === arr); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<h5 id="4-Array-prototype-concat"><a href="#4-Array-prototype-concat" class="headerlink" title="4.Array.prototype.concat()"></a>4.Array.prototype.concat()</h5><blockquote>
<p>语法：var new_array &#x3D; old_array.concat(value1[, value2[, …[, valueN]]])</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">对于数组的 concat 方法其实也是浅拷贝,所以连接一个含有引用类型的数组需要注意修改原数组中的元素的属性会反映到连接后的数组</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [&#123; <span class="attr">a</span>: <span class="number">1</span> &#125;, &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;, &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;];</span><br><span class="line"><span class="keyword">let</span> arr2 = [&#123; <span class="attr">b</span>: <span class="number">1</span> &#125;, &#123; <span class="attr">b</span>: <span class="number">1</span> &#125;, &#123; <span class="attr">b</span>: <span class="number">1</span> &#125;];</span><br><span class="line"><span class="keyword">let</span> arr3 = arr.<span class="title function_">concat</span>(arr2);</span><br><span class="line">arr2[<span class="number">0</span>].<span class="property">b</span> = <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr3); <span class="comment">//[ &#123; a: 1 &#125;, &#123; a: 1 &#125;, &#123; a: 1 &#125;, &#123; b: 10 &#125;, &#123; b: 1 &#125;, &#123; b: 1 &#125; ]</span></span><br></pre></td></tr></table></figure>

<h5 id="5-JQuery-中-extend"><a href="#5-JQuery-中-extend" class="headerlink" title="5.JQuery 中 $.extend()"></a>5.JQuery 中 $.extend()</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">当复制对象内key的value值不为对象时,assign() 和 $.extend() 类似深拷贝.</span><br><span class="line">当复制对象内key的value值为对象时,assign() 和 $.extend() 就是浅拷贝.</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">test</span>: &#123; <span class="attr">math</span>: <span class="number">100</span> &#125; &#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = $.<span class="title function_">extend</span>(&#123;&#125;, obj1);</span><br><span class="line">obj1.<span class="property">a</span> = <span class="number">0</span>;</span><br><span class="line">obj1.<span class="property">test</span>.<span class="property">math</span> = <span class="number">99</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2); <span class="comment">// &#123;a:1,b:2,test:&#123;math:99&#125;&#125; //obj1内非对象类型值改变 obj2不变</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>模块化开发</title>
    <url>/2019/04/05/JS/%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="模块化开发"><a href="#模块化开发" class="headerlink" title="模块化开发"></a>模块化开发</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">什么是模块化开发？</span><br><span class="line"></span><br><span class="line">前端开发中，起初只要在script标签中嵌入几十上百行代码就能实现一些基本的交互效果，后来js得到重视，应用也广泛起来了，jQuery，<span class="title class_">Ajax</span>，<span class="title class_">Node</span>.<span class="property">Js</span>，<span class="variable constant_">MVC</span>，<span class="variable constant_">MVVM</span>等的助力也使得前端开发得到重视，也使得前端项目越来越复杂，然而，<span class="title class_">JavaScript</span>却没有为组织代码提供任何明显帮助，甚至没有类的概念，更不用说模块（<span class="variable language_">module</span>）了，那么什么是模块呢？</span><br><span class="line"></span><br><span class="line">一个模块就是实现特定功能的文件，有了模块，我们就可以更方便地使用别人的代码，想要什么功能，就加载什么模块。模块开发需要遵循一定的规范，否则就都乱套了。</span><br><span class="line"></span><br><span class="line">根据<span class="variable constant_">AMD</span>规范，我们可以使用define定义模块，使用<span class="built_in">require</span>调用模块。</span><br><span class="line"></span><br><span class="line">目前，通行的js模块规范主要有两种：<span class="title class_">CommonJS</span>和<span class="variable constant_">AMD</span>。</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AMD规范</span><br><span class="line"></span><br><span class="line">AMD 即Asynchronous Module Definition，中文名是“异步模块定义”的意思。它是一个在浏览器端模块化开发的规范，服务器端的规范是CommonJS</span><br><span class="line"></span><br><span class="line">模块将被异步加载，模块加载不影响后面语句的运行。所有依赖某些模块的语句均放置在回调函数中。</span><br><span class="line"></span><br><span class="line">AMD 是 RequireJS 在推广过程中对模块定义的规范化的产出。</span><br><span class="line">AMD规范只定义了一个函数 define，它是全局变量。函数的描述为：define(id?, dependencies?, factory)</span><br><span class="line"></span><br><span class="line">require API 介绍： https://github.com/amdjs/amdjs-api/wiki/require</span><br><span class="line">AMD规范中文版：https://github.com/amdjs/amdjs-api/wiki/AMD-(%E4%B8%AD%E6%96%87%E7%89%88)</span><br><span class="line"></span><br><span class="line">目前，实现AMD的库有RequireJS 、curl 、Dojo 、Nodules 等。</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CommonJS规范</span><br><span class="line"></span><br><span class="line">CommonJS是服务器端模块的规范，Node.js采用了这个规范。Node.JS首先采用了js模块化的概念。</span><br><span class="line"></span><br><span class="line">根据CommonJS规范，一个单独的文件就是一个模块。每一个模块都是一个单独的作用域，也就是说，在该模块内部定义的变量，无法被其他模块读取，除非定义为global对象的属性。</span><br><span class="line"></span><br><span class="line">输出模块变量的最好方法是使用module.exports对象。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">为什么要用requireJS</span><br><span class="line"></span><br><span class="line">试想一下，如果一个网页有很多的js文件，那么浏览器在下载该页面的时候会先加载js文件，从而停止了网页的渲染，如果文件越多，浏览器可能失去响应。其次，要保证js文件的依赖性，依赖性最大的模块（文件）要放在最后加载，当依赖关系很复杂的时候，代码的编写和维护都会变得困难。</span><br><span class="line"></span><br><span class="line">RequireJS就是为了解决这两个问题而诞生的：</span><br><span class="line"></span><br><span class="line">（1）实现js文件的异步加载，避免网页失去响应；</span><br><span class="line">（2）管理模块之间的依赖性，便于代码的编写和维护。</span><br><span class="line"></span><br><span class="line">RequireJS文件下载：http://www.requirejs.cn/docs/download.html</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AMD和CMD</span><br><span class="line"></span><br><span class="line">CMD（Common Module Definition） 通用模块定义。该规范明确了模块的基本书写格式和基本交互规则。该规范是在国内发展出来的。AMD是依赖关系前置，CMD是按需加载。</span><br><span class="line"></span><br><span class="line">在 CMD 规范中，一个模块就是一个文件。代码的书写格式如下：</span><br><span class="line"></span><br><span class="line">define(function(require, exports, module) &#123;</span><br><span class="line"></span><br><span class="line">  // 模块代码</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">require是可以把其他模块导入进来的一个参数，而export是可以把模块内的一些属性和方法导出的。</span><br><span class="line">CMD规范地址：https://github.com/seajs/seajs/issues/242</span><br><span class="line"></span><br><span class="line">AMD 是 RequireJS 在推广过程中对模块定义的规范化产出。</span><br><span class="line">CMD 是 SeaJS 在推广过程中对模块定义的规范化产出。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AMD和CMD的区别</span><br><span class="line"></span><br><span class="line">对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。</span><br><span class="line">AMD:提前执行（异步加载：依赖先执行）+延迟执行</span><br><span class="line">CMD:延迟执行（运行到需加载，根据顺序执行）</span><br><span class="line">CMD 推崇依赖就近，AMD 推崇依赖前置</span><br><span class="line">AMD:API根据使用范围有区别，但使用同一个api接口</span><br><span class="line">CMD:每个API的职责单一</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AMD的优点是：异步并行加载，在AMD的规范下，同时异步加载是不会产生错误的。</span><br><span class="line">CMD的机制则不同，这种加载方式会产生错误，如果能规范化模块内容形式，也可以</span><br></pre></td></tr></table></figure>

<p>参考文献：<a href="https://www.cnblogs.com/zhongjiang/p/6554514.html">https://www.cnblogs.com/zhongjiang/p/6554514.html</a></p>
<p>下面是写法参考</p>
<p>首先：需要在 html 文件引入‘<script src="./js/require.js" type="text/javascript" defer async='true' data-main='../dist/main-build.js'></script>’</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//首先：需要在html文件引入‘&lt;script src=&quot;./js/require.js&quot; type=&quot;text/javascript&quot; defer async=&#x27;true&#x27; data-main=&#x27;../dist/main-build.js&#x27;&gt;&lt;/script&gt;’</span></span><br><span class="line"><span class="comment">//async 代表异步加载 defer也是 只是为了兼容ie</span></span><br><span class="line"><span class="comment">//main.js为入口文件</span></span><br><span class="line"></span><br><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;./js/require.js&quot; type=&quot;text/javascript&quot; defer async=&#x27;true&#x27; data-main=&#x27;../dist/main-build.js&#x27;&gt;&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        呵呵</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//比如我们有一个src文件夹 下面还有一个js文件夹</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//js文件夹下有多个js文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//module1.js</span></span><br><span class="line"><span class="title function_">define</span>([<span class="string">&quot;config&quot;</span>], <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">require</span>([<span class="string">&quot;jquery&quot;</span>], <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    !(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">alert</span>($(<span class="string">&quot;div&quot;</span>).<span class="title function_">html</span>());</span><br><span class="line">    &#125;)();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//config.js 例如我们使用了jquery 上面的module1.js引入它</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>.<span class="title function_">config</span>(&#123;</span><br><span class="line">  <span class="attr">paths</span>: &#123;</span><br><span class="line">    <span class="attr">jquery</span>: <span class="string">&quot;http://apps.bdimg.com/libs/jquery/1.6.4/jquery.min&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.js为入口文件</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">&quot;module1&quot;</span>, <span class="string">&quot;module2&quot;</span>], <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="comment">//a和b分别表示module1和module2的引入</span></span><br><span class="line">  <span class="comment">//如果module1里面的方法是自执行函数，那我们可以不写这个回调</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//解决跨域 接口写入require的依赖,十分简单</span></span><br><span class="line"><span class="title function_">define</span>([<span class="string">&quot;config&quot;</span>], <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">require</span>([</span><br><span class="line">    <span class="string">&quot;https://suggest.taobao.com/sug?code=utf-8&amp;q=aaaaa&amp;_ksTS=1549038742840_400&amp;callback=define&quot;</span>,</span><br><span class="line">    <span class="string">&quot;jquery&quot;</span>,</span><br><span class="line">  ], <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">    $(<span class="string">&quot;div&quot;</span>).<span class="title function_">html</span>(a.<span class="property">result</span>[<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>使用 r.js 打包压缩到线上目录</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例如：我们配置一个文件build.js</span></span><br><span class="line">(&#123;</span><br><span class="line">  <span class="attr">paths</span>: &#123;</span><br><span class="line">    <span class="attr">main</span>: <span class="string">&quot;./src/js/main&quot;</span>,</span><br><span class="line">    <span class="attr">module1</span>: <span class="string">&quot;./src/js/module1&quot;</span>,</span><br><span class="line">    <span class="attr">module2</span>: <span class="string">&quot;./src/js/module2&quot;</span>,</span><br><span class="line">    <span class="attr">config</span>: <span class="string">&quot;./src/js/config&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;main&quot;</span>, <span class="comment">//主入口文件</span></span><br><span class="line">  <span class="attr">out</span>: <span class="string">&quot;dist/main-build.js&quot;</span>, <span class="comment">//输出的路径</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//在此文件目录下执行：node r.js -o build.js</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>js</tag>
        <tag>模块化</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解 Javascript 之 JS的解析与执行过程</title>
    <url>/2020/07/04/JS/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-Javascript-%E4%B9%8B-JS%E7%9A%84%E8%A7%A3%E6%9E%90%E4%B8%8E%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h4 id="js-的解析与执行过程"><a href="#js-的解析与执行过程" class="headerlink" title="js 的解析与执行过程"></a>js 的解析与执行过程</h4><p><img src="https://www.daykalif.com/blog_img/js-oop.png" alt="js-oop"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">alert</span>(a);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alter</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">alert</span>(a);</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="title function_">alert</span>(a);</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="title function_">alert</span>(a);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alter</span>(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">alert</span>(a);</span><br><span class="line"><span class="title function_">a</span>();</span><br></pre></td></tr></table></figure>

<ul>
<li>第一个 alert(a) 弹出 function a(){ alter(4); } 函数体</li>
<li>第二个 alter(a) 弹出 function a(){ alter(4); } 函数体</li>
<li>第三个 alter(a) 弹出 1</li>
<li>第四个 alter(a) 弹出 3</li>
<li>第五个 alter(a) 弹出 3</li>
<li>最后一行报错 a is not a function</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第1行，没有关键字 ， 不解析</span></span><br><span class="line"><span class="comment">// 第2行，遇到 function 关键字，解析到全局的头部</span></span><br><span class="line">a = <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alter</span>(<span class="number">2</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 第3行，没有关键字 ， 不解析</span></span><br><span class="line"><span class="comment">// 第4行，遇到关键字 var ， 解析到全局的头部</span></span><br><span class="line">a = <span class="literal">undefined</span>;</span><br><span class="line"><span class="comment">// 第5行，没有关键字 ， 不解析</span></span><br><span class="line"><span class="comment">// 第6行，遇到关键字 var ， 解析到全局的头部</span></span><br><span class="line">a = <span class="literal">undefined</span>;</span><br><span class="line"><span class="comment">// 第8行，遇到 function 关键字，解析到全局的头部</span></span><br><span class="line">a = <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alter</span>(<span class="number">4</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 第9行，没有关键字 ， 不解析</span></span><br><span class="line"><span class="comment">// 第10行，a() 函数调用</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>此时这里有 4 个同名变量 a ，依循规则是：function 优先与 var, 同名的后面覆盖前面的<br>因此，a &#x3D; function a(){ alter(2); } 替换掉下面的 2 个 a &#x3D; undefined ，a &#x3D; function a(){ alter(4); } 又替换掉 a &#x3D; function a(){ alter(2); } ,最终只剩下 a &#x3D; function a(){ alter(4); }</p>
</blockquote>
<h4 id="一、-全局预处理和执行"><a href="#一、-全局预处理和执行" class="headerlink" title="一、 全局预处理和执行"></a>一、 全局预处理和执行</h4><h5 id="1-1、全局预处理阶段"><a href="#1-1、全局预处理阶段" class="headerlink" title="1.1、全局预处理阶段"></a>1.1、全局预处理阶段</h5><p><strong>实例 1:</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> b;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">xxx</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 用声明的方式创建的函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fun = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 用函数表达式创建的函数</span></span><br><span class="line">&#125;;</span><br><span class="line">c = <span class="number">5</span>; <span class="comment">// 不会报错，但是也不会加入词法环境</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>假设全局我们创建了上诉的内容</p>
</blockquote>
<ul>
<li>首先 js 会创建一个词法环境对象 LexicalEnviroment,全局下等同于我们的 window；</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建词法环境如下</span></span><br><span class="line"><span class="title class_">LexicalEnviroment</span>&#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="literal">undefined</span></span><br><span class="line">  <span class="attr">b</span>: <span class="literal">undefined</span></span><br><span class="line">  <span class="attr">xxx</span>: 该函数的引用</span><br><span class="line">  <span class="attr">fun</span>: <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里有着变量提升的知识</span></span><br></pre></td></tr></table></figure>

<p><strong>实例 2:</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">f</span>(); <span class="comment">// ff</span></span><br><span class="line"><span class="title function_">g</span>(); <span class="comment">// 报错： g is not a function</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ff&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> g = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 【解析】</span></span><br><span class="line"><span class="comment">// 因为词法环境中f存在引用，g确实是undefined，因此当在为g赋值之前调用g会报错。</span></span><br></pre></td></tr></table></figure>

<p><strong>实例 3:</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 报错： b is not defined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">b = <span class="number">4</span>;</span><br></pre></td></tr></table></figure>

<p><strong>实例 4 变量重名:</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 处理函数声明冲突 =&gt; 覆盖</span></span><br><span class="line"><span class="title function_">alert</span>(f);</span><br><span class="line"><span class="keyword">var</span> f = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  cosole.<span class="title function_">log</span>(<span class="string">&quot;f&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行结果： 弹出一个f函数的字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理变量声明冲突  =&gt; 忽略</span></span><br><span class="line"><span class="title function_">alert</span>(f);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  cosole.<span class="title function_">log</span>(<span class="string">&quot;f&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 执行结果： 弹出一个f函数的字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 【解析】</span></span><br><span class="line"><span class="comment">//  可见不是根据最后出现的覆盖前面的</span></span><br></pre></td></tr></table></figure>

<h5 id="1-2、全局执行阶段"><a href="#1-2、全局执行阶段" class="headerlink" title="1.2、全局执行阶段"></a>1.2、全局执行阶段</h5><p><strong>实例 5:</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">alert</span>(a);</span><br><span class="line"><span class="title function_">alert</span>(b);</span><br><span class="line"><span class="title function_">alert</span>(f);</span><br><span class="line"><span class="title function_">alert</span>(g);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line">b = <span class="number">6</span>;</span><br><span class="line"><span class="title function_">alert</span>(b);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;f&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> g = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;g);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">alert(g);</span></span><br></pre></td></tr></table></figure>

<p>执行过程如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 构建词法环境</span><br><span class="line"><span class="number">2.</span> 词法环境如下</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">f</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;f&#x27;</span>)&#125;</span><br><span class="line">  <span class="attr">a</span>: <span class="literal">undefined</span></span><br><span class="line">  <span class="attr">g</span>: <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">3.</span> 开始执行</span><br><span class="line"><span class="number">4.</span> <span class="title function_">alert</span>(a); <span class="comment">// undefined</span></span><br><span class="line"><span class="number">5.</span> <span class="title function_">alert</span>(b); <span class="comment">// 报错： b is not defined</span></span><br><span class="line"><span class="number">6.</span> <span class="title function_">alert</span>(f); <span class="comment">// function () &#123;console.log(&#x27;f&#x27;)&#125;</span></span><br><span class="line"><span class="number">7.</span> <span class="title function_">alert</span>(g); <span class="comment">// undefined</span></span><br><span class="line"><span class="number">8.</span> a = <span class="number">5</span>;  b = <span class="number">6</span>                                  [<span class="variable language_">window</span>下的变量赋值]</span><br><span class="line"><span class="number">9.</span> <span class="title function_">alert</span>(b); <span class="comment">// 6</span></span><br><span class="line"><span class="number">10.</span> g = <span class="keyword">function</span> (<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;g);&#125;            [window下的变量赋值]</span></span><br><span class="line"><span class="string">11. alert(g); // function () &#123;console.log(&#x27;</span>g);&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最后的词法环境如下（window）</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">f</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;f&#x27;</span>)&#125;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">5</span></span><br><span class="line">  <span class="attr">g</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;g);&#125;</span></span><br><span class="line"><span class="string">  b: 6</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="二、-函数预处理和执行"><a href="#二、-函数预处理和执行" class="headerlink" title="二、 函数预处理和执行"></a>二、 函数预处理和执行</h4><h5 id="2-1、函数预处理阶段-执行阶段"><a href="#2-1、函数预处理阶段-执行阶段" class="headerlink" title="2.1、函数预处理阶段 + 执行阶段"></a>2.1、函数预处理阶段 + 执行阶段</h5><p><strong>实例 6:</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(a);</span><br><span class="line">  <span class="title function_">alert</span>(b);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>执行分析</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="number">1.</span> 构建词法环境</span><br><span class="line"><span class="number">2.</span> 词法环境如下</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">a</span>: 最初是<span class="number">1</span>， 因为冲突，最后变成了 函数的引用 <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;<span class="comment">// &#125;</span></span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">3.</span> 开始执行</span><br><span class="line"><span class="number">4.</span> <span class="title function_">alert</span>(a); <span class="comment">// function a() &#123;// &#125;</span></span><br><span class="line"><span class="number">5.</span> <span class="title function_">alert</span>(b); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<p><strong>实例 7:</strong></p>
<p>函数内部如果没有用 var 声明的变量，会成为最外部的词法环境的变量（也就是全局了）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line">    c = <span class="number">100</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">b</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">a</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// window.c === 100</span></span><br></pre></td></tr></table></figure>

<p>转载文档：<br><a href="https://segmentfault.com/a/1190000015940119">https://segmentfault.com/a/1190000015940119</a></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>深拷贝</title>
    <url>/2020/02/09/JS/%E6%B7%B1%E6%8B%B7%E8%B4%9D/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">浅拷贝只在根属性上在堆内存中创建了一个新的对象，复制了基本类型的值，但是复杂数据类型也就是对象则是拷贝相同的地址，而深拷贝则是对于复杂数据类型在堆内存中开辟了一块内存地址</span><br><span class="line">用于存放复制的对象并且把原有的对象复制过来，这两个对象是相互独立的，也就是两个不同的地址！</span><br></pre></td></tr></table></figure>

<blockquote>
<p>将一个对象从内存中完整的拷贝一份出来，从堆内存中开辟一个新的区域存放新对象，且修改新对象不会影响原对象</p>
</blockquote>
<h5 id="1-一个简单的深拷贝"><a href="#1-一个简单的深拷贝" class="headerlink" title="1.一个简单的深拷贝"></a>1.一个简单的深拷贝</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">a</span>: &#123;</span><br><span class="line">    <span class="attr">b</span>: <span class="number">1</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">c</span>: <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">obj2.<span class="property">a</span> = &#123;&#125;;</span><br><span class="line">obj2.<span class="property">c</span> = obj1.<span class="property">c</span>;</span><br><span class="line">obj2.<span class="property">a</span>.<span class="property">b</span> = obj1.<span class="property">a</span>.<span class="property">b</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;原obj1:&quot;</span>, obj1); <span class="comment">//原obj1: &#123; a: &#123; b: 1 &#125;, c: 1 &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;复制的obj2&quot;</span>, obj2); <span class="comment">//复制的obj2 &#123; a: &#123; b: 1 &#125;, c: 1 &#125;</span></span><br><span class="line"><span class="comment">// 修改原obj1中的b为2</span></span><br><span class="line">obj1.<span class="property">a</span>.<span class="property">b</span> = <span class="number">2</span>;</span><br><span class="line"><span class="comment">//观察复制的obj2会不会发生改变</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;修改后的obj1:&quot;</span>, obj1); <span class="comment">// 修改后的obj1: &#123; a: &#123; b: 2 &#125;, c: 1 &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;obj2:&quot;</span>, obj2); <span class="comment">// obj2: &#123; a: &#123; b: 1 &#125;, c: 1 &#125;</span></span><br></pre></td></tr></table></figure>

<p>在上面代码中，我们新建了一个 obj2 对象，同时根据 obj1 对象的 a 属性是一个引用类型，我们给 obj2.a 的值也新建了一个新对象(即在内存中新开辟了一块内存地址)<br>然后把 obj1.a.b 属性的值数字 1 复制给 obj2.a.b。因为数字 1 是基本类型的值，所以改变 obj.a.b 的值后，obj2.a 不会受到影响，因为他们的引用是完全 2 个独立的对象，这就完成了一个简单的深拷贝</p>
<h5 id="2-JSON-stringify"><a href="#2-JSON-stringify" class="headerlink" title="2.JSON.stringify"></a>2.JSON.stringify</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">JSON.stringify()是目前前端开发过程中最常用的深拷贝方式，原理是把有个对象序列化成为一个 JSON 字符串，将对象的内容转换成字符串的形式再保存到磁盘上，再用 JSON.parse()反序列化将 JSON 字符串变成一个新的对象</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj1);</span><br><span class="line"><span class="keyword">let</span> obj2 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(str);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2); <span class="comment">//&#123; a: 1, b: [ 1, 2, 3 ] &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//修改obj1</span></span><br><span class="line">obj1.<span class="property">a</span> = <span class="number">2</span>;</span><br><span class="line">obj1.<span class="property">b</span>.<span class="title function_">push</span>(<span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1); <span class="comment">//&#123; a: 2, b: [ 1, 2, 3, 4 ] &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2); <span class="comment">//&#123; a: 1, b: [ 1, 2, 3 ] &#125;</span></span><br></pre></td></tr></table></figure>

<p>通过 JSON.stringify 实现深拷贝有几点要注意:</p>
<ul>
<li>拷贝的对象的值中如果有函数,undefined,symbol 则经过 JSON.stringify()序列化后的 JSON 字符串中这个键值对会消失</li>
<li>无法拷贝不可枚举的属性，无法拷贝对象的原型链</li>
<li>拷贝 Date 引用类型会变成字符串</li>
<li>拷贝 RegExp 引用类型会变成空对象</li>
<li>对象中含有 NaN、Infinity 和-Infinity，则序列化的结果会变成 null</li>
<li>无法拷贝对象的循环应用(即 obj[key] &#x3D; obj)</li>
</ul>
<h5 id="3-自己实现一个深拷贝"><a href="#3-自己实现一个深拷贝" class="headerlink" title="3.自己实现一个深拷贝"></a>3.自己实现一个深拷贝</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例1:</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">source</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> targetObj = source.<span class="property">constructor</span> === <span class="title class_">Array</span> ? [] : &#123;&#125;; <span class="comment">// 判断复制的目标是数组还是对象</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> keys <span class="keyword">in</span> source) &#123;</span><br><span class="line">    <span class="comment">// 遍历目标</span></span><br><span class="line">    <span class="keyword">if</span> (source.<span class="title function_">hasOwnProperty</span>(keys)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (source[keys] &amp;&amp; <span class="keyword">typeof</span> source[keys] === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果值是对象，就递归一下</span></span><br><span class="line">        targetObj[keys] = source[keys].<span class="property">constructor</span> === <span class="title class_">Array</span> ? [] : &#123;&#125;;</span><br><span class="line">        targetObj[keys] = <span class="title function_">deepClone</span>(source[keys]);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果不是，就直接赋值</span></span><br><span class="line">        targetObj[keys] = source[keys];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> targetObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str1 = &#123;</span><br><span class="line">  <span class="attr">arr</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  <span class="attr">obj</span>: &#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="string">&quot;value&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">fn</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> str3 = <span class="title function_">deepClone</span>(str1);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str3 === str1); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str3.<span class="property">obj</span> === str1.<span class="property">obj</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str3.<span class="property">fn</span> === str1.<span class="property">fn</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例2:</span></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">  <span class="attr">address</span>: &#123;</span><br><span class="line">    <span class="attr">city</span>: <span class="string">&quot;beijing&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">arr</span>: [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj2 = <span class="title function_">deepClone</span>(obj1);</span><br><span class="line">obj2.<span class="property">address</span>.<span class="property">city</span> = <span class="string">&quot;shanghai&quot;</span>;</span><br><span class="line">obj2.<span class="property">arr</span>[<span class="number">0</span>] = <span class="string">&quot;a1&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">address</span>.<span class="property">city</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">arr</span>[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 深拷贝函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; obj 要拷贝的对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">obj = &#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&quot;object&quot;</span> || obj == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// obj 是 null ，或者不是对象和数组，直接返回</span></span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化返回结果</span></span><br><span class="line">  <span class="keyword">let</span> result;</span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">    result = [];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    result = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="comment">// 保证 key 不是原型的属性</span></span><br><span class="line">    <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">      <span class="comment">// 递归调用！！！</span></span><br><span class="line">      result[key] = <span class="title function_">deepClone</span>(obj[key]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回结果</span></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4-JQuery-中-extend-—-add-true"><a href="#4-JQuery-中-extend-—-add-true" class="headerlink" title="4.JQuery 中 $.extend() — add true"></a>4.JQuery 中 $.extend() — add true</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$.extend(<span class="literal">true</span>) 为深拷贝形态.</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">test</span>: &#123; <span class="attr">math</span>: <span class="number">100</span> &#125; &#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = $.<span class="title function_">extend</span>(<span class="literal">true</span>, &#123;&#125;, obj1);</span><br><span class="line">obj1.<span class="property">a</span> = <span class="number">0</span>;</span><br><span class="line">obj1.<span class="property">test</span>.<span class="property">math</span> = <span class="number">99</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2); <span class="comment">// &#123;a:1,b:2,test:&#123;math:100&#125;&#125;   //obj2不随obj1改变而变化</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>跨域解决方案</title>
    <url>/2020/12/03/JS/%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h4 id="前端常见跨域解决方案（全）"><a href="#前端常见跨域解决方案（全）" class="headerlink" title="前端常见跨域解决方案（全）"></a>前端常见跨域解决方案（全）</h4><h5 id="什么是跨域？"><a href="#什么是跨域？" class="headerlink" title="什么是跨域？"></a>什么是跨域？</h5><p>跨域是指一个域下的文档或脚本试图去请求另一个域下的资源，这里跨域是广义的。</p>
<p>广义的跨域：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.) 资源跳转： A链接、重定向、表单提交</span><br><span class="line">2.) 资源嵌入： &lt;link&gt;、&lt;script&gt;、&lt;img&gt;、&lt;frame&gt;等dom标签，还有样式中background:url()、@font-face()等文件外链</span><br><span class="line">3.) 脚本请求： js发起的ajax请求、dom和js对象的跨域操作等</span><br></pre></td></tr></table></figure>

<p>其实我们通常所说的跨域是狭义的，是由浏览器同源策略限制的一类请求场景。</p>
<h6 id="什么是同源策略？"><a href="#什么是同源策略？" class="headerlink" title="什么是同源策略？"></a>什么是同源策略？</h6><p>同源策略&#x2F;SOP（Same origin policy）是一种约定，由 Netscape 公司 1995 年引入浏览器，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到 XSS、CSFR 等攻击。所谓同源是指”协议+域名+端口”三者相同，即便两个不同的域名指向同一个 ip 地址，也非同源。</p>
<p>同源策略限制以下几种行为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.) Cookie、LocalStorage 和 IndexDB 无法读取</span><br><span class="line">2.) DOM 和 Js对象无法获得</span><br><span class="line">3.) AJAX 请求不能发送</span><br></pre></td></tr></table></figure>

<p><strong>概括：</strong></p>
<ul>
<li>跨域就是主机名（域名）、协议、端口号只要有其中一个不同，就为不同的域，这时请求就会发生跨域。浏览器的同源策略在做限制。</li>
<li>浏览器限制跨域是一种安全策略，可以预防某些恶意行为。浏览器在每次请求都会带上 cookie。</li>
</ul>
<h5 id="常见跨域场景"><a href="#常见跨域场景" class="headerlink" title="常见跨域场景"></a>常见跨域场景</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">URL</span>                                      说明                    是否允许通信</span><br><span class="line"><span class="attr">http</span>:<span class="comment">//www.domain.com/a.js</span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//www.domain.com/b.js         同一域名，不同文件或路径           允许</span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//www.domain.com/lab/c.js</span></span><br><span class="line"></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//www.domain.com:8000/a.js</span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//www.domain.com/b.js         同一域名，不同端口                不允许</span></span><br><span class="line"></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//www.domain.com/a.js</span></span><br><span class="line"><span class="attr">https</span>:<span class="comment">//www.domain.com/b.js        同一域名，不同协议                不允许</span></span><br><span class="line"></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//www.domain.com/a.js</span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//192.168.1.23/b.js           域名和域名对应相同ip              不允许</span></span><br><span class="line"></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//www.domain.com/a.js</span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//x.domain.com/b.js           主域相同，子域不同                不允许</span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//domain.com/c.js</span></span><br><span class="line"></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//www.domain1.com/a.js</span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//www.domain2.com/b.js        不同域名                         不允许</span></span><br></pre></td></tr></table></figure>

<h5 id="跨域解决方案"><a href="#跨域解决方案" class="headerlink" title="跨域解决方案"></a>跨域解决方案</h5><p>1、 通过 jsonp 跨域</p>
<ul>
<li>jsonp 之所以能实现跨域访问，是因为 script 标签不受浏览器同源策略的限制，使用时将 src 属性指定成一个跨域 URL，服务器收到请求后，将数据放到指定的 callback 里传回来。</li>
</ul>
<p>2、 document.domain + iframe 跨域<br>3、 location.hash + iframe<br>4、 <code>window.name</code> + iframe 跨域<br>5、 postMessage 跨域<br>6、 跨域资源共享（CORS）</p>
<ul>
<li>添加 header 头，Access-Control-Allow-Origin,表明运行网站执行</li>
</ul>
<p>7、 nginx 代理跨域<br>8、 nodejs 中间件代理跨域<br>9、 WebSocket 协议跨域</p>
<ul>
<li>原理：websocket 是 html5 的协议，可以让浏览器与服务器之间建立一个全双工，双向通信。当浏览器使用 websocket 与服务器建立连接后，HTTP 协议会变成 websocket 协议。websocket 协议是不受同源策略限制的，所以可以实现跨域请求资源。</li>
</ul>
<blockquote>
<p>使用代理的方式：</p>
</blockquote>
<ul>
<li>原理：浏览器的跨域是发生在浏览器里的，服务端是没有的，所以可见使用服务端代理请求其他域的资源，然后再返回给客户端。</li>
<li>表现：比如说浏览器里直接访问<a href="http://127.0.0.1:8080会被限制，那么我们可以使用node作代理，来获取http://127.0.0.1:8080返回的资源。">http://127.0.0.1:8080会被限制，那么我们可以使用node作代理，来获取http://127.0.0.1:8080返回的资源。</a></li>
</ul>
<h6 id="一、-通过-jsonp-跨域"><a href="#一、-通过-jsonp-跨域" class="headerlink" title="一、 通过 jsonp 跨域"></a>一、 通过 jsonp 跨域</h6><p>通常为了减轻 web 服务器的负载，我们把 js、css，img 等静态资源分离到另一台独立域名的服务器上，在 html 页面中再通过相应的标签从不同域名下加载静态资源，而被浏览器允许，基于此原理，我们可以通过动态创建 script，再请求一个带参网址实现跨域通信。</p>
<p>1.）原生实现：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">    script.<span class="property">type</span> = <span class="string">&#x27;text/javascript&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 传参一个回调函数名给后端，方便后端返回时执行这个在前端定义的回调函数</span></span><br><span class="line">    script.<span class="property">src</span> = <span class="string">&#x27;http://www.domain2.com:8080/login?user=admin&amp;callback=handleCallback&#x27;</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(script);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 回调执行函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">handleCallback</span>(<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(res));</span><br><span class="line">    &#125;</span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>服务端返回如下（返回时即执行全局函数）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">handleCallback</span>(&#123; <span class="attr">status</span>: <span class="literal">true</span>, <span class="attr">user</span>: <span class="string">&quot;admin&quot;</span> &#125;);</span><br></pre></td></tr></table></figure>

<p>2.）jquery ajax：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&quot;http://www.domain2.com:8080/login&quot;</span>,</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">  <span class="attr">dataType</span>: <span class="string">&quot;jsonp&quot;</span>, <span class="comment">// 请求方式为jsonp</span></span><br><span class="line">  <span class="attr">jsonpCallback</span>: <span class="string">&quot;handleCallback&quot;</span>, <span class="comment">// 自定义回调函数名</span></span><br><span class="line">  <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>3.）vue.js：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$http</span></span><br><span class="line">  .<span class="title function_">jsonp</span>(<span class="string">&quot;http://www.domain2.com:8080/login&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">params</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">jsonp</span>: <span class="string">&quot;handleCallback&quot;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>后端 node.js 代码示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">&quot;querystring&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> server = http.<span class="title function_">createServer</span>();</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&quot;request&quot;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> params = qs.<span class="title function_">parse</span>(req.<span class="property">url</span>.<span class="title function_">split</span>(<span class="string">&quot;?&quot;</span>)[<span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">var</span> fn = params.<span class="property">callback</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// jsonp返回设置</span></span><br><span class="line">  res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/javascript&quot;</span> &#125;);</span><br><span class="line">  res.<span class="title function_">write</span>(fn + <span class="string">&quot;(&quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(params) + <span class="string">&quot;)&quot;</span>);</span><br><span class="line"></span><br><span class="line">  res.<span class="title function_">end</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="string">&quot;8080&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server is running at port 8080...&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>jsonp 缺点：只能实现 get 一种请求。</p>
<h6 id="二、-document-domain-iframe-跨域"><a href="#二、-document-domain-iframe-跨域" class="headerlink" title="二、 document.domain + iframe 跨域"></a>二、 document.domain + iframe 跨域</h6><p>此方案仅限主域相同，子域不同的跨域应用场景。</p>
<p>实现原理：两个页面都通过 js 强制设置 document.domain 为基础主域，就实现了同域。</p>
<p>1.）父窗口：(<a href="http://www.domain.com/a.html">http://www.domain.com/a.html</a>)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;iframe id=<span class="string">&quot;iframe&quot;</span> src=<span class="string">&quot;http://child.domain.com/b.html&quot;</span>&gt;&lt;/iframe&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="property">domain</span> = <span class="string">&#x27;domain.com&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> user = <span class="string">&#x27;admin&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>2.）子窗口：(<a href="http://child.domain.com/b.html">http://child.domain.com/b.html</a>)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">domain</span> = <span class="string">&#x27;domain.com&#x27;</span>; <span class="comment">// 获取父窗口中变量 alert(&#x27;get js data from</span></span><br><span class="line">  parent ---&gt; <span class="string">&#x27; + window.parent.user);</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="三、-location-hash-iframe-跨域"><a href="#三、-location-hash-iframe-跨域" class="headerlink" title="三、 location.hash + iframe 跨域"></a>三、 location.hash + iframe 跨域</h6><p>实现原理： a 欲与 b 跨域相互通信，通过中间页 c 来实现。 三个页面，不同域之间利用 iframe 的 location.hash 传值，相同域之间直接 js 访问来通信。</p>
<p>具体实现：A 域：a.html -&gt; B 域：b.html -&gt; A 域：c.html，a 与 b 不同域只能通过 hash 值单向通信，b 与 c 也不同域也只能单向通信，但 c 与 a 同域，所以 c 可通过 parent.parent 访问 a 页面所有对象。</p>
<p>1.）a.html：(<a href="http://www.domain1.com/a.html">http://www.domain1.com/a.html</a>)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;iframe id=<span class="string">&quot;iframe&quot;</span> src=<span class="string">&quot;http://www.domain2.com/b.html&quot;</span> style=<span class="string">&quot;display:none;&quot;</span>&gt;&lt;/iframe&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> iframe = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;iframe&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 向b.html传hash值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        iframe.<span class="property">src</span> = iframe.<span class="property">src</span> + <span class="string">&#x27;#user=admin&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;, <span class="number">1000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 开放给同域c.html的回调方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">onCallback</span>(<span class="params">res</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">alert</span>(<span class="string">&#x27;data from c.html ---&gt; &#x27;</span> + res);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>2.）b.html：(<a href="http://www.domain2.com/b.html">http://www.domain2.com/b.html</a>)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;iframe id=<span class="string">&quot;iframe&quot;</span> src=<span class="string">&quot;http://www.domain1.com/c.html&quot;</span> style=<span class="string">&quot;display:none;&quot;</span>&gt;&lt;/iframe&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> iframe = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;iframe&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 监听a.html传来的hash值，再传给c.html</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">window</span>.<span class="property">onhashchange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        iframe.<span class="property">src</span> = iframe.<span class="property">src</span> + location.<span class="property">hash</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>3.）c.html：(<a href="http://www.domain1.com/c.html">http://www.domain1.com/c.html</a>)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 监听b.html传来的hash值</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">onhashchange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 再通过操作同域a.html的js回调，将结果传回</span></span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">parent</span>.<span class="property">parent</span>.<span class="title function_">onCallback</span>(<span class="string">&#x27;hello: &#x27;</span> + location.<span class="property">hash</span>.<span class="title function_">replace</span>(<span class="string">&#x27;#user=&#x27;</span>, <span class="string">&#x27;&#x27;</span>));</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h6 id="四、-window-name-iframe-跨域"><a href="#四、-window-name-iframe-跨域" class="headerlink" title="四、 window.name + iframe 跨域"></a>四、 window.name + iframe 跨域</h6><p>window.name 属性的独特之处：name 值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值（2MB）。</p>
<p>1.）a.html：(<a href="http://www.domain1.com/a.html">http://www.domain1.com/a.html</a>)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">function</span> (<span class="params">url, callback</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> state = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> iframe = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;iframe&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 加载跨域页面</span></span><br><span class="line">  iframe.<span class="property">src</span> = url;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// onload事件会触发2次，第1次加载跨域页，并留存数据于window.name</span></span><br><span class="line">  iframe.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (state === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="comment">// 第2次onload(同域proxy页)成功后，读取同域window.name中数据</span></span><br><span class="line">      <span class="title function_">callback</span>(iframe.<span class="property">contentWindow</span>.<span class="property">name</span>);</span><br><span class="line">      <span class="title function_">destoryFrame</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 第1次onload(跨域页)成功后，切换到同域代理页面</span></span><br><span class="line">      iframe.<span class="property">contentWindow</span>.<span class="property">location</span> = <span class="string">&quot;http://www.domain1.com/proxy.html&quot;</span>;</span><br><span class="line">      state = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(iframe);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取数据以后销毁这个iframe，释放内存；这也保证了安全（不被其他域frame js访问）</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">destoryFrame</span>(<span class="params"></span>) &#123;</span><br><span class="line">    iframe.<span class="property">contentWindow</span>.<span class="property">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    iframe.<span class="property">contentWindow</span>.<span class="title function_">close</span>();</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(iframe);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求跨域b页面数据</span></span><br><span class="line"><span class="title function_">proxy</span>(<span class="string">&quot;http://www.domain2.com/b.html&quot;</span>, <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>2.）proxy.html：(<a href="http://www.domain1.com/proxy">http://www.domain1.com/proxy</a>….<br>中间代理页，与 a.html 同域，内容为空即可。</p>
<p>3.）b.html：(<a href="http://www.domain2.com/b.html">http://www.domain2.com/b.html</a>)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;<span class="variable language_">window</span>.<span class="property">name</span> = <span class="string">&#x27;This is domain2 data!&#x27;</span>;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>总结：通过 iframe 的 src 属性由外域转向本地域，跨域数据即由 iframe 的 window.name 从外域传递到本地域。这个就巧妙地绕过了浏览器的跨域访问限制，但同时它又是安全操作。</p>
<h6 id="五、-postMessage-跨域"><a href="#五、-postMessage-跨域" class="headerlink" title="五、 postMessage 跨域"></a>五、 postMessage 跨域</h6><p>postMessage 是 HTML5 XMLHttpRequest Level 2 中的 API，且是为数不多可以跨域操作的 window 属性之一，它可用于解决以下方面的问题：<br>a.） 页面和其打开的新窗口的数据传递<br>b.） 多窗口之间消息传递<br>c.） 页面与嵌套的 iframe 消息传递<br>d.） 上面三个场景的跨域数据传递</p>
<p>用法：postMessage(data,origin)方法接受两个参数<br>data： html5 规范支持任意基本类型或可复制的对象，但部分浏览器只支持字符串，所以传参时最好用 JSON.stringify()序列化。<br>origin： 协议+主机+端口号，也可以设置为”*“，表示可以传递给任意窗口，如果要指定和当前窗口同源的话设置为”&#x2F;“。</p>
<p>1.）a.html：(<a href="http://www.domain1.com/a.html">http://www.domain1.com/a.html</a>)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;iframe id=<span class="string">&quot;iframe&quot;</span> src=<span class="string">&quot;http://www.domain2.com/b.html&quot;</span> style=<span class="string">&quot;display:none;&quot;</span>&gt;&lt;/iframe&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> iframe = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;iframe&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    iframe.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> data = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">name</span>: <span class="string">&#x27;aym&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 向domain2传送跨域数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        iframe.<span class="property">contentWindow</span>.<span class="title function_">postMessage</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data), <span class="string">&#x27;http://www.domain2.com&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 接受domain2返回数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">alert</span>(<span class="string">&#x27;data from domain2 ---&gt; &#x27;</span> + e.<span class="property">data</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;, <span class="literal">false</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>2.）b.html：(<a href="http://www.domain2.com/b.html">http://www.domain2.com/b.html</a>)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 接收domain1的数据</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;data from domain1 ---&gt; &#x27;</span> + e.<span class="property">data</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(e.<span class="property">data</span>);</span><br><span class="line">        <span class="keyword">if</span> (data) &#123;</span><br><span class="line">            data.<span class="property">number</span> = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 处理后再发回domain1</span></span><br><span class="line">            <span class="variable language_">window</span>.<span class="property">parent</span>.<span class="title function_">postMessage</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data), <span class="string">&#x27;http://www.domain1.com&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h6 id="六、-跨域资源共享（CORS）"><a href="#六、-跨域资源共享（CORS）" class="headerlink" title="六、 跨域资源共享（CORS）"></a>六、 跨域资源共享（CORS）</h6><p>普通跨域请求：只服务端设置 Access-Control-Allow-Origin 即可，前端无须设置，若要带 cookie 请求：前后端都需要设置。</p>
<p>需注意的是：由于同源策略的限制，所读取的 cookie 为跨域请求接口所在域的 cookie，而非当前页。如果想实现当前页 cookie 的写入，可参考下文：七、nginx 反向代理中设置 proxy_cookie_domain 和 八、NodeJs 中间件代理中 cookieDomainRewrite 参数的设置。</p>
<p>目前，所有浏览器都支持该功能(IE8+：IE8&#x2F;9 需要使用 XDomainRequest 对象来支持 CORS）)，CORS 也已经成为主流的跨域解决方案。</p>
<p>1、 前端设置：</p>
<p>1.）原生 ajax</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 前端设置是否带cookie</span></span><br><span class="line">xhr.<span class="property">withCredentials</span> = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>

<p>示例代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>(); <span class="comment">// IE8/9需用window.XDomainRequest兼容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 前端设置是否带cookie</span></span><br><span class="line">xhr.<span class="property">withCredentials</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&quot;post&quot;</span>, <span class="string">&quot;http://www.domain2.com:8080/login&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="string">&quot;user=admin&quot;</span>);</span><br><span class="line"></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>2.）jQuery ajax</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    ...</span><br><span class="line">   <span class="attr">xhrFields</span>: &#123;</span><br><span class="line">       <span class="attr">withCredentials</span>: <span class="literal">true</span>    <span class="comment">// 前端设置是否带cookie</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">crossDomain</span>: <span class="literal">true</span>,   <span class="comment">// 会让请求头中包含跨域的额外信息，但不会含cookie</span></span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>3.）vue 框架</p>
<p>a.) axios 设置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.<span class="property">defaults</span>.<span class="property">withCredentials</span> = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>

<p>b.) vue-resource 设置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="property">http</span>.<span class="property">options</span>.<span class="property">credentials</span> = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>

<p>2、 服务端设置：</p>
<p>若后端设置成功，前端浏览器控制台则不会出现跨域报错信息，反之，说明没设成功。</p>
<p>1.）Java 后台：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 导入包：import javax.servlet.http.HttpServletResponse;</span></span><br><span class="line"><span class="comment"> * 接口参数中定义：HttpServletResponse response</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 允许跨域访问的域名：若有端口需写全（协议+域名+端口），若没有端口末尾不用加&#x27;/&#x27;</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;http://www.domain1.com&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 允许前端带认证cookie：启用此项后，上面的域名不能为&#x27;*&#x27;，必须指定具体的域名，否则浏览器会提示</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提示OPTIONS预检时，后端需要设置的两个常用自定义头</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&quot;Content-Type,X-Requested-With&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>2.）Nodejs 后台示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var http = require(&quot;http&quot;);</span><br><span class="line">var server = http.createServer();</span><br><span class="line">var qs = require(&quot;querystring&quot;);</span><br><span class="line"></span><br><span class="line">server.on(&quot;request&quot;, function (req, res) &#123;</span><br><span class="line">  var postData = &quot;&quot;;</span><br><span class="line"></span><br><span class="line">  // 数据块接收中</span><br><span class="line">  req.addListener(&quot;data&quot;, function (chunk) &#123;</span><br><span class="line">    postData += chunk;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // 数据接收完毕</span><br><span class="line">  req.addListener(&quot;end&quot;, function () &#123;</span><br><span class="line">    postData = qs.parse(postData);</span><br><span class="line"></span><br><span class="line">    // 跨域后台设置</span><br><span class="line">    res.writeHead(200, &#123;</span><br><span class="line">      &quot;Access-Control-Allow-Credentials&quot;: &quot;true&quot;, // 后端允许发送Cookie</span><br><span class="line">      &quot;Access-Control-Allow-Origin&quot;: &quot;http://www.domain1.com&quot;, // 允许访问的域（协议+域名+端口）</span><br><span class="line">      /*</span><br><span class="line">       * 此处设置的cookie还是domain2的而非domain1，因为后端也不能跨域写cookie(nginx反向代理可以实现)，</span><br><span class="line">       * 但只要domain2中写入一次cookie认证，后面的跨域接口都能从domain2中获取cookie，从而实现所有的接口都能跨域访问</span><br><span class="line">       */</span><br><span class="line">      &quot;Set-Cookie&quot;: &quot;l=a123456;Path=/;Domain=www.domain2.com;HttpOnly&quot;, // HttpOnly的作用是让js无法读取cookie</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    res.write(JSON.stringify(postData));</span><br><span class="line">    res.end();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(&quot;8080&quot;);</span><br><span class="line">console.log(&quot;Server is running at port 8080...&quot;);</span><br></pre></td></tr></table></figure>

<h6 id="七、-nginx-代理跨域"><a href="#七、-nginx-代理跨域" class="headerlink" title="七、 nginx 代理跨域"></a>七、 nginx 代理跨域</h6><p><strong>1、 nginx 配置解决 iconfont 跨域</strong><br>浏览器跨域访问 js、css、img 等常规静态资源被同源策略许可，但 iconfont 字体文件(eot|otf|ttf|woff|svg)例外，此时可在 nginx 的静态资源服务器中加入以下配置。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">  add_header <span class="title class_">Access</span>-<span class="title class_">Control</span>-<span class="title class_">Allow</span>-<span class="title class_">Origin</span> *;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2、 nginx 反向代理接口跨域</strong><br>跨域原理： 同源策略是浏览器的安全策略，不是 HTTP 协议的一部分。服务器端调用 HTTP 接口只是使用 HTTP 协议，不会执行 JS 脚本，不需要同源策略，也就不存在跨越问题。</p>
<p>实现思路：通过 nginx 配置一个代理服务器（域名与 domain1 相同，端口不同）做跳板机，反向代理访问 domain2 接口，并且可以顺便修改 cookie 中 domain 信息，方便当前域 cookie 写入，实现跨域登录。</p>
<p>nginx 具体配置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">#proxy服务器</span><br><span class="line">server &#123;</span><br><span class="line">    listen       <span class="number">81</span>;</span><br><span class="line">    server_name  www.<span class="property">domain1</span>.<span class="property">com</span>;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass   <span class="attr">http</span>:<span class="comment">//www.domain2.com:8080;  #反向代理</span></span><br><span class="line">        proxy_cookie_domain www.<span class="property">domain2</span>.<span class="property">com</span> www.<span class="property">domain1</span>.<span class="property">com</span>; #修改cookie里域名</span><br><span class="line">        index  index.<span class="property">html</span> index.<span class="property">htm</span>;</span><br><span class="line"></span><br><span class="line">        # 当用webpack-dev-server等中间件代理接口访问nignx时，此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用</span><br><span class="line">        add_header <span class="title class_">Access</span>-<span class="title class_">Control</span>-<span class="title class_">Allow</span>-<span class="title class_">Origin</span> <span class="attr">http</span>:<span class="comment">//www.domain1.com;  #当前端只跨域不带cookie时，可为*</span></span><br><span class="line">        add_header <span class="title class_">Access</span>-<span class="title class_">Control</span>-<span class="title class_">Allow</span>-<span class="title class_">Credentials</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>1.) 前端代码示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前端开关：浏览器是否读写cookie</span></span><br><span class="line">xhr.<span class="property">withCredentials</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问nginx中的代理服务器</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&quot;get&quot;</span>, <span class="string">&quot;http://www.domain1.com:81/?user=admin&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure>

<p>2.) Nodejs 后台示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var http = require(&quot;http&quot;);</span><br><span class="line">var server = http.createServer();</span><br><span class="line">var qs = require(&quot;querystring&quot;);</span><br><span class="line"></span><br><span class="line">server.on(&quot;request&quot;, function (req, res) &#123;</span><br><span class="line">  var params = qs.parse(req.url.substring(2));</span><br><span class="line"></span><br><span class="line">  // 向前台写cookie</span><br><span class="line">  res.writeHead(200, &#123;</span><br><span class="line">    &quot;Set-Cookie&quot;: &quot;l=a123456;Path=/;Domain=www.domain2.com;HttpOnly&quot;, // HttpOnly:脚本无法读取</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  res.write(JSON.stringify(params));</span><br><span class="line">  res.end();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(&quot;8080&quot;);</span><br><span class="line">console.log(&quot;Server is running at port 8080...&quot;);</span><br></pre></td></tr></table></figure>

<h6 id="八、-Nodejs-中间件代理跨域"><a href="#八、-Nodejs-中间件代理跨域" class="headerlink" title="八、 Nodejs 中间件代理跨域"></a>八、 Nodejs 中间件代理跨域</h6><p>node 中间件实现跨域代理，原理大致与 nginx 相同，都是通过启一个代理服务器，实现数据的转发，也可以通过设置 cookieDomainRewrite 参数修改响应头中 cookie 中域名，实现当前域的 cookie 写入，方便接口登录认证。</p>
<p><strong>1、 非 vue 框架的跨域（2 次跨域）</strong><br>利用 node + express + http-proxy-middleware 搭建一个 proxy 服务器。</p>
<p>1.）前端代码示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前端开关：浏览器是否读写cookie</span></span><br><span class="line">xhr.<span class="property">withCredentials</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问http-proxy-middleware代理服务器</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&quot;get&quot;</span>, <span class="string">&quot;http://www.domain1.com:3000/login?user=admin&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure>

<p>2.）中间件服务器：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="built_in">require</span>(<span class="string">&quot;http-proxy-middleware&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(</span><br><span class="line">  <span class="string">&quot;/&quot;</span>,</span><br><span class="line">  <span class="title function_">proxy</span>(&#123;</span><br><span class="line">    <span class="comment">// 代理跨域目标接口</span></span><br><span class="line">    <span class="attr">target</span>: <span class="string">&quot;http://www.domain2.com:8080&quot;</span>,</span><br><span class="line">    <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改响应头信息，实现跨域并允许带cookie</span></span><br><span class="line">    <span class="attr">onProxyRes</span>: <span class="keyword">function</span> (<span class="params">proxyRes, req, res</span>) &#123;</span><br><span class="line">      res.<span class="title function_">header</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;http://www.domain1.com&quot;</span>);</span><br><span class="line">      res.<span class="title function_">header</span>(<span class="string">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改响应信息中的cookie域名</span></span><br><span class="line">    <span class="attr">cookieDomainRewrite</span>: <span class="string">&quot;www.domain1.com&quot;</span>, <span class="comment">// 可以为false，表示不修改</span></span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Proxy server is listen at port 3000...&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>3.）Nodejs 后台同（六：nginx）</p>
<p><strong>2、 vue 框架的跨域（1 次跨域）</strong><br>利用 node + webpack + webpack-dev-server 代理接口跨域。在开发环境下，由于 vue 渲染服务和接口代理服务都是 webpack-dev-server 同一个，所以页面与代理接口之间不再跨域，无须设置 headers 跨域信息了。</p>
<p>webpack.config.js 部分配置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">module</span>: &#123;&#125;,</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">historyApiFallback</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">proxy</span>: [&#123;</span><br><span class="line">            <span class="attr">context</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">            <span class="attr">target</span>: <span class="string">&#x27;http://www.domain2.com:8080&#x27;</span>,  <span class="comment">// 代理跨域目标接口</span></span><br><span class="line">            <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">secure</span>: <span class="literal">false</span>,  <span class="comment">// 当代理某些https服务报错时用</span></span><br><span class="line">            <span class="attr">cookieDomainRewrite</span>: <span class="string">&#x27;www.domain1.com&#x27;</span>  <span class="comment">// 可以为false，表示不修改</span></span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="attr">noInfo</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="九、-WebSocket-协议跨域"><a href="#九、-WebSocket-协议跨域" class="headerlink" title="九、 WebSocket 协议跨域"></a>九、 WebSocket 协议跨域</h6><p>WebSocket protocol 是 HTML5 一种新的协议。它实现了浏览器与服务器全双工通信，同时允许跨域通讯，是 server push 技术的一种很好的实现。<br>原生 WebSocket API 使用起来不太方便，我们使用 Socket.io，它很好地封装了 webSocket 接口，提供了更简单、灵活的接口，也对不支持 webSocket 的浏览器提供了向下兼容。</p>
<p>1.）前端代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;user input：&lt;input type=<span class="string">&quot;text&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/socket.io/2.2.0/socket.io.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> socket = <span class="title function_">io</span>(<span class="string">&#x27;http://www.domain2.com:8080&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 连接成功处理</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">socket.<span class="title function_">on</span>(<span class="string">&#x27;connect&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 监听服务端消息</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    socket.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="keyword">function</span>(<span class="params">msg</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;data from server: ---&gt; &#x27;</span> + msg);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 监听服务端关闭</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    socket.<span class="title function_">on</span>(<span class="string">&#x27;disconnect&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server socket has closed.&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;input&#x27;</span>)[<span class="number">0</span>].<span class="property">onblur</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    socket.<span class="title function_">send</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>2.）Nodejs socket 后台：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var http = require(&quot;http&quot;);</span><br><span class="line">var socket = require(&quot;socket.io&quot;);</span><br><span class="line"></span><br><span class="line">// 启http服务</span><br><span class="line">var server = http.createServer(function (req, res) &#123;</span><br><span class="line">  res.writeHead(200, &#123;</span><br><span class="line">    &quot;Content-type&quot;: &quot;text/html&quot;,</span><br><span class="line">  &#125;);</span><br><span class="line">  res.end();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(&quot;8080&quot;);</span><br><span class="line">console.log(&quot;Server is running at port 8080...&quot;);</span><br><span class="line"></span><br><span class="line">// 监听socket连接</span><br><span class="line">socket.listen(server).on(&quot;connection&quot;, function (client) &#123;</span><br><span class="line">  // 接收信息</span><br><span class="line">  client.on(&quot;message&quot;, function (msg) &#123;</span><br><span class="line">    client.send(&quot;hello：&quot; + msg);</span><br><span class="line">    console.log(&quot;data from client: ---&gt; &quot; + msg);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // 断开处理</span><br><span class="line">  client.on(&quot;disconnect&quot;, function () &#123;</span><br><span class="line">    console.log(&quot;Client socket has closed.&quot;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>转载文档：<br><a href="https://segmentfault.com/a/1190000011145364">https://segmentfault.com/a/1190000011145364</a></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>js</tag>
        <tag>跨域</tag>
      </tags>
  </entry>
  <entry>
    <title>闭包和垃圾回收机制</title>
    <url>/2022/03/27/JS/%E9%97%AD%E5%8C%85%E5%92%8C%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h3 id="安全工厂"><a href="#安全工厂" class="headerlink" title="安全工厂"></a>安全工厂</h3><p>安全工厂，其实就是安全类。<br>一般情况下，我们自己写的构造函数，都是使用 new 来实例化对象，此时构造函数中的 this 指向这个实例化对象，相对于对象和函数之间建立一个引用关系。<br>但是，如果我们不小心把这个构造函数，当作普通函数来实例对象，那么执勤啊写的那些构造函数就不能满足需求了，因为在不使用 new 的情况下，普通函数的 this 指向 window。在 JS 中，内置了一些构造函数，那么这些构造函数有的使用 new 和不使用 new 都能得到实例对象，我们称这些构造函数为安全类。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">People</span>(<span class="params">name,sex,age</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sex</span> = sex;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>,<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用new调用函数</span></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">People</span>(<span class="string">&#x27;Lucy&#x27;</span>,<span class="string">&quot;女&quot;</span>，<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当作普通函数进行传参调用</span></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="title class_">People</span>(<span class="string">&#x27;Jack&#x27;</span>,<span class="string">&quot;男&quot;</span>，<span class="number">23</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面，当构造函数当作普通函数进行调用时，this指向了全局，由于函数中没有return语句，p2结果为undefined，这样的构造函数我们称为是不安全的构造函数。</span></span><br></pre></td></tr></table></figure>

<p>js 中内置了一些安全的构造函数，如：Array、Object 等。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="title class_">Array</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 像上面这样，不管使用new还是不使用，都能得到构造函数的实例化对象，我们称之为安全的构造函数。</span></span><br></pre></td></tr></table></figure>

<p>所以，我们根据 this 的志向，对上面不安全的 People 类进行改造，如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">People</span>(<span class="params">name,sex,age</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable language_">this</span> === <span class="variable language_">window</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">People</span>(name,sex,age);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sex</span> = sex;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用new调用函数</span></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">People</span>(<span class="string">&#x27;Lucy&#x27;</span>,<span class="string">&quot;女&quot;</span>，<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当作普通函数进行传参调用</span></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="title class_">People</span>(<span class="string">&#x27;Jack&#x27;</span>,<span class="string">&quot;男&quot;</span>，<span class="number">23</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 那么，像上面这样，改造之后，就是安全的了，称之为安全工厂或安全类。</span></span><br></pre></td></tr></table></figure>

<p>闭包：一个函数可以访问另一个函数内部的变量。<br>在 JS 中，其实我们写的任何一个函数，都可以看作是闭包。<br>存在嵌套关系的函数之间，内部的子函数可以访问父函数中的变量，只不过写在内部的子函数，当父函数执行完毕之后，就会销毁。<br>为了解决这个问题，我们想要在父函数的外部访问其内部的变量，并使得子函数和子函数引用的父函数中的局部变量常驻内存，这里将内部的子函数作为桥梁和外部全局变量建立引用关系。<br>在 JS 中，如果两个及以上的对象存在引用关系，或者是一个全局变量，那么就不会被垃圾回收器（GC）回收。</p>
<p>局部变量：在函数内部声明的变量叫做局部变量；生命周期 函数调用时生成，函数调用完毕后销毁（被 GC 回收）。<br>全局变量：在函数外声明的变量叫做全局变量；生命周期页面打开时生成，页面关闭后销毁。说白了，只要是程序执行了，就不会被 GC 回收。</p>
<h3 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h3><p>现在各大浏览器通常用采用的垃圾回收有两种方法：标记清除、引用计数。<br>1、标记清除</p>
<p>这是 javascript 中最常用的垃圾回收方式。当变量进入执行环境是，就标记这个变量为“进入环境”。从逻辑上讲，永远不能释放进入环境的变量所占用的内存，因为只要执行流进入相应的环境，就可能会用到他们。当变量离开环境时，则将其标记为“离开环境”。<br>　　垃圾收集器在运行的时候会给存储在内存中的所有变量都加上标记。然后，它会去掉环境中的变量以及被环境中的变量引用的标记。而在此之后再被加上标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。最后。垃圾收集器完成内存清除工作，销毁那些带标记的值，并回收他们所占用的内存空间。</p>
<p>2、引用计数</p>
<p>另一种不太常见的垃圾回收策略是引用计数。引用计数的含义是跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型赋值给该变量时，则这个值的引用次数就是 1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数就减 1。当这个引用次数变成 0 时，则说明没有办法再访问这个值了，因而就可以将其所占的内存空间给收回来。这样，垃圾收集器下次再运行时，它就会释放那些引用次数为 0 的值所占的内存。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 垃圾回收机制</span></span><br><span class="line"><span class="comment">// 声明一个函数变量并赋值</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 修改值</span></span><br><span class="line">num = <span class="number">20</span>;</span><br><span class="line"><span class="comment">// 打印num</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;num&quot;</span>, num);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 嵌套函数，子函数可以访问父函数中的变量。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> i++;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f</span>()); <span class="comment">// f()&#123;return i++;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f</span>()()); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f</span>()()); <span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 上面，每执行一次，局部变量和局部函数都是重新定义的，执行完毕后，就会被GC回收。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在父函数的外部，调用器局部变量，可以将子函数作为桥梁。</span></span><br><span class="line"><span class="comment">// 声明一个全局变量，来接收父函数执行后返回的匿名函数，此时test也就是一个函数了。</span></span><br><span class="line"><span class="keyword">var</span> test = <span class="title function_">fn</span>(); <span class="comment">//上面讲f函数每一次执行，都会形成一个新的环境，这个新的环境被全局变量test保存下来，test和子函数建立引用关系，子函数和父函数中的局部变量又存在引用关系。而上面说两个以上存在引用关系的对象，只要有一个是全局的，那么其他的就不会被回收。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(test); <span class="comment">// f()&#123;return i++;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">test</span>()); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">test</span>()); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// f每一次执行都会形成一个新的环境，这个环境我们称之为闭包环境。</span></span><br><span class="line"><span class="keyword">var</span> test2 = <span class="title function_">f</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(test2); <span class="comment">// f()&#123;return i++;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">test2</span>()); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">test2</span>()); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 闭包可以解决全局变量的污染，如果闭包使用过多，就会使得很多的局部变量，常驻内存，增加了内存的开销，处置不当，kennel会造成内存泄漏的问题。</span></span><br><span class="line"><span class="comment">// 但即使这样，在很多高级程序开发过程中，基本上都会有闭包的应用。</span></span><br></pre></td></tr></table></figure>

<h3 id="闭包解决的问题"><a href="#闭包解决的问题" class="headerlink" title="闭包解决的问题"></a>闭包解决的问题</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在循环内的延迟调用，无法正确获取循环的索引问题：可以使用闭包（自执行函数，也就是立即执行函数）解决。</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;i&quot;</span>, j);</span><br><span class="line">  &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 10</span></span><br><span class="line"><span class="comment">// 10</span></span><br><span class="line"><span class="comment">// 10</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  (<span class="keyword">function</span> (<span class="params">i</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;i&quot;</span>, j);</span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个闭包环境：一个函数其实就是一个闭包</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在闭包（自执行函数）中，创建一个类，就叫做闭包类</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在全局中，声明的Animal类，可以在全局的任何位置无限的实例化</span></span><br><span class="line"><span class="comment">// 在闭包中，声明的People类，只能在闭包中实例化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 改造：</span></span><br><span class="line"><span class="keyword">var</span> p = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">People</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">People</span>();</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">// 此时我们就可以通过调用p来实例化People类</span></span><br></pre></td></tr></table></figure>

<p>参考视频：<br><a href="https://www.bilibili.com/video/BV1sg4y1874U">https://www.bilibili.com/video/BV1sg4y1874U</a></p>
]]></content>
  </entry>
  <entry>
    <title>自学Java开发的学习路线</title>
    <url>/2019/03/20/Java/%E3%80%90%E5%8E%9F%E5%88%9B%E3%80%91%E8%87%AA%E5%AD%A6Java%E5%BC%80%E5%8F%91%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
    <content><![CDATA[<h2 id="入坑-Java-开发的自学之路"><a href="#入坑-Java-开发的自学之路" class="headerlink" title="入坑 Java 开发的自学之路"></a>入坑 Java 开发的自学之路</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><ul>
<li>编程语言：Java，Python， C</li>
<li>基本算法</li>
<li>基本网络知识：TCP&#x2F;IP HTTP&#x2F;HTTPS</li>
<li>基本的设计模式</li>
</ul>
<hr>
<h3 id="工具方面"><a href="#工具方面" class="headerlink" title="工具方面"></a>工具方面</h3><ul>
<li>操作系统：Linux（CentOS&#x2F;Ubuntu）</li>
<li>代码管理：svn &#x2F; git</li>
<li>持续集成（CI&#x2F;CD）：jenkins</li>
<li>Java 的项目管理工具：Maven &#x2F; Gradle</li>
</ul>
<hr>
<h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><h4 id="应用层框架"><a href="#应用层框架" class="headerlink" title="应用层框架"></a>应用层框架</h4><ul>
<li><del>ssh: spring + structs + hibernate</del></li>
<li>ssm: spring springmvc(web 框架) mybatis（数据库的访问层）</li>
<li>spring boot</li>
</ul>
<h4 id="各种中间件"><a href="#各种中间件" class="headerlink" title="各种中间件"></a>各种中间件</h4><ul>
<li>MQ 消息队列</li>
<li>RPC 通信框架 gRPC thrift dubbo springcloud</li>
<li>elasticsearch 数据库 搜索引擎</li>
</ul>
<h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><ul>
<li>SQL：MySQL（关系型数据库） &#x2F; Postgre SQL</li>
<li>NoSQL：(非关系型数据库) Redis Memcached mongodb elasticsearch</li>
</ul>
<hr>
<h3 id="架构方面"><a href="#架构方面" class="headerlink" title="架构方面"></a>架构方面</h3><h4 id="分布式-微服务架构"><a href="#分布式-微服务架构" class="headerlink" title="分布式&#x2F;微服务架构"></a>分布式&#x2F;微服务架构</h4><ul>
<li>spring cloud</li>
<li>dubbo</li>
<li>rpc 通信框架</li>
</ul>
<h4 id="虚拟化-容器化的技术"><a href="#虚拟化-容器化的技术" class="headerlink" title="虚拟化&#x2F;容器化的技术"></a>虚拟化&#x2F;容器化的技术</h4><ul>
<li>Docker 容器化技术</li>
<li>k8s kubernetes</li>
</ul>
<hr>
<h3 id="关注源码-性能"><a href="#关注源码-性能" class="headerlink" title="关注源码&#x2F;性能"></a>关注源码&#x2F;性能</h3><ul>
<li>JDK 源码以及部分设计思想</li>
<li>Spring 源码</li>
<li>JVM 细节与排错</li>
<li>高并发&#x2F;高可用</li>
</ul>
<hr>
<h3 id="JAVA-书籍推荐"><a href="#JAVA-书籍推荐" class="headerlink" title="JAVA 书籍推荐"></a>JAVA 书籍推荐</h3><ul>
<li>《Java 编程思想》-语言</li>
<li>《Java 并发编程实战》-多线程</li>
<li>《深入理解 Java 虚拟机》-jvm</li>
<li>《函数式编程思维》</li>
<li>《TCP&#x2F;IP》详解</li>
<li>《Spring MVC+MyBatic 开发入门到项目实战》<br>spring -&gt; spring mvc -&gt; spring boot -&gt; spring cloud</li>
<li>《Spring 技术内幕 深入解析 spring 架构与设计原理》</li>
<li>《Elasticsearch 服务器开发》</li>
<li>《Redis 入门指南》</li>
</ul>
<h3 id="数据结构和算法相关的书籍推荐"><a href="#数据结构和算法相关的书籍推荐" class="headerlink" title="数据结构和算法相关的书籍推荐"></a>数据结构和算法相关的书籍推荐</h3><ul>
<li>《大话数据结构》-排序、查找、优化</li>
<li>《算法导论》</li>
<li>《剑指 offer》</li>
<li>《编程之美》</li>
<li>《编程珠玑》</li>
<li>LeetCode 题解</li>
</ul>
<h3 id="各种书籍"><a href="#各种书籍" class="headerlink" title="各种书籍"></a>各种书籍</h3><p>C 语言：</p>
<ul>
<li>《C Primer Plus》-指针、内存管理 - 第六版</li>
<li>《C++ Primer Plus》</li>
<li>《C++Primer》</li>
</ul>
<p>Java：</p>
<ul>
<li>《Java 编程思想》</li>
<li>《Java 核心技术》卷 1 卷 2</li>
</ul>
<p>Python：</p>
<ul>
<li>《Python 核心编程》</li>
<li>《Python 编程从入门到实战》</li>
</ul>
<p>Go：<br>《Go 语言实战》 or 《Go In Action》</p>
<p>算法：</p>
<ul>
<li>《算法导论》-不适合初学者</li>
<li>《算法》第四版 红色</li>
</ul>
<p>计算机网络：【TCP&#x2F;IP 协议栈】</p>
<ul>
<li>《TCP&#x2F;IP 详解》</li>
<li>《计算机网络 自顶向下》</li>
</ul>
<p>Linux：</p>
<ul>
<li>《Linux 私房菜》-工具书</li>
<li>《Unix 环境高级编程》</li>
</ul>
<p>JavaEE 框架：【spring 框架】</p>
<ul>
<li>《Spring 实战》</li>
<li>《Spring Boot 实战》</li>
<li>《Spring 技术内幕》-很难</li>
</ul>
<p>数据库：</p>
<ul>
<li>《MySQL 必知必会》 涵盖 《SQL 必知必会》的内容</li>
<li>《高性能 MySQL》</li>
</ul>
<p>代码质量：</p>
<ul>
<li>《重构 改善机构代码的设计》需要一些经验，拔高内容</li>
</ul>
<p>参考视频：<br><a href="https://www.bilibili.com/video/BV1Xt411q7ub?spm_id_from=333.999.0.0">https://www.bilibili.com/video/BV1Xt411q7ub?spm_id_from=333.999.0.0</a></p>
]]></content>
      <categories>
        <category>server</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下Nodejs应用service配置</title>
    <url>/2020/11/15/Node/Linux%E4%B8%8BNodejs%E5%BA%94%E7%94%A8service%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>Linux 的 service 命令用于对系统服务进行管理，比如启动（start）、停止（stop）、重启（restart）、查看状态（status）等。service 命令本身是一个 shell 脚本，它在 &#x2F;etc&#x2F;init.d&#x2F; 目录查找指定的服务脚本，然后调用该服务脚本来完成任务。</p>
<p>下面以基于 Nodejs 开发的名称为 data-inspector 的应用为例，说明 Linux service 的配置。</p>
<p>第一步：在 &#x2F;frin&#x2F;DataInspector 下创建指向 node 命令的软链接 data-inspector，执行 ll 命令查看该文件的信息如下：</p>
<p><code>lrwxrwxrwx  1 root root     21 12月 30 15:42 data-inspector -&gt; /usr/bin/node</code></p>
<blockquote>
<p>这样做的目的是为自己的应用进程起一个不同的名字。</p>
</blockquote>
<p>第二步：在 &#x2F;etc&#x2F;init.d&#x2F; 下创建文件 data-inspector，设置权限为 755，内容如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># data-inspector</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># description: data-inspector</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">processname: data-inspector</span></span><br><span class="line"></span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line">  start)</span><br><span class="line">    echo &quot;Starting data-inspector&quot;</span><br><span class="line">    cd /frin/DataInspector</span><br><span class="line">    rm -f data-inspector.log</span><br><span class="line">    nohup ./data-inspector ./bin/www &gt; data-inspector.log 2&gt;&amp;1 &amp;</span><br><span class="line">    sleep 1s</span><br><span class="line">    echo &quot;started data-inspector&quot;</span><br><span class="line">    ;;</span><br><span class="line">  stop)</span><br><span class="line">    PID=`pidof data-inspector`</span><br><span class="line">    echo &quot;Stopping data-inspector&quot;</span><br><span class="line">    if [ ! -z &quot;$PID&quot; ]; then</span><br><span class="line">      kill -9 $PID</span><br><span class="line">    fi</span><br><span class="line">    echo &quot;stoped data-inspector&quot;</span><br><span class="line">    ;;</span><br><span class="line">  restart)</span><br><span class="line">    $0 stop</span><br><span class="line">    $0 start</span><br><span class="line">  ;;</span><br><span class="line">*)</span><br><span class="line">   echo &quot;Usage: service data-inspector &#123;start|stop|restart&#125;&quot;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，如果 node ／usr&#x2F;bin 或 &#x2F;usr&#x2F;sbin 下，服务会因为找不到 node 命令失败。可以在 &#x2F;usr&#x2F;bin 下创建 node 的软链接。</p>
</blockquote>
<p>完成之后执行以下命令可以对服务进行启动、停止、重启：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">service data-inspector start</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">service data-inspector stop</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">service data-inspector restart</span></span><br></pre></td></tr></table></figure>

<p>转载文档：<br><a href="http://zhang-jc.github.io/2016/05/16/Linux%E4%B8%8BNodejs%E5%BA%94%E7%94%A8service%E9%85%8D%E7%BD%AE/">http://zhang-jc.github.io/2016/05/16/Linux%E4%B8%8BNodejs%E5%BA%94%E7%94%A8service%E9%85%8D%E7%BD%AE/</a></p>
]]></content>
      <categories>
        <category>server</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>nodejs</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>深入浅出Nodejs</title>
    <url>/2020/11/15/Node/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BANodejs/</url>
    <content><![CDATA[<h4 id="构建-Nodejs-项目"><a href="#构建-Nodejs-项目" class="headerlink" title="构建 Nodejs 项目"></a>构建 Nodejs 项目</h4><p>1.新建 express 项目</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cnpm i express express-generator -g           （全局安装，只需安装一次）</span><br></pre></td></tr></table></figure>

<p>2.进入一个新的文件目录，创建项目名称为 expressTest 的脚手架项目</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">express -e expressTest       (创建项目，脚手架项目)</span><br></pre></td></tr></table></figure>

<p>3.运行项目</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cd expressTest</span><br><span class="line">cnpm i</span><br><span class="line">npm start         ------<span class="attr">localhost</span>:<span class="number">3000</span></span><br></pre></td></tr></table></figure>

<h3 id="深入浅出-NodeJS"><a href="#深入浅出-NodeJS" class="headerlink" title="深入浅出 NodeJS"></a>深入浅出 NodeJS</h3><p>朴灵老师写的《深入浅出 Node.js》,这本书不是一本简单的 Node 入门书籍，它没有停留在 Node 介绍或者框架、库的使用层面上，而是从不同的视角来揭示 Node 自己内在的特点和结构。建议有一定 Node 基础或者做过 Node 方面的小项目的同学阅读，看完以后你的思维会有很奇特的碰撞，我看的时候就常常会有这样的想法:“哦，原来这个功能是这样实现的哦”。</p>
<h4 id="1-Node-简介"><a href="#1-Node-简介" class="headerlink" title="1.Node 简介"></a>1.Node 简介</h4><p>这一章简要介绍了 Node，从中可以了解 Node 的发展历程及其带来的影响和价值。</p>
<p>为什么叫 Node?起初，Ryan Dahl 称他的项目为 web.js，就是一个 Web 服务器，但是项目的发展超过了他当初单纯开发一个 Web 服务器的想法，变成构建网络应用的一个基本框架,这样可以在它的基础上构建更多的东西,诸如服务器、客户端、命令行工具等。Node 发展为一个强制不共享任何资源的单线程、单进程系统，包括十分适宜网络的库，为构建大型分布式应用程序提供了基础设施，其目标也是成为一个构建快速、可伸缩的网络应用平台。它自身非常简单，通过通信协议来组织很多 Node，非常容易通过扩展来达成构建大型网络应用的目的。每一个 Node 进程都构成这个网络应用中的一个节点，这是它名字所含意义的<strong>真谛</strong>。</p>
<p><img src="https://www.daykalif.com/blog_img/Node1.png" alt="Node"></p>
<h4 id="2-模块机制"><a href="#2-模块机制" class="headerlink" title="2.模块机制"></a>2.模块机制</h4><p>这一章主要介绍 Node 的模块机制，从中了解到 Node 如何实现 CommonJS 模块和包规范的。在这一章中，我们详细的解释了模块在引用过程中的编译、加载规则。另外，我们还能读到更深度的关于 Node 自身源代码的组织架构。<br>CommonJS 规范为 JavaScript 定制了一个美好的愿景—希望 JavaScript 能够在任何地方运行。</p>
<p><img src="https://www.daykalif.com/blog_img/Node2.png" alt="Node"></p>
<h4 id="3-异步-I-O"><a href="#3-异步-I-O" class="headerlink" title="3.异步 I&#x2F;O"></a>3.异步 I&#x2F;O</h4><p>这一章展示了 Node 中我们将异步 I&#x2F;O 作为主要设计理念的原因。另外，还会介绍到异步 I&#x2F;O 的详细实现过程。<br>事件循环是异步实现的核心，它与浏览器中的执行模型基本上保持一致。而向古老的 Rhino，尽管是较早就能在服务器运行的 JavaScript 运行时但是执行模型并不像浏览器采用事件驱动，而是使用像其他语言一样采用同步 I&#x2F;O 作为主要模型，这造成它在性能上面无法发挥。<strong>Node 正是依靠构建了一套完善的高性能异步 I&#x2F;O 框架，打破了 JavaScript 在服务器止步不前的局面。</strong></p>
<p><img src="https://www.daykalif.com/blog_img/Node3.png" alt="Node"></p>
<h4 id="4-异步编程"><a href="#4-异步编程" class="headerlink" title="4.异步编程"></a>4.异步编程</h4><p>这一章主要介绍异步编程，其中最常见的异步编程问题介绍，也有详细的解决方案。在这一章中我们可以接触到 Promise、事件、高阶函数是如何进行流程控制的。 （这一章建议多看书）</p>
<p><img src="https://www.daykalif.com/blog_img/Node4.png" alt="Node"></p>
<h4 id="5-内存控制"><a href="#5-内存控制" class="headerlink" title="5.内存控制"></a>5.内存控制</h4><p>这一章主要介绍了 Node 的内存控制，主要内容有垃圾回收、内存限制、查看内存、内存泄漏、大内存应用等细节。<br>Node 将 JavaScript 的主要应用场景帮到了服务器端，相应要考虑的细节也与浏览器端不同，在服务器端，资源向来是寸土寸金，要为海量用户服务，就使得一切资源都要高效循环利用，需要更严谨为每一份资源作出安排。</p>
<p><img src="https://www.daykalif.com/blog_img/Node5.png" alt="Node"></p>
<h4 id="6-理解-Buffer"><a href="#6-理解-Buffer" class="headerlink" title="6.理解 Buffer"></a>6.理解 Buffer</h4><p>这一章主要介绍了前端 JavaScript 里不能遇到的 Buffer。由于 Node 中会涉及频繁的网络和磁盘 I&#x2F;O，处理字节流数据会是很常见的行为，这部分的场景与纯粹的前端开发完全不同。<br>体会过 JavaScript 友好字符串操作后，有些开发者可能会形成思维定势，将 Buffer 当作字符串来理解。但字符串与 Buffer 之间有实质性的差异，即 Buffer 是二进制数据，字符串与 Buffer 之间存在编码关系。因此，理解 Buffer 的诸多细节十分必要，对于如何高效处理二进制十分有用。</p>
<p><img src="https://www.daykalif.com/blog_img/Node6.png" alt="Node"></p>
<h4 id="7-网络编程"><a href="#7-网络编程" class="headerlink" title="7.网络编程"></a>7.网络编程</h4><p>这一章介绍了 Node 支持的 TCP,UDP,HTTP 编程，还讲了有关于 Websocket 与 TSL、HTTPS 的介绍。<br>利用 Node 可以十分方便地搭建网络服务器，不需要专门的 Web 服务器作为容器，仅仅需要几行代码就可以构建服务器。Node 提供了 net、dgram、http、https 这 4 个模块，分别用于处理 TCP、UDP、HTTP、HTTPS，适用于服务端和客户端。</p>
<p><img src="https://www.daykalif.com/blog_img/Node7.png" alt="Node"></p>
<h4 id="8-构建-Web-应用"><a href="#8-构建-Web-应用" class="headerlink" title="8.构建 Web 应用"></a>8.构建 Web 应用</h4><p>这一章主要介绍了构建 Web 应用过程中用到的大多数技术细节，如数据处理、路由、MVC、模板、RESTful 等。 我觉得这一章对于我么开发一个 Nodejs 方面的应用很有指导性作用，整理本章细节就可以完成一个功能的 Web 开发框架，这章的目的也就是希望读者学习过这一章后能够对 Node 开发带来地图式的启发，在开发 Web 应用时能够心有轮廓，明了细微。</p>
<p><img src="https://www.daykalif.com/blog_img/Node8.png" alt="Node"></p>
<h4 id="9-玩转进程"><a href="#9-玩转进程" class="headerlink" title="9.玩转进程"></a>9.玩转进程</h4><p>这一章主要介绍 Node 的多进程技术，以及如何借助多进程方式来提升应用的可用性和性能。从严格意义上面来讲,Node 并非真正的单线程架构，在第 3 章我们还叙述过 Node 自身还有一定的 I&#x2F;O 线程存在，这些 I&#x2F;O 线程由底层 libuv 处理，这部分线程对于 JavaScript 开发者是透明的，只在 C++扩展开发时才会关注到。JavaScript 代码永远运行在 V8 上，是单线程的。本章将围绕 JavaScript 部分展开，所以屏蔽底层细节的讨论。</p>
<p><img src="https://www.daykalif.com/blog_img/Node9.png" alt="Node"></p>
<h4 id="10-测试"><a href="#10-测试" class="headerlink" title="10.测试"></a>10.测试</h4><p>这一章主要介绍 Node 的单元测试和性能测试技巧。测试的意义在于，在用户消费产出的代码之前，开发者首先消费他，给予其重要的质量保证。<br>测试包括单元测试、性能测试、安全测试和功能测试等几个方面，本章将从 Node 实践的角度来介绍单元测试和性能测试。</p>
<p><img src="https://www.daykalif.com/blog_img/Node10.png" alt="Node"></p>
<h4 id="11-产品化"><a href="#11-产品化" class="headerlink" title="11.产品化"></a>11.产品化</h4><p>“行百里路半九十”，完成产品开发的代码编写后，才完成了项目的第一步。这是一章介绍了将 Node 产品化所需要的注意到的细节，如项目工程化、代码部署、日志、性能、监控报警、稳定性、异构共存。 对于 Node 开发者而言，很多其他语言走过的路需要开发者带着 Node 特效重新践行一遍。这并不是坏事，Node 更接近底层使得开发者对于细节的可控性非常高。</p>
<p><img src="https://www.daykalif.com/blog_img/Node11.png" alt="Node"></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>优点：</strong><br>因为 Node 是基于事件驱动和无阻塞的，所以非常适合处理并发请求，因此构建在 Node 上的代理服务器相比其他技术实现（如 Ruby）的服务器表现要好得多。<br>此外，与 Node 代理服务器交互的客户端代码是由 javascript 语言编写的，因此，客户端和服务器端都是用同一种语言编写，这是非常美妙的事情。</p>
<p><strong>缺点：</strong><br>Node 是一个相对新的开源项目，所以不太稳定，它总是一直在变，而且缺少足够多的第三方库支持。看起来，就像是 Ruby&#x2F;Rails 当年的样子。</p>
<p>转载文档：<br><a href="https://tw93.github.io/2015-03-01/shen-ru-qian-chu-nodejs-reading-mind-map.html">https://tw93.github.io/2015-03-01/shen-ru-qian-chu-nodejs-reading-mind-map.html</a></p>
]]></content>
      <categories>
        <category>server</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>【搬】npm打包</title>
    <url>/2022/02/22/Node/%E3%80%90%E6%90%AC%E3%80%91npm%E6%89%93%E5%8C%85/</url>
    <content><![CDATA[<p>登录 npm：<br>npm login</p>
<p>输入用户名：daykalif<br>密码：Wjp78…<br>输入邮箱：<a href="mailto:&#x31;&#x30;&#x33;&#x38;&#50;&#48;&#x30;&#53;&#57;&#53;&#x40;&#x71;&#113;&#46;&#99;&#111;&#x6d;">&#x31;&#x30;&#x33;&#x38;&#50;&#48;&#x30;&#53;&#57;&#53;&#x40;&#x71;&#113;&#46;&#99;&#111;&#x6d;</a><br>输入邮箱验证码：xxx</p>
<h4 id="1-更改版本号，每一次都需要比上个版本更高"><a href="#1-更改版本号，每一次都需要比上个版本更高" class="headerlink" title="1.更改版本号，每一次都需要比上个版本更高"></a>1.更改版本号，每一次都需要比上个版本更高</h4><h4 id="2-打包：tnpm-run-prepublishOnly"><a href="#2-打包：tnpm-run-prepublishOnly" class="headerlink" title="2.打包：tnpm run prepublishOnly"></a>2.打包：tnpm run prepublishOnly</h4><h4 id="3-发包：npm-publish-–access-public"><a href="#3-发包：npm-publish-–access-public" class="headerlink" title="3.发包：npm publish –access public"></a>3.发包：npm publish –access public</h4><h4 id="4-撤销发包：npm-unpublish-–access-public-–force"><a href="#4-撤销发包：npm-unpublish-–access-public-–force" class="headerlink" title="4.撤销发包：npm unpublish –access public –force"></a>4.撤销发包：npm unpublish –access public –force</h4>]]></content>
  </entry>
  <entry>
    <title>Vue-Router路由钩子</title>
    <url>/2019/07/28/Vue/Vue-Router%E8%B7%AF%E7%94%B1%E9%92%A9%E5%AD%90/</url>
    <content><![CDATA[<h4 id="Vue-Router-路由钩子"><a href="#Vue-Router-路由钩子" class="headerlink" title="Vue-Router 路由钩子"></a>Vue-Router 路由钩子</h4><blockquote>
<p>Vue-router 操作步骤:</p>
</blockquote>
<p>1.路由模块的安装 2.静态路由表的设置 3.在入口文件引用路由模块 4.使用路由模块 5.在入口文件中引用静态路由表 6.通过路由对象的实例化操作，将静态路由表设置在路由模块当中 7.将已经设置好的路由模块配置到 vue 实例当中（vue 实例已经包含了路由的功能操作）</p>
<blockquote>
<p>在 vue 中有三大钩子函数</p>
</blockquote>
<p>一、组件 vue 的钩子函数<br>二、指令钩子函数<br>三、路由钩子函数</p>
<ul>
<li>1.路由中【设参在路由】</li>
<li>2.入口文件 main.js 全局【传参在地址】</li>
<li>3.组件中【接参在组件】</li>
</ul>
<h4 id="Vue-Router-路由钩子-1"><a href="#Vue-Router-路由钩子-1" class="headerlink" title="Vue-Router 路由钩子"></a>Vue-Router 路由钩子</h4><p>路由钩子主要是给使用者在路由发生变化时进行一些特殊的处理而定义的</p>
<blockquote>
<p>路由钩子函数有三种：</p>
</blockquote>
<p>1：全局钩子： beforeEach、 afterEach<br>2：某个路由独享的钩子【单个路由里面的钩子】： beforeEnter、 beforeLeave<br>3:组件路由【组件内钩子】：beforeRouteEnter、 beforeRouteUpdate、 beforeRouteLeave</p>
<p><strong>1.全局守卫</strong>:<br>无论访问哪一个路径，都会触发全局的钩子函数，位置是调用 router 的方法<br>router.beforeEach() 进入之前触发<br>router.afterEach() 进入之后触发</p>
<p>(1). beforeEach（全局前置守卫）<br>使用 router.beforeEach 注册一个全局前置守卫</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;...&#125;)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>每个守卫方法接收三个参数：<br>①to: Route: 即将要进入的目标路由对象（to 是一个对象，是将要进入的路由对象，可以用 to.path 调用路由对象中的属性）<br>②from: Route: 当前导航正要离开的路由<br>③next: Function: 这是一个必须需要调用的方法，执行效果依赖 next 方法的调用参数。</p>
<p>next 参数：<br>next(): 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是 confirmed (确认的)。<br>next(false): 中断当前的导航。如果浏览器的 URL 改变了 (可能是用户手动或者浏览器后退按 钮)，那么 URL 地址会重置到 from 路由对应的地址。<br>next(‘&#x2F;‘) 或者 next({ path: ‘&#x2F;‘ }): 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。你可以向 next 传递任意位置对象，且允许设置诸如 replace: true、name: ‘home’ 之类的选项以及任何用在 router-link 的 to prop 或 router.push 中的选项。<br>next(error): (2.4.0+) 如果传入 next 的参数是一个 Error 实例，则导航会被终止且该错误会被传递给 router.onError()注册过的回调。</p>
<p>ps~ : 确保要调用 next 方法，否则钩子就不会被 resolved。</p>
<p>(2). afterEach（全局后置钩子）<br>和守卫不同的是，这些钩子不会接受 next 函数也不会改变导航本身</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>2.路由独享的守卫(单个路由独享的)</strong>:</p>
<p>写在路由配置中，只有访问到这个路径，才能触发钩子函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&quot;/dashboard&quot;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="function">(<span class="params">resolve</span>) =&gt;</span></span><br><span class="line">    <span class="built_in">require</span>([<span class="string">&quot;../components/page/Dashboard.vue&quot;</span>], resolve),</span><br><span class="line">  <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&quot;系统首页&quot;</span> &#125;,</span><br><span class="line">  <span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;&#125;,</span><br><span class="line">  <span class="attr">beforeLeave</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这些守卫与全局前置守卫的方法参数是一样的。</p>
<p><strong>3.组件级路由钩子</strong>:</p>
<p>写在组件中,访问路径，即将渲染组件的时候触发的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    data,</span><br><span class="line">    methods</span><br><span class="line">    <span class="title function_">beforeRouteEnter</span>(<span class="params">to,<span class="keyword">from</span>,next</span>)&#123;</span><br><span class="line">        <span class="comment">// 在渲染该组件的对应路由被confirm前调用</span></span><br><span class="line">        <span class="comment">// 不！能！获取组件实例`this`</span></span><br><span class="line">        <span class="comment">// 因为当守卫执行前，组件实例还没被创建，即this不指向实例，组件还没创建</span></span><br><span class="line"></span><br><span class="line">        <span class="title function_">next</span>(<span class="function">(<span class="params">vm</span>) =&gt;</span>&#123;</span><br><span class="line">            <span class="comment">// vm就是实例,通过vm访问组件实例</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// beforeRouteEnter 守卫 不能 访问 this，因为守卫在导航确认前被调用,因此即将登场的新组件还没被创建。不过，你可以通过传一个回调给 next来访问组件实例。在导航被确认的时候执行回调，并且把组件实例作为回调方法的参数。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注意~ ： beforeRouteEnter 是支持给 next 传递回调的唯一守卫。对于 beforeRouteUpdate 和 beforeRouteLeave 来说，this 已经可用了，所以不支持传递回调，因为没有必要了。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="title function_">beforeRouteUpdate</span>(<span class="params">to,<span class="keyword">from</span>,next</span>)&#123;</span><br><span class="line">        <span class="comment">// 在当前路由改变，但是该组件被复用时调用</span></span><br><span class="line">        <span class="comment">// 举例来说，对于一个带有动态参数的路径 /foo/:id,在/foo/1和/foo/2之间跳转的时候，</span></span><br><span class="line">        <span class="comment">// 由于会渲染同样的Foo组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span></span><br><span class="line">        <span class="comment">// 可以访问组件实例`this`</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">beforeRouteLeave</span>(<span class="params">to,<span class="keyword">from</span>,next</span>)&#123;</span><br><span class="line">        <span class="comment">// 导航离开该组件的对应路由时调用</span></span><br><span class="line">        <span class="comment">// 可以访问组件实例`this`</span></span><br><span class="line">        <span class="keyword">const</span> answer = <span class="variable language_">window</span>.<span class="title function_">confirm</span>(<span class="string">&#x27;Do you really want to leace?you have unsaved chages!&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span>(answer)&#123;</span><br><span class="line">            <span class="title function_">next</span>()</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_">next</span>(<span class="literal">false</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 这个离开守卫beforeRouteLeave()通常用来禁止用户在还未保存修改前突然离开。该导航可以通过 next(false) 来取消。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>完整的导航解析流程： 1.导航被触发。</p>
<p>2.在失活的组件里调用离开守卫。</p>
<p>3.调用全局的 beforeEach 守卫。</p>
<p>4.在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。</p>
<p>5.在路由配置里调用 beforeEnter。</p>
<p>6.解析异步路由组件。</p>
<p>7.在被激活的组件里调用 beforeRouteEnter。</p>
<p>8.调用全局的 beforeResolve 守卫 (2.5+)。</p>
<p>9.导航被确认。</p>
<p>10.调用全局的 afterEach 钩子。</p>
<p>11.触发 DOM 更新。</p>
<p>12.用创建好的实例调用 beforeRouteEnter 守卫中传给 next 的回调函数。</p>
<h3 id="实际开发中的场景"><a href="#实际开发中的场景" class="headerlink" title="实际开发中的场景"></a>实际开发中的场景</h3><h4 id="vue-判断是否登录，进入不同的页面"><a href="#vue-判断是否登录，进入不同的页面" class="headerlink" title="vue 判断是否登录，进入不同的页面"></a>vue 判断是否登录，进入不同的页面</h4><p>描述：我们在开发中，经常会遇到，进入登录页面与主页面的判断，通常后台会传回一个 session 来判断，现在就考虑下有多少中方法来实现这种效果；</p>
<p>1）.以前用的方法是直接在 app.vue 入口文件来判断跳转登录页面，还是主页面</p>
<ul>
<li>优点：简单明了，直接根据是否存在 session 来判断入口文件是登录还是主页面；</li>
<li>缺点：体验感不好，每次判断前都会有登录页面出现一下，再跳转主页面，</li>
</ul>
<p>2）.用动态路由，判断用户是否登录跳转登录页面还是主页面，判断管理员权限。判断页面是否存在，不存在跳转 404 页面</p>
<ul>
<li>优点：能适用多钟情况，体验感好</li>
</ul>
<p><strong>1.全局钩子</strong>：<br>这类钩子主要作用于全局,一般用来判断权限,以及以及页面丢失时候需要执行的操作</p>
<p>在 main.js 或 router.js 添加</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(store.<span class="property">state</span>.<span class="property">token</span>);</span><br><span class="line">  <span class="comment">// to: Route: 即将要进入的目标 路由对象</span></span><br><span class="line">  <span class="comment">// from: Route: 当前导航正要离开的路由</span></span><br><span class="line">  <span class="comment">// next: Function: 一定要调用该方法来 resolve 这个钩子。执行效果依赖 next 方法的调用参数。</span></span><br><span class="line">  <span class="keyword">const</span> route = [<span class="string">&quot;index&quot;</span>, <span class="string">&quot;list&quot;</span>];</span><br><span class="line">  <span class="keyword">let</span> isLogin = store.<span class="property">state</span>.<span class="property">token</span>; <span class="comment">// 是否登录</span></span><br><span class="line">  <span class="comment">// 未登录状态；当路由到route指定页时，跳转至login</span></span><br><span class="line">  <span class="keyword">if</span> (route.<span class="title function_">indexOf</span>(to.<span class="property">name</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isLogin == <span class="literal">null</span>) &#123;</span><br><span class="line">      router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&quot;/login&quot;</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 已登录状态；当路由到login时，跳转至home</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(to.<span class="property">name</span>);</span><br><span class="line">  <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;routerName&quot;</span>, to.<span class="property">name</span>);</span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">name</span> === <span class="string">&quot;login&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isLogin != <span class="literal">null</span>) &#123;</span><br><span class="line">      router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&quot;/HomeMain&quot;</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>2.某个路由独享钩子</strong>:</p>
<p>就像说的一样，给某个路由单独使用的，本质上和后面的组件内钩子是一样的。都是特指的某个路由。不同的是，这里的一般定义在 router 当中，而不是在组件内。如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/dashboard&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">&#x27;../components/page/Dashboard.vue&#x27;</span>], resolve),</span><br><span class="line">    <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;系统首页&#x27;</span> &#125;,</span><br><span class="line">    <span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">    <span class="attr">beforeLeave</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p><strong>3.组件路由</strong>:</p>
<p>主要包括 beforeRouteEnter 和 beforeRouteUpdate ,beforeRouteLeave,这几个钩子都是写在组件里面也可以传三个参数(to,from,next),作用与前面类似.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">beforeRouteLeave</span>(<span class="params">to, <span class="keyword">from</span>, next</span>) &#123;</span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">beforeRouteEnter</span>(<span class="params">to, <span class="keyword">from</span>, next</span>) &#123;</span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">beforeRouteUpdate</span>(<span class="params">to, <span class="keyword">from</span>, next</span>) &#123;</span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">computed</span>: &#123;&#125;,</span><br><span class="line"><span class="attr">method</span>: &#123;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>最后看看官网介绍</strong>:</p>
<p>to: Route: 即将要进入的目标 路由对象<br>from: Route: 当前导航正要离开的路由<br>next: Function: 一定要调用该方法来 resolve 这个钩子。执行效果依赖 next 方法的调用参数。<br>next(): 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是 confirmed （确认的）。<br>next(false): 中断当前的导航。如果浏览器的 URL 改变了（可能是用户手动或者浏览器后退按钮），那么 URL 地址会重置到 from 路由对应的地址。<br>next(‘&#x2F;’) 或者 next({ path: ‘&#x2F;’ }): 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。</p>
<p><strong>最后一点，关于页面不存在，跳转 404 页面</strong>:</p>
<p>由于 router 本身的匹配是从上到下的，如果在前面找到了匹配的路由，就跳转了。因此可以直接在最后添加 404 的路由，如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> routerConfig = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/pages&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">App</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;demo/step1/list&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>: coupon,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;coupon-list&quot;</span>,</span><br><span class="line">        <span class="attr">meta</span>: &#123;</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&quot;红包&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">NotFound</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;notfound&quot;</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;404-页面丢了&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<p>转载文档：<br><a href="https://www.cnblogs.com/cxddgz/p/13787013.html">https://www.cnblogs.com/cxddgz/p/13787013.html</a><br><a href="https://blog.csdn.net/dwb123456123456/article/details/85317136">https://blog.csdn.net/dwb123456123456/article/details/85317136</a></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue</tag>
        <tag>vue-router</tag>
        <tag>路由</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue之7个有用的开发技巧</title>
    <url>/2020/11/30/Vue/Vue%E4%B9%8B7%E4%B8%AA%E6%9C%89%E7%94%A8%E7%9A%84%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h4 id="1-状态共享"><a href="#1-状态共享" class="headerlink" title="1.状态共享"></a>1.状态共享</h4><p>随着组件的细化，就会遇到多组件状态共享的情况，<strong>Vuex</strong>当然可以解决这类问题，不过就像<strong>Vuex</strong>官方文档所说的，如果应用不够大，为避免代码繁琐冗余，最好不要使用它，今天我们介绍的是 vue.js 2.6 新增加的<a href="https://vuejs.org/v2/api/#Vue-observable">Observable API</a> ，通过使用这个 api 我们可以应对一些简单的跨组件数据状态共享的情况。</p>
<p>如下这个例子，我们将在组件外创建一个<strong>store</strong>，然后在<strong>App.vue</strong>组件里面使用 store.js 提供的<strong>store</strong>和<strong>mutation</strong>方法，同理其它组件也可以这样使用，从而实现多个组件共享数据状态。</p>
<p>首先创建一个 store.js，包含一个<strong>store</strong>和一个<strong>mutations</strong>，分别用来指向数据和处理方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = <span class="title class_">Vue</span>.<span class="title function_">observable</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  <span class="title function_">setCount</span>(<span class="params">count</span>) &#123;</span><br><span class="line">    store.<span class="property">count</span> = count;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>然后在<strong>App.vue</strong>里面引入这个 store.js，在组件里面使用引入的数据和方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;img width=&quot;25%&quot; src=&quot;./assets/logo.png&quot;&gt;</span><br><span class="line">    &lt;p&gt;count:&#123;&#123;count&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;button @click=&quot;setCount(count+1)&quot;&gt;+1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;setCount(count-1)&quot;&gt;-1&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; store, mutations &#125; from &quot;./store&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;App&quot;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    count() &#123;</span><br><span class="line">      return store.count;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    setCount: mutations.setCount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>你可以点击<a href="https://codesandbox.io/s/4w0mo0kyow">在线 DEMO</a>查看最终效果</p>
<h4 id="2-长列表性能优化"><a href="#2-长列表性能优化" class="headerlink" title="2.长列表性能优化"></a>2.长列表性能优化</h4><p>我们应该都知道<strong>vue</strong>会通过<strong>object.defineProperty</strong>对数据进行劫持，来实现视图响应数据的变化，然而有些时候我们的组件就是纯粹的数据展示，不会有任何改变，我们就不需要<strong>vue</strong>来劫持我们的数据，在大量数据展示的情况下，这能够很明显的减少组件初始化的时间，那如何禁止<strong>vue</strong>劫持我们的数据呢？可以通过<strong>object.freeze</strong>方法来冻结一个对象，一旦被冻结的对象就再也不能被修改了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">users</span>: &#123;&#125;,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> users = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&quot;/api/users&quot;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">users</span> = <span class="title class_">Object</span>.<span class="title function_">freeze</span>(users);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>另外需要说明的是，这里只是冻结了<strong>users</strong>的值，引用不会被冻结，当我们需要<strong>reactive</strong>数据的时候，我们可以重新给<strong>users</strong>赋值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">users</span>: []</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> users = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&quot;/api/users&quot;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">users</span> = <span class="title class_">Object</span>.<span class="title function_">freeze</span>(users);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">// 改变值不会触发视图响应</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">users</span>[<span class="number">0</span>] = newValue</span><br><span class="line">    <span class="comment">// 改变引用依然会触发视图响应</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">users</span> = newArray</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="3-去除多余的样式"><a href="#3-去除多余的样式" class="headerlink" title="3.去除多余的样式"></a>3.去除多余的样式</h4><p>随着项目越来越大，书写的不注意，不自然的就会产生一些多余的 css，小项目还好，一旦项目大了以后，多余的 css 会越来越多，导致包越来越大，从而影响项目运行性能，所以有必要在正式环境去除掉这些多余的 css，这里推荐一个库<a href="https://purgecss.com/">purgecss</a>，支持 CLI、JavascriptApi、Webpack 等多种方式使用，通过这个库，我们可以很容易的去除掉多余的 css。</p>
<p>有一个测试，<a href="https://codesandbox.io/s/zkq258ly4">在线 DEMO</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello Vanilla!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  We use Parcel to bundle this sandbox, you can find more info about Parcel</span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://parceljs.org&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;noopener noreferrer&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span>here&lt;/a</span><br><span class="line">  &gt;.</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Purgecss</span> <span class="keyword">from</span> <span class="string">&quot;purgecss&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> purgecss = <span class="keyword">new</span> <span class="title class_">Purgecss</span>(&#123;</span><br><span class="line">  <span class="attr">content</span>: [<span class="string">&quot;**/*.html&quot;</span>],</span><br><span class="line">  <span class="attr">css</span>: [<span class="string">&quot;**/*.css&quot;</span>],</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> purgecssResult = purgecss.<span class="title function_">purge</span>();</span><br></pre></td></tr></table></figure>

<p>最终产生的<strong>purgecssResult</strong>结果如下，可以看到多余的<strong>a</strong>和<strong>ul</strong>标签的样式都没了</p>
<p><img src="https://www.daykalif.com/blog_img/purgecss.png" alt="purgecss"></p>
<h4 id="4-作用域插槽"><a href="#4-作用域插槽" class="headerlink" title="4.作用域插槽"></a>4.作用域插槽</h4><p>利用好作用域插槽可以做一些很有意思的事情，比如定义一个基础布局组件 A，只负责布局，不管数据逻辑，然后另外定义一个组件 B 负责数据处理，布局组件 A 需要数据的时候就去 B 里面去取。假设，某一天我们的布局变了，我们只需要去修改组件 A 就行，而不用去修改组件 B，从而就能充分复用组件 B 的数据处理逻辑，关于这块我之前写过一篇实际案例，可以点击<a href="https://juejin.cn/post/6844903752164442120">这里</a>查看。<br>这里涉及到的一个最重要的点就是父组件要去获取子组件里面的数据，之前是利用<strong>slot-scope</strong>，自 vue 2.6.0 起，提供了更好的支持 <strong>slot</strong> 和 <strong>slot-scope</strong> 特性的 API 替代方案。<br>比如，我们定一个名为<strong>current-user</strong>的组件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;span&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">slot</span>&gt;</span>&#123;&#123; user.lastName &#125;&#125;<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure>

<p>父组件引用<strong>current-user</strong>的组件，但想用名替代姓（老外名字第一个单词是名，后一个单词是姓）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;current-user&gt;</span><br><span class="line">  &#123;&#123; user.<span class="property">firstName</span> &#125;&#125;</span><br><span class="line">&lt;/current-user&gt;</span><br></pre></td></tr></table></figure>

<p>这种方式不会生效，因为<strong>user</strong>对象是子组件的数据，在父组件里面我们获取不到，这个时候我们就可以通过<strong>v-slot</strong>来实现。</p>
<p>首先在子组件里面，将<strong>user</strong>作为一个&lt;slot&gt;元素的特性绑定上去：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;span&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">v-bind:user</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123; user.lastName &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure>

<p>之后，我们就可以在父组件引用的时候，给<strong>v-slot</strong>带一个值来定义我们提供的插槽 prop 的名字：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;current-user&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>=<span class="string">&quot;slotProps&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123; slotProps.user.firstName &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line">&lt;/current-user&gt;</span><br></pre></td></tr></table></figure>

<p>这种方式还有缩写语法，可以查看<a href="https://cn.vuejs.org/v2/guide/components-slots.html#%E7%8B%AC%E5%8D%A0%E9%BB%98%E8%AE%A4%E6%8F%92%E6%A7%BD%E7%9A%84%E7%BC%A9%E5%86%99%E8%AF%AD%E6%B3%95">独占默认插槽的缩写语法</a>，最终我们引用的方式如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;current-user v-slot=<span class="string">&quot;slotProps&quot;</span>&gt;</span><br><span class="line">  &#123;&#123; slotProps.<span class="property">user</span>.<span class="property">firstName</span> &#125;&#125;</span><br><span class="line">&lt;/current-user&gt;</span><br></pre></td></tr></table></figure>

<p>相比之前<strong>slot-scope</strong>代码更清晰，更好理解。</p>
<h4 id="5-属性事件传递"><a href="#5-属性事件传递" class="headerlink" title="5.属性事件传递"></a>5.属性事件传递</h4><p>写过高阶组件的童鞋可能都会碰到过将加工过的属性向下传递的情况，如果碰到属性较多时，需要一个个去传递，非常不友好并且费时，有没有一次性传递的呢（比如 react 里面的{…this.props}）？答案就是<strong>v-bind</strong>和<strong>v-on</strong>。<br>举个例子，假如有一个基础组件<strong>BaseList</strong>，只有基础的列表展示功能，现在我们想在这基础上增加排序功能，这个时候我们就可以创建一个高阶组件<strong>SortList</strong>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- <span class="title class_">SortList</span>  --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">BaseList</span> <span class="attr">v-bind</span>=<span class="string">&quot;$props&quot;</span> <span class="attr">v-on</span>=<span class="string">&quot;$listeners&quot;</span>&gt;</span> <span class="comment">&lt;!-- ... --&gt;</span> <span class="tag">&lt;/<span class="name">BaseList</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> <span class="title class_">BaseList</span> <span class="keyword">from</span> <span class="string">&quot;./BaseList&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 包含了基础的属性定义</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> <span class="title class_">BaseListMixin</span> <span class="keyword">from</span> <span class="string">&quot;./BaseListMixin&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 封装了排序的逻辑</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> sort <span class="keyword">from</span> <span class="string">&quot;./sort.js&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">props</span>: <span class="title class_">BaseListMixin</span>.<span class="property">props</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">BaseList</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>可以看到传递属性和事件的方便性，而不用一个个去传递</p>
<h4 id="6-函数式组件"><a href="#6-函数式组件" class="headerlink" title="6.函数式组件"></a>6.函数式组件</h4><p>函数式组件，即无状态，无法实例化，内部没有任何生命周期处理方法，非常轻量，因而渲染性能高，特别适合用来只依赖外部数据传递而变化的组件。</p>
<p>写法如下：</p>
<p>在<strong>template</strong>标签里面标明<strong>functional</strong><br>只接受<strong>props</strong>值<br>不需要<strong>script</strong>标签</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- <span class="title class_">App</span>.<span class="property">vue</span> --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">List</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:items</span>=<span class="string">&quot;[&#x27;Wonderwoman&#x27;, &#x27;Ironman&#x27;]&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:item-click</span>=<span class="string">&quot;item =&gt; (clicked = item)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Clicked hero: &#123;&#123; clicked &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">List</span> <span class="keyword">from</span> <span class="string">&quot;./List&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">data</span>: <span class="function">() =&gt;</span> (&#123; <span class="attr">clicked</span>: <span class="string">&quot;&quot;</span> &#125;),</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123; <span class="title class_">List</span> &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- List.vue 函数式组件 --&gt;</span><br><span class="line">&lt;template functional&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p v-for=&quot;item in props.items&quot; @click=&quot;props.itemClick(item)&quot;&gt;</span><br><span class="line">      &#123;&#123; item &#125;&#125;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<h4 id="7-监听组件的生命周期"><a href="#7-监听组件的生命周期" class="headerlink" title="7.监听组件的生命周期"></a>7.监听组件的生命周期</h4><p>比如有父组件<strong>Parent</strong>和子组件<strong>Child</strong>，如果父组件监听到子组件挂载<strong>mounted</strong>就做一些逻辑处理，常规的写法可能如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Parent.vue</span><br><span class="line">&lt;Child @mounted=&quot;doSomething&quot; /&gt;</span><br><span class="line"></span><br><span class="line">// Child.vue mounted() &#123; this.$emit(&quot;mounted&quot;); &#125;</span><br></pre></td></tr></table></figure>

<p>这里提供一种特别简单的方式，子组件不需要任何处理，只需要在父组件引用的时候通过@hook 来监听即可，代码重写如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Child @hook:mounted=&quot;doSomething&quot; /&gt;</span><br></pre></td></tr></table></figure>

<p>当然这里不仅仅是可以监听<strong>mounted</strong>，其它的生命周期事件，例如：<strong>created</strong>，<strong>updated</strong>等都可以，是不是特别方便~</p>
<p>参考文档：<br><a href="https://alligator.io/vuejs/">https://alligator.io/vuejs/</a><br><a href="https://vuedose.tips/">https://vuedose.tips/</a></p>
<p>转载文档：<br><a href="https://juejin.cn/post/6844903848050589704#heading-6">https://juejin.cn/post/6844903848050589704#heading-6</a></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue</tag>
        <tag>组件化</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue之自定义组件的v-model</title>
    <url>/2020/06/21/Vue/Vue%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6%E7%9A%84v-model/</url>
    <content><![CDATA[<p><img src="https://www.daykalif.com/blog_img/v-model1.png" alt="v-model"></p>
<h4 id="v-model-语法糖"><a href="#v-model-语法糖" class="headerlink" title="v-model 语法糖"></a>v-model 语法糖</h4><p>v-model 实现了表单输入的双向绑定，我们一般是这么写的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;price&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">price</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>通过该语句实现 price 变量与输入值双向绑定</p>
<p>实际上 v-model 只是一个语法糖，真正的实现是这样的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot;</span><br><span class="line">　　　　　　:value=&quot;price&quot;</span><br><span class="line">　　　　　　@input=&quot;price=$event.target.value&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>以上代码分几个步骤：</p>
<ul>
<li>将输入框的值绑定到 price 变量上，这个是单向绑定，意味着改变 price 变量的值可以改变 input 的 value，但是改变 value 不能改变 price</li>
<li>监听 input 事件（input 输入框都有该事件，当输入内容时自动触发该事件），当输入框输入内容就单向改变 price 的值</li>
</ul>
<p>这样就实现了双向绑定。</p>
<h5 id="自定义表单输入组件"><a href="#自定义表单输入组件" class="headerlink" title="自定义表单输入组件"></a>自定义表单输入组件</h5><p>我们平时写 input 可以不像上面那么复杂，直接用 v-model 就行了，但是既然我们研究这个语法糖那肯定是有别的用处，比如说自定义表单输入框组件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">input-price</span> <span class="attr">v-model</span>=<span class="string">&quot;price&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input-price</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;input-price&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&#x27;&lt;input type=&#x27;</span>text<span class="string">&#x27;&gt;&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">         <span class="attr">price</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面的<code>&lt;input-price&gt;</code>是我们自定义的表单输入组件，我们能直接用 v-model 实现双向绑定吗？如果你觉得可以那你就是 Too young 了~</p>
<blockquote>
<p>首先根据我们的 v-model 语法糖来看:</p>
</blockquote>
<ul>
<li><p>我们的子组件（input-price）的 value 需要绑定一个从父组件传来的值，通过子组件的 props 接收</p>
</li>
<li><p>在子组件上有新的输入时需要触发父组件的 input 事件，并将新的值作为参数传递给父组件</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- &lt;price-input v-model=&quot;price&quot;&gt;&lt;/price-input&gt; --&gt;</span><br><span class="line"></span><br><span class="line">     &lt;!-- 手动实现了v-model双向绑定 --&gt;</span><br><span class="line">     &lt;!-- 3、父组件的input事件被触发，将传来的值赋给父组件的变量price --&gt;</span><br><span class="line">     &lt;!-- 4、父组件value的值绑定到price --&gt;</span><br><span class="line">     &lt;price-input :value=&quot;price&quot; @input=&quot;onInput&quot;&gt;&lt;/price-input&gt;</span><br><span class="line">     &lt;p&gt;&#123;&#123;price&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;price-input&quot;</span>, &#123;</span><br><span class="line">  <span class="comment">// 5、将父组件的value值通过props传递给子组件</span></span><br><span class="line">  <span class="comment">// 1、当有数据输入时触发了该组件的input事件</span></span><br><span class="line">  <span class="attr">template</span>:</span><br><span class="line">    <span class="string">&#x27;&lt;input :value=&quot;value&quot; @input=&quot;updateVal($event.target.value)&quot; type=&quot;text&quot;&gt;&#x27;</span>,</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&quot;value&quot;</span>],</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="attr">updateVal</span>: <span class="keyword">function</span> (<span class="params">val</span>) &#123;</span><br><span class="line">      <span class="comment">// 2、手动触发父组件的input事件并将值传给父组件</span></span><br><span class="line">      <span class="variable language_">this</span>.$emit(<span class="string">&quot;input&quot;</span>, val);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">price</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="attr">onInput</span>: <span class="keyword">function</span> (<span class="params">val</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">price</span> = val;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这里备注了几个步骤：</p>
<p>1.当有数据输入时触发了该组件的 input 事件 2.手动触发父组件的 input 事件并将值传给父组件 3.父组件的 input 事件被触发，将传来的值赋给父组件的变量 price，实现输入框 value 到父元素的 price 的单向绑定 4.父组件 value 的值绑定到 price 5.将父组件的 value 值通过 props 传递给子组件，实现了父组件的 price 到子组件 value 的单向绑定</p>
<p><strong>完整示例：</strong></p>
<!-- input为输入框： -->

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// input为输入框：</span></span><br><span class="line"></span><br><span class="line">父组件：</span><br><span class="line">&lt;BaseInput v-model=<span class="string">&quot;message&quot;</span>/&gt;</span><br><span class="line">等价于：</span><br><span class="line">&lt;BaseInput :value=<span class="string">&quot;message&quot;</span> <span class="meta">@input</span>=<span class="string">&quot;message = $event&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span>&#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            message:<span class="string">&#x27;hello daykalif&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">子组件:</span><br><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> :value=<span class="string">&quot;value&quot;</span> <span class="meta">@input</span>=<span class="string">&quot;handleInput&quot;</span>/&gt;</span><br><span class="line">export <span class="keyword">default</span>&#123;</span><br><span class="line">    props:[<span class="string">&#x27;value&#x27;</span>],</span><br><span class="line">    methods:&#123;</span><br><span class="line">        handleInput(e)&#123;</span><br><span class="line">            <span class="built_in">this</span>.$emit(<span class="string">&quot;input&quot;</span>,e.target.value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<!-- input为checkbox： -->

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// input为checkbox：</span></span><br><span class="line"></span><br><span class="line">父组件：</span><br><span class="line">&lt;BaseCheckbox v-model=<span class="string">&quot;checked&quot;</span>&gt;</span><br><span class="line">相当于</span><br><span class="line">&lt;BaseCheckbox :value=<span class="string">&quot;checked&quot;</span> <span class="meta">@input</span>=<span class="string">&quot;checked = $event&quot;</span>&gt;</span><br><span class="line">要改为：</span><br><span class="line">&lt;BaseCheckbox :checked1=<span class="string">&quot;checked2&quot;</span> <span class="meta">@change1</span>=<span class="string">&quot;checked2 = $event&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span>&#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            checked2:<span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">子组件：</span><br><span class="line">&lt;input type=<span class="string">&quot;checkbox&quot;</span> :checked=<span class="string">&quot;checked1&quot;</span> <span class="meta">@change</span>=<span class="string">&quot;handleChange&quot;</span>&gt;</span><br><span class="line">export <span class="keyword">default</span>&#123;</span><br><span class="line">    model:&#123;</span><br><span class="line">        prop:<span class="string">&#x27;checked&#x27;</span>,</span><br><span class="line">        event:<span class="string">&#x27;change&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    props:[<span class="string">&#x27;checked1&#x27;</span>],</span><br><span class="line">    methods:&#123;</span><br><span class="line">        handleChange(e)&#123;</span><br><span class="line">            <span class="built_in">this</span>.$emit(<span class="string">&#x27;change1&#x27;</span>,e.target.checked1)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>总结：</strong></p>
<p>v-bind 只能实现单向绑定<br>v-model（v-bind+触发的 input 事件）实现双向绑定</p>
<p>转载文档：<br><a href="https://w.cnblogs.com/lhuser/p/11269546.html">https://w.cnblogs.com/lhuser/p/11269546.html</a><br><a href="https://www.cnblogs.com/wind-lanyan/p/7899428.html">https://www.cnblogs.com/wind-lanyan/p/7899428.html</a></p>
<p><a href="https://cn.vuejs.org/v2/guide/components-custom-events.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6%E7%9A%84-v-model">官网 v-model</a></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue</tag>
        <tag>组件化</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue单页面应用首屏加载时间优化</title>
    <url>/2020/12/02/Vue/Vue%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%BA%94%E7%94%A8%E9%A6%96%E5%B1%8F%E5%8A%A0%E8%BD%BD%E6%97%B6%E9%97%B4%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h5 id="vue-全家桶"><a href="#vue-全家桶" class="headerlink" title="vue 全家桶"></a>vue 全家桶</h5><blockquote>
<p>我们习惯用 vue-cli 搭建脚手架，再配合 vue-router 控制路由，vuex 控制状态及复杂组件通讯，实现顺畅的 spa 应用，但是往往在项目应用插件框架时后首屏加载时间非常长。故此可做一些优化。</p>
</blockquote>
<h5 id="缩小-webpack-打包生成的包的大小"><a href="#缩小-webpack-打包生成的包的大小" class="headerlink" title="缩小 webpack 打包生成的包的大小"></a>缩小 webpack 打包生成的包的大小</h5><blockquote>
<p>这里我们需要尽可能的减少生产环境下依赖的库数量，比如 element 如果可以的话需要什么组件就引入什么组件，而不是在 main.js 全局引入。开始优化的时候，就不知道从何处优化起，而且根本不知道生成的包中哪个依赖占据着空间，哪个库占用的空间最多。 所以有个 webpack-bundle-analyzer 的分析工具。安装：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install --save-dev webpack-bundle-analyzer</span><br></pre></td></tr></table></figure>

<p>在 webpack.prod.conf.js 中配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">BundleAnalyzerPlugin</span> =</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&quot;webpack-bundle-analyzer&quot;</span>).<span class="property">BundleAnalyzerPlugin</span>;</span><br><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">BundleAnalyzerPlugin</span>(&#123;</span><br><span class="line">    <span class="attr">analyzerMode</span>: <span class="string">&quot;server&quot;</span>,</span><br><span class="line">    <span class="attr">analyzerHost</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">    <span class="attr">analyzerPort</span>: <span class="number">8888</span>, <span class="comment">// 运行后的端口号</span></span><br><span class="line">    <span class="attr">reportFilename</span>: <span class="string">&quot;report.html&quot;</span>,</span><br><span class="line">    <span class="attr">defaultSizes</span>: <span class="string">&quot;parsed&quot;</span>,</span><br><span class="line">    <span class="attr">openAnalyzer</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">generateStatsFile</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">statsFilename</span>: <span class="string">&quot;stats.json&quot;</span>,</span><br><span class="line">    <span class="attr">statsOptions</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">logLevel</span>: <span class="string">&quot;info&quot;</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<p>这样后配置完成了，正常 npm run build 结束后，就会自动打开一个打包生成文件的模块组成图在默认浏览器中，图中面积大的就是占据空间大的模块。</p>
<hr>
<h5 id="服务端渲染"><a href="#服务端渲染" class="headerlink" title="服务端渲染"></a>服务端渲染</h5><blockquote>
<p>服务端渲染不同于后端渲染,服务端渲染只是把当前的前端框架中的一部分 js 代码放到服务器上渲染，加载到浏览器上的 html 就不是一个空页面，这样可以减少首页的白屏时间，同时提高被搜索引擎检索的机会。服务端渲染有不少的局限，例如它的服务端必须依靠 node 服务器，我们可以使用使用基于 vue 的 nuxt.js 脚手架去开发，会减去繁琐的配置过程。</p>
</blockquote>
<h5 id="使用-cdn-或预加载"><a href="#使用-cdn-或预加载" class="headerlink" title="使用 cdn 或预加载"></a>使用 cdn 或预加载</h5><blockquote>
<p>将一部分静态的页面直接渲染成 html 写在生成的 index.html 中，这种方式在加载完 index.html 后，就会有界面展示出来，无需等待加载 js 代码后再去渲染，所以这种方式也可以显著的减少首屏加载时间，也可以提高被搜索引擎检索的机会，同时预渲染的配置很简单，容易上手。</p>
</blockquote>
<blockquote>
<p>或者使用 cdn 把一些必要的库在 index.html 里面引入进去这样也能加快加载速度。</p>
</blockquote>
<h5 id="动态路由分块加载"><a href="#动态路由分块加载" class="headerlink" title="动态路由分块加载"></a>动态路由分块加载</h5><blockquote>
<p>这种优化，就是将每个组件的 js 代码独立出来，在使用到这个组件时，才向服务器请求文件，并且请求过一次后就会缓存下来，再次使用到这个组件时，就会使用缓存，不再发送请求。<br>配置很简单，只需要在 vue-router 中添加一些简单的配置即可</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Router</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Router</span>(&#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;history&quot;</span>,</span><br><span class="line">  <span class="attr">linkActiveClass</span>: <span class="string">&quot;router-link-active&quot;</span>,</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">      <span class="comment">// 这里只需要把原来从外部引入的组件换成以下的语句就可以了</span></span><br><span class="line">      <span class="attr">component</span>: <span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">require</span>([<span class="string">&quot;../components/(你的组件)&quot;</span>], resolve),</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>转载文档：<br><a href="https://www.jianshu.com/p/d9bd85840876">https://www.jianshu.com/p/d9bd85840876</a></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue</tag>
        <tag>webpack</tag>
        <tag>性能优化</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue指令钩子函数</title>
    <url>/2019/07/28/Vue/Vue%E6%8C%87%E4%BB%A4%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h4 id="指令钩子函数"><a href="#指令钩子函数" class="headerlink" title="指令钩子函数"></a>指令钩子函数</h4><p>在 Vue 中可以把一系列复杂的操作包装为一个指令。</p>
<p><strong>什么是复杂的操作？</strong></p>
<p>我的理解是：复杂逻辑功能的包装、违背数据驱动的 DOM 操作以及对一些 Hack 手段的掩盖等。我们总是期望以操作数据的形式来实现功能逻辑。</p>
<p><strong>钩子函数</strong>：</p>
<p>对于自定义指令的定义，Vue2 有 5 个可选的钩子函数。</p>
<p>bind: 只调用一次，指令第一次绑定到元素时调用，用这个钩子函数可以定义一个在绑定时执行一次的初始化动作。<br>inserted: 被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于 document 中）。<br>update: 被绑定元素所在的模板更新时调用，而不论绑定值是否变化。<br>componentUpdated: 被绑定元素所在模板完成一次更新周期时调用。<br>unbind: 只调用一次，指令与元素解绑时调用。</p>
<p>接下来，定义一个简单的指令以验证这些钩子函数的触发时机。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-comp</span> <span class="attr">v-if</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">:msg</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-comp</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;update&quot;</span>&gt;</span>更新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;uninstall&quot;</span>&gt;</span>卸载<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;install&quot;</span>&gt;</span>安装<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&quot;hello&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">bind</span>: <span class="keyword">function</span> (<span class="params">el</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;bind&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">inserted</span>: <span class="keyword">function</span> (<span class="params">el</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;inserted&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">update</span>: <span class="keyword">function</span> (<span class="params">el</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;update&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">componentUpdated</span>: <span class="keyword">function</span> (<span class="params">el</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;componentUpdated&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">unbind</span>: <span class="keyword">function</span> (<span class="params">el</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;unbind&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> myComp = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&quot;&lt;h1 v-hello&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;&quot;</span>,</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">msg</span>: <span class="title class_">String</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&quot;Hello&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="attr">myComp</span>: myComp,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="attr">update</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">msg</span> = <span class="string">&quot;Hi&quot;</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">uninstall</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">msg</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">install</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">msg</span> = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>页面加载时</strong>:</p>
<p>bind<br>inserted</p>
<p><strong>组件更新时</strong>:</p>
<p>点击“更新”按钮，更改数据触发组件更新。</p>
<p>update<br>componentUpdated</p>
<p><strong>卸载组件时</strong>:</p>
<p>点击“卸载”按钮，数据置空否定判断以触发组件卸载。</p>
<p>unbind</p>
<p><strong>重新安装组件时</strong>:</p>
<p>点击“安装”按钮，数据赋值肯定判断以触发组件重新安装。</p>
<p>bind<br>inserted</p>
<p><strong>区别</strong>:</p>
<p>从案例的运行中，对 5 个钩子函数的触发时机有了初步的认识。存疑的也就是 bind 和 inserted、update 和 componentUpdated 的区别了。</p>
<p><strong>bind 和 inserted</strong>:</p>
<p>据文档所说，插入父节点时调用 inserted，来个测试。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">bind</span>: <span class="keyword">function</span> (<span class="params">el</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(el.<span class="property">parentNode</span>) <span class="comment">// null</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;bind&#x27;</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">inserted</span>: <span class="keyword">function</span> (<span class="params">el</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(el.<span class="property">parentNode</span>) <span class="comment">// &lt;div id=&quot;app&quot;&gt;...&lt;/div&gt;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;inserted&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分别在两个钩子函数中输出父节点：<strong>bind 时父节点为 null，inserted 时父节点存在。</strong></p>
<p><strong>update 和 componentUpdated</strong>:</p>
<p>关于这两个的介绍，从字眼上看感觉是组件更新周期有关，继续验证。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">update</span>: <span class="keyword">function</span> (<span class="params">el</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(el.<span class="property">innerHTML</span>) <span class="comment">// Hello</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;update&#x27;</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">componentUpdated</span>: <span class="keyword">function</span> (<span class="params">el</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(el.<span class="property">innerHTML</span>) <span class="comment">// Hi</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;componentUpdated&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>没毛病，update 和 componentUpdated 就是组件更新前和更新后的区别。</p>
<p>转载文档：<br><a href="https://www.cnblogs.com/sherlock-Ace/p/10271448.html">https://www.cnblogs.com/sherlock-Ace/p/10271448.html</a></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue自定义组件及封装</title>
    <url>/2020/06/21/Vue/Vue%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6%E5%8F%8A%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<h4 id="项目搭建的过程"><a href="#项目搭建的过程" class="headerlink" title="项目搭建的过程"></a>项目搭建的过程</h4><blockquote>
<p>如何搭建一个 Vue 项目？</p>
</blockquote>
<h5 id="一、安装-node"><a href="#一、安装-node" class="headerlink" title="一、安装 node"></a>一、安装 node</h5><p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p>
<h5 id="二、搭建-Vue-项目环境"><a href="#二、搭建-Vue-项目环境" class="headerlink" title="二、搭建 Vue 项目环境"></a>二、搭建 Vue 项目环境</h5><p>1.全局安装 vue-cli 2.进入项目目录，创建一个基于 webpack 模板的新项目：vue init webpack 项目名 3.进入项目，安装依赖 4.<code>npm run dev</code>,启动项目</p>
<hr>
<h4 id="Vue-自定义组件-简单实现一个自定义组件"><a href="#Vue-自定义组件-简单实现一个自定义组件" class="headerlink" title="Vue 自定义组件(简单实现一个自定义组件)"></a>Vue 自定义组件(简单实现一个自定义组件)</h4><p>在用 vue 构建项目的过程中，我们有时会用到别人开发的组件如 vue-router；使用他人组件的正常步骤如下：<br>1、命令行进行安装，执行 install；<br>2、在 vue 项目中的入口文件 main.js 中，进行导入；<br>3、然后用 Vue.use(plugin)引入该组件。</p>
<p>我们也可以创造属于自己的组件，<strong>具体步骤如下：</strong><br>1、在 components 文件中创建 test 文件；<br>2、在 test 文件中，创建 index.js 和 Test.vue；<br>3、Test.vue 中的代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>实现自定义组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  data () &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">msg</span>: <span class="string">&#x27;hello vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>4、test 文件夹下的 index.js 中的代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">MyTest</span> <span class="keyword">from</span> <span class="string">&quot;./Test.vue&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Test</span> = &#123;</span><br><span class="line">  <span class="title function_">install</span>(<span class="params">Vue</span>) &#123;</span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;Test&quot;</span>, <span class="title class_">MyTest</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Test</span>;</span><br></pre></td></tr></table></figure>

<p>5、入口文件 main.js 进行相关的配置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Test</span> <span class="keyword">from</span> <span class="string">&quot;./components/test&quot;</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Test</span>);</span><br></pre></td></tr></table></figure>

<p>6、如此这般，就可以在其它组件中正常使用，如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Test</span>&gt;</span><span class="tag">&lt;/<span class="name">Test</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>自定义组件 Test 的内容(“实现自定义组件”)将会展示出来。</p>
<p>注：test 文件指的是自定义组件文件夹；index.js 指的是组件的入口加载文件；Test.vue 指的是组件模板。</p>
<hr>
<h4 id="Vue-自定义组件的四种方式示例详解"><a href="#Vue-自定义组件的四种方式示例详解" class="headerlink" title="Vue 自定义组件的四种方式示例详解"></a>Vue 自定义组件的四种方式示例详解</h4><p>四种组件定义方式都存在以下共性(血泪史)</p>
<p>规则：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>组件只能有一个根标签</span><br><span class="line"><span class="number">2.</span>记住两个词全局和局部</span><br><span class="line"><span class="number">3.</span>组件名称命名中‘-小写字母<span class="string">&#x27;相当于大写英文字母(hello-com 相当于 helloCom)</span></span><br></pre></td></tr></table></figure>

<p>而对于在 HTML 中自定义组件的时候有 4 种写法，不过也只是殊途同归，都是用 template 属性对应的只有一个根标签的 HTML 代码。</p>
<p><strong>1.全局组件</strong>：</p>
<p>定义方式示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;hello-component&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&quot;message&quot;</span>],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&quot;&lt;div &gt;&lt;h1&gt;组件定义之全局组件&lt;/h1&gt;&lt;h4&gt;&#123;&#123;message&#125;&#125;&lt;/h4&gt;&lt;/div&gt;&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;hello-component message=<span class="string">&quot;global component&quot;</span>&gt;&lt;/hello-component&gt;</span><br></pre></td></tr></table></figure>

<p>属性介绍：</p>
<blockquote>
<p>Vue.component()是 vue.js 内部封装方法<br>“hello-component” 是使用时候的组件名称<br>props 组件内的属性。供给组件内部传值<br>template 组件内部 DOM 元素组成</p>
</blockquote>
<p>品鉴：</p>
<p>全局组件定义方式，是直接给全局对象 Vue 注册了一个组件。在本页内已挂载 Vue 实例的 DOM 目标元素 都可以使用(区别于局部组件只能是挂载哪一个 DOM，哪个才能使用)。</p>
<p><strong>2.局部组件</strong>：</p>
<p>定义方式示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> limitComponent = &#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&quot;message&quot;</span>],</span><br><span class="line">  <span class="attr">template</span>:</span><br><span class="line">    <span class="string">&quot;&lt;div&gt;&lt;h1&gt;&#123;&#123;message&#125;&#125;&lt;/h1&gt;&lt;input \</span></span><br><span class="line"><span class="string">  type=&#x27;text&#x27; v-model=&#x27;message&#x27;&gt;&lt;/input&gt;&lt;/div&gt;&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="string">&quot;child-component&quot;</span>: limitComponent,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;child-component message=<span class="string">&quot;动态局部组件&quot;</span>&gt;&lt;/child-component&gt;</span><br></pre></td></tr></table></figure>

<p>属性介绍：</p>
<blockquote>
<p>el 是 Vue 实例的挂载目标<br>“components” 是注册仅在其作用域中可用的组件<br>“child-component”组件的名称(书写规则请上翻再看规则)<br>limitComponent 通过对象方式传递组件</p>
</blockquote>
<p>品鉴：</p>
<ul>
<li>你不必把每个组件都注册到全局。你可以通过某个 Vue 实例&#x2F;组件的实例选项 components 注册仅在其作用域中可用的组件。</li>
<li>js 中用反斜线“\”’实现字符串换行</li>
</ul>
<p><strong>3.Script 方式注册组件</strong>：</p>
<p>定义方式示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/template&quot;</span> id=<span class="string">&quot;script-component&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> &gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>自定义组件之script方式定义<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;mymac&quot;</span>,&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">props</span>:[<span class="string">&quot;message&quot;</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">template</span>:<span class="string">&quot;#script-component&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> newVue = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>:<span class="string">&quot;#mac&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">mydata</span>:<span class="string">&quot;春暖花开&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;mac&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;mydata&quot;</span> /&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">mymac</span> <span class="attr">v-bind:message</span>=<span class="string">&quot;mydata&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mymac</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>属性介绍：</p>
<p><code>&lt;script type=&quot;text/template&quot; id=&quot;script-component&quot;&gt;</code>为定义组件的一种写法，type 还可以取的值还可以有：</p>
<ul>
<li>text&#x2F;javascript: 说明这一段脚本语言是 javascript。告诉浏览器这一段要按照 javascript 来解释执行。在 ES5 之前的 type 默认值</li>
<li>text&#x2F;ecmascript:JavaScript 和 ECMAScript 是相同的，只是在名称上是不同的。但是对于 ecmascript-6 而言就可以理解是 JS 的新语法特性。即 HTML5 中的默认值</li>
<li>application&#x2F;ecmascript: ie6、7、8 都是没法识别里面的 js 语句的</li>
<li>application&#x2F;javascript: 这个属性在 IE8 以下的浏览器中无法被识别。</li>
<li>text&#x2F;vbscript: 表示该脚本语言是 vb 脚本</li>
</ul>
<p>品鉴：</p>
<p>Script 定义组件方式笔者觉得就是组件定义方式的另一种写法。优点在于不用写字符串式 HTML 代码。将<code>&lt;script id=&quot;XX&quot;&gt;</code>的 XX 赋值给局部组件或者全局组件都可。</p>
<p><strong>4.<code>&lt;template&gt;</code>创建组件</strong>：</p>
<p>定义方式示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template id=<span class="string">&quot;cc&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> &gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;templatec&#x27;</span>,&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">props</span>:[<span class="string">&quot;message&quot;</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">template</span>:<span class="string">&quot;#cc&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>:<span class="string">&quot;#MyTemp&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;MyTemp&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">templatec</span> <span class="attr">message</span>=<span class="string">&quot;template组件之Template标签&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">templatec</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>属性介绍：</p>
<blockquote>
<p><code>&lt;template&gt; 为HTML5发布后用来声明是“模板元素”的标签。即HTML5之前使用&lt;script type =&quot;text/template&quot;&gt;方式声明，而HTML5之后可用&lt;template&gt; 标签</code></p>
</blockquote>
<p>品鉴：</p>
<p><code>&lt;template&gt;定义组件的方式实际是HTML语法升级后的&lt;script type =&quot;text/template&quot;&gt;</code>的另一种写法。同 script 定义组件一样，同样可以配合定义全局&#x2F;局部组件。</p>
<p><strong>总结</strong>：</p>
<p>通篇全文，介绍的四种方式。实际上只有两种方式。要不就是全局定义方式，要不就是局部定义方式。另外两种是为了增加代码开发效率将字符串写法换成标签式书写方式。</p>
<h4 id="Vue-封装组件的过程"><a href="#Vue-封装组件的过程" class="headerlink" title="Vue 封装组件的过程"></a>Vue 封装组件的过程</h4><h5 id="1-vue-组件的定义"><a href="#1-vue-组件的定义" class="headerlink" title="1.vue 组件的定义"></a>1.vue 组件的定义</h5><p>组件(Component)是 Vue.js 最强大的功能之一</p>
<p>● 组件可以扩展 HTML 元素，封装可重用代码</p>
<p>● 在较高层面上，组件是自定义元素，Vue.js 的编译器为他添加特殊功能</p>
<p>● 有些情况下，组件也可以表现用 is 特性进行了扩展的原生的 HTML 元素</p>
<p>● 所有的 Vue 组件同时也都是 Vue 实例，所以可以接受相同的选项对象（除了一些根级特有的选项），并提供相同的生命周期钩子</p>
<h5 id="2-vue-组件的功能"><a href="#2-vue-组件的功能" class="headerlink" title="2.vue 组件的功能"></a>2.vue 组件的功能</h5><p>1）.能够把页面抽象成多个相对独立的模块</p>
<p>2）.实现代码重用，提高开发效率和代码质量，使得代码易于维护</p>
<h5 id="3-Vue-组件封装过程"><a href="#3-Vue-组件封装过程" class="headerlink" title="3.Vue 组件封装过程"></a>3.Vue 组件封装过程</h5><p>首先，使用 Vue.extend()创建一个组件</p>
<p>● 然后，使用 Vue.component()方法注册组件</p>
<p>● 接着，如果子组件需要数据，可以在 props 中接受定义</p>
<p>● 最后，子组件修改好数据之后，想把数据传递给父组件，可以使用 emit()方法</p>
<h5 id="4-组件使用流程详细介绍"><a href="#4-组件使用流程详细介绍" class="headerlink" title="4.组件使用流程详细介绍"></a>4.组件使用流程详细介绍</h5><p><strong>1).组件创建—有 3 中方法【<code>extend()</code>、<code>&lt;template id=&#39;&#39;&gt;</code>、<code>&lt;script type=&#39;text/x-template&#39;  id=&#39;&#39;&gt;</code>】</strong>：<br>A、调用 Vue.extend()，创建名为 myCom 的组件，template 定义模板的标签，模板的内容需写在该标签下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myCom = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&quot;&lt;div&gt;这是我的组件&lt;/div&gt;&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>B、<code>&lt;template id=&#39;myCom&#39;&gt;</code>标签创建，需要加上 id 属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template id=<span class="string">&quot;myCom&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是template标签构建的组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>C、<code>&lt;script type=&#39;text/x-template&#39; id=&#39;myCom&#39;&gt;</code>,需加 id 属性，同时还得加 type&#x3D;”text&#x2F;x-template”,加这个是为了告诉浏览器不执行编译里面的代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/x-template&quot;</span> id=<span class="string">&quot;myCom1&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是script标签构建的组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>2).注册组件—-有 2 中方法【全局注册，局部注册】</strong>：</p>
<p>A1、全局注册：一次注册( 调用 Vue.component( 组件名称，为组件创建时定义的变量 ) )，可在多个 Vue 实例中使用。</p>
<p>我们先用全局注册，注册上面例子中创建的 myCom 组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;my-com&quot;</span>, myCom);</span><br></pre></td></tr></table></figure>

<p>A2、全局注册语法糖：不需要创建直接注册的写法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;my-com&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&quot;&lt;div&gt;这是我的组件&lt;/div&gt;&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//&#x27;my-com&#x27;为给组件自定义的名字，在使用时会用到，后面myCom对应的就是上面构建的组件变量。</span></span><br></pre></td></tr></table></figure>

<p>A3、如果是用 template 及 script 标签构建的组件，第二个参数就改为它们标签上的 id 值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;my-com&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&quot;#myCom&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>B1、局部注册：只能在注册该组件的实例中使用，一处注册，一处使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="string">&quot;my-com&quot;</span>: myCom,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>B2、局部注册语法糖：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="string">&quot;my-com&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;&lt;div&gt;这是我的组件&lt;/div&gt;&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>B3、<code>&lt;template&gt;及&lt;script&gt;</code>创建的组件，局部注册</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="string">&quot;my-com&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;#myCom&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>3).调用组件</strong>：</p>
<p>只需要在调用组件的地方，写上组件名字的标签即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  <span class="comment">/*调用组件*/</span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">my-com</span>&gt;</span><span class="tag">&lt;/<span class="name">my-com</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p><strong>4).例子</strong>：</p>
<blockquote>
<p>A、全局注册：新建一个 html 文件，引入 vue.js，并且定义 2 个 vue 实例 app1 和 app2</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue组件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">my-com</span>&gt;</span><span class="tag">&lt;/<span class="name">my-com</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app2&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">my-com</span>&gt;</span><span class="tag">&lt;/<span class="name">my-com</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">/*创建组件*/</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> myCom = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&quot;&lt;div&gt;这是我的组件&lt;/div&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">/*全局注册组件*/</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;my-com&quot;</span>, myCom);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">/*定义vue实例app1*/</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> app1 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app1&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">/*定义vue实例app2*/</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> app2 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app2&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>显示效果：</p>
<p><img src="https://www.daykalif.com/blog_img/vue-template1.png" alt="vue-tempalte"></p>
<p>【可以看到，全局注册的组件在实例 app1 和实例 app2 中都可以被调用。】</p>
<blockquote>
<p>B、局部注册：将创建的组件注册到实例 app1 下</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue组件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">my-com</span>&gt;</span><span class="tag">&lt;/<span class="name">my-com</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app2&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">my-com</span>&gt;</span><span class="tag">&lt;/<span class="name">my-com</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> myCom = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&quot;&lt;div&gt;这是我的组件&lt;/div&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// Vue.component(&#x27;my-com&#x27;,myCom);</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">/*局部注册组件*/</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> app1 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app1&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&quot;my-com&quot;</span>: myCom,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> app2 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app2&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>显示效果：</p>
<p><img src="https://www.daykalif.com/blog_img/vue-template2.png" alt="vue-tempalte"></p>
<p>【可以看到只渲染了 app1 实例下的组件，app2 实例虽然调用了该组件，但是因为这个组件没有在其内部注册，也没有全局注册，所以报错说找不到该组件。】</p>
<blockquote>
<p>C、template 和 script 标签创建组件</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue组件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">my-com</span>&gt;</span><span class="tag">&lt;/<span class="name">my-com</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">my-com1</span>&gt;</span><span class="tag">&lt;/<span class="name">my-com1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;myCom&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>这是template标签构建的组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/x-template&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myCom1&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>这是script标签构建的组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;my-com1&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//全局注册</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&quot;#myCom1&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> app1 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app1&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&quot;my-com&quot;</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">template</span>: <span class="string">&quot;#myCom&quot;</span>, <span class="comment">//局部注册</span></span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>显示效果：</p>
<p><img src="https://www.daykalif.com/blog_img/vue-template3.png" alt="vue-tempalte"></p>
<p><strong>5).异步组件</strong>：</p>
<p>vue 作为一个轻量级前端框架，其核心就是组件化开发。我们一般常用的是用脚手架 vue-cli 来进行开发和管理，一个个组件即为一个个 vue 页面，这种叫单文件组件。我们在引用组件之时只需将组件页面引入，再注册即可使用。</p>
<p>当项目比较大型，结构比较复杂时，我们一般选用 vue-cli 脚手架去构建项目。因为 vue-cli 集成了 webpack 环境，使用单文件组件，开发更简单，易上手，尤其是在对组件的处理上。对于原生 vue.js，我们就得将组件构建在同一个 html 的 script 标签下或者 html 的外部 js 中，所有组件集中在一块，不容易管理，这也是原生 vue,js 的一点不便之处</p>
<p><em>vue.js 可以将异步组件定义为一个工厂函数。</em></p>
<p>使用$.get 获取本地文件会跨域，所以要将项目部署到服务器中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue组件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&#x27;jquery-3.1.1.min.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">head-com</span>&gt;</span><span class="tag">&lt;/<span class="name">head-com</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;head-com&#x27;</span>, <span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $.<span class="title function_">get</span>(<span class="string">&quot;a.html&quot;</span>).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">res</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">resolve</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">template</span>: res</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> app1 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">el</span>: <span class="string">&#x27;#app1&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>显示效果：</p>
<p><img src="https://www.daykalif.com/blog_img/vue-template4.png" alt="vue-tempalte"></p>
<p><strong>6).Vue 中的 props 数据流</strong>：</p>
<p>通过在注册组件中申明需要使用的 props，然后通过 props 中与模板中传入的对应的属性名，去取用这些值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue组件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;jquery-3.1.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">my-component</span> <span class="attr">name</span>=<span class="string">&quot;jiangjiang&quot;</span> <span class="attr">come-from</span>=<span class="string">&quot;guilin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 然后在模板中通过属性传值的方式进行数据的注入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;my-component&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>: [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;comeFrom&quot;</span>], <span class="comment">//在注册组件的时候通过props选项声明了要取用的多个prop</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 在注册组件的模板中使用到props选项中声明的值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&quot;&lt;p&gt;我叫：&#123;&#123;name&#125;&#125;, 我来自：&#123;&#123;comeFrom&#125;&#125;&lt;/p&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">created</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;在created钩子函数中被调用&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我叫：&quot;</span>, <span class="variable language_">this</span>.<span class="property">name</span>);</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我来自：&quot;</span>, <span class="variable language_">this</span>.<span class="property">comeFrom</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>显示效果：</p>
<p><img src="https://www.daykalif.com/blog_img/vue-template5.png" alt="vue-tempalte"></p>
<p><strong>⚠️ 注意：</strong></p>
<p>A、props 取值的方式</p>
<p>在注册组件的模板内部 template，直接通过 prop 的名称取值就 Ok</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">template</span>: <span class="string">&quot;&lt;p&gt;我叫：&#123;&#123;name&#125;&#125;, 我来自：&#123;&#123;comeFrom&#125;&#125;&lt;/p&gt;&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>不在注册组件的模板内部 template，用 this.prop 的方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我来自：&quot;</span>, <span class="variable language_">this</span>.<span class="property">comeFrom</span>);</span><br></pre></td></tr></table></figure>

<p>B、在 template 选项属性中，可以写驼峰命名法，也可以写短横线命名法。在 HTML(模板)中，只能写短横线命名法</p>
<p>原因：vue 组件的模板可以放在两个地方</p>
<p>a、Vue 组件的 template 选项属性中，作为模板字符串</p>
<p>b、放在.html 中[ 用 script template 标签创建的组件 ]，作为 HTML</p>
<p>问题在于 HTML 不区分大小写，所以在 vue 注册组件中通用的驼峰命名法，不适用于 HTML 中的 Vue 模板，在 HTML 中写入 props 属性，必须写短横线命名法（把原来 props 属性中的每个 prop 大写换成小写，并且在前面加“-”）</p>
<p>将 6 中的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&#x27;app&#x27;</span>&gt;</span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">name</span>=<span class="string">&quot;jiangjiang&quot;</span> <span class="attr">come-from</span>=<span class="string">&quot;guilin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span></span><br><span class="line">   &lt;!-- 然后在模板中通过属性传值的方式进行数据的注入 --&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>改成</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&#x27;app&#x27;</span>&gt;</span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">name</span>=<span class="string">&quot;jiangjiang&quot;</span> <span class="attr">comeFrom</span>=<span class="string">&quot;guilin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span></span><br><span class="line">   &lt;!-- 然后在模板中通过属性传值的方式进行数据的注入 --&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>显示效果：【第二个没有显示】</p>
<p><img src="https://www.daykalif.com/blog_img/vue-template6.png" alt="vue-tempalte"></p>
<p>$\color{green}{异步组件的实现原理；异步组件的3种实现方式—工厂函数、Promise、高级函数}$</p>
<p>异步组件实现的本质是 2 次渲染，先渲染成注释节点，当组件加载成功后，在通过 forceRender 重新渲染</p>
<p>高级异步组件可以通过简单的配置实现 loading resolve reject timeout 4 种状态</p>
<p>转载文档：<br><a href="https://segmentfault.com/a/1190000018031560">https://segmentfault.com/a/1190000018031560</a><br><a href="https://www.jb51.net/article/181553.htm">https://www.jb51.net/article/181553.htm</a><br><a href="https://blog.csdn.net/tangxiujiang/article/details/79620542">https://blog.csdn.net/tangxiujiang/article/details/79620542</a></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue</tag>
        <tag>组件化</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue基本使用</title>
    <url>/2019/07/27/Vue/%E3%80%90%E4%B8%93%E9%A2%98%E3%80%911%EF%BC%9AVue%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h5 id="Vue-面试题"><a href="#Vue-面试题" class="headerlink" title="Vue 面试题"></a>Vue 面试题</h5><p>1.v-show 和 v-if 的区别 2.为何 v-for 中要用 key 3.描述 Vue 组件生命周期（有父子组件的情况）<br>4.Vue 组件如何通讯 5.描述组件渲染和更新的过程 6.双向数据绑定 v-model 的实现原理</p>
<h5 id="一、用-vue-cli-创建项目"><a href="#一、用-vue-cli-创建项目" class="headerlink" title="一、用 vue-cli 创建项目"></a>一、用 vue-cli 创建项目</h5><p><a href="https://github.com/vuejs/vue-cli/tree/v2#vue-cli--">vue-cli</a></p>
<h5 id="二、指令、插值"><a href="#二、指令、插值" class="headerlink" title="二、指令、插值"></a>二、指令、插值</h5><p>插值、表达式<br>指令、动态属性<br>v-html：会有 xss 风险，会覆盖子组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;文本插值 &#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;JS 表达式 &#123;&#123; flag ? &quot;yes&quot; : &quot;no&quot; &#125;&#125; （只能是表达式，不能是 js 语句）&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p :id=&quot;dynamicId&quot;&gt;动态属性 id&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;p v-html=&quot;rawHtml&quot;&gt;</span><br><span class="line">      &lt;span&gt;有 xss 风险&lt;/span&gt;</span><br><span class="line">      &lt;span&gt;【注意】使用 v-html 之后，将会覆盖子元素&lt;/span&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;!-- 其他常用指令 --&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      message: &quot;hello vue&quot;,</span><br><span class="line">      flag: true,</span><br><span class="line">      rawHtml: &quot;指令 - 原始 html &lt;b&gt;加粗&lt;/b&gt; &lt;i&gt;斜体&lt;/i&gt;&quot;,</span><br><span class="line">      dynamicId: `id-$&#123;Date.now()&#125;`,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h5 id="三、computed-和-watch"><a href="#三、computed-和-watch" class="headerlink" title="三、computed 和 watch"></a>三、computed 和 watch</h5><p>computed 有缓存，data 不变则不会重新计算</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;num &#123;&#123; num &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;double1 &#123;&#123; double1 &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;Input v-model=&quot;double2&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Input from &#x27;../ComponentsDemo/Input.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123; Input &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            num: 20</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">        // computed有缓存，data不变则不会重新计算</span><br><span class="line">        double1() &#123;</span><br><span class="line">            return this.num * 2</span><br><span class="line">        &#125;,</span><br><span class="line">        double2: &#123;  //v-model双向数据绑定，一定要有ge和set</span><br><span class="line">            get() &#123;</span><br><span class="line">                return this.num * 2</span><br><span class="line">            &#125;,</span><br><span class="line">            set(val) &#123;</span><br><span class="line">                this.num = val/2</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        value()&#123;    //组件中实现双向数据绑定-使用vuex</span><br><span class="line">            get()&#123;</span><br><span class="line">                return this.$store.getters.value;</span><br><span class="line">            &#125;,</span><br><span class="line">            set(value)&#123;</span><br><span class="line">                this.$store.dispatch(&#x27;updateValue&#x27;,value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>watch 如何深度监听？（watch 默认浅监听，监听表层的变化）<br>watch 监听引用类型，拿不到 oldVal【watch 针对引用类型，会有深度监听】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;input v-model=&quot;name&quot; /&gt;</span><br><span class="line">    &lt;input v-model=&quot;info.city&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      name: &quot;daykalif&quot;,</span><br><span class="line">      info: &#123;</span><br><span class="line">        city: &quot;北京&quot;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    name(oldVal, val) &#123;</span><br><span class="line">      // eslint-disable-next-line</span><br><span class="line">      console.log(&quot;watch name&quot;, oldVal, val); // 值类型，可正常拿到 oldVal 和 val</span><br><span class="line">    &#125;,</span><br><span class="line">    info: &#123;</span><br><span class="line">      handler(oldVal, val) &#123;</span><br><span class="line">        // eslint-disable-next-line</span><br><span class="line">        console.log(&quot;watch info&quot;, oldVal, val); // 引用类型，拿不到 oldVal 。因为指针相同，此时已经指向了新的 val</span><br><span class="line">      &#125;,</span><br><span class="line">      deep: true, // 深度监听</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h5 id="四、class-和-style"><a href="#四、class-和-style" class="headerlink" title="四、class 和 style"></a>四、class 和 style</h5><p>使用动态属性<br>使用驼峰式写法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p :class=&quot;&#123; black: isBlack, yellow: isYellow &#125;&quot;&gt;使用 class&lt;/p&gt;</span><br><span class="line">    &lt;p :class=&quot;[black, yellow]&quot;&gt;使用 class （数组）&lt;/p&gt;</span><br><span class="line">    &lt;p :style=&quot;styleData&quot;&gt;使用 style&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      isBlack: true,</span><br><span class="line">      isYellow: true,</span><br><span class="line"></span><br><span class="line">      black: &quot;black&quot;,</span><br><span class="line">      yellow: &quot;yellow&quot;,</span><br><span class="line"></span><br><span class="line">      styleData: &#123;</span><br><span class="line">        fontSize: &quot;40px&quot;, // 转换为驼峰式</span><br><span class="line">        color: &quot;red&quot;,</span><br><span class="line">        backgroundColor: &quot;#ccc&quot;, // 转换为驼峰式</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.black &#123;</span><br><span class="line">  background-color: #999;</span><br><span class="line">&#125;</span><br><span class="line">.yellow &#123;</span><br><span class="line">  color: yellow;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h5 id="五、条件渲染"><a href="#五、条件渲染" class="headerlink" title="五、条件渲染"></a>五、条件渲染</h5><p>v-if v-else 的用法，可使用变量，也可以使用&#x3D;&#x3D;&#x3D;表达式</p>
<blockquote>
<p>v-if 和 v-show 的区别？</p>
</blockquote>
<p>1.手段：v-if 是通过控制 dom 节点的存在与否来控制元素的显隐；v-show 是通过设置 DOM 元素的 display 样式，block 为显示，none 为隐藏； 2.编译过程：v-if 切换有一个局部编译&#x2F;卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件；v-show 只是简单的基于 css 切换； 3.编译条件：v-if 是惰性的，如果初始条件为假，则什么也不做；只有在条件第一次变为真时才开始局部编译<br>（编译被缓存？编译被缓存后，然后再切换的时候进行局部卸载); v-show 是在任何条件下（首次条件是否为真）都被编译，然后被缓存，而且 DOM 元素保留； 4.性能消耗：v-if 有更高的切换消耗；v-show 有更高的初始渲染消耗；</p>
<blockquote>
<p>v-if 和 v-show 的使用场景？</p>
</blockquote>
<p>基于以上区别，因此，如果需要非常频繁地切换，则使用 v-show 较好；<br>如果在运行时条件很少改变，则使用 v-if 较好。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 更新不是很频繁，就使用v-if --&gt;</span><br><span class="line">    &lt;p v-if=&quot;type === &#x27;a&#x27;&quot;&gt;A&lt;/p&gt;</span><br><span class="line">    &lt;p v-else-if=&quot;type === &#x27;b&#x27;&quot;&gt;B&lt;/p&gt;</span><br><span class="line">    &lt;p v-else&gt;other&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 更新频繁，使用v-show --&gt;</span><br><span class="line">    &lt;p v-show=&quot;type === &#x27;a&#x27;&quot;&gt;A by v-show&lt;/p&gt;</span><br><span class="line">    &lt;p v-show=&quot;type === &#x27;b&#x27;&quot;&gt;B by v-show&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      type: &quot;a&quot;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h5 id="六、循环（列表）渲染"><a href="#六、循环（列表）渲染" class="headerlink" title="六、循环（列表）渲染"></a>六、循环（列表）渲染</h5><p>如何遍历对象？–也可以用 v-for<br>key 的重要性。key 不能乱写（尽量不要写成 random 或者 index，要写一个和业务相关联的）<br>v-for 和 v-if 不建议一起使用！【v-for 比 v-if 优先级高】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;遍历数组&lt;/p&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for=&quot;(item, index) in listArr&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">        &#123;&#123; index &#125;&#125; - &#123;&#123; item.id &#125;&#125; - &#123;&#123; item.title &#125;&#125;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;遍历对象&lt;/p&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for=&quot;(val, key, index) in listObj&quot; :key=&quot;key&quot;&gt;</span><br><span class="line">        &#123;&#123; index &#125;&#125; - &#123;&#123; key &#125;&#125; - &#123;&#123; val.title &#125;&#125;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      flag: false,</span><br><span class="line">      listArr: [</span><br><span class="line">        &#123; id: &quot;a&quot;, title: &quot;标题1&quot; &#125;, // 数据结构中，最好有 id ，方便使用 key</span><br><span class="line">        &#123; id: &quot;b&quot;, title: &quot;标题2&quot; &#125;,</span><br><span class="line">        &#123; id: &quot;c&quot;, title: &quot;标题3&quot; &#125;,</span><br><span class="line">      ],</span><br><span class="line">      listObj: &#123;</span><br><span class="line">        a: &#123; title: &quot;标题1&quot; &#125;,</span><br><span class="line">        b: &#123; title: &quot;标题2&quot; &#125;,</span><br><span class="line">        c: &#123; title: &quot;标题3&quot; &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h5 id="七、事件"><a href="#七、事件" class="headerlink" title="七、事件"></a>七、事件</h5><p>event 参数，自定义参数<br>事件修饰符，按键修饰符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">事件修饰符:</span><br><span class="line">&lt;!-- 阻止单击事件继续传播 --&gt;</span><br><span class="line">&lt;a v-on:click.stop=&quot;doThis&quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;!-- 提交事件不再重载页面 --&gt;</span><br><span class="line">&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;</span><br><span class="line">&lt;!-- 修饰符可以串联 --&gt;</span><br><span class="line">&lt;a v-on:click.stop.prevent=&quot;doThat&quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;!-- 只有修饰符 --&gt;</span><br><span class="line">&lt;form v-on:submit.prevent&gt;&lt;/form&gt;</span><br><span class="line">&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;</span><br><span class="line">&lt;!-- 即内部元素触发的事件现在此处理，然后才交由内部元素进行处理 --&gt;</span><br><span class="line">&lt;div v-on:click.capture=&quot;doThis&quot;&gt;...&lt;/div&gt;</span><br><span class="line">&lt;!-- 只当在event.target是当前元素自身时触发处理函数 --&gt;</span><br><span class="line">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span><br><span class="line">&lt;div v-on:click.self=&quot;doThat&quot;&gt;...&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">按键修饰符:</span><br><span class="line">&lt;!-- 即使Alt或Shift被一同按下时也会触发 --&gt;</span><br><span class="line">&lt;button @click.ctrl=&quot;onClick&quot;&gt;A&lt;/button&gt;</span><br><span class="line">&lt;!-- 有且只有Ctrl被按下的时候才触发 --&gt;</span><br><span class="line">&lt;button @click.ctrl.exact=&quot;onCtrlClick&quot;&gt;A&lt;/button&gt;</span><br><span class="line">&lt;!-- 没有任何系统修改符被按下的时候才触发 --&gt;</span><br><span class="line">&lt;button @click.exact=&quot;onClick&quot;&gt;A&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>【观察】事件被绑定到哪里？</p>
</blockquote>
<ol>
<li>event 是原生的</li>
<li>事件被挂载到当前元素</li>
<li>和 DOM 事件一样</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; num &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;button @click=&quot;increment1&quot;&gt;+1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;increment2(2, $event)&quot;&gt;+2&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      num: 0,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    increment1(event) &#123;</span><br><span class="line">      // eslint-disable-next-line</span><br><span class="line">      console.log(&quot;event&quot;, event, event.__proto__.constructor); // (MouseEvent)是原生的 event 对象</span><br><span class="line">      // eslint-disable-next-line</span><br><span class="line">      console.log(event.target); //&lt;button&gt;+1&lt;/button&gt;</span><br><span class="line">      // eslint-disable-next-line</span><br><span class="line">      console.log(event.currentTarget); // 注意，事件是被注册到当前元素的，和 React 不一样  //&lt;button&gt;+1&lt;/button&gt;</span><br><span class="line">      this.num++;</span><br><span class="line"></span><br><span class="line">      // 1. event 是原生的</span><br><span class="line">      // 2. 事件被挂载到当前元素</span><br><span class="line">      // 和 DOM 事件一样</span><br><span class="line">    &#125;,</span><br><span class="line">    increment2(val, event) &#123;</span><br><span class="line">      // eslint-disable-next-line</span><br><span class="line">      console.log(event.target);</span><br><span class="line">      this.num = this.num + val;</span><br><span class="line">    &#125;,</span><br><span class="line">    loadHandler() &#123;</span><br><span class="line">      // do some thing</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    window.addEventListener(&quot;load&quot;, this.loadHandler);</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeDestroy() &#123;</span><br><span class="line">    //【注意】用 vue 绑定的事件，组建销毁时会自动被解绑</span><br><span class="line">    // 自己绑定的事件，需要自己销毁！！！</span><br><span class="line">    window.removeEventListener(&quot;load&quot;, this.loadHandler);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h5 id="八、表单"><a href="#八、表单" class="headerlink" title="八、表单"></a>八、表单</h5><p>v-model<br>常见表单项 textarea checkbox radio select<br>修饰符 lazy number trim</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;输入框: &#123;&#123; name &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model.trim=&quot;name&quot; /&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model.lazy=&quot;name&quot; /&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model.number=&quot;age&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;多行文本: &#123;&#123; desc &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;textarea v-model=&quot;desc&quot;&gt;&lt;/textarea&gt;</span><br><span class="line">    &lt;!-- 注意，&lt;textarea&gt;&#123;&#123;desc&#125;&#125;&lt;/textarea&gt; 是不允许的！！！ --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;复选框 &#123;&#123; checked &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;input type=&quot;checkbox&quot; v-model=&quot;checked&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;多个复选框 &#123;&#123; checkedNames &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;input type=&quot;checkbox&quot; id=&quot;jack&quot; value=&quot;Jack&quot; v-model=&quot;checkedNames&quot; /&gt;</span><br><span class="line">    &lt;label for=&quot;jack&quot;&gt;Jack&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;checkbox&quot; id=&quot;john&quot; value=&quot;John&quot; v-model=&quot;checkedNames&quot; /&gt;</span><br><span class="line">    &lt;label for=&quot;john&quot;&gt;John&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;checkbox&quot; id=&quot;mike&quot; value=&quot;Mike&quot; v-model=&quot;checkedNames&quot; /&gt;</span><br><span class="line">    &lt;label for=&quot;mike&quot;&gt;Mike&lt;/label&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;单选 &#123;&#123; gender &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;input type=&quot;radio&quot; id=&quot;male&quot; value=&quot;male&quot; v-model=&quot;gender&quot; /&gt;</span><br><span class="line">    &lt;label for=&quot;male&quot;&gt;男&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;radio&quot; id=&quot;female&quot; value=&quot;female&quot; v-model=&quot;gender&quot; /&gt;</span><br><span class="line">    &lt;label for=&quot;female&quot;&gt;女&lt;/label&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;下拉列表选择 &#123;&#123; selected &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;select v-model=&quot;selected&quot;&gt;</span><br><span class="line">      &lt;option disabled value=&quot;&quot;&gt;请选择&lt;/option&gt;</span><br><span class="line">      &lt;option&gt;A&lt;/option&gt;</span><br><span class="line">      &lt;option&gt;B&lt;/option&gt;</span><br><span class="line">      &lt;option&gt;C&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;下拉列表选择（多选） &#123;&#123; selectedList &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;select v-model=&quot;selectedList&quot; multiple&gt;</span><br><span class="line">      &lt;option disabled value=&quot;&quot;&gt;请选择&lt;/option&gt;</span><br><span class="line">      &lt;option&gt;A&lt;/option&gt;</span><br><span class="line">      &lt;option&gt;B&lt;/option&gt;</span><br><span class="line">      &lt;option&gt;C&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      name: &quot;daykalif&quot;,</span><br><span class="line">      age: 26,</span><br><span class="line">      desc: &quot;自我介绍&quot;,</span><br><span class="line"></span><br><span class="line">      checked: true,</span><br><span class="line">      checkedNames: [],</span><br><span class="line"></span><br><span class="line">      gender: &quot;male&quot;,</span><br><span class="line"></span><br><span class="line">      selected: &quot;&quot;,</span><br><span class="line">      selectedList: [],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h5 id="九、Vue-组件使用"><a href="#九、Vue-组件使用" class="headerlink" title="九、Vue 组件使用"></a>九、Vue 组件使用</h5><blockquote>
<p>1.props(类型和默认值)和$emit</p>
</blockquote>
<p>父组件通过动态属性传递给子组件，子组件通过 props 接收传入的属性；<br>子组件通过$emit 让父组件触发事件</p>
<blockquote>
<p>2.组件间通讯-自定义事件</p>
</blockquote>
<p>1).兄弟组件之间通讯：【使用 props 和$emit】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">event.js(vue实例，本身具有$on,$off,$emit自定义事件的能力): import Vue from &#x27;vue&#x27;</span><br><span class="line">export default new Vue() import event from &#x27;./event.js&#x27;; 组件1中： addTitle() &#123;</span><br><span class="line">// 调用父组件的事件 this.$emit(&#x27;add&#x27;,this.title) //</span><br><span class="line">1.调用自定义事件------------------兄弟组件--发送事件 event.$emit(&#x27;onAddTitle&#x27;,</span><br><span class="line">this.title) &#125; 组件2中： methods: &#123; addTitleHandler(title) &#123;</span><br><span class="line">//------------3.兄弟组件：触发事件 console.log(&#x27;on add title&#x27;, title) &#125; &#125;,</span><br><span class="line">mounted() &#123; // 2.绑定自定义事件--------------兄弟组件：监听事件</span><br><span class="line">event.$on(&#x27;onAddTitle&#x27;, this.addTitleHandler)</span><br><span class="line">//这里绑定了事件,写的是事件的名字而不是直接写事件方法，是因为方便我们解绑自定义事件</span><br><span class="line">&#125;, beforeDestroy() &#123; //</span><br><span class="line">4.及时销毁，否则可能造成内存泄露-------及时解绑自定义事件</span><br><span class="line">event.$off(&#x27;onAddTitle&#x27;, this.addTitleHandler) &#125;</span><br></pre></td></tr></table></figure>

<p>2).非父子组件通讯:<br>Bus 总线<br>实现自定义事件</p>
<p>3).使用 vuex 实现组件通讯</p>
<blockquote>
<p>3.组件生命周期(单个组件)</p>
</blockquote>
<p>挂载阶段<br>beforeCreate<br>created————–把 vue 的实例初始化，这是内存的一个变量【页面还没有渲染，但是 vue 实例已经初始化了】<br>beforeMount<br>mounted————-在网页上已经渲染完成了【页面渲染完了,此时可以操作 ajax，绑定事件等】</p>
<p>更新阶段<br>beforeUpdate<br>updated</p>
<p>销毁阶段<br>beforeDestroy<br>destroyed————解除绑定自定义事件，销毁子组件以及事件监听器等<br><img src="https://www.daykalif.com/blog_img/vue-lifecycle.jpeg" alt="vue-lifecycle"><br><img src="https://cn.vuejs.org/images/lifecycle.png" alt="vue-lifecycle"></p>
<h5 id="十、Vue-高级特性"><a href="#十、Vue-高级特性" class="headerlink" title="十、Vue 高级特性"></a>十、Vue 高级特性</h5><blockquote>
<p>1.自定义 v-model【如：颜色选择器】</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//index.vue:</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; name &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;CustomVModel v-model=&quot;name&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    CustomVModel,</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      name: &quot;zhangsan&quot;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">//CustomVModel.vue:</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 例如：vue 颜色选择 --&gt;</span><br><span class="line">  &lt;input</span><br><span class="line">    type=&quot;text&quot;</span><br><span class="line">    :value=&quot;text1&quot;</span><br><span class="line">    @input=&quot;$emit(&#x27;change1&#x27;, $event.target.value)&quot;</span><br><span class="line">  /&gt;</span><br><span class="line">  &lt;!--</span><br><span class="line">        1. 上面的 input 使用了 :value 而不是 v-model</span><br><span class="line">        2. 上面的 change1 和 model.event 要对应起来</span><br><span class="line">        3. text1 属性对应起来</span><br><span class="line">    --&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  model: &#123;</span><br><span class="line">    prop: &quot;text1&quot;, // 对应 props text1</span><br><span class="line">    event: &quot;change1&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    text1: String,</span><br><span class="line">    default() &#123;</span><br><span class="line">      return &quot;&quot;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>2.$nextTick</p>
</blockquote>
<p>Vue 是异步渲染<br>data 改变之后，DOM 不会立刻渲染<br>$nextTick 会在 DOM 渲染之后被触发，以获取最新 DOM 节点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;ul ref=&quot;ul1&quot;&gt;</span><br><span class="line">      &lt;li v-for=&quot;(item, index) in list&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">        &#123;&#123; item &#125;&#125;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;button @click=&quot;addItem&quot;&gt;添加一项&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;app&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      list: [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    addItem() &#123;</span><br><span class="line">      this.list.push(`$&#123;Date.now()&#125;`);</span><br><span class="line">      this.list.push(`$&#123;Date.now()&#125;`);</span><br><span class="line">      this.list.push(`$&#123;Date.now()&#125;`);</span><br><span class="line"></span><br><span class="line">      // 通过ref来获取DOM元素</span><br><span class="line">      // 1. 异步渲染，$nextTick 待 DOM 渲染完再回调</span><br><span class="line">      // 2. 页面渲染时会将 data 的修改做整合，多次 data 修改只会渲染一次【异步渲染，不管修改多少次，$nextTick只会执行一次】</span><br><span class="line">      // （同步整合的话，改一次就要渲染一次）</span><br><span class="line"></span><br><span class="line">      this.$nextTick(() =&gt; &#123;</span><br><span class="line">        // 获取 DOM 元素</span><br><span class="line">        const ulElem = this.$refs.ul1;</span><br><span class="line">        console.log(ulElem.childNodes.length);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>3.slot</p>
</blockquote>
<p>1.基本使用(父组件往子组件中插入一段内容)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//父index.vue:</span><br><span class="line">&lt;SlotDemo :url=&quot;website.url&quot;&gt;</span><br><span class="line">    &#123;&#123;website.title&#125;&#125;</span><br><span class="line">&lt;/SlotDemo&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: [&quot;url&quot;],</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      website: &#123;</span><br><span class="line">        url: &quot;http://www.daykalif.com/&quot;,</span><br><span class="line">        title: &quot;daykalif&quot;,</span><br><span class="line">        subTitle: &quot;前端&quot;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">//子SlotDemo.vue:</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;a :href=&quot;url&quot;&gt;</span><br><span class="line">    &lt;slot&gt; 默认内容，即父组件没设置内容时，这里显示 &lt;/slot&gt;</span><br><span class="line">  &lt;/a&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: [&quot;url&quot;], //接收属性</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>2.作用域插槽：子组件的作用域 data，让父组件使用到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//父index.vue:</span><br><span class="line">&lt;ScopedSlotDemo :url=&quot;website.url&quot;&gt;</span><br><span class="line">    &lt;template v-slot=&quot;slotProps2&quot;&gt;&lt;!--2.--&gt;</span><br><span class="line">        &#123;&#123;slotProps2.slotData1.title&#125;&#125;&lt;!--3.获取子组件的title：wangEditor--&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/ScopedSlotDemo&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: [&quot;url&quot;],</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      website: &#123;</span><br><span class="line">        url: &quot;http://www.daykalif.com/&quot;,</span><br><span class="line">        title: &quot;daykalif&quot;,</span><br><span class="line">        subTitle: &quot;前端&quot;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">//子ScopedSlotDemo:</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;a :href=&quot;url&quot;&gt;</span><br><span class="line">    &lt;slot :slotData1=&quot;website&quot;</span><br><span class="line">      &gt;&lt;!--1.--&gt;</span><br><span class="line">      &#123;&#123; website.subTitle &#125;&#125;</span><br><span class="line">      &lt;!-- 默认值显示 subTitle(轻量级富文本编辑器) ，即父组件不传内容时 --&gt;</span><br><span class="line">    &lt;/slot&gt;</span><br><span class="line">  &lt;/a&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: [&quot;url&quot;],</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      website: &#123;</span><br><span class="line">        url: &quot;http://wangEditor.com/&quot;,</span><br><span class="line">        title: &quot;wangEditor&quot;,</span><br><span class="line">        subTitle: &quot;轻量级富文本编辑器&quot;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>3.具名插槽</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">index.vue:</span><br><span class="line">&lt;NamedSlot&gt;</span><br><span class="line">     &lt;!--缩写&lt;template #header&gt;&lt;/template&gt;--&gt;</span><br><span class="line">    &lt;template v-slot:header&gt;</span><br><span class="line">        &lt;h1&gt;将插入header slot中&lt;/h1&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;p&gt;将插入到main slot中，即未命名的slot&lt;/p&gt;</span><br><span class="line">    &lt;template v-slot:footer&gt;</span><br><span class="line">        &lt;h1&gt;将插入footer slot中&lt;/h1&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/NamedSlot&gt;</span><br><span class="line"></span><br><span class="line">NamedSlot:</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">      &lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line">    &lt;main&gt;</span><br><span class="line">      &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/main&gt;</span><br><span class="line">    &lt;footer&gt;</span><br><span class="line">      &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/footer&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>4.动态、异步组件</p>
</blockquote>
<p>动态组件：【如：新闻列表页】<br>:is&#x3D;”component-name”用法<br>需要根据数据，动态渲染场景。即组件类型不确定。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 动态组件 --&gt;</span><br><span class="line">&lt;!-- &lt;component :is=&quot;NextTickName&quot;/&gt; --&gt;</span><br><span class="line">&lt;div v-for=&quot;(val, key) in newsData&quot; :key=&quot;key&quot;&gt;</span><br><span class="line">    &lt;component :is=&quot;val.type&quot;&gt;&lt;/component&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// import NextTick from &#x27;./NextTick&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    // FormDemo: () =&gt; import(&#x27;../BaseUse/FormDemo&#x27;),</span><br><span class="line">    // NextTick</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      // NextTickName: &quot;NextTick&quot;,</span><br><span class="line">      newsData: &#123;</span><br><span class="line">        1: &#123;</span><br><span class="line">          type: &quot;text&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        2: &#123;</span><br><span class="line">          type: &quot;text&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        3: &#123;</span><br><span class="line">          type: &quot;img&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>异步组件：<br>import()函数<br>按需加载，异步加载大组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">父组件引入：</span><br><span class="line">&lt;!-- 异步组件 --&gt;</span><br><span class="line">&lt;FormDemo v-if=&quot;showFormDemo&quot; /&gt;</span><br><span class="line">&lt;button</span><br><span class="line">  @click=&quot;showFormDemo = true&quot;</span><br><span class="line">&gt;show form demo,什么时候使用，什么时候再去异步加载&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">components: &#123; FormDemo: () =&gt; import(&#x27;../BaseUse/FormDemo&#x27;), // FormDemo: () =&gt;</span><br><span class="line">&#123; // return import(&#x27;../BaseUse/FormDemo&#x27;) // &#125; &#125; data() &#123; return &#123; showFormDemo:</span><br><span class="line">false, &#125; &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>5.keep-alive【如：可使用在 tab 切换】【v-show 通过 css 的 display 控制，keep-alive 则在 vue 层级，框架层级进行控制】</p>
</blockquote>
<p>缓存组件<br>频繁切换，不需要重复渲染<br>Vue 常见性能优化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">KeepAliveStageA:</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;p&gt;state A&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    // eslint-disable-next-line</span><br><span class="line">    console.log(&quot;A mounted&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">  destroyed() &#123;</span><br><span class="line">    // eslint-disable-next-line</span><br><span class="line">    console.log(&quot;A destroyed&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">KeepAliveStageB:</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;p&gt;state B&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    // eslint-disable-next-line</span><br><span class="line">    console.log(&quot;B mounted&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">  destroyed() &#123;</span><br><span class="line">    // eslint-disable-next-line</span><br><span class="line">    console.log(&quot;B destroyed&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">KeepAliveStageC:</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;p&gt;state C&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    // eslint-disable-next-line</span><br><span class="line">    console.log(&quot;C mounted&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">  destroyed() &#123;</span><br><span class="line">    // eslint-disable-next-line</span><br><span class="line">    console.log(&quot;C destroyed&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">KeepAlive:(将子组件进行缓存)</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;changeState(&#x27;A&#x27;)&quot;&gt;A&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeState(&#x27;B&#x27;)&quot;&gt;B&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeState(&#x27;C&#x27;)&quot;&gt;C&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">    &lt;keep-alive&gt;</span><br><span class="line">      &lt;!-- tab 切换 可以使用keep-alive --&gt;</span><br><span class="line">      &lt;KeepAliveStageA v-if=&quot;state === &#x27;A&#x27;&quot; /&gt;</span><br><span class="line">      &lt;!-- 简单的可以使用v-show --&gt;</span><br><span class="line">      &lt;KeepAliveStageB v-if=&quot;state === &#x27;B&#x27;&quot; /&gt;</span><br><span class="line">      &lt;KeepAliveStageC v-if=&quot;state === &#x27;C&#x27;&quot; /&gt;</span><br><span class="line">    &lt;/keep-alive&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import KeepAliveStageA from &quot;./KeepAliveStateA&quot;;</span><br><span class="line">import KeepAliveStageB from &quot;./KeepAliveStateB&quot;;</span><br><span class="line">import KeepAliveStageC from &quot;./KeepAliveStateC&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    KeepAliveStageA,</span><br><span class="line">    KeepAliveStageB,</span><br><span class="line">    KeepAliveStageC,</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      state: &quot;A&quot;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    changeState(state) &#123;</span><br><span class="line">      this.state = state;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>6.mixin</p>
</blockquote>
<p>1).多个组件有相同的逻辑，抽离出来<br>2).mixin 并不是完美的解决方案，会有一些问题</p>
<ul>
<li>变量来源不明确，不利于阅读</li>
<li>多 mixin 可能会造成命名冲突</li>
<li>mixin 和组件可能出现多对多的关系，复杂度较高<br>3).Vue3 提出的 Composition API 旨在解决这些问题</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mixin.<span class="property">js</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">city</span>: <span class="string">&quot;北京&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">showName</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;mixin mounted&quot;</span>, <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; name &#125;&#125; &#123;&#123; major &#125;&#125; &#123;&#123; city &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;button @click=&quot;showName&quot;&gt;显示姓名&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import myMixin from &quot;./mixin&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  mixins: [myMixin], // 也可以添加多个，会自动合并起来 mixins: [myMixin1,myMixin2,myMixin3]</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      name: &quot;daykalif&quot;,</span><br><span class="line">      major: &quot;web 前端&quot;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;&#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    console.log(&quot;component mounted&quot;, this.name);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h5 id="十一、Vuex-使用"><a href="#十一、Vuex-使用" class="headerlink" title="十一、Vuex 使用"></a>十一、Vuex 使用</h5><p>Vuex 基本概念：<br>state<br>getters<br>action(异步操作，整合多个 mutations)<br>mutation</p>
<p>用于 Vue 组件：<br>dispatch<br>commit<br>mapState<br>mapGetters<br>mapActions<br>mapMutations</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">------------- <span class="title class_">Actions</span>------------</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">increateAsync</span>() 映射到 <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;increateAsync&#x27;</span>)</span><br><span class="line">相当于</span><br><span class="line">...<span class="title function_">mapActions</span>([<span class="string">&#x27;increateAsync&#x27;</span>]),</span><br><span class="line">💛 💛 💛 💛 💛 💛 💛 💛 💛 💛</span><br><span class="line">如果是某一个<span class="variable language_">module</span>下的action,需要带上 namespace</span><br><span class="line">格式: <span class="title function_">mapActions</span>(namespace,[mutationName])</span><br><span class="line">...<span class="title function_">mapActions</span>(<span class="string">&#x27;home&#x27;</span>, [<span class="string">&#x27;setHomeListAsync&#x27;</span>]),</span><br><span class="line">...<span class="title function_">mapActions</span>(<span class="string">&#x27;home&#x27;</span>, &#123; <span class="attr">setListHomeAsync</span>: <span class="string">&#x27;setHomeListAsync&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure>

<p><img src="https://vuex.vuejs.org/vuex.png" alt="vuex"></p>
<blockquote>
<p>问：Vuex 怎么理解？</p>
</blockquote>
<p>Vuex（状态管理器，帮助我们实现组件之间数据传递） 1.一定要先有唯一仓库【创建仓库 store】 2.在仓库中我们拥有第一个状态【设置状态 state】 3.获取内容 getters 4.模块拆分 modules<br>进行页面按钮点击，派发事件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addProductToCart(product)&quot;</span>&gt;</span>Add to cart<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapActions &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">methods</span>: <span class="title function_">mapActions</span>(<span class="string">&quot;cart&quot;</span>, [<span class="string">&quot;addProductToCart&quot;</span>]),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>5.异步操作 action【由 component 视图层进行按钮点击，并且 dispatch 到 action 层】</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="title function_">addProductToCart</span>(<span class="params">&#123; state, commit &#125;, product</span>) &#123;</span><br><span class="line">    <span class="title function_">commit</span>(<span class="string">&quot;setCheckoutStatus&quot;</span>, <span class="literal">null</span>); <span class="comment">// 设置结账的状态 null</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>6.修改数据 mutation【由 actions 层 commit 事件，在 mutation 层修改数据】</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mutations = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 设置结算状态</span></span><br><span class="line">    <span class="title function_">setCheckoutStatus</span>(<span class="params">state, status</span>) &#123;</span><br><span class="line">      state.<span class="property">checkoutStatus</span> = status;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p>示例 2：vuex 的基本使用方法</p>
</blockquote>
<p>1.安装 vuex 依赖</p>
<p><code>npm i -S vuex</code></p>
<p>2.使用 vuex 插件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Store</span> <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Store</span>);</span><br></pre></td></tr></table></figure>

<p>3.初始化 vuex 对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">data</span>: <span class="string">&quot;this is data&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">SET_DATA</span>(<span class="params">state, data</span>) &#123;</span><br><span class="line">      state.<span class="property">data</span> = data;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">setData</span>(<span class="params">&#123; commit &#125;, data</span>) &#123;</span><br><span class="line">      <span class="title function_">commit</span>(<span class="string">&quot;SET_DATA&quot;</span>, data);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>4.实例化 Vue 对象，传入 store 参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function">(<span class="params">h</span>) =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>5.读取 vuex 状态</p>
<p><code>&lt;div&gt;&#123;&#123;$store.state.data&#125;&#125;&lt;/div&gt;</code></p>
<p>6.更新 vuex 状态</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">update</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;setData&#x27;</span>, <span class="string">&#x27;this is update data&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p>示例 3、vuex 模块化:</p>
</blockquote>
<p>实际项目开发中，状态众多，如果全部混在一起，则难以分辨，而且容易相互冲突，为了解决问题，vuex 引入模块化的概念，解决这个问题，下面我们定义 a 和 b 两个模块：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">data</span>: <span class="string">&quot;this is a&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">SET_DATA</span>(<span class="params">state, data</span>) &#123;</span><br><span class="line">      state.<span class="property">data</span> = data;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">setData</span>(<span class="params">&#123; commit &#125;, data</span>) &#123;</span><br><span class="line">      <span class="title function_">commit</span>(<span class="string">&quot;SET_DATA&quot;</span>, data);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> moduleB = &#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">data</span>: <span class="string">&quot;this is b&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">SET_DATA</span>(<span class="params">state, data</span>) &#123;</span><br><span class="line">      state.<span class="property">data</span> = data;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">setData</span>(<span class="params">&#123; commit &#125;, data</span>) &#123;</span><br><span class="line">      <span class="title function_">commit</span>(<span class="string">&quot;SET_DATA&quot;</span>, data);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>2.修改 store 的初始化代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    <span class="attr">a</span>: moduleA,</span><br><span class="line">    <span class="attr">b</span>: moduleB,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>3.修改获取状态的代码，此时需要加入模块进行区分：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;&#123;&#123;$store.<span class="property">state</span>.<span class="property">a</span>.<span class="property">data</span>&#125;&#125;&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;$store.state.b.data&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;update(&#x27;a&#x27;)&quot;</span>&gt;</span>update a<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;update(&#x27;b&#x27;)&quot;</span>&gt;</span>update b<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>4.修改 update 方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">update</span>(<span class="params">ns</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">`setData`</span>, <span class="string">`update <span class="subst">$&#123;ns&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5.vuex 命名空间</p>
<p>上述代码在执行过程中，获取状态没有问题，但是修改状态会出现问题，因为两个模块出现同名 actions，所以此时需要使用命名空间来解决这个问题：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>6.修改 update 方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">update</span>(<span class="params">ns</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">`<span class="subst">$&#123;ns&#125;</span>/setData`</span>, <span class="string">`update <span class="subst">$&#123;ns&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="十二、Vue-router-使用"><a href="#十二、Vue-router-使用" class="headerlink" title="十二、Vue-router 使用"></a>十二、Vue-router 使用</h5><p>Vue-router 路由模式：<br>hash 模式（默认），如<a href="http://abc.com/#/user/10">http://abc.com/#/user/10</a><br>H5 history 模式，如<a href="http://abc.com/user/20">http://abc.com/user/20</a><br>后者需要 server 端支持，因此无特殊需求可选择前者</p>
<p>vue-router 默认 hash 模式 —— 使用 URL 的 hash 来模拟一个完整的 URL，于是当 URL 改变时，页面不会重新加载。</p>
<p>如果不想要很丑的 hash，我们可以用路由的 history 模式，这种模式充分利用 history.pushState API 来完成 URL 跳转而无须重新加载页面。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">  <span class="attr">routes</span>: [...]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>给个警告，因为这么做以后，你的服务器就不再返回 404 错误页面，因为对于所有路径都会返回 index.html 文件。为了避免这种情况，你应该在 Vue 应用里面覆盖所有的路由情况，然后在给出一个 404 页面。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;history&quot;</span>,</span><br><span class="line">  <span class="attr">routes</span>: [&#123; <span class="attr">path</span>: <span class="string">&quot;*&quot;</span>, <span class="attr">component</span>: <span class="title class_">NotFoundComponent</span> &#125;],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>Vue-router 路由配置 动态路由：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="comment">// 获取参数 如10 20</span></span><br><span class="line">  <span class="attr">template</span>: <span class="string">&quot;&lt;div&gt;User &#123;&#123;$route.params.id&#125;&#125;&lt;/div&gt;&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    <span class="comment">//动态路径参数 以冒号开头。能命中`/user/10` `/user/20`等格式的路由</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&quot;/user/:id&quot;</span>, <span class="attr">component</span>: <span class="title class_">User</span> &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>Vue-router 路由配置 懒加载</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span></span><br><span class="line">        <span class="keyword">import</span>(</span><br><span class="line">          <span class="comment">/* webpackChunkName:navigator */</span></span><br><span class="line">          <span class="string">&quot;./../components/Navigator&quot;</span></span><br><span class="line">        ),</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/feedback&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span></span><br><span class="line">        <span class="keyword">import</span>(</span><br><span class="line">          <span class="comment">/* webpackChunkName:feedback */</span></span><br><span class="line">          <span class="string">&quot;./../components/FeedBack&quot;</span></span><br><span class="line">        ),</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>Vue-详解设置路由导航的两种方法：<br><code>&lt;router-link :to=&quot;...&quot;&gt; 和router.push(...)</code></p>
<blockquote>
<p>一、<code>&lt;router-link :to=&quot;...&quot;&gt;</code></p>
</blockquote>
<p>to 里的值可以是一个字符串路径，或者一个描述地址的对象。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 字符串</span><br><span class="line">&lt;router-link to=&quot;apple&quot;&gt; to apple&lt;/router-link&gt;</span><br><span class="line">// 对象</span><br><span class="line">&lt;router-link :to=&quot;&#123; path: &#x27;apple&#x27; &#125;&quot;&gt; to apple&lt;/router-link&gt;</span><br><span class="line">// 命名路由</span><br><span class="line">&lt;router-link :to=&quot;&#123; name: &#x27;applename&#x27; &#125;&quot;&gt; to apple&lt;/router-link&gt;</span><br><span class="line">//直接路由带查询参数query，地址栏变成 /apple?color=red</span><br><span class="line">&lt;router-link</span><br><span class="line">  :to=&quot;&#123; path: &#x27;apple&#x27;, query: &#123; color: &#x27;red&#x27; &#125; &#125;&quot;</span><br><span class="line">&gt; to apple&lt;/router-link&gt;</span><br><span class="line">// 命名路由带查询参数query，地址栏变成/apple?color=red</span><br><span class="line">&lt;router-link</span><br><span class="line">  :to=&quot;&#123; name: &#x27;applename&#x27;, query: &#123; color: &#x27;red&#x27; &#125; &#125;&quot;</span><br><span class="line">&gt; to apple&lt;/router-link&gt;</span><br><span class="line">//直接路由带路由参数params，params 不生效，如果提供了 path，params 会被忽略</span><br><span class="line">&lt;router-link</span><br><span class="line">  :to=&quot;&#123; path: &#x27;apple&#x27;, params: &#123; color: &#x27;red&#x27; &#125; &#125;&quot;</span><br><span class="line">&gt; to apple&lt;/router-link&gt;</span><br><span class="line">// 命名路由带路由参数params，地址栏是/apple/red</span><br><span class="line">&lt;router-link</span><br><span class="line">  :to=&quot;&#123; name: &#x27;applename&#x27;, params: &#123; color: &#x27;red&#x27; &#125; &#125;&quot;</span><br><span class="line">&gt; to apple&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>二、router.push(…)方法</p>
</blockquote>
<p>同样的规则也适用于 router.push(…)方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 字符串 router.push(&#x27;apple&#x27;) // 对象 router.push(&#123;path:&#x27;apple&#x27;&#125;) // 命名路由</span><br><span class="line">router.push(&#123;name: &#x27;applename&#x27;&#125;) //直接路由带查询参数query，地址栏变成</span><br><span class="line">/apple?color=red router.push(&#123;path: &#x27;apple&#x27;, query: &#123;color: &#x27;red&#x27; &#125;&#125;) //</span><br><span class="line">命名路由带查询参数query，地址栏变成/apple?color=red router.push(&#123;name:</span><br><span class="line">&#x27;applename&#x27;, query: &#123;color: &#x27;red&#x27; &#125;&#125;) //直接路由带路由参数params，params</span><br><span class="line">不生效，如果提供了 path，params 会被忽略 router.push(&#123;path:&#x27;applename&#x27;, params:&#123;</span><br><span class="line">color: &#x27;red&#x27; &#125;&#125;) // 命名路由带路由参数params，地址栏是/apple/red</span><br><span class="line">router.push(&#123;name:&#x27;applename&#x27;, params:&#123; color: &#x27;red&#x27; &#125;&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>三、注意点</p>
</blockquote>
<p>1、关于带参数的路由总结如下：</p>
<p>无论是直接路由“path” 还是命名路由“name”，带查询参数 query，地址栏会变成“&#x2F;url?查询参数名：查询参数值“;<br>直接路由“path” 带路由参数 params params 不生效;<br>命名路由“name” 带路由参数 params 地址栏保持是“&#x2F;url&#x2F;路由参数值”;</p>
<p>2、设置路由 map 里的 path 值：</p>
<p>带路由参数 params 时，路由 map 里的 path 应该写成: path:’&#x2F;apple&#x2F;:color’ ;<br>带查询参数 query 时，路由 map 里的 path 应该写成: path:’&#x2F;apple’ ；</p>
<p>3、获取参数方法：</p>
<p>在组件中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &#123;</span><br><span class="line">    $route.<span class="property">params</span>.<span class="property">color</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 js 里：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>.<span class="property">color</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3</title>
    <url>/2019/07/28/Vue/%E3%80%90%E4%B8%93%E9%A2%98%E3%80%914%EF%BC%9AVue3/</url>
    <content><![CDATA[<h5 id="Vue3-升级内容"><a href="#Vue3-升级内容" class="headerlink" title="Vue3 升级内容"></a>Vue3 升级内容</h5><p>全部用 ts 重写（响应式、vdom、模板编译等）<br>性能提升，项目打包之后代码量减少<br>会调整部分 API</p>
<blockquote>
<p>Vue2.x 马上就要过时了吗？</p>
</blockquote>
<p>Vue3 从正式发布到推广开来，还需要一段时间<br>Vue2.x 应用范围非常广，有大量项目需要维护、升级<br>Vue3 使用 Proxy 实现响应式，Proxy 存在浏览器兼容问题，且不能 polyfill</p>
<p>社区热门知识点：Proxy 重写响应式</p>
<h5 id="Proxy-实现响应式"><a href="#Proxy-实现响应式" class="headerlink" title="Proxy 实现响应式"></a>Proxy 实现响应式</h5><h6 id="Object-definedProperty"><a href="#Object-definedProperty" class="headerlink" title="Object.definedProperty"></a>Object.definedProperty</h6><blockquote>
<p>Object.defineProperty 的一些缺点（Vue3.0 启用 Proxy）</p>
</blockquote>
<p>1.深度监听，需要一次性递归到底，一次性计算量大 2.无法监听新增属性&#x2F;删除属性（Vue.set Vue.delete） 3.无法原生监听数组，需要特殊处理</p>
<h6 id="Proxy-实现响应式-1"><a href="#Proxy-实现响应式-1" class="headerlink" title="Proxy 实现响应式"></a>Proxy 实现响应式</h6><p>Proxy 兼容性不好，且无法 polyfill</p>
<p>1.Proxy 基本使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// const data = &#123;</span></span><br><span class="line"><span class="comment">//     name: &#x27;zhangsan&#x27;,</span></span><br><span class="line"><span class="comment">//     age: 20,</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">const</span> data = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxyData = <span class="keyword">new</span> <span class="title class_">Proxy</span>(data, &#123;</span><br><span class="line">  <span class="comment">// target：就是上面原生的data</span></span><br><span class="line">  <span class="comment">// key：就是设置谁，获取谁</span></span><br><span class="line">  <span class="comment">// val：就是设置谁的值，获取谁的值</span></span><br><span class="line">  <span class="comment">// receiver：就是proxyData</span></span><br><span class="line">  <span class="comment">// 使用Reflect的形式进行设置</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">get</span>(<span class="params">target, key, receiver</span>) &#123;</span><br><span class="line">    <span class="comment">// 只处理本身（非原型的）属性</span></span><br><span class="line">    <span class="keyword">const</span> ownKeys = <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(target);</span><br><span class="line">    <span class="keyword">if</span> (ownKeys.<span class="title function_">includes</span>(key)) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;get&quot;</span>, key); <span class="comment">// 监听</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> result = <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key, receiver); <span class="comment">//但是原型的属性也会走这个</span></span><br><span class="line">    <span class="keyword">return</span> result; <span class="comment">// 返回结果</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">set</span>(<span class="params">target, key, val, receiver</span>) &#123;</span><br><span class="line">    <span class="comment">// 重复的数据，不处理</span></span><br><span class="line">    <span class="keyword">if</span> (val === target[key]) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> result = <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, val, receiver);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;set&quot;</span>, key, val);</span><br><span class="line">    <span class="comment">// console.log(&#x27;result&#x27;, result) // true</span></span><br><span class="line">    <span class="keyword">return</span> result; <span class="comment">// 是否设置成功</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">deleteProperty</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(target, key);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;delete property&quot;</span>, key);</span><br><span class="line">    <span class="comment">// console.log(&#x27;result&#x27;, result) // true</span></span><br><span class="line">    <span class="keyword">return</span> result; <span class="comment">// 是否删除成功</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试：</span></span><br><span class="line"><span class="comment">// proxyData.age;</span></span><br><span class="line"><span class="comment">// proxyData.age = 30;</span></span><br><span class="line"><span class="comment">// delete proxyData.age;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Proxy和Reflect是对应的用法，Proxy做代理，Reflect做反射，反射到目标对象的属性，属性值上</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// proxyData.push(4)</span></span><br></pre></td></tr></table></figure>

<p>2.Reflect 作用：<br>和 Proxy 能力一一对应<br>规范化、标准化、函数式<br>替代掉 Object 上的工具函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">100</span>, <span class="attr">b</span>: <span class="number">200</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;a&quot;</span> <span class="keyword">in</span> obj; <span class="comment">//true</span></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">has</span>(obj, <span class="string">&quot;a&quot;</span>); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> obj.<span class="property">a</span>; <span class="comment">//true</span></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(obj, <span class="string">&quot;b&quot;</span>); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(obj); <span class="comment">//[&quot;a&quot;,&quot;b&quot;]</span></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj); <span class="comment">//[&quot;a&quot;,&quot;b&quot;]</span></span><br></pre></td></tr></table></figure>

<p>3.Proxy 实现响应式：<br>深度监听，性能更好<br>可监听 新增&#x2F;删除 属性<br>可监听数组变化</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建响应式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reactive</span>(<span class="params">target = &#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> target !== <span class="string">&quot;object&quot;</span> || target == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 不是对象或数组，则返回【只有对象和数组才能实现响应式】</span></span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 代理配置</span></span><br><span class="line">  <span class="keyword">const</span> proxyConf = &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, key, receiver</span>) &#123;</span><br><span class="line">      <span class="comment">// 只处理本身（非原型的）属性</span></span><br><span class="line">      <span class="keyword">const</span> ownKeys = <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(target);</span><br><span class="line">      <span class="keyword">if</span> (ownKeys.<span class="title function_">includes</span>(key)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;get&quot;</span>, key); <span class="comment">// 监听</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> result = <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key, receiver);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 深度监听</span></span><br><span class="line">      <span class="comment">// 性能如何提升的？---&gt;什么时候调用了get，什么时候才进行递归</span></span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">reactive</span>(result);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target, key, val, receiver</span>) &#123;</span><br><span class="line">      <span class="comment">// 重复的数据，不处理</span></span><br><span class="line">      <span class="keyword">if</span> (val === target[key]) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如何判断是否时新增的：</span></span><br><span class="line">      <span class="keyword">const</span> ownKeys = <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(target);</span><br><span class="line">      <span class="keyword">if</span> (ownKeys.<span class="title function_">includes</span>(key)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;已有的 key&quot;</span>, key);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;新增的 key&quot;</span>, key);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> result = <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, val, receiver);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;set&quot;</span>, key, val);</span><br><span class="line">      <span class="comment">// console.log(&#x27;result&#x27;, result) // true</span></span><br><span class="line">      <span class="keyword">return</span> result; <span class="comment">// 是否设置成功</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">deleteProperty</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> result = <span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(target, key);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;delete property&quot;</span>, key);</span><br><span class="line">      <span class="comment">// console.log(&#x27;result&#x27;, result) // true</span></span><br><span class="line">      <span class="keyword">return</span> result; <span class="comment">// 是否删除成功</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 生成代理对象</span></span><br><span class="line">  <span class="keyword">const</span> observed = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, proxyConf);</span><br><span class="line">  <span class="keyword">return</span> observed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试数据</span></span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="attr">info</span>: &#123;</span><br><span class="line">    <span class="attr">city</span>: <span class="string">&quot;beijing&quot;</span>,</span><br><span class="line">    <span class="attr">a</span>: &#123;</span><br><span class="line">      <span class="attr">b</span>: &#123;</span><br><span class="line">        <span class="attr">c</span>: &#123;</span><br><span class="line">          <span class="attr">d</span>: &#123;</span><br><span class="line">            <span class="attr">e</span>: <span class="number">100</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxyData = <span class="title function_">reactive</span>(data);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行proxyData.info时，a这个层级还没有响应式</span></span><br><span class="line"><span class="comment">// 运行proxyData.info.a时，b这个层级还没有响应式</span></span><br><span class="line"><span class="comment">// 获取到哪一层，哪一层才会触发响应式【是一个惰性的】</span></span><br></pre></td></tr></table></figure>

<h6 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h6><p>Proxy 能规避 Object.defineProperty 的问题<br>Proxy 无法兼容所有浏览器，无法 polyfill</p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue原理</title>
    <url>/2019/07/27/Vue/%E3%80%90%E4%B8%93%E9%A2%98%E3%80%912%EF%BC%9AVue%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h5 id="Vue-原理"><a href="#Vue-原理" class="headerlink" title="Vue 原理"></a>Vue 原理</h5><p>组件化和 MVVM<br>响应式原理<br>vdom 和 diff 算法<br>模版编译<br>组件渲染过程<br>前端路由</p>
<h5 id="1-组件化和-MVVM"><a href="#1-组件化和-MVVM" class="headerlink" title="1.组件化和 MVVM"></a>1.组件化和 MVVM</h5><h6 id="1-组件化基础"><a href="#1-组件化基础" class="headerlink" title="1.组件化基础"></a>1.组件化基础</h6><p>“很久以前”就有组件化：</p>
<p>asp jsp php 已经有组件化了<br>nodejs 中也有类似的组件化</p>
<h6 id="2-数据驱动试图（MVVM，setState）"><a href="#2-数据驱动试图（MVVM，setState）" class="headerlink" title="2.数据驱动试图（MVVM，setState）"></a>2.数据驱动试图（MVVM，setState）</h6><p>1).传统组件，只是静态渲染，更新还要依赖于操作 DOM【后端拼接完数据进行渲染，想要改需要操作 DOM 进行更新】<br>2).数据驱动视图–Vue 通过 MVVM 实现数据驱动视图<br>&nbsp;&nbsp;&nbsp;&nbsp;数据驱动视图–React 通过 setState 实现数据驱动视图</p>
<p>数据驱动视图【表示我们不再是自己操作 DOM，而是直接修改 Vue 或者 React 数据，Vue 和 React 框架本身会根据数据重新渲染视图，我们因此可以更加关注数据】</p>
<blockquote>
<p>什么是 MVVM？</p>
</blockquote>
<p>MVVM — M（Model）V（view）VM（ViewModel）：</p>
<p>MVVM 是 Model-View-ViewModel 的缩写。MVVM 是一种设计思想。Model 层代表数据模型，也可以在 Model 中定义数据修改和操作的业务逻辑；View 代表 UI 组件，它负责将数据模型转化成 UI 展现出来，ViewModel 是一个同步 View 和 Model 的对象。</p>
<p>在 MVVM 架构下，View 和 Model 之间并没有直接的联系，而是通过 ViewModel 进行交互，Model 和 ViewModel 之间的交互是双向的， 因此 View 数据的变化会同步到 Model 中，而 Model 数据的变化也会立即反应到 View 上。</p>
<p>ViewModel 通过双向数据绑定把 View 层和 Model 层连接了起来，而 View 和 Model 之间的同步工作完全是自动的，无需人为干涉，因此开发者只需关注业务逻辑，不需要手动操作 DOM, 不需要关注数据状态的同步问题，复杂的数据状态维护完全由 MVVM 来统一管理。</p>
<p><img src="https://cn.vuejs.org/images/mvvm.png" alt="mvvm"></p>
<p>Model 是 vue 组件里的 data 或者 vuex 的数据，<br>在 Model 修改时，能立刻执行 view 的渲染。<br>view 层点击事件，DOM 事件，监听时可修改数据。</p>
<blockquote>
<p>MVC</p>
</blockquote>
<p>nodejs 中使用 MVC 分层开发模式<br>models：数据模型（数据的定义）<br>controller：控制层<br>routes：路由层（只管转发）<br>views：视图层</p>
<h5 id="2-Vue-响应式（考察-Vue-原理的第一题）"><a href="#2-Vue-响应式（考察-Vue-原理的第一题）" class="headerlink" title="2.Vue 响应式（考察 Vue 原理的第一题）"></a>2.Vue 响应式（考察 Vue 原理的第一题）</h5><p>组件 data 的数据一旦变化，立刻触发视图的更新<br>实现数据驱动视图的第一步</p>
<blockquote>
<p>1.核心 API - Object.defineProperty</p>
</blockquote>
<blockquote>
<p>2.如何实现响应式，Object.defineProperty 基本用法代码演示：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> data = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(data, <span class="string">&quot;name&quot;</span>, &#123;</span><br><span class="line">  <span class="comment">//对一个对象定义属性name，可以监听get和set；get时获取一个内容，set时设置内容</span></span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;get&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">newVal</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;set&quot;</span>);</span><br><span class="line">    name = newVal;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="property">name</span>); <span class="comment">//get   zhangsan</span></span><br><span class="line">data.<span class="property">name</span> = <span class="string">&quot;lisi&quot;</span>; <span class="comment">//set</span></span><br></pre></td></tr></table></figure>

<p>Object.defineProperty 实现响应式：<br>监听对象，监听数组<br>复杂对象，深度监听</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 触发更新视图</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">updateView</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;视图更新&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 10.重新定义数组原型</span></span><br><span class="line"><span class="keyword">const</span> oldArrayProperty = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line"><span class="comment">// 11.创建新对象，原型指向 oldArrayProperty ，再扩展新的方法不会影响原型</span></span><br><span class="line"><span class="keyword">const</span> arrProto = <span class="title class_">Object</span>.<span class="title function_">create</span>(oldArrayProperty);</span><br><span class="line">[<span class="string">&quot;push&quot;</span>, <span class="string">&quot;pop&quot;</span>, <span class="string">&quot;shift&quot;</span>, <span class="string">&quot;unshift&quot;</span>, <span class="string">&quot;splice&quot;</span>].<span class="title function_">forEach</span>(<span class="function">(<span class="params">methodName</span>) =&gt;</span> &#123;</span><br><span class="line">  arrProto[methodName] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">updateView</span>(); <span class="comment">// 触发视图更新</span></span><br><span class="line">    oldArrayProperty[methodName].<span class="title function_">call</span>(<span class="variable language_">this</span>, ...<span class="variable language_">arguments</span>); <span class="comment">//执行真正的Array原生方法</span></span><br><span class="line">    <span class="comment">// 相当于Array.prototype.push.call(this, ...arguments)</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.重新定义属性，监听起来</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defineReactive</span>(<span class="params">target, key, value</span>) &#123;</span><br><span class="line">  <span class="comment">// 6.深度监听</span></span><br><span class="line">  <span class="title function_">observer</span>(value);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 7.核心 API</span></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(target, key, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> value;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (newValue !== value) &#123;</span><br><span class="line">        <span class="comment">// 8.对于新设置的值也进行深度监听</span></span><br><span class="line">        <span class="title function_">observer</span>(newValue);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置新值</span></span><br><span class="line">        <span class="comment">// 注意，value 一直在闭包中，此处设置完之后，再 get 时也是会获取最新的值</span></span><br><span class="line">        value = newValue;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 触发更新视图</span></span><br><span class="line">        <span class="title function_">updateView</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.监听对象属性</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">observer</span>(<span class="params">target</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> target !== <span class="string">&quot;object&quot;</span> || target === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 不是对象或数组</span></span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 会污染全局的 Array 原型，所以不可以这样写</span></span><br><span class="line">  <span class="comment">// Array.prototype.push = function () &#123;</span></span><br><span class="line">  <span class="comment">//     updateView()</span></span><br><span class="line">  <span class="comment">//     ...</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//12.如果是数组，target原型赋值成arrProto</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(target)) &#123;</span><br><span class="line">    target.<span class="property">__proto__</span> = arrProto;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4.重新定义各个属性（for in 也可以遍历数组）</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> target) &#123;</span><br><span class="line">    <span class="title function_">defineReactive</span>(target, key, target[key]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.准备数据(相当于vue中的data)</span></span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="attr">info</span>: &#123;</span><br><span class="line">    <span class="attr">address</span>: <span class="string">&quot;北京&quot;</span>, <span class="comment">// 需要深度监听</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">nums</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.监听数据</span></span><br><span class="line"><span class="title function_">observer</span>(data); <span class="comment">//监听后，这个data就是响应式的数据了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="comment">// data.name = &#x27;lisi&#x27;</span></span><br><span class="line"><span class="comment">// data.age = 21</span></span><br><span class="line"><span class="comment">// console.log(&#x27;age&#x27;, data.age)//21</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// data.info.address = &#x27;上海&#x27; // 监听对象-&gt;需要深度监听</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置新值，也需要监听</span></span><br><span class="line"><span class="comment">// data.age = &#123; num:21 &#125;</span></span><br><span class="line"><span class="comment">// data.age.num = 22</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// data.x = &#x27;100&#x27; // 新增属性，监听不到 —— 所以vue2.x中需要使用 Vue.set 去做监听</span></span><br><span class="line"><span class="comment">// delete data.name // 删除属性，监听不到 —— 所以vue2.x中需要使用 Vue.delete 去做监听</span></span><br><span class="line"></span><br><span class="line">data.<span class="property">nums</span>.<span class="title function_">push</span>(<span class="number">4</span>); <span class="comment">// 9.监听数组</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>3.Object.defineProperty 的一些缺点（Vue3.0 启用 Proxy）</p>
</blockquote>
<p>深度监听，需要递归到底，一次性计算量大<br>无法监听新增属性&#x2F;删除属性（Vue.set Vue.delete）<br>无法原生监听数组，需要特殊处理</p>
<p>Proxy 有兼容性问题：<br>Proxy 兼容性不好，且无法 polyfill<br>Vue2.x 还会存在一段时间，所以都得学</p>
<h5 id="3-虚拟-DOM（Virtual-DOM）和-diff-算法"><a href="#3-虚拟-DOM（Virtual-DOM）和-diff-算法" class="headerlink" title="3.虚拟 DOM（Virtual DOM）和 diff 算法"></a>3.虚拟 DOM（Virtual DOM）和 diff 算法</h5><p>vdom 是实现 vue 和 React 的重要基石<br>diff 算法是 vdom 中最核心、最关键的部分</p>
<h6 id="应用背景"><a href="#应用背景" class="headerlink" title="应用背景"></a>应用背景</h6><p>DOM 操作非常耗费性能<br>以前用 JQuery，可以自行控制 DOM 操作的时机，手动调整<br>Vue 和 React 是数据驱动视图，如何有效控制 DOM 操作？</p>
<h6 id="解决方案-vdom"><a href="#解决方案-vdom" class="headerlink" title="解决方案 - vdom"></a>解决方案 - vdom</h6><p>有了一定复杂度，想减少计算次数比较难<br>能不能把计算，更多的转移为 JS 计算？因为 JS 执行速度很快<br>vdom - 用 JS 模拟 DOM 结构，计算出最小的变更，操作 DOM</p>
<h6 id="用-JS-模拟-DOM-结构"><a href="#用-JS-模拟-DOM-结构" class="headerlink" title="用 JS 模拟 DOM 结构"></a>用 JS 模拟 DOM 结构</h6><p>html 是 xml 语言的特殊版本，所有 xml 语言可以用 js 对象&#x2F;json 的方式来表示。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- DOM结构 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>vdom<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 20px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>a<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用JS模拟DOM结构</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">tag</span>:<span class="string">&#x27;div&#x27;</span>,</span><br><span class="line">    <span class="attr">props</span>:&#123;</span><br><span class="line">        <span class="attr">className</span>:<span class="string">&#x27;container&#x27;</span>,</span><br><span class="line">        <span class="attr">id</span>:<span class="string">&#x27;div1&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">tag</span>:<span class="string">&#x27;p&#x27;</span>,</span><br><span class="line">            <span class="attr">children</span>:<span class="string">&#x27;vdom&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">tag</span>:<span class="string">&#x27;ul&#x27;</span>,</span><br><span class="line">            <span class="attr">props</span>:&#123;<span class="attr">style</span>:<span class="string">&#x27;font-size:20px&#x27;</span>&#125;,</span><br><span class="line">            <span class="attr">children</span>:[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">tag</span>:<span class="string">&#x27;li&#x27;</span>,</span><br><span class="line">                    <span class="attr">children</span>:<span class="string">&#x27;a&#x27;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="通过-snabbdom-学习-vdom"><a href="#通过-snabbdom-学习-vdom" class="headerlink" title="通过 snabbdom 学习 vdom"></a>通过 snabbdom 学习 vdom</h6><p>简洁强大的 vdom 库，易学易用<br>Vue 参考它实现的 vdom 和 diff</p>
<p><a href="https://github.com/snabbdom/snabbdom">snabbdom</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">snabbdom源码解读 -- diff算法思路：</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.h函数接收多个参数：sel（字符串），data，children</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">h</span>(<span class="params">sel,data,children</span>)</span><br><span class="line">    <span class="comment">// 2.返回 vnode</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">vnode</span>(sel, data, children, text, <span class="literal">undefined</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// vnode结构源码部分</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">vnode</span> (<span class="attr">sel</span>: string | <span class="literal">undefined</span>,</span><br><span class="line">  <span class="attr">data</span>: any | <span class="literal">undefined</span>,</span><br><span class="line">  <span class="attr">children</span>: <span class="title class_">Array</span>&lt;<span class="title class_">VNode</span> | string&gt; | <span class="literal">undefined</span>,</span><br><span class="line">  <span class="attr">text</span>: string | <span class="literal">undefined</span>,</span><br><span class="line">  <span class="attr">elm</span>: <span class="title class_">Element</span> | <span class="title class_">Text</span> | <span class="literal">undefined</span>): <span class="title class_">VNode</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> key = data === <span class="literal">undefined</span> ? <span class="literal">undefined</span> : data.<span class="property">key</span>;</span><br><span class="line"><span class="comment">// 3.最终返回一个对象；</span></span><br><span class="line">  <span class="comment">// children和text不能共存，要么elm子元素是文本，要么子元素是多个DOM节点；</span></span><br><span class="line">  <span class="comment">// elm：vnode对应的DOM元素，表示渲染到哪个DOM元素上；</span></span><br><span class="line">  <span class="comment">// key所有组件都可以接收key，所有组件都不拒绝key，只是v-for中必须要有</span></span><br><span class="line">  <span class="keyword">return</span> &#123; sel, data, children, text, elm, key &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.返回一个patch函数；（第一个参数可以是vnode或者element元素，第二个参数是vnode）</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">init</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">patch</span>(<span class="params"> oldVnode|Element , vnode </span>)&#123;</span><br><span class="line">        <span class="comment">// 5.cbs表示callbacks；执行 pre hook【lifecycle of DOM nodes,类似生命周期钩子函数】</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="number">6.</span>第一个参数不是 vnode，第一个元素是<span class="variable constant_">DOM</span>元素)&#123;</span><br><span class="line">            <span class="comment">// 7.创建一个空的 vnode ，关联到这个 DOM 元素，不然后面更新不知道更新到哪去</span></span><br><span class="line">            <span class="comment">// 8.把空的vnode和element做绑定</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="number">9.</span>相同的 vnode；则key 和 sel 都相等，表示相等的元素；如果都不传key；<span class="literal">undefined</span> === <span class="literal">undefined</span> <span class="comment">// true )&#123;</span></span><br><span class="line">            <span class="keyword">function</span> <span class="title function_">patchVnode</span>(<span class="params">oldVnode, vnode, insertedVnodeQueue</span>)&#123;<span class="comment">// 12.vnode 对比</span></span><br><span class="line">                <span class="comment">// 13.执行 prepatch hook【类似生命周期钩子函数】</span></span><br><span class="line">                <span class="comment">//14.设置 vnode.elem【将新的vnode的元素设置上旧的vnode.elm】</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">let</span> oldCh = oldVnode.<span class="property">children</span> <span class="keyword">as</span> <span class="title class_">VNode</span>[];</span><br><span class="line">                <span class="keyword">let</span> ch = vnode.<span class="property">children</span> <span class="keyword">as</span> <span class="title class_">VNode</span>[];<span class="comment">// 赋值 旧 children；新 children</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//如果新的vnode和旧的vnode全相等就直接返回</span></span><br><span class="line">                <span class="comment">// 执行hook 相关</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// (一般来说text和children不兼容；)</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="number">15.</span>如果新vnode.<span class="property">text</span>无值)&#123;  <span class="comment">// 一般来说，新vnode.text无值，则新vnode.children 一般有值）</span></span><br><span class="line">                    <span class="keyword">if</span>(新旧都有 children，进行children的对比，如果不相同，进行更新)&#123;</span><br><span class="line">                        <span class="keyword">function</span> <span class="title function_">updateChildren</span>(<span class="params">elm, oldCh, ch, insertedVnodeQueue</span>)&#123;</span><br><span class="line">                            <span class="keyword">if</span>(<span class="comment">// 旧开始和新开始对比)&#123;</span></span><br><span class="line"></span><br><span class="line">                            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="comment">// 旧结束和新结束对比)&#123;</span></span><br><span class="line"></span><br><span class="line">                            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="comment">// 旧开始和新结束对比)&#123;</span></span><br><span class="line"></span><br><span class="line">                            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="comment">// 旧结束和新开始对比)&#123;</span></span><br><span class="line"></span><br><span class="line">                            &#125;<span class="keyword">else</span>&#123;<span class="comment">// 以上四个都未命中</span></span><br><span class="line">                                <span class="comment">// 拿新节点 key ，能否对应上 oldCh 中的某个节点的 key</span></span><br><span class="line">                                <span class="keyword">if</span>(<span class="comment">// key没对应上)&#123;</span></span><br><span class="line">                                    <span class="comment">// New element，重建或者插入一个新的节点</span></span><br><span class="line">                                &#125;<span class="keyword">else</span>&#123;<span class="comment">// key对应上了</span></span><br><span class="line">                                    <span class="comment">// 判断sel 是否相等（sameVnode 的条件）</span></span><br><span class="line">                                    <span class="keyword">if</span>(elmToMove.<span class="property">sel</span> !== newStartVnode.<span class="property">sel</span> -- 不相等)&#123;</span><br><span class="line">                                        <span class="comment">// New element</span></span><br><span class="line">                                    &#125;<span class="title function_">else</span>(<span class="params">sel 相等，key 相等</span>)&#123;</span><br><span class="line">                                        <span class="comment">// 则patchVnode</span></span><br><span class="line">                                        <span class="comment">//指针累加</span></span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(新 children 有，旧 children 无 （旧 text 有）)&#123;</span><br><span class="line">                        <span class="comment">// 清空 text</span></span><br><span class="line">                        <span class="comment">// 添加 children</span></span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(旧 child 有，新 child 无)&#123;</span><br><span class="line">                        <span class="comment">// 移除 children</span></span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(旧 text 有)&#123;</span><br><span class="line">                        <span class="comment">//清空旧text</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="comment">//省略----vnode.text有值（vnode.children 无值）)&#123;</span></span><br><span class="line"></span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">16.</span>新vnode.<span class="property">text</span>有值，还和旧的oldVnode.<span class="property">text</span>不一样，则下述操作直接移除旧的)&#123;</span><br><span class="line">                    <span class="comment">// 移除旧 children</span></span><br><span class="line">                    <span class="comment">// 设置新 text</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="number">10.</span>不同的 vnode ，直接删掉重建</span><br><span class="line">            <span class="comment">//11.重建</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Vue3.0 重写了 vdom 的代码，优化了性能<br>但 vdom 的基本理念不变，面试考点也不变<br>React vdom 具体实现和 Vue 也不同，但不妨碍统一学习</p>
<h6 id="diff-算法"><a href="#diff-算法" class="headerlink" title="diff 算法"></a>diff 算法</h6><p>diff 算法是 vdom 中最核心、最关键的部分<br>diff 算法能在日常使用 vue React 中体现出来（如 key）</p>
<p>diff 即对比，并不是 vdom 独创的，是一个广泛的概念，如 linux diff 命令、git diff 等<br>两个 js 对象也可以做 diff，如 <a href="https://github.com/cujojs/jiff">jiff</a><br>两棵树做 diff，如这里的 vdom diff</p>
<h6 id="树-diff-的时间复杂度-O-n-3"><a href="#树-diff-的时间复杂度-O-n-3" class="headerlink" title="树 diff 的时间复杂度 O(n^3)"></a>树 diff 的时间复杂度 O(n^3)</h6><ul>
<li>第一，遍历 tree1；第二，遍历 tree2</li>
<li>第三，排序</li>
<li>1000 个节点，要计算 1 亿次，算法不可用</li>
</ul>
<h6 id="优化时间复杂度到-O-n"><a href="#优化时间复杂度到-O-n" class="headerlink" title="优化时间复杂度到 O(n)"></a>优化时间复杂度到 O(n)</h6><ul>
<li>只比较同一层级，不跨级比较</li>
<li>tag 不相同，则直接删掉重建，不再深度比较</li>
<li>tag 和 key，两者都相同，则认为是相同节点，不再深度比较</li>
</ul>
<h6 id="diff-算法总结"><a href="#diff-算法总结" class="headerlink" title="diff 算法总结"></a>diff 算法总结</h6><p>patchVnode<br>addVnodes removeVnodes<br>updateChildren(key 的重要性)</p>
<h6 id="vdom-和-diff-总结"><a href="#vdom-和-diff-总结" class="headerlink" title="vdom 和 diff - 总结"></a>vdom 和 diff - 总结</h6><p>vdom 核心概念：h、vnode、patch、diff、key 等<br>vdom 存在的价值：数据驱动视图，控制 DOM 操作</p>
<blockquote>
<p>问：为何不推荐 index 作为 key 值？</p>
</blockquote>
<p>当以数组为下标的 index 作为 key 值时，其中一个元素(例如增删改查)发生了变化就有可能导致所有的元素的 key 值发生改变 diff 算法时比较同级之间的不同，<br>以 key 来进行关联，当对数组进行下标的变换时，比如删除第一条数据，那么以后所有的 index 都会发生改变，那么 key 自然也跟着全部发生改变，<br>所以 index 作为 key 值是不稳定的，而这种不稳定性有可能导致性能的浪费，导致 diff 无法关联起上一次一样的数据。<br>因此，能不使用 index 作为 key 就不使用 index。</p>
<h5 id="4-模版编译"><a href="#4-模版编译" class="headerlink" title="4.模版编译"></a>4.模版编译</h5><p>模板是 vue 开发中最常用的部分，即与使用相关联的原理</p>
<p>1).前置知识：JS 的 with 语法</p>
<ul>
<li>改变{}内自由变量的查找规则，当作 obj 属性来查找</li>
<li>如果找不到匹配的 obj 属性，就会报错</li>
<li>with 要慎用，它打破了作用域规则，易读性变差</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">100</span>, <span class="attr">b</span>: <span class="number">200</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">a</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">b</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">c</span>); <span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用with，能改变&#123;&#125;内自由变量的查找方式</span></span><br><span class="line"><span class="comment">//将&#123;&#125;内自由变量，当作obj的属性来查找</span></span><br><span class="line"><span class="keyword">with</span> (obj) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">//会报错！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2).vue template complier 将模板编译为 render 函数</p>
<p>模版不是 html，有指令、插值、JS 表达式，能实现判断、循环<br>html 是标签语言，只有 JS 才能实现判断、循环（图灵完备的：能执行顺序执行，循环，判断）<br>因此，模板一定是转换为某种 JS 代码，即模板编译</p>
<blockquote>
<p>编译模板：</p>
</blockquote>
<ul>
<li>模板编译为 render 函数，执行 render 函数返回 vnode</li>
<li>基于 vnode 再执行 pathc 和 diff</li>
<li>使用 webpack vue-loader,会在开发环境下编译模板（重要）,产出的代码都是编译过后的</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> compiler = <span class="built_in">require</span>(<span class="string">&quot;vue-template-compiler&quot;</span>);</span><br><span class="line"><span class="comment">// h(&#x27;p&#x27;,&#123;p标签属性&#125;,[...p标签子元素])函数</span></span><br><span class="line"><span class="comment">// h -&gt; 返回vnode</span></span><br><span class="line"><span class="comment">// createElement -&gt; 返回vnode</span></span><br><span class="line"><span class="comment">//_c=createElement其实就是h函数; _v = createTextVNode; _s = toString;_l = renderList;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// // 从 vue 源码中找到缩写函数的含义</span></span><br><span class="line"><span class="comment">// function installRenderHelpers (target) &#123;</span></span><br><span class="line"><span class="comment">//     target._o = markOnce;</span></span><br><span class="line"><span class="comment">//     target._n = toNumber;</span></span><br><span class="line"><span class="comment">//     target._s = toString;</span></span><br><span class="line"><span class="comment">//     target._l = renderList;</span></span><br><span class="line"><span class="comment">//     target._t = renderSlot;</span></span><br><span class="line"><span class="comment">//     target._q = looseEqual;</span></span><br><span class="line"><span class="comment">//     target._i = looseIndexOf;</span></span><br><span class="line"><span class="comment">//     target._m = renderStatic;</span></span><br><span class="line"><span class="comment">//     target._f = resolveFilter;</span></span><br><span class="line"><span class="comment">//     target._k = checkKeyCodes;</span></span><br><span class="line"><span class="comment">//     target._b = bindObjectProps;</span></span><br><span class="line"><span class="comment">//     target._v = createTextVNode;</span></span><br><span class="line"><span class="comment">//     target._e = createEmptyVNode;</span></span><br><span class="line"><span class="comment">//     target._u = resolveScopedSlots;</span></span><br><span class="line"><span class="comment">//     target._g = bindObjectListeners;</span></span><br><span class="line"><span class="comment">//     target._d = bindDynamicKeys;</span></span><br><span class="line"><span class="comment">//     target._p = prependModifier;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ---------------分割线--------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 插值</span></span><br><span class="line"><span class="comment">// const template = `&lt;p&gt;&#123;&#123;message&#125;&#125;&lt;/p&gt;`</span></span><br><span class="line"><span class="comment">// 执行结果： with(this)&#123;return createElement(&#x27;p&#x27;,[createTextVNode(toString(message))])&#125;   返回vnode</span></span><br><span class="line"><span class="comment">//这里的this就是const vm = new Vue(&#123;...&#125;),这个vm实例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 表达式</span></span><br><span class="line"><span class="comment">// const template = `&lt;p&gt;&#123;&#123;flag ? message : &#x27;no message found&#x27;&#125;&#125;&lt;/p&gt;`</span></span><br><span class="line"><span class="comment">// 执行结果： with(this)&#123;return _c(&#x27;p&#x27;,[_v(_s(flag ? message : &#x27;no message found&#x27;))])&#125;  返回的还是vnode</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 属性和动态属性</span></span><br><span class="line"><span class="comment">// const template = `</span></span><br><span class="line"><span class="comment">//     &lt;div id=&quot;div1&quot; class=&quot;container&quot;&gt;</span></span><br><span class="line"><span class="comment">//         &lt;img :src=&quot;imgUrl&quot;/&gt;</span></span><br><span class="line"><span class="comment">//     &lt;/div&gt;</span></span><br><span class="line"><span class="comment">// `</span></span><br><span class="line"><span class="comment">// 执行结果：with(this)&#123;return _c(&#x27;div&#x27;,&#123;staticClass:&quot;container&quot;,attrs:&#123;&quot;id&quot;:&quot;div1&quot;&#125;&#125;,[_c(&#x27;img&#x27;,&#123;attrs:&#123;&quot;src&quot;:imgUrl&#125;&#125;)])&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 条件</span></span><br><span class="line"><span class="comment">// const template = `</span></span><br><span class="line"><span class="comment">//     &lt;div&gt;</span></span><br><span class="line"><span class="comment">//         &lt;p v-if=&quot;flag === &#x27;a&#x27;&quot;&gt;A&lt;/p&gt;</span></span><br><span class="line"><span class="comment">//         &lt;p v-else&gt;B&lt;/p&gt;</span></span><br><span class="line"><span class="comment">//     &lt;/div&gt;</span></span><br><span class="line"><span class="comment">// `</span></span><br><span class="line"><span class="comment">// 执行结果：with(this)&#123;return _c(&#x27;div&#x27;,[(flag === &#x27;a&#x27;)?_c(&#x27;p&#x27;,[_v(&quot;A&quot;)]):_c(&#x27;p&#x27;,[_v(&quot;B&quot;)])])&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环</span></span><br><span class="line"><span class="comment">// const template = `</span></span><br><span class="line"><span class="comment">//     &lt;ul&gt;</span></span><br><span class="line"><span class="comment">//         &lt;li v-for=&quot;item in list&quot; :key=&quot;item.id&quot;&gt;&#123;&#123;item.title&#125;&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">//     &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">// `</span></span><br><span class="line"><span class="comment">// 执行结果：with(this)&#123;return _c(&#x27;ul&#x27;,_l((list),function(item)&#123;return _c(&#x27;li&#x27;,&#123;key:item.id&#125;,[_v(_s(item.title))])&#125;),0)&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件</span></span><br><span class="line"><span class="comment">// const template = `</span></span><br><span class="line"><span class="comment">//     &lt;button @click=&quot;clickHandler&quot;&gt;submit&lt;/button&gt;</span></span><br><span class="line"><span class="comment">// `</span></span><br><span class="line"><span class="comment">// 执行结果：with(this)&#123;return _c(&#x27;button&#x27;,&#123;on:&#123;&quot;click&quot;:clickHandler&#125;&#125;,[_v(&quot;submit&quot;)])&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// v-model</span></span><br><span class="line"><span class="keyword">const</span> template = <span class="string">`&lt;input type=&quot;text&quot; v-model=&quot;name&quot;&gt;`</span>;</span><br><span class="line"><span class="comment">//  执行结果：</span></span><br><span class="line"><span class="comment">// with(this)&#123;</span></span><br><span class="line"><span class="comment">//     return _c(</span></span><br><span class="line"><span class="comment">//         &#x27;input&#x27;,</span></span><br><span class="line"><span class="comment">//         &#123;</span></span><br><span class="line"><span class="comment">//             directives:[</span></span><br><span class="line"><span class="comment">//                 &#123;name:&quot;model&quot;,</span></span><br><span class="line"><span class="comment">//                 rawName:&quot;v-model&quot;,</span></span><br><span class="line"><span class="comment">//                 value:(name),</span></span><br><span class="line"><span class="comment">//                 expression:&quot;name&quot;&#125;</span></span><br><span class="line"><span class="comment">//             ],</span></span><br><span class="line"><span class="comment">//             attrs:&#123;</span></span><br><span class="line"><span class="comment">//                 &quot;type&quot;:&quot;text&quot;</span></span><br><span class="line"><span class="comment">//             &#125;,</span></span><br><span class="line"><span class="comment">//             domProps:&#123;</span></span><br><span class="line"><span class="comment">//                 &quot;value&quot;:(name)</span></span><br><span class="line"><span class="comment">//             &#125;,</span></span><br><span class="line"><span class="comment">//             on:&#123;</span></span><br><span class="line"><span class="comment">//                 &quot;input&quot;:function($event)&#123;                // 主要看 input 事件</span></span><br><span class="line"><span class="comment">//                     if($event.target.composing)return;</span></span><br><span class="line"><span class="comment">//                     name=$event.target.value;            //input事件的值赋值给name</span></span><br><span class="line"><span class="comment">//                 &#125;</span></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     )</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// 请描述v-model双向数据绑定原理：</span></span><br><span class="line"><span class="comment">// 通过这个模板生成input并渲染时，挂载了一个input事件。</span></span><br><span class="line"><span class="comment">// 执行这个事件时，将当前input event的值赋值给name。</span></span><br><span class="line"><span class="comment">// 通过with语法，这个name就是这个实例的name，显示的时候就是显示this.name</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译</span></span><br><span class="line"><span class="keyword">const</span> res = compiler.<span class="title function_">compile</span>(template);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">render</span>); <span class="comment">//使用node index.js运行</span></span><br></pre></td></tr></table></figure>

<p>3).执行 render 函数生成 vnode</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">vue组件中使用render代替template</span><br><span class="line"></span><br><span class="line">在有些复杂情况中，不能用template，可以考虑用render</span><br><span class="line"><span class="title class_">React</span>一直都用render（没有模板，和这里一样）</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;heading&#x27;</span>,&#123;</span><br><span class="line">    <span class="comment">//template:&#x27;xxx&#x27;,</span></span><br><span class="line">    <span class="attr">render</span>:<span class="keyword">function</span>(<span class="params">createElement</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">createElement</span>(</span><br><span class="line">            <span class="string">&#x27;h&#x27;</span>+<span class="variable language_">this</span>.<span class="property">level</span>,</span><br><span class="line">            [</span><br><span class="line">                <span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>,&#123;</span><br><span class="line">                    <span class="attr">attrs</span>:&#123;</span><br><span class="line">                        <span class="attr">name</span>:<span class="string">&#x27;headerId&#x27;</span>,</span><br><span class="line">                        <span class="attr">href</span>:<span class="string">&#x27;#&#x27;</span> + <span class="string">&#x27;headerId&#x27;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,<span class="string">&#x27;this is a tag&#x27;</span>)</span><br><span class="line">            ]</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h6 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h6><ul>
<li>with 语法</li>
<li>模板到 render 函数，再到 vnode，再到渲染和更新</li>
<li>vue 组件可以用 render 代替 template</li>
</ul>
<blockquote>
<p>Vue 原理的三大模块</p>
</blockquote>
<p>一、响应式：监听 data 属性 getter setter（包括数组）<br>二、模板编译：模板到 render 函数，再到 vnode<br>三、vdom:patch(elem,vnode)和 patch(vnode,newVnode)<br>【渲染过程是对上面 3 点的总结，组件化是对整个设计理念的通讲，前端路由的原理则是刨析 vue-router 路由方式】</p>
<h5 id="5-组件-渲染-更新-过程"><a href="#5-组件-渲染-更新-过程" class="headerlink" title="5.组件 渲染&#x2F;更新 过程"></a>5.组件 渲染&#x2F;更新 过程</h5><p>一个组件渲染到页面，修改 data 触发更新（数据驱动视图）</p>
<p>1).初次渲染过程【怎么把模板渲染到页面上】</p>
<ul>
<li>解析模板为 render 函数（或在开发环境已完成，使用 vue-loader；如果是做小 demo，自己引入 vue.js，自己写模板，这一步也可能在浏览器中执行）</li>
<li>触发响应式，监听 data 属性 getter setter</li>
<li>执行 render 函数，（此时已经执行监听 data 的 getter 函数），生成 vnode，再执行 patch(elem,vnode)</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;&#123;&#123;message&#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    export default&#123;</span></span><br><span class="line"><span class="language-xml">        data()&#123;</span></span><br><span class="line"><span class="language-xml">            return &#123;</span></span><br><span class="line"><span class="language-xml">                message:&#x27;hello,//修改message，会触发get</span></span><br><span class="line"><span class="language-xml">                city:&#x27;北京&#x27;//修改city，不会触发get，因为模板没有用到，即和视图没关系</span></span><br><span class="line"><span class="language-xml">            &#125;</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>2).更新过程【data 修改后，怎么更新】</p>
<ul>
<li>修改 data，触发 setter（此前在 getter 中已被监听）</li>
<li>重新执行 render 函数，生成 newVnode</li>
<li>patch(vnode,newVnode)</li>
</ul>
<p><img src="https://cn.vuejs.org/images/data.png" alt="data"></p>
<p>3).异步渲染【只有异步才能满足性能要求】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.回顾$nextTick:</span><br><span class="line">  Vue是异步渲染,data改变之后，DOM不会立刻渲染;</span><br><span class="line">  $nextTick会在DOM渲染之后被触发，以获取最新DOM节点</span><br><span class="line">2.汇总data的修改，一次性更新视图</span><br><span class="line">3.减少DOM操作次数，提高性能</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;ul ref=&quot;ul1&quot;&gt;</span><br><span class="line">      &lt;li v-for=&quot;(item, index) in list&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">        &#123;&#123; item &#125;&#125;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;button @click=&quot;addItem&quot;&gt;添加一项&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;app&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      list: [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    addItem() &#123;</span><br><span class="line">      this.list.push(`$&#123;Date.now()&#125;`);</span><br><span class="line">      this.list.push(`$&#123;Date.now()&#125;`);</span><br><span class="line">      this.list.push(`$&#123;Date.now()&#125;`);</span><br><span class="line"></span><br><span class="line">      // 通过ref来获取DOM元素</span><br><span class="line">      // 1. 异步渲染，$nextTick 待 DOM 渲染完再回调</span><br><span class="line">      // 2. 页面渲染时会将 data 的修改做整合，多次 data 修改只会渲染一次【异步渲染，不管修改多少次，$nextTick只会执行一次】</span><br><span class="line">      // （同步整合的话，改一次就要渲染一次）</span><br><span class="line"></span><br><span class="line">      this.$nextTick(() =&gt; &#123;</span><br><span class="line">        // 获取 DOM 元素</span><br><span class="line">        const ulElem = this.$refs.ul1;</span><br><span class="line">        console.log(ulElem.childNodes.length);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h5 id="6-前端路由原理"><a href="#6-前端路由原理" class="headerlink" title="6.前端路由原理"></a>6.前端路由原理</h5><p>稍微复杂一点的 SPA，都需要路由<br>vue-router 也是全家桶的标配之一</p>
<h6 id="回顾-vue-router-的路由模式"><a href="#回顾-vue-router-的路由模式" class="headerlink" title="回顾 vue-router 的路由模式"></a>回顾 vue-router 的路由模式</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">网页url组成部分：</span><br><span class="line"><span class="comment">//http://127.0.0.1:8881/01-hash.html?a=100&amp;b=20#/aaa/bbb</span></span><br><span class="line">location.<span class="property">protocol</span>       <span class="comment">//&#x27;http:&#x27;</span></span><br><span class="line">location.<span class="property">hostname</span>       <span class="comment">//&#x27;127.0.0.1&#x27;</span></span><br><span class="line">location.<span class="property">host</span>           <span class="comment">//&#x27;127.0.0.1:8881&#x27;</span></span><br><span class="line">location.<span class="property">port</span>           <span class="comment">//&#x27;8881&#x27;</span></span><br><span class="line">location.<span class="property">pathname</span>       <span class="comment">//&#x27;01-hash.html&#x27;</span></span><br><span class="line">location.<span class="property">search</span>         <span class="comment">//&#x27;?a=100&amp;b=200&#x27;</span></span><br><span class="line">location.<span class="property">hash</span>           <span class="comment">//&#x27;#/aaa/bbb&#x27;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>hash 的特点</p>
</blockquote>
<p>hash 变化会触发网页跳转，即浏览器的前进、后退<br>hash 变化不会刷新页面，SPA 必需的特点<br>hash 永远不会提交到 server 端（前端自生自灭）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>hash test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>hash test<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>修改 hash<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// hash 变化，包括：</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// a. JS 修改 url</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// b. 手动修改 url 的 hash</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// c. 浏览器前进、后退</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="property">onhashchange</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;old url&quot;</span>, event.<span class="property">oldURL</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;new url&quot;</span>, event.<span class="property">newURL</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hash:&quot;</span>, location.<span class="property">hash</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 页面初次加载，获取 hash</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hash:&quot;</span>, location.<span class="property">hash</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// JS 修改 url</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn1&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        location.<span class="property">href</span> = <span class="string">&quot;#/user&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>H5 history（<a href="https://router.vuejs.org/zh/guide/essentials/history-mode.html">需要后端支持</a>)</p>
</blockquote>
<p>用 url 规范的路由(用户看不出来是前端路由还是后端路由)，但跳转时不刷新页面<br>通过以下两个方法来实现 H5 history：<br>history.pushState<br>window.onpopstate</p>
<p>正常页面浏览：<br><code>https://github.com/xxx  刷新页面</code><br><code>https://github.com/xxx/yyy  刷新页面</code><br><code>https://github.com/xxx/yyy/zzz  刷新页面</code></p>
<p>改造成 H5 history 模式：<br><code>https://github.com/xxx  刷新页面</code><br><code>https://github.com/xxx/yyy  前端跳转，不刷新页面</code><br><code>https://github.com/xxx/yyy/zzz  前端跳转，不刷新页面</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>history API test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>history API test<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>修改 url<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 页面初次加载，获取 path</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;load&quot;</span>, location.<span class="property">pathname</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 打开一个新的路由</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 【注意】用 pushState 方式，浏览器不会刷新页面</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn1&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> state = &#123; <span class="attr">name</span>: <span class="string">&quot;page1&quot;</span> &#125;;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;切换路由到&quot;</span>, <span class="string">&quot;page1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        history.<span class="title function_">pushState</span>(state, <span class="string">&quot;&quot;</span>, <span class="string">&quot;page1&quot;</span>); <span class="comment">// 重要！！ 第三个参数表示切换路由到page1</span></span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 监听浏览器前进、后退</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="property">onpopstate</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 重要！！</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;onpopstate&quot;</span>, event.<span class="property">state</span>, location.<span class="property">pathname</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 需要 server 端配合，可参考</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// https://router.vuejs.org/zh/guide/essentials/history-mode.html#%E5%90%8E%E7%AB%AF%E9%85%8D%E7%BD%AE%E4%BE%8B%E5%AD%90</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结</p>
</blockquote>
<p>hash - 通过 window.onhashchange 来监听<br>H5 history - 通过 history.pushState 和 window.onpopstate 来监听实现的<br>H5 history 需要后端支持</p>
<blockquote>
<p>两种如何选择</p>
</blockquote>
<p>to B 的系统【管理系统】推荐用 hash，简单易用，对 url 规范不敏感<br>to C 的系统，可以考虑选择 H5 history，但需要服务端支持<br>能选择简单的，就别用复杂的，要考虑成本和收益</p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 面试真题</title>
    <url>/2019/07/28/Vue/%E3%80%90%E4%B8%93%E9%A2%98%E3%80%913%EF%BC%9AVue-%E9%9D%A2%E8%AF%95%E7%9C%9F%E9%A2%98/</url>
    <content><![CDATA[<blockquote>
<p>问：v-show 和 v-if 的区别？</p>
</blockquote>
<p>v-show 通过 CSS display 控制显示和隐藏<br>v-if 组件真正的渲染和销毁，而不是显示和隐藏<br>频繁切换显示状态用 v-show，否则用 v-if</p>
<blockquote>
<p>问：为何 v-for 中要用 key？</p>
</blockquote>
<p>必须用 key，且不能是 index 和 random<br>diff 算法中通过 tag 和 key 来判断，是否是 sameNode<br>减少渲染次数，提升渲染性能</p>
<blockquote>
<p>问：描述 Vue 组件生命周期（有父子组件的情况）</p>
</blockquote>
<p>单组件生命周期图<br>父子组件生命周期关系</p>
<p><a href="https://segmentfault.com/a/1190000011381906">lifecycle</a></p>
<blockquote>
<p>问：Vue 组件如何通讯？</p>
</blockquote>
<p>父子组件 props 和 this.$emit<br>自定义事件 event.$no event.$off event.$emit<br>vuex</p>
<blockquote>
<p>问：描述组件渲染和更新的过程</p>
</blockquote>
<p><img src="https://cn.vuejs.org/images/data.png" alt="data"></p>
<p>流程：<br>执行 render 函数时，触发 Touch，触发 getter 之后收集依赖到 watcher，<br>在触发 data 更改时，会触发 setter，会通知 notify watcher，看之前是否收集过，收集过就触发 re-render，触发重新渲染</p>
<p>vue 原理的三大模块：<br>一、响应式：监听 data 属性 getter setter（包括数组）<br>二、模板编译：模板到 render 函数，再到 vnode<br>三、vdom:patch(elem,vnode)和 patch(vnode,newVnode)</p>
<p><a href="https://github.com/snabbdom/snabbdom">snabbdom</a></p>
<p>【渲染过程是对上面 3 点的总结，组件化是对整个设计理念的通讲，前端路由是对 vue-router 路由方式的原理讲解】</p>
<blockquote>
<p>问：双向数据绑定 v-model 的实现原理</p>
</blockquote>
<p>input 元素的 value &#x3D; this.name<br>绑定 input 事件 this.name&#x3D; $event.target.value<br>data 更新触发 re-render</p>
<blockquote>
<p>问：对 MVVM 的理解</p>
</blockquote>
<p>数据驱动试图（MVVM，setState）：<br>传统组件，只是静态渲染，更新还要依赖于操作 DOM【后端拼接完数据进行渲染，想要改需要操作 DOM 进行更新】<br>数据驱动视图–Vue 通过 MVVM 实现数据驱动视图<br>数据驱动视图–React 通过 setState 实现数据驱动视图<br>数据驱动视图【表示我们不再是自己操作 DOM，而是直接修改 Vue 或者 React 数据，Vue 和 React 框架本身会根据数据重新渲染视图，我们因此可以更加关注数据】</p>
<p>MVVM — M（Model）V（view）VM（ViewModel）：</p>
<p><img src="https://cn.vuejs.org/images/mvvm.png" alt="mvvm"></p>
<p>Model 是 vue 组件里的 data 或者 vuex 的数据，<br>在 Model 修改时，能立刻执行 view 的渲染。<br>view 层点击事件，DOM 事件，监听时可修改数据。</p>
<blockquote>
<p>问：computed 有何特点？</p>
</blockquote>
<p>缓存，data 不变不会重新计算<br>合理使用 computed 可以提高性能</p>
<blockquote>
<p>问：为何组件 data 必须是一个函数？</p>
</blockquote>
<p>vue 组件中 data 值不能为对象，因为对象是引用类型，组件可能会被多个实例同时引用。<br>如果 data 值为对象，将导致多个实例共享一个对象，其中一个组件改变 data 属性值，其他实例也会受到影响<br>vue 组件 data 为函数的原因，data 为函数，通过 return 返回对象的拷贝，致使每个实例都有自己独立的对象，实例之间可以互不影响的改变 data 属性值</p>
<p>总结：<br>1.vue 中组件是用来复用的，为了防止 data 复用，将其定义为函数。</p>
<p>2.vue 组件中的 data 数据都应该是相互隔离，互不影响的，组件每复用一次，data 数据就应该被复制一次，之后，当某一处复用的地方组件内 data 数据被改变时，其他复用地方组件的 data 数据不受影响，就需要通过 data 函数返回一个对象作为组件的状态。</p>
<p>3.当我们将组件中的 data 写成一个函数，数据以函数返回值形式定义，这样每复用一次组件，就会返回一份新的 data，拥有自己的作用域，类似于给每个组件实例创建一个私有的数据空间，让各个组件实例维护各自的数据。</p>
<p>4.当我们组件的 date 单纯的写成对象形式，这些实例用的是同一个构造函数，由于 JavaScript 的特性所导致，所有的组件实例共用了一个 data，就会造成一个变了全都会变的结果。</p>
<blockquote>
<p>问：ajax 请求应该放在哪个生命周期？</p>
</blockquote>
<p>mounted<br>JS 是单线程的，ajax 异步获取数据<br>放在 mounted 之前没有用，只会让逻辑更加混乱</p>
<blockquote>
<p>为什么不在 created 里去发 ajax？created 可是比 mounted 更早调用啊，更早调用意味着更早返回结果，那样性能不是更高？</p>
</blockquote>
<ul>
<li>首先，一个组件的 created 比 mounted 也早调用不了几微秒，性能没啥提高；</li>
<li>而且，等到异步渲染开启的时候，created 就可能被中途打断，中断之后渲染又要重做一遍，想一想，在 created 中做 ajax 调用，代码里看到只有调用一次，但是实际上可能调用 N 多次，这明显不合适。<br>相反，若把发 ajax 放在 mounted，因为 mounted 在第二阶段，所以绝对不会多次重复调用，这才是 ajax 合适的位置.</li>
<li>在 created 的时候，视图中的 dom 并没有被渲染出来，所以此时如果直接去操作 dom 节点，无法找到相关元素。<br>在 mounted 中，由于此时的 dom 元素已经渲染出来了，所以可以直接使用 dom 节点。</li>
<li>一般情况下，都放在 mounted 中，保证逻辑的统一性。因为生命周期是同步执行的，ajax 是异步执行的。<br>服务端渲染不支持 mounted 方法，所以在服务端渲染的情况下统一放在 created 中。</li>
</ul>
<blockquote>
<p>问：如何将组件所有 props 传递给子组件？</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$props</span><br><span class="line">&lt;User v-bind=&quot;$props&quot;/&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>问：如何自己实现 v-model？</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 例如：vue 颜色选择 --&gt;</span><br><span class="line">  &lt;input</span><br><span class="line">    type=&quot;text&quot;</span><br><span class="line">    :value=&quot;text1&quot;</span><br><span class="line">    @input=&quot;$emit(&#x27;change1&#x27;, $event.target.value)&quot;</span><br><span class="line">  /&gt;</span><br><span class="line">  &lt;!--</span><br><span class="line">        1. 上面的 input 使用了 :value 而不是 v-model</span><br><span class="line">        2. 上面的 change1 和 model.event 要对应起来</span><br><span class="line">        3. text1 属性对应起来</span><br><span class="line">    --&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  model: &#123;</span><br><span class="line">    prop: &quot;text1&quot;, // 对应 props text1</span><br><span class="line">    event: &quot;change1&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    text1: String,</span><br><span class="line">    default() &#123;</span><br><span class="line">      return &quot;&quot;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>问：多个组件有相同的逻辑，如何抽离？</p>
</blockquote>
<p>mixin</p>
<p>以及 mixin 的一些缺点：<br>变量来源不明确，不利于阅读<br>多 mixin 可能会造成命名冲突<br>mixin 和组件可能出现多对多的关系，复杂度较高</p>
<blockquote>
<p>问：何时要使用异步组件？</p>
</blockquote>
<p>加载大组件<br>路由异步加载<br>优化性能</p>
<blockquote>
<p>问：何时使用 keep-alive？</p>
</blockquote>
<p>缓存组件，不需要重复渲染<br>如多个静态 tab 页的切换<br>优化性能</p>
<blockquote>
<p>问：何时需要使用 beforeDestory?</p>
</blockquote>
<p>解绑自定义事件 event.$off 【防止内存泄漏】<br>清除定时器<br>解绑自定义的 DOM 事件【如 addEventListener 事件】，如 window scroll 等</p>
<blockquote>
<p>问：什么是作用域插槽？</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//index.vue:</span><br><span class="line">&lt;ScopedSlotDemo :url=&quot;website.url&quot;&gt;</span><br><span class="line">    &lt;template v-slot=&quot;slotProps2&quot;&gt;&lt;!--2.--&gt;</span><br><span class="line">        &#123;&#123;slotProps2.slotData1.title&#125;&#125;&lt;!--3.--&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/ScopedSlotDemo&gt;</span><br><span class="line"></span><br><span class="line">//ScopedSlotDemo:</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;a :href=&quot;url&quot;&gt;</span><br><span class="line">    &lt;slot :slotData1=&quot;website&quot;</span><br><span class="line">      &gt;&lt;!--1.--&gt;</span><br><span class="line">      &#123;&#123; website.subTitle &#125;&#125;</span><br><span class="line">      &lt;!-- 默认值显示 subTitle(轻量级富文本编辑器) ，即父组件不传内容时 --&gt;</span><br><span class="line">    &lt;/slot&gt;</span><br><span class="line">  &lt;/a&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: [&quot;url&quot;],</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      website: &#123;</span><br><span class="line">        url: &quot;http://wangEditor.com/&quot;,</span><br><span class="line">        title: &quot;wangEditor&quot;,</span><br><span class="line">        subTitle: &quot;轻量级富文本编辑器&quot;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>问：Vue 中 action 和 mutation 有和区别？</p>
</blockquote>
<p>action 中处理异步，mutation 不可以<br>mutation 做原子操作【每次都只做 1 个操作】<br>action 可以整合多个 mutation</p>
<blockquote>
<p>问：Mutation 不能使用异步函数，为什么？</p>
</blockquote>
<p><a href="https://www.jianshu.com/p/d071e205b249?utm_campaign=maleskine&utm_content=note&utm_medium=seo_notes&utm_source=recommendation">Mutation 不能使用异步函数</a></p>
<blockquote>
<p>问：Vue-router 常用的路由模式</p>
</blockquote>
<p>hash 模式（默认），如<a href="http://abc.com/#/user/10">http://abc.com/#/user/10</a><br>H5 history 模式，如<a href="http://abc.com/user/20">http://abc.com/user/20</a><br>后者需要 server 端支持，因此无特殊需求可选择前者</p>
<blockquote>
<p>问：请描述一下前端路由的实现原理</p>
</blockquote>
<p><a href="https://www.cnblogs.com/limitcode/p/12424699.html">前端路由的实现原理</a></p>
<blockquote>
<p>问：如何配置 Vue-router 异步加载？</p>
</blockquote>
<p>Vue-router 路由配置 动态路由:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="comment">// 获取参数 如10 20</span></span><br><span class="line">  <span class="attr">template</span>: <span class="string">&quot;&lt;div&gt;User &#123;&#123;$route.params.id&#125;&#125;&lt;/div&gt;&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    <span class="comment">//动态路径参数 以冒号开头。能命中`/user/10` `/user/20`等格式的路由</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&quot;/user/:id&quot;</span>, <span class="attr">component</span>: <span class="title class_">User</span> &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>Vue-router 路由配置 懒加载:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span></span><br><span class="line">        <span class="keyword">import</span>(</span><br><span class="line">          <span class="comment">/* webpackChunkName:navigator */</span></span><br><span class="line">          <span class="string">&quot;./../components/Navigator&quot;</span></span><br><span class="line">        ),</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/feedback&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span></span><br><span class="line">        <span class="keyword">import</span>(</span><br><span class="line">          <span class="comment">/* webpackChunkName:feedback */</span></span><br><span class="line">          <span class="string">&quot;./../components/FeedBack&quot;</span></span><br><span class="line">        ),</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>问：请用 vnode 描述一个 DOM 结构</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>vdom<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 20px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>a<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">tag</span>:<span class="string">&#x27;div&#x27;</span>,</span><br><span class="line">    <span class="attr">props</span>:&#123;</span><br><span class="line">        <span class="attr">className</span>:<span class="string">&#x27;container&#x27;</span>,</span><br><span class="line">        <span class="attr">id</span>:<span class="string">&#x27;div1&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">tag</span>:<span class="string">&#x27;p&#x27;</span>,</span><br><span class="line">            <span class="attr">children</span>:<span class="string">&#x27;vdom&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">tag</span>:<span class="string">&#x27;ul&#x27;</span>,</span><br><span class="line">            <span class="attr">props</span>:&#123;<span class="attr">style</span>:<span class="string">&#x27;font-size:20px&#x27;</span>&#125;,</span><br><span class="line">            <span class="attr">children</span>:[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">tag</span>:<span class="string">&#x27;li&#x27;</span>,</span><br><span class="line">                    <span class="attr">children</span>:<span class="string">&#x27;a&#x27;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>问：监听 data 变化的核心 API 是什么？</p>
</blockquote>
<p>Object.defineProperty<br>以及深度监听、监听数组<br>有何缺点</p>
<blockquote>
<p>问：Vue 如何监听数组变化?</p>
</blockquote>
<p>Object.defineProperty 不能监听数组变化<br>重新定义原型，重写 push pop 等方法，实现监听<br>Proxy 可以原生支持监听数组变化</p>
<blockquote>
<p>问：请描述响应式原理</p>
</blockquote>
<p>监听 data 变化<br>组件渲染和更新的流程<br>【参考组件渲染和更新的过程】</p>
<blockquote>
<p>问：diff 算法的时间复杂度</p>
</blockquote>
<p>O(n)<br>在 O(n^3)基础上做了一些调整</p>
<blockquote>
<p>问：简述 diff 算法过程</p>
</blockquote>
<p>patch(elem,vnode) 和 patch(vnode,newVnode)<br>patchVnode 和 addVnodes 和 removeVnodes<br>updateChildre（key 的重要性）</p>
<blockquote>
<p>问：Vue 为何是异步渲染，$nextTick 何用？</p>
</blockquote>
<p>Vue 是异步渲染<br>data 改变之后，DOM 不会立刻渲染，而是存放在异步更新队列<br>$nextTick 会在 DOM 渲染之后被触发，以获取最新 DOM 节点</p>
<p>异步渲染（以及合并 data 修改），以提高渲染性能<br>$nextTick在DOM更新完之后，触发回调【因为是异步渲染，没法在data修改之后拿到DOM的变化，只有在$nextTick 才能拿到 DOM 的变化】</p>
<blockquote>
<p>问：Vue 性能优化</p>
</blockquote>
<p>合理使用 v-show 和 v-if<br>合理使用 computed<br>v-for 时加 key，以及避免和 v-if 同时使用【v-for 的优先级更高，每次 v-for 时，v-if 都要重新计算，所以应避免同时使用】<br>自定义事件、DOM 事件及时销毁<br>合理使用异步组件<br>合理使用 keep-alive<br>data 层级不要太深【对 data 做响应式监听的时候，深度监听是需要一次性遍历完成的，data 层级过深会导致响应式在监听时深度较多，递归比较多，会导致卡顿】<br>使用 vue-loader 在开发环境做模板编译（预编译）<br>webpack 层面的优化<br>前端通用的性能优化，如图片懒加载<br>使用 SSR</p>
<blockquote>
<p>问：为什么在 HTML 中监听事件?</p>
</blockquote>
<p>你可能注意到这种事件监听的方式违背了关注点分离（separation of concern）传统理念。不必担心，因为所有的 Vue.js 事件处理方法和表达式都严格绑定在当前视图的 ViewModel 上，它不会导致任何维护上的困难。实际上，使用 v-on 有几个好处：</p>
<p>扫一眼 HTML 模板便能轻松定位在 JavaScript 代码里对应的方法。</p>
<p>因为你无须在 JavaScript 里手动绑定事件，你的 ViewModel 代码可以是非常纯粹的逻辑，和 DOM 完全解耦，更易于测试。</p>
<p>当一个 ViewModel 被销毁时，所有的事件处理器都会自动被删除。你无须担心如何自己清理它们。</p>
<blockquote>
<p>问：methods 和 computed 之间的区别？</p>
</blockquote>
<p>1.methods 用括号，computed 不用括号<br>2.methods 可以实现 computed 所有功能<br>3.methods 每次都会触发，computed 属于被动计算<br>4.computed 计算完之后会被驻留到内存中，第二次会在内存中调用。</p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>【搬】Vue3.0全家桶+Vite实战</title>
    <url>/2022/02/15/Vue/%E3%80%90%E6%90%AC%E3%80%91Vue3-0%E5%85%A8%E5%AE%B6%E6%A1%B6-Vite%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<p>2 年，37RFCs，2682Commits<br>628PR+99 个代码贡献者 +无数支持 Vue 的小伙伴们</p>
<p>2020 年 09 月 18 号发布 Vue3 正式版 V3.0.0，命名为 One Piece</p>
<p>一、Vue3.0 新特性，Compiler 原理介绍<br>与 Vue2.x 相比，mount 50%提升，内存占用小 120%<br>核心代码+Composition API ：13.5kb，最小 11.75kb<br>所有 Runtime：22.5kb（Vue2 是 32kb）</p>
<p>为什么有这么大的性能提升？<br>优化案例 1：</p>
<ul>
<li>静态 Node 不再作更新处理（hoistStatic -&gt; SSR 优化）</li>
<li>静态绑定的 class，id 不再作更新处理</li>
<li>在 mount 时，template 会编译成 AST 语法树，结合打包标记 PatchFlag，进行更新分析（动态绑定）<br>优化案例 2:</li>
<li>事件监听器 Cache 缓存处理（cacheHandlers）</li>
<li>hoistStatic 自动针对多静态节点进行优化，输出字符串</li>
</ul>
<p>编译尝试地址：<a href="https://vue-next-template-explorer.netlify.app/">https://vue-next-template-explorer.netlify.app/</a></p>
<p>Vue3.0 带来的变化</p>
<ul>
<li>性能提升 1.3 ～ 2x</li>
<li>TS 支持，新增：Fragment、Teleport、Suspense</li>
<li>按需加载（配合 vite）&amp;组合 API</li>
</ul>
<p>新增功能：</p>
<ul>
<li>Fragment–不受根节点限制，渲染函数可接收 Array</li>
<li>Teleport–类似 Portal，随用随取，e.g.弹窗，Actions</li>
<li>Suspense–嵌套的异步依赖，e.g.async setu()</li>
</ul>
<p>一些资料：<br>中文文档：<a href="https://v3.cn.vuejs.org/">https://v3.cn.vuejs.org</a><br>组合式 API：<a href="https://composition-api.vuejs.org/api.html">https://composition-api.vuejs.org/api.html</a><br>官方文档：<a href="https://v3.vuejs.org/">https://v3.vuejs.org</a></p>
<p>为什么要用 Composition API？</p>
<ul>
<li>Vue2 对于复杂逻辑组件，在后期变得无法维护</li>
<li>Vue2 中代码复用方法，如：Mixin，Filters 都有缺陷</li>
<li>Vue2 对 TS 支持不充分</li>
</ul>
<p>Vue2 逻辑复用方式</p>
<ul>
<li>Mixin（命名空间冲突、逻辑不清晰、不易复用）</li>
<li>scoped slot 作用域插槽（配置项多、代码分裂、性能差）</li>
<li>Vue2 对 TS 支持不充分</li>
</ul>
<p>Composition API 相对与 Options API 而言：</p>
<ul>
<li>复杂组件逻辑进行分离（组合式 API+函数式编程）</li>
<li>组件间逻辑共享</li>
<li>TS 支持</li>
</ul>
<p>二、Vue3 全家桶实战（Composition API）<br>三、就项目升级方案+Vite 开发新姿势<br>Vite 概念<br>Vite（快的意思）是一个 HTTP 服务器，特殊的地方： 1.可以在单文件中书写 ES6 语法 2.支持热更新（请求的内容会被打包&#x2F;更新）<br>3.Rollup 打包</p>
<p>Vite 项目地址<br>github.com&#x2F;vitejs&#x2F;vite</p>
<p>更新建议</p>
<ul>
<li>小规模尝试，小项目尝试</li>
<li>Vue2.x 项目如果已经稳定，不推荐更新</li>
<li>Vue3 专用迁移版本，对 Vue2 进行兼容</li>
</ul>
<p>一些资料</p>
<ul>
<li>更新文档：<a href="https://v3.vuejs.org/guide/migration/introduction.html">https://v3.vuejs.org/guide/migration/introduction.html</a></li>
<li>ts 基础：<ul>
<li><a href="https://www.tslang.cn/">https://www.tslang.cn/</a></li>
<li><a href="https://jkchao.github.io/typescript-book-chinese/">https://jkchao.github.io/typescript-book-chinese/</a></li>
<li><a href="https://ts.xcatliu.com/">https://ts.xcatliu.com/</a></li>
</ul>
</li>
</ul>
<p>Vue3.x 学习建议</p>
<ul>
<li>Vue3.0 官方仓库：<a href="https://github.com/vuejs/vue-next">https://github.com/vuejs/vue-next</a></li>
<li>Vue2.x 学习资源推荐<ul>
<li>官方网站：<a href="https://cn.vuejs.org/index/html">https://cn.vuejs.org/index/html</a></li>
<li>视频课：<a href="https://www.imooc.com/learn/1091">https://www.imooc.com/learn/1091</a></li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>为什么Vuex的mutation和Redux的reducer中不能做异步操作</title>
    <url>/2020/06/22/Vue/%E4%B8%BA%E4%BB%80%E4%B9%88Vuex%E7%9A%84mutation%E5%92%8CRedux%E7%9A%84reducer%E4%B8%AD%E4%B8%8D%E8%83%BD%E5%81%9A%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h4 id="Mutation-必须是同步函数"><a href="#Mutation-必须是同步函数" class="headerlink" title="Mutation 必须是同步函数"></a>Mutation 必须是同步函数</h4><p>因此所有的异步数据请求写在 action 中，mutation 只用来更改 state 中的数据源</p>
<p>一条重要的原则就是要记住 mutation 必须是同步函数。为什么？请参考下面的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">mutations</span>: &#123;</span><br><span class="line">  someMutation (state) &#123;</span><br><span class="line">    api.<span class="title function_">callAsyncMethod</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      state.<span class="property">count</span>++</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在想象，我们正在 debug 一个 app 并且观察 devtool 中的 mutation 日志。每一条 mutation 被记录，devtools 都需要捕捉到前一状态和后一状态的快照。然而，在上面的例子中 mutation 中的异步函数中的回调让这不可能完成：因为当 mutation 触发的时候，回调函数还没有被调用，devtools 不知道什么时候回调函数实际上被调用——实质上任何在回调函数中进行的状态的改变都是不可追踪的。</p>
<p>深入探究为什么状态管理的 mutation 必须是同步的呢？</p>
<p>先问，你知道 foreach 传参函数如果是异步的话会怎么样么？ 比如 foreach(async () &#x3D;&gt; { await …})</p>
<blockquote>
<p>js 中 forEach 本身是同步的</p>
</blockquote>
<p>举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[many, too many, so many].<span class="title function_">forEach</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    some code;  <span class="comment">//  这是一个大数值运算（非异步代码），需要几毫秒的时间</span></span><br><span class="line">&#125;);</span><br><span class="line">other code;  <span class="comment">// 这些代码将会阻塞，等到forEach循环完之后执行</span></span><br></pre></td></tr></table></figure>

<p>这是回调中没有异步代码的情况。</p>
<p>再举一个有异步的:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">forEach</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        some code;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">other code; <span class="comment">// 这部分代码不会被setTimeout阻塞，forEach遍历完1,2,3之后就执行</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">forEach</span>( <span class="keyword">async</span> (value) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> foo = <span class="keyword">await</span> <span class="title function_">promiseFn</span>();</span><br><span class="line">&#125;);</span><br><span class="line">other code; <span class="comment">// 同样不会受到异步阻塞</span></span><br></pre></td></tr></table></figure>

<p>上面是 2 种异步代码形式， 但是都不会阻塞后面的代码。我理解的是：forEach 的回调函数会被立即执行，回调里有异步代码，根据 EventLoop 机制放入调用栈，继续执行同步代码以结束; 回调本身就是异步函数，放入调用栈，结束本次遍历。</p>
<p>因此 foreach 传参函数如果是异步的话，想“同步”执行数组中的异步函数是不行的。</p>
<p>再看，vuex 中的 mutations 实现：</p>
<p><img src="https://www.daykalif.com/blog_img/vuex.jpg" alt="mutations"></p>
<p>entry 是某个 mutation 的函数队列数组， 你声明的 mutation 最终都会被 vuex 处理成数组的形式。 对比上面的 foreach 遍历执行异步函数，现在你知道为什么 mutation 需要同步函数了么？</p>
<p><strong>总结：</strong></p>
<p>vuex 和 redux 都是一种状态管理机制，然后他们会有自己的 state 和修改 state 的方法， 修改 state 的方法涉及到同步和异步。</p>
<p>vuex 的处理方式是同步在 mutation 里面，异步在 actions 里面。</p>
<p>你可以在组件中使用 this.$store.commit(‘xxx’)提交 mutation，或者使用 mapMutations 辅助函数将组件中的 methods 映射为 store.commit 调用（需要在根节点注入 store）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapMutations &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    ...<span class="title function_">mapMutations</span>([</span><br><span class="line">      <span class="string">&quot;increment&quot;</span>, <span class="comment">// 将 `this.increment()` 映射为 `this.$store.commit(&#x27;increment&#x27;)`</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// `mapMutations` 也支持载荷：</span></span><br><span class="line">      <span class="string">&quot;incrementBy&quot;</span>, <span class="comment">// 将 `this.incrementBy(amount)` 映射为 `this.$store.commit(&#x27;incrementBy&#x27;, amount)`</span></span><br><span class="line">    ]),</span><br><span class="line">    ...<span class="title function_">mapMutations</span>(&#123;</span><br><span class="line">      <span class="attr">add</span>: <span class="string">&quot;increment&quot;</span>, <span class="comment">// 将 `this.add()` 映射为 `this.$store.commit(&#x27;increment&#x27;)`</span></span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>Redux 的 reducer 为什么不能有异步操作。</strong></p>
<p>1、先从 Redux 的设计层面来解释为什么 Reducer 必须是纯函数</p>
<p>如果你经常用 React+Redux 开发，那么就应该了解 Redux 的设计初衷。Redux 的设计参考了 Flux 的模式，作者希望以此来实现时间旅行，保存应用的历史状态，实现应用状态的可预测。所以整个 Redux 都是函数式编程的范式，要求 reducer 是纯函数也是自然而然的事情，使用纯函数才能保证相同的输入得到相同的输入，保证状态的可预测。所以 Redux 有三大原则：</p>
<ul>
<li>单一数据源，也就是 state</li>
<li>state 是只读，Redux 并没有暴露出直接修改 state 的接口，必须通过 action 来触发修改</li>
<li>使用纯函数来修改 state，reducer 必须是纯函数</li>
</ul>
<p>2、下面在从代码层面来解释为什么 reducer 必须是纯函数</p>
<p>那么 reducer 到底干了件什么事，在 Redux 的源码中只用了一行来表示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">currentState = <span class="title function_">currentReducer</span>(currentState, action);</span><br></pre></td></tr></table></figure>

<p>这一行简单粗暴的在代码层面解释了为什么 currentReducer 必须是纯函数。currentReducer 就是我们在 createStore 中传入的 reducer（至于为什么会加个 current 有兴趣的可以自己去看源码），reducer 是用来计算 state 的，所以它的返回值必须是 state，也就是我们整个应用的状态，而不能是 promise 之类的。</p>
<p>要在 reducer 中加入异步的操作，如果你只是单纯想执行异步操作，不会等待异步的返回，那么在 reducer 中执行的意义是什么。如果想把异步操作的结果反应在 state 中，首先整个应用的状态将变的不可预测，违背 Redux 的设计原则，其次，此时的 currentState 将会是 promise 之类而不是我们想要的应用状态，根本是行不通的。</p>
<p>其实这个问题应该是 Redux 中为什么不能有副作用的操作更合适。</p>
<p>参考文档：<br><a href="https://www.jianshu.com/p/abfbee503296">https://www.jianshu.com/p/abfbee503296</a><br><a href="https://www.zhihu.com/question/327788833">https://www.zhihu.com/question/327788833</a><br><a href="https://blog.csdn.net/weixin_33726318/article/details/88614372">https://blog.csdn.net/weixin_33726318/article/details/88614372</a><br><a href="https://www.xinran001.com/frontend/288.html">https://www.xinran001.com/frontend/288.html</a></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue</tag>
        <tag>Vuex</tag>
      </tags>
  </entry>
  <entry>
    <title>Webpack &amp; Babel</title>
    <url>/2019/08/11/webpack%E5%AD%A6%E4%B9%A0/Webpack-Babel/</url>
    <content><![CDATA[<h4 id="webpack-babel"><a href="#webpack-babel" class="headerlink" title="webpack &amp; babel"></a>webpack &amp; babel</h4><p>webpack 面试题： 1.前端代码为何要进行构建和打包？<br>2.module chunk bundle 分别什么意思，有何区别？<br>3.loader 和 plugin 的区别？<br>4.webpack 实现懒加载？<br>5.webpack 常见性能优化<br>6.babel-runtime 和 babel-polyfill 的区别</p>
<h4 id="1-webpack-基本使用"><a href="#1-webpack-基本使用" class="headerlink" title="1.webpack 基本使用"></a>1.webpack 基本使用</h4><h5 id="1-webpack-基本配置"><a href="#1-webpack-基本配置" class="headerlink" title="1.webpack 基本配置"></a>1.webpack 基本配置</h5><p>vue-cli create-react-app<br>1).拆分配置和 merge</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//merge</span></span><br><span class="line"><span class="keyword">const</span> &#123; smart &#125; = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">smart</span>(webpackCommonConf, &#123; ... &#125;)</span><br></pre></td></tr></table></figure>

<p>2).启动本地服务<br>此时需要安装 webpack-dev-server,在 package.json 中安装依赖，并且配置 scripts 脚本”dev”:”webpack-dev-server –config build-base-conf&#x2F;webpack.dev.js”</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">smart</span>(webpackCommonConf, &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">port</span>: <span class="number">8080</span>,</span><br><span class="line">        <span class="attr">progress</span>: <span class="literal">true</span>,  <span class="comment">// 显示打包的进度条</span></span><br><span class="line">        <span class="attr">contentBase</span>: distPath,  <span class="comment">// 根目录</span></span><br><span class="line">        <span class="attr">open</span>: <span class="literal">true</span>,  <span class="comment">// 自动打开浏览器</span></span><br><span class="line">        <span class="attr">compress</span>: <span class="literal">true</span>,  <span class="comment">// 启动 gzip 压缩</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置代理 - 解决跨域</span></span><br><span class="line">        <span class="attr">proxy</span>: &#123;</span><br><span class="line">            <span class="comment">// 将本地 /api/xxx 代理到 localhost:3000/api/xxx</span></span><br><span class="line">            <span class="string">&#x27;/api&#x27;</span>: <span class="string">&#x27;http://localhost:3000&#x27;</span>,</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将本地 /api2/xxx 代理到 localhost:3000/xxx</span></span><br><span class="line">            <span class="string">&#x27;/api2&#x27;</span>: &#123;</span><br><span class="line">                <span class="attr">target</span>: <span class="string">&#x27;http://localhost:3000&#x27;</span>,</span><br><span class="line">                <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">                    <span class="string">&#x27;/api2&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>3).处理 ES6（使用.babelrc,在 webpack.common.js 中配置即可）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.common.js</span></span><br><span class="line"><span class="attr">rules</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">    <span class="attr">loader</span>: [<span class="string">&quot;babel-loader&quot;</span>],</span><br><span class="line">    <span class="attr">include</span>: srcPath,</span><br><span class="line">    <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<p>使用 babel-loader 时，需要配置 babel 文件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .babelrc</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;presets&quot;</span>: [<span class="string">&quot;@babel/preset-env&quot;</span>,<span class="string">&quot;@babel/preset-react&quot;</span>],</span><br><span class="line">    <span class="string">&quot;plugins&quot;</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4).处理样式（在 webpack.common.js 中配置即可）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.common.js</span></span><br><span class="line"><span class="attr">relues</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">    <span class="comment">// loader 的执行顺序是：从后往前</span></span><br><span class="line">    <span class="attr">loader</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;postcss-loader&quot;</span>], <span class="comment">// 加了 postcss：做浏览器兼容性【需要配置postcss.config.js】,postcss也需要安装</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">    <span class="comment">// 增加 &#x27;less-loader&#x27; ，注意顺序</span></span><br><span class="line">    <span class="attr">loader</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;less-loader&quot;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// postcss.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="built_in">require</span>(<span class="string">&quot;autoprefixer&quot;</span>)], <span class="comment">//autoprefixer：需要安装；解析CSS文件并且添加浏览器前缀到CSS规则里</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>5).处理图片</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.dev.js</span></span><br><span class="line"><span class="attr">rules</span>: [</span><br><span class="line">  <span class="comment">// 直接引入图片 url</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.(png|jpg|jpeg|gif)$/</span>,</span><br><span class="line">    <span class="attr">use</span>: <span class="string">&quot;file-loader&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.prod.js</span></span><br><span class="line"><span class="attr">rules</span>: [</span><br><span class="line">  <span class="comment">// 图片 - 考虑 base64 编码的情况【可以直接以html方式产出，减少请求】</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.(png|jpg|jpeg|gif)$/</span>,</span><br><span class="line">    <span class="attr">use</span>: &#123;</span><br><span class="line">      <span class="attr">loader</span>: <span class="string">&quot;url-loader&quot;</span>,</span><br><span class="line">      <span class="attr">options</span>: &#123;</span><br><span class="line">        <span class="comment">// 小于 5kb 的图片用 base64 格式产出</span></span><br><span class="line">        <span class="comment">// 否则，依然延用 file-loader 的形式，产出 url 格式</span></span><br><span class="line">        <span class="attr">limit</span>: <span class="number">5</span> * <span class="number">1024</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 大于5kb的图片产出url打包到 img 目录下</span></span><br><span class="line">        <span class="attr">outputPath</span>: <span class="string">&quot;/img1/&quot;</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置图片的 cdn 地址（也可以统一在外面的 output 中设置，那将作用于所有静态资源）</span></span><br><span class="line">        <span class="comment">// publicPath: &#x27;http://cdn.abc.com&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<p>6).模块化</p>
<p>模块化的优点：</p>
<ul>
<li>作用域封装（模块作用域可以使用闭包来防止数据被暴露）–&gt;解决命名冲突，以及命名空间解决后带来的随意访问和篡改</li>
<li>重用性</li>
<li>解除耦合（可以快速定位问题）提升系统可维护性</li>
</ul>
<p>模块化方案进化史：<br>AMD（异步模块定义）<br>CommonJS<br>ES6 Module</p>
<h4 id="2-webpack-高级特性"><a href="#2-webpack-高级特性" class="headerlink" title="2.webpack 高级特性"></a>2.webpack 高级特性</h4><p>1).多入口（webpack 配置多页面）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.common.js</span></span><br><span class="line"><span class="attr">entry</span>: &#123;</span><br><span class="line">    <span class="attr">index</span>: path.<span class="title function_">join</span>(srcPath, <span class="string">&#x27;index.js&#x27;</span>),</span><br><span class="line">    <span class="attr">other</span>: path.<span class="title function_">join</span>(srcPath, <span class="string">&#x27;other.js&#x27;</span>)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack.prod.js</span></span><br><span class="line"><span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="comment">// filename: &#x27;bundle.[contentHash:8].js&#x27;,  // 打包代码时，加上 hash 戳,代码不变时命中缓存</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;[name].[contentHash:8].js&#x27;</span>, <span class="comment">// name 即多入口时 entry 的 key（entry的属性名）</span></span><br><span class="line">    <span class="attr">path</span>: distPath,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// new HtmlWebpackPlugin(&#123;</span></span><br><span class="line">    <span class="comment">//     template: path.join(srcPath, &#x27;index.html&#x27;),</span></span><br><span class="line">    <span class="comment">//     filename: &#x27;index.html&#x27;</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 多入口 - 生成 index.html         【针对每个入口都生成HtmlWebpackPlugin实例】</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">        <span class="attr">template</span>: path.<span class="title function_">join</span>(srcPath, <span class="string">&#x27;index.html&#x27;</span>),</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">        <span class="comment">// chunks 表示该页面要引用哪些 chunk （即上面的 index 和 other），默认全部引用</span></span><br><span class="line">        <span class="attr">chunks</span>: [<span class="string">&#x27;index&#x27;</span>]  <span class="comment">// 只引用 index.js</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// 多入口 - 生成 other.html</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">        <span class="attr">template</span>: path.<span class="title function_">join</span>(srcPath, <span class="string">&#x27;other.html&#x27;</span>),</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;other.html&#x27;</span>,</span><br><span class="line">        <span class="attr">chunks</span>: [<span class="string">&#x27;other&#x27;</span>]  <span class="comment">// 只引用 other.js</span></span><br><span class="line">    &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>2).抽离和压缩 CSSCSS 文件</p>
<p>如果不配置 css 的配置，编译代码的时候就会编译到 html 文件下的 style 中。dev 环境下可以这样，线上环境是不允许这样的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.common.js</span></span><br><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      <span class="attr">loader</span>: [<span class="string">&quot;babel-loader&quot;</span>],</span><br><span class="line">      <span class="attr">include</span>: srcPath,</span><br><span class="line">      <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// css 处理</span></span><br><span class="line">    <span class="comment">// 移动到分别对应的dev配置和prod配置中</span></span><br><span class="line">  ];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack.dev.js</span></span><br><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     test: /\.css$/,</span></span><br><span class="line">    <span class="comment">//     // loader 的执行顺序是：从后往前</span></span><br><span class="line">    <span class="comment">//     loader: [&#x27;style-loader&#x27;, &#x27;css-loader&#x27;]</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">      <span class="comment">// loader 的执行顺序是：从后往前，最后css会生成到style中。</span></span><br><span class="line">      <span class="attr">loader</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;postcss-loader&quot;</span>], <span class="comment">// 加了 postcss</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">      <span class="comment">// 增加 &#x27;less-loader&#x27; ，注意顺序</span></span><br><span class="line">      <span class="attr">loader</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;less-loader&quot;</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">  ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.prod.js</span></span><br><span class="line"><span class="attr">module</span>:&#123;</span><br><span class="line">    <span class="attr">rules</span>:[</span><br><span class="line">        <span class="comment">// 抽离 css</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            <span class="attr">loader</span>: [</span><br><span class="line">                <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>,  <span class="comment">// 注意，这里不再用 style-loader</span></span><br><span class="line">                <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;postcss-loader&#x27;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 抽离 less --&gt; css</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">            <span class="attr">loader</span>: [</span><br><span class="line">                <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>,  <span class="comment">// 注意，这里不再用 style-loader</span></span><br><span class="line">                <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;less-loader&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;postcss-loader&#x27;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// 抽离 css 文件，并对css文件做hash处理。</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;css/main.[contentHash:8].css&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">],</span><br><span class="line"><span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="comment">// 压缩 css</span></span><br><span class="line">    <span class="attr">minimizer</span>: [<span class="keyword">new</span> <span class="title class_">TerserJSPlugin</span>(&#123;&#125;), <span class="keyword">new</span> <span class="title class_">OptimizeCSSAssetsPlugin</span>(&#123;&#125;)],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时 build 之后，html 文件中，会通过 link 的形式引用所打包好的 css 文件。</p>
<p>3).抽离公共代码【公共引入的部分需要拆除去，引入的第三方模块也要单独拆出去，如多个文件引入 lodash，打包时会引入多次，需要抽离公共代码】<br>（开发环境下不必抽离，只要打包速度快就行；生产环境需要考虑性能，考虑文件体积等）</p>
<ul>
<li>抽离公共代码</li>
<li>抽离第三方代码</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.common.js</span></span><br><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// 多入口 - 生成 index.html</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">        <span class="attr">template</span>: path.<span class="title function_">join</span>(srcPath, <span class="string">&#x27;index.html&#x27;</span>),</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">        <span class="comment">// chunks 表示该页面要引用哪些 chunk （即上面的 index 和 other），默认全部引用</span></span><br><span class="line">        <span class="attr">chunks</span>: [<span class="string">&#x27;index&#x27;</span>, <span class="string">&#x27;vendor&#x27;</span>, <span class="string">&#x27;common&#x27;</span>]  <span class="comment">// 要考虑代码分割-------使用chunks的情况，和 webpack.prod.js的cacheGroups相关联</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// 多入口 - 生成 other.html</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">        <span class="attr">template</span>: path.<span class="title function_">join</span>(srcPath, <span class="string">&#x27;other.html&#x27;</span>),</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;other.html&#x27;</span>,</span><br><span class="line">        <span class="attr">chunks</span>: [<span class="string">&#x27;other&#x27;</span>, <span class="string">&#x27;common&#x27;</span>]  <span class="comment">// 考虑代码分割</span></span><br><span class="line">    &#125;)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack.prod.js</span></span><br><span class="line"><span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="comment">// 分割代码块</span></span><br><span class="line">    <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *chunks有三个选项：</span></span><br><span class="line"><span class="comment">            initial： 入口 chunk，对于异步导入的文件不处理</span></span><br><span class="line"><span class="comment">            async： 异步 chunk，只对异步导入的文件处理</span></span><br><span class="line"><span class="comment">            all： 全部 chunk</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            一般写all就可以了</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="attr">chunks</span>: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">        <span class="comment">// 缓存分组</span></span><br><span class="line">        <span class="attr">cacheGroups</span>: &#123;</span><br><span class="line">            <span class="comment">// 第三方模块</span></span><br><span class="line">            <span class="attr">vendor</span>: &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;vendor&#x27;</span>, <span class="comment">// chunk 名称</span></span><br><span class="line">                <span class="attr">priority</span>: <span class="number">1</span>, <span class="comment">// 权限更高，如果文件又是第三方模块，又是公共的模块，则优先抽离成第三方模块，重要！！！</span></span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/node_modules/</span>,<span class="comment">//在node_modules中去命中</span></span><br><span class="line">                <span class="attr">minSize</span>: <span class="number">0</span>,  <span class="comment">// 大小限制</span></span><br><span class="line">                <span class="attr">minChunks</span>: <span class="number">1</span>  <span class="comment">// 最少复用过几次【第三方模块只要引了1次，就单独拿出来做单独模块】</span></span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 公共的模块</span></span><br><span class="line">            <span class="attr">common</span>: &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;common&#x27;</span>, <span class="comment">// chunk 名称</span></span><br><span class="line">                <span class="attr">priority</span>: <span class="number">0</span>, <span class="comment">// 优先级</span></span><br><span class="line">                <span class="attr">minSize</span>: <span class="number">30000</span>,  <span class="comment">// 公共模块的大小限制，小于3kb【如果文件很小就不用单独打包了】</span></span><br><span class="line">                <span class="attr">minChunks</span>: <span class="number">2</span>  <span class="comment">// 公共模块最少复用过几次</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4).懒加载</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入动态数据 - 懒加载 ==&gt;这里也能打包出来一个chunk</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 回顾 Vue React 异步组件</span></span><br><span class="line">  <span class="keyword">import</span>(<span class="string">&quot;./dynamic-data.js&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//异步加载js文件  模块化通过webpack构建工具实现 =&gt; 异步加载也会打包出来一个chunk，类似于定义一个chunk</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">default</span>.<span class="property">message</span>); <span class="comment">//注意这里的default</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="number">1500</span>);</span><br></pre></td></tr></table></figure>

<p>5).处理 JSX</p>
<p>.babelrc 中配置@babel&#x2F;preset-env</p>
<p>6).处理 Vue</p>
<p>webpack 中 rules 设置.vue 文件使用 vue-loader</p>
<blockquote>
<p>问：module chunk bundle 的区别？</p>
</blockquote>
<ul>
<li>module - 各个源码文件，webpack 中一切皆模块，只要可以引用的都是模块</li>
<li>chunk - 多模块合成的，如 entry 可以定义 chunk，import()可以定义 chunk，splitChunk 可以定义 chunk</li>
<li>bundle - 最终的输出文件，可以是多个文件，一个 chunk 对应一个 bundle</li>
</ul>
<p><img src="https://www.daykalif.com/blog_img/chunk.png" alt="chunk"></p>
<h4 id="3-webpack-性能优化"><a href="#3-webpack-性能优化" class="headerlink" title="3.webpack 性能优化"></a>3.webpack 性能优化</h4><h5 id="优化打包构建速度-开发体验和效率"><a href="#优化打包构建速度-开发体验和效率" class="headerlink" title="优化打包构建速度 - 开发体验和效率"></a>优化打包构建速度 - 开发体验和效率</h5><p>1).优化 babel-loader</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">    <span class="attr">loader</span>: [<span class="string">&#x27;babel-loader?cacheDirectory&#x27;</span>],<span class="comment">//1.开启缓存，缓存可只用于开发环境</span></span><br><span class="line">    <span class="attr">include</span>: path.<span class="title function_">resolve</span>(__diname,<span class="string">&#x27;src&#x27;</span>),<span class="comment">//明确范围</span></span><br><span class="line">    <span class="comment">//2.排除范围，include 和 exclude两者选一个即可</span></span><br><span class="line">    <span class="comment">//exclude: path.resolve(__dirname,&#x27;/node_modules/&#x27;)</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>2).IgnorePlugin</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">  <span class="comment">// 忽略 moment库 下的 /locale 目录</span></span><br><span class="line">  <span class="keyword">new</span> webpack.<span class="title class_">IgnorePlugin</span>(<span class="regexp">/\.\/locale/</span>, <span class="regexp">/moment/</span>),</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<p>3).noParse（引入时避免去打包某些东西）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">smart</span>(webpackCommonConf, &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    <span class="attr">noParse</span>:<span class="regexp">/jquery/</span>,<span class="comment">//不去解析jquery中的依赖库</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4).happyPack（可以在 dev 环境下，也可以在 prod 环境下使用）</p>
<p>JS 单线程，开启多进程打包<br>提高构建速度（特别是多核 CPU）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">        <span class="comment">// js</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            <span class="comment">// 把对 .js 文件的处理转交给 id 为 babel 的 HappyPack 实例</span></span><br><span class="line">            <span class="attr">use</span>: [<span class="string">&#x27;happypack/loader?id=babel&#x27;</span>],<span class="comment">//id与plugin的happyPack id对应</span></span><br><span class="line">            <span class="attr">include</span>: srcPath,</span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">plugins</span>:[</span><br><span class="line">    <span class="comment">// happyPack 开启多进程打包</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HappyPack</span>(&#123;</span><br><span class="line">        <span class="comment">// 用唯一的标识符 id 来代表当前的 HappyPack 是用来处理一类特定的文件</span></span><br><span class="line">        <span class="attr">id</span>: <span class="string">&#x27;babel&#x27;</span>,</span><br><span class="line">        <span class="comment">// 如何处理 .js 文件，用法和 Loader 配置中一样</span></span><br><span class="line">        <span class="attr">loaders</span>: [<span class="string">&#x27;babel-loader?cacheDirectory&#x27;</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>5).ParallelUglifyPlugin 多进程压缩 JS（在 prod 环境下使用）</p>
<p>webpack 内置 Uglify 工具压缩 JS<br>JS 单线程，开启多进程压缩更快<br>原理和 happypack 同理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">  <span class="comment">// 使用 ParallelUglifyPlugin 并行压缩输出的 JS 代码</span></span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">ParallelUglifyPlugin</span>(&#123;</span><br><span class="line">    <span class="comment">// 传递给 UglifyJS 的参数</span></span><br><span class="line">    <span class="comment">// （还是使用 UglifyJS 压缩，只不过帮助开启了多进程）</span></span><br><span class="line">    <span class="attr">uglifyJS</span>: &#123;</span><br><span class="line">      <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">beautify</span>: <span class="literal">false</span>, <span class="comment">// 最紧凑的输出</span></span><br><span class="line">        <span class="attr">comments</span>: <span class="literal">false</span>, <span class="comment">// 删除所有的注释</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">compress</span>: &#123;</span><br><span class="line">        <span class="comment">// 删除所有的 `console` 语句，可以兼容ie浏览器</span></span><br><span class="line">        <span class="attr">drop_console</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 内嵌定义了但是只用到一次的变量</span></span><br><span class="line">        <span class="attr">collapse_vars</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 提取出出现多次但是没有定义成变量去引用的静态值</span></span><br><span class="line">        <span class="attr">reduce_vars</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;),</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<p>关于开启多进程：<br>项目较大，打包较慢，开启多进程能提高速度<br>项目较小，打包很快，开启多进程会降低速度（进程开销）<br>按需使用</p>
<p>6).自动刷新（开发环境下使用，devServer 默认开启，所以不需要自己配置）</p>
<p>自动刷新：<br>整个网页全部刷新，速度较慢；<br>整个网页全部刷新，状态会丢失</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.dev.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">export</span> = &#123;</span><br><span class="line">  <span class="attr">watch</span>: <span class="literal">true</span>, <span class="comment">// 开启监听，默认为 false</span></span><br><span class="line">  <span class="comment">// 注意，开启监听之后，webpack-dev-server会自动开启刷新浏览器！！！</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 监听配置</span></span><br><span class="line">  <span class="attr">watchOptions</span>: &#123;</span><br><span class="line">    <span class="attr">ignored</span>: <span class="regexp">/node_modules/</span>, <span class="comment">// 忽略哪些</span></span><br><span class="line">    <span class="comment">// 监听到变化发生后会等300ms再去执行动作，防止文件更新太快导致重新编译频率太高</span></span><br><span class="line">    <span class="comment">// 默认为 300ms</span></span><br><span class="line">    <span class="attr">aggregateTimeout</span>: <span class="number">300</span>,</span><br><span class="line">    <span class="comment">// 判断文件是否发生变化是通过不停的去询问系统指定文件有没有变化实现的</span></span><br><span class="line">    <span class="comment">// 默认每隔1000毫秒询问一次</span></span><br><span class="line">    <span class="attr">poll</span>: <span class="number">1000</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>7).热更新</p>
<p>热更新：新代码生效，网页不刷新，状态不丢失</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.dev.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HotModuleReplacementPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;webpack/lib/HotModuleReplacementPlugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: &#123;</span><br><span class="line">    <span class="comment">// index: path.join(srcPath, &#x27;index.js&#x27;),</span></span><br><span class="line">    <span class="attr">index</span>: [</span><br><span class="line">      <span class="string">&quot;webpack-dev-server/client?http://localhost:8080/&quot;</span>, <span class="comment">//配置热更新</span></span><br><span class="line">      <span class="string">&quot;webpack/hot/dev-server&quot;</span>,</span><br><span class="line">      path.<span class="title function_">join</span>(srcPath, <span class="string">&quot;index.js&quot;</span>),</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">other</span>: path.<span class="title function_">join</span>(srcPath, <span class="string">&quot;other.js&quot;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HotModuleReplacementPlugin</span>(), <span class="comment">//new热更新实例</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">hot</span>: <span class="literal">true</span>, <span class="comment">//开启热更新</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="comment">// 增加，开启热更新之后的代码逻辑</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">module</span>.<span class="property">hot</span>) &#123;</span><br><span class="line">  <span class="variable language_">module</span>.<span class="property">hot</span>.<span class="title function_">accept</span>([<span class="string">&quot;./math&quot;</span>], <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//[&#x27;./math&#x27;]  -- 在这个模块范围之内的可以热更新</span></span><br><span class="line">    <span class="keyword">const</span> sumRes = <span class="title function_">sum</span>(<span class="number">10</span>, <span class="number">30</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sumRes in hot&quot;</span>, sumRes);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>8). DllPlugin 动态链接库插件【第三方库直接打包好引用】</p>
<p>前端框架如 Vue React，体积大，构建慢<br>较稳定，不常升级版本<br>同一个版本之构建一次即可，不用每次都重新构建</p>
<p>webpack 已内置 DllPlugin 支持,因此不用自己安装插件<br>第一此打包时，使用 DllPlugin-打包出 dll 文件<br>在此使用时，通过 DllReferencePlugin 使用 dll 文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.dll.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">DllPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;webpack/lib/DllPlugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; srcPath, distPath &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./paths&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,<span class="comment">//开发模式</span></span><br><span class="line">  <span class="comment">// JS 执行入口文件</span></span><br><span class="line">  <span class="attr">entry</span>: &#123;</span><br><span class="line">    <span class="comment">// 把 React 相关模块的放到一个单独的动态链接库【预先打包第三方插件，入口名字就设置成‘react’就可以了，方便一眼看到】，针对打包的内容为[&#x27;react&#x27;, &#x27;react-dom&#x27;]</span></span><br><span class="line">    <span class="attr">react</span>: [<span class="string">&#x27;react&#x27;</span>, <span class="string">&#x27;react-dom&#x27;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="comment">// 输出的动态链接库的文件名称，[name] 代表当前动态链接库的名称，</span></span><br><span class="line">    <span class="comment">// 也就是 entry 中配置的 react 和 polyfill</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;[name].dll.js&#x27;</span>,</span><br><span class="line">    <span class="comment">// 输出的文件都放到 dist 目录下</span></span><br><span class="line">    <span class="attr">path</span>: distPath,</span><br><span class="line">    <span class="comment">// 存放动态链接库的全局变量名称，例如对应 react 来说就是 _dll_react</span></span><br><span class="line">    <span class="comment">// 之所以在前面加上 _dll_ 是为了防止全局变量冲突</span></span><br><span class="line">    <span class="attr">library</span>: <span class="string">&#x27;_dll_[name]&#x27;</span>,<span class="comment">//library表示输出的是第三方的库，全局变量名</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// 接入 DllPlugin</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">DllPlugin</span>(&#123;</span><br><span class="line">      <span class="comment">// 动态链接库的全局变量名称，需要和 output.library 中保持一致</span></span><br><span class="line">      <span class="comment">// 该字段的值也就是输出的 manifest.json 文件 中 name 字段的值</span></span><br><span class="line">      <span class="comment">// 例如 react.manifest.json 中就有 &quot;name&quot;: &quot;_dll_react&quot;，这个文件就是一个索引</span></span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;_dll_[name]&#x27;</span>,</span><br><span class="line">      <span class="comment">// 描述动态链接库的 manifest.json 文件输出时的文件名称</span></span><br><span class="line">      <span class="attr">path</span>: path.<span class="title function_">join</span>(distPath, <span class="string">&#x27;[name].manifest.json&#x27;</span>),</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// package.json</span></span><br><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack-dev-server --config build/webpack.dev.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;dll&quot;</span>: <span class="string">&quot;webpack --config build/webpack.dll.js&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 产出react.dll.js和react.manifest.json文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// index.html</span></span><br><span class="line"><span class="comment">// 使用dll产出物</span></span><br><span class="line">&lt;script src=<span class="string">&quot;./react.dll.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack.dev.js</span></span><br><span class="line"><span class="comment">// 第一，引入 DllReferencePlugin</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">DllReferencePlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;webpack/lib/DllReferencePlugin&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                <span class="attr">loader</span>: [<span class="string">&#x27;babel-loader&#x27;</span>],</span><br><span class="line">                <span class="attr">include</span>: srcPath,</span><br><span class="line">                <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span> <span class="comment">// 第二，不要再转换 node_modules 的代码</span></span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="comment">// 第三，告诉 Webpack 使用了哪些动态链接库</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">DllReferencePlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 描述 react 动态链接库的文件内容【告诉webpack，索引的位置在什么地方】</span></span><br><span class="line">            <span class="attr">manifest</span>: <span class="built_in">require</span>(path.<span class="title function_">join</span>(distPath, <span class="string">&#x27;react.manifest.json&#x27;</span>)),</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 源代码中，引用不变</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>webpack 优化构建速度（可用于生产环境）：</p>
</blockquote>
<p>优化 babel-loader<br>IgnorePlugin<br>noParse<br>happyPack<br>ParallelUglifyPlugin【必须用在生产环境】</p>
<blockquote>
<p>webpack 优化构建速度（不用于生产环境）：</p>
</blockquote>
<p>自动更新<br>热更新<br>DllPlugin</p>
<h5 id="优化产出代码-产品性能"><a href="#优化产出代码-产品性能" class="headerlink" title="优化产出代码 - 产品性能"></a>优化产出代码 - 产品性能</h5><p>打包出来的代码体积更小<br>合理分包，不重复加载<br>速度更快，内存使用更少</p>
<p>1).小图片 base64 编码<br>2).bundle 加 hash<br>3).提取公共代码<br>4).IgnorePlugin<br>5).使用 CDN 加速【产出链接加 cdn】– 引入的代码需要上线到 cdn<br>6).懒加载<br>7).使用生产环境【设置 mode:”production”】</p>
<ul>
<li>webpack4.x 后会自动开启压缩代码</li>
<li>Vue React 等会自动删掉调试代码（如开发环境的 warning）</li>
<li>自动启用 Tree-Shaking【没有加载到的东西就不打包进去，注：ES6 Module 才能让 tree-shaking 生效，commonjs 就不行】</li>
</ul>
<p>【Tree Shaking：指的就是当我引入一个模块的时候，我不引入这个模块的所有代码，我只引入我需要的代码，这就需要借助 webpack 里面自带的 Tree Shaking 这个功能，帮助我们实现。<br>Tree Shaking 只支持 ES Module(import….) 不支持 require….<br>在 mode：production 的开发模式下 tree shaking 自动的一些配置就已经写好了。】</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在production模式下不用在webpack.prod.js中配置如下代码：</span></span><br><span class="line"><span class="attr">optimization</span>: &#123;</span><br><span class="line">  <span class="attr">usedExports</span>: <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当在 development 模式下配置 tree shaking 时：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.dev.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//HtmlWebpackPlugin</span></span><br><span class="line"><span class="comment">//当我们整个打包过程结束的时候，自动生成一个html文件，</span></span><br><span class="line"><span class="comment">//并把打包生成的自动引入到html这个文件中；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">CleanWebpackPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;clean-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&quot;webpack&quot;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">//打包模式，当为‘production’，打包后的文件会被压缩，</span></span><br><span class="line">  <span class="comment">//当为‘development’时打包后的文件不会被压缩,按照开发环境进行打包</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>, <span class="comment">//在开发者模式中SourceMap默认已经被配置在项目里了。</span></span><br><span class="line">  <span class="comment">// devtool: &#x27;none&#x27;, //关闭SourceMap</span></span><br><span class="line">  <span class="comment">//cheap：在生成SourceMap的时候，可以不带列信息，只带行信息,不要包含loader里面的SourceMap的生成，</span></span><br><span class="line">  <span class="comment">//只对业务代码进行SourceMap的生成</span></span><br><span class="line">  <span class="comment">//module:对loader里面的代码也进行一个SourceMap的生成</span></span><br><span class="line">  <span class="comment">//eval：eval是一种执行方式</span></span><br><span class="line">  <span class="attr">devtool</span>: <span class="string">&quot;cheap-module-eval-source-map&quot;</span>, <span class="comment">//打开SourceMap</span></span><br><span class="line">  <span class="comment">// devtool: &#x27;cheap-module-source-map&#x27;, //要线上的代码可以映射</span></span><br><span class="line">  <span class="comment">// 打包的入口文件</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/index2.js&quot;</span>,</span><br><span class="line">  <span class="comment">// entry: &#123;</span></span><br><span class="line">  <span class="comment">//     main: &#x27;./src/index2.js&#x27;</span></span><br><span class="line">  <span class="comment">// &#125;,</span></span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">contentBase</span>: <span class="string">&quot;./dist&quot;</span>, <span class="comment">//我们要在哪一个目录下去启动这个服务器</span></span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>, <span class="comment">//会自动的打开一个浏览器，然后自动访问服务器的地址（localhost:8080）</span></span><br><span class="line">    <span class="attr">hot</span>: <span class="literal">true</span>, <span class="comment">//指是否支持热更新（hmr）</span></span><br><span class="line">    <span class="attr">hotOnly</span>: <span class="literal">true</span>, <span class="comment">//即使不支持hmr或者hmr有问题,也不刷新浏览器</span></span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&quot;/api&quot;</span>: &#123;</span><br><span class="line">        <span class="comment">//当访问localhost:8080/api的时，它会直接帮你转发到http://localhost:3000</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&quot;http://localhost:3000&quot;</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123; <span class="string">&quot;^/api&quot;</span>: <span class="string">&quot;&quot;</span> &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">        <span class="attr">use</span>: &#123;</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&quot;url-loader&quot;</span>,</span><br><span class="line">          <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="comment">//url-loader会把图片转化成一个base64的字符串，</span></span><br><span class="line">            <span class="comment">//然后直接放到bundle.js里，而不是单独生成一个图片文件，</span></span><br><span class="line">            <span class="comment">//好处：不用再额外的请求图片的地址，省了一次http请求；</span></span><br><span class="line">            <span class="comment">//缺点：如果图片特别大过大，打包生成的js文件就会很大，</span></span><br><span class="line">            <span class="comment">//那么加载js文件的时间就会很长，所以在一开始很长的时间里，页面上什么都显示不出来；</span></span><br><span class="line">            <span class="comment">//所以，url-loader最佳的使用方式：加一个limit</span></span><br><span class="line">            <span class="comment">//如果图片小于limit的值就把图片变为一个base64的字符串放到打包好的js中，</span></span><br><span class="line">            <span class="comment">//若大于limit的值，就以file-loader的生成一个图片放到dist目录下。</span></span><br><span class="line">            <span class="attr">limit</span>: <span class="number">8192</span>, <span class="comment">//好处是可以对小图片的http请求数减少，提升网页加载数度</span></span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;images/[name].[hash].[ext]&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(css|scss|less)$/</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">//&quot;css-loader&quot;:会帮我们分析出几个css文件之间的关系，最终把这些css文件合并成一段css;</span></span><br><span class="line">        <span class="comment">//&quot;style-loader&quot;:会把‘css-loader’生成的内容挂在到页面的head部分</span></span><br><span class="line">        <span class="comment">//在webpack的配置中，loader是有先后执行顺序的，</span></span><br><span class="line">        <span class="comment">//loader的执行顺序是从下到上，从右到左；</span></span><br><span class="line">        <span class="comment">//“sass-loader”会先对sass代码进行翻译，翻译为css代码后给到css-loader,</span></span><br><span class="line">        <span class="comment">//都处理好了之后再交给‘style-loader’挂在到页面上</span></span><br><span class="line">        <span class="comment">//postcss-loader会自动添加css3的厂商前缀；比如：  transform: translate(100px, 100px)</span></span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          <span class="string">&quot;style-loader&quot;</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">importLoaders</span>: <span class="number">2</span>,</span><br><span class="line">              <span class="attr">modules</span>: <span class="literal">true</span>, <span class="comment">//使得css模块化，</span></span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&quot;postcss-loader&quot;</span>,</span><br><span class="line">          <span class="string">&quot;sass-loader&quot;</span>,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 可以打包字体文件</span></span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(eot|ttf|svg)$/</span>,</span><br><span class="line">        <span class="attr">use</span>: &#123;</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&quot;file-loader&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 打包的出口文件</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="comment">// 打包后的文件名</span></span><br><span class="line">    <span class="comment">// filename: &#x27;bundle.js&#x27;,</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;[name].js&quot;</span>, <span class="comment">//name就是entry值的key:&#x27;main&#x27;,&#x27;sub&#x27;</span></span><br><span class="line">    <span class="comment">// 打包后的文件目录为&#x27;dist&#x27;</span></span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    <span class="attr">publicPath</span>: <span class="string">&quot;/&quot;</span>, <span class="comment">//表示的是我所有的打包生成的文件之间的引用前面都加一个根路径</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//plugin可以在webpack运行到某个时刻的时候，帮你做一些事情(类似生命周期函数)</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// CleanWebpackPlugin可以在每次打包的时候帮我们对dist目录做一个清空</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>(),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="comment">//HtmlWebpackPlugin帮我们自动的生成一个dist目录下的html文件</span></span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;./src/index.html&quot;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">//HotModuleReplacementPlugin帮我们实现HMR</span></span><br><span class="line">    <span class="keyword">new</span> webpack.<span class="title class_">HotModuleReplacementPlugin</span>(),</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">//在开发模式下配置 tree shakeing</span></span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="attr">usedExports</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json:</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack-demo&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">//@babel/polyfill和css文件不使用tree shaking</span></span><br><span class="line">  <span class="attr">&quot;sideEffects&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;@babel/polyfill&quot;</span><span class="punctuation">,</span> <span class="string">&quot;*.css&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bundle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;watch&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack --watch&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack-dev-server&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node server.js&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;susie&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@babel/core&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.5.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@babel/plugin-transform-runtime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.5.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@babel/preset-env&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.5.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@babel/preset-react&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;autoprefixer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^9.6.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;babel-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^8.0.6&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;clean-webpack-plugin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;css-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;file-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;html-webpack-plugin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;node-sass&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.12.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;postcss-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sass-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;style-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.23.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;webpack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.35.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;webpack-cli&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.3.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;webpack-dev-server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.7.2&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@babel/polyfill&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.4.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@babel/runtime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.5.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@babel/runtime-corejs2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.5.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;react&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^16.8.6&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;react-dom&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^16.8.6&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>ES6 Module 和 Commonjs 区别：</p>
</blockquote>
<p>Vue 和 React 使用 ES6 Module，nodejs 使用 commonjs；（不过通过 webpack 配置后 Vue 和 React 也可以使用 commonjs，但是不建议）<br>ES6 Module 静态引入，编译时引入<br>Commonjs 动态引入，执行时引入<br>只有 ES6 Module 才能静态分析，实现 Tree-Shaking</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// commonjs:</span></span><br><span class="line"><span class="keyword">let</span> apiList = <span class="built_in">require</span>(<span class="string">&#x27;../config/api.js&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span>(isDev)&#123;</span><br><span class="line">    <span class="comment">//可以动态引入，执行时引入</span></span><br><span class="line">    apiList= <span class="built_in">require</span>(<span class="string">&#x27;../config/api_dev.js&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 Module:</span></span><br><span class="line"><span class="keyword">import</span> apiList <span class="keyword">from</span> <span class="string">&#x27;../config/api.js&#x27;</span></span><br><span class="line"><span class="keyword">if</span>(isDev)&#123;</span><br><span class="line">    <span class="comment">//编译时报错，只能静态引入</span></span><br><span class="line">   <span class="keyword">import</span> apiList <span class="keyword">from</span> <span class="string">&#x27;../config/api_dev.js&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>8).Scope Hosting【会改变打包作用域，代码执行更快，内存占用更少】<br>代码体积更小<br>创建函数作用域更少<br>代码可读性更好</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//hello.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">&#x27;Hello world&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> str <span class="keyword">from</span> <span class="string">&#x27;./hello.js&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br><span class="line"></span><br><span class="line">默认打包之后，会有两个函数。</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启Scope Hosting</span></span><br><span class="line">[</span><br><span class="line">    (<span class="keyword">function</span>(<span class="params"><span class="variable language_">module</span>,__webpack_exports__,__webpack_require__</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> hello = (<span class="string">&#x27;Hello world&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(hello);</span><br><span class="line">    &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">示例：</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ModuleConcatenationPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;webpack/lib/optimize/ModuleConcatenationPlugin&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">resolve</span>:&#123;</span><br><span class="line">        <span class="comment">//针对Npm中的第三方模块优先采用jsnext：main中指向的ES6模块化语法的文件</span></span><br><span class="line">        <span class="attr">mainFields</span>:[<span class="string">&#x27;jsnext:main&#x27;</span>,<span class="string">&#x27;browser&#x27;</span>,<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="comment">//开启Scope Hoisting</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ModuleConcatenationPlugin</span>()</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-babel"><a href="#4-babel" class="headerlink" title="4.babel"></a>4.babel</h4><h5 id="1-环境搭建-基本配置"><a href="#1-环境搭建-基本配置" class="headerlink" title="1.环境搭建&amp;基本配置"></a>1.环境搭建&amp;基本配置</h5><p>环境搭建<br>.babelrc 配置<br>presets 和 plugins</p>
<h5 id="2-babel-polyfill"><a href="#2-babel-polyfill" class="headerlink" title="2.babel-polyfill"></a>2.babel-polyfill</h5><blockquote>
<p>什么是 Polyfill?–【补丁】</p>
</blockquote>
<ul>
<li>babel-polyfill 是 core-js 和 regenerator 的集合</li>
<li>core-js【集成了一些常用的补丁】和 regenerator【支持 generator 语法】</li>
<li>Babel7.4 之后弃用 babel-polyfill，推荐直接使用 core-js 和 regenerator</li>
</ul>
<blockquote>
<p>babel 特点：</p>
</blockquote>
<p>babel 只会检测语法，使语法符合 ES5 的语法规范<br>babel 不会解析新的 api，如 Promise，includes 方法<br>babel 不处理模块化（webpack）</p>
<blockquote>
<p>babel-polyfill 按需引入：</p>
</blockquote>
<p>文件较大<br>只有一部分功能，无需全部引入<br>配置按需引入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;presets&quot;</span>:[</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&quot;@babel/preset-env&quot;</span>,</span><br><span class="line">      <span class="comment">// 配置corejs的版本，以及按需引入babel-polyfill</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;useBuiltIns&quot;</span>:<span class="string">&quot;usage&quot;</span>,</span><br><span class="line">        <span class="string">&quot;corejs&quot;</span>:<span class="number">3</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>babel-polyfill 的问题：</p>
</blockquote>
<p>会污染全局环境<br>如果做一个独立的 web 系统，则无碍<br>如果做一个第三方 lib，则会有问题</p>
<h5 id="3-babel-runtime"><a href="#3-babel-runtime" class="headerlink" title="3.babel-runtime"></a>3.babel-runtime</h5><p>.babelrc 中配置 babel-runtime，重新取变量名，解决 babel-polyfill 的全局污染</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .babelrc:</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;presets&quot;</span>: [</span><br><span class="line">        [</span><br><span class="line">            <span class="string">&quot;@babel/preset-env&quot;</span>,<span class="comment">//preset-env是一堆常用的ES6，7，...转ES5的plugins【preset可以作为babel插件的组合】</span></span><br><span class="line">            &#123;   <span class="comment">//Babel7.4之后弃用babel-polyfill。推荐直接使用core-js和regenerator</span></span><br><span class="line">                <span class="string">&quot;useBuiltIns&quot;</span>: <span class="string">&quot;usage&quot;</span>,<span class="comment">//设置babel-polyfill按需引入</span></span><br><span class="line">                <span class="string">&quot;corejs&quot;</span>: <span class="number">3</span> <span class="comment">//3：版本</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;plugins&quot;</span>: [    <span class="comment">//上述的presets如果还不够的话，可以在这里扩展</span></span><br><span class="line">        [</span><br><span class="line">            <span class="string">&quot;@babel/plugin-transform-runtime&quot;</span>,  <span class="comment">//配置babel-runtime，重新取变量名，解决babel-polyfill的全局污染</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;absoluteRuntime&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="string">&quot;corejs&quot;</span>: <span class="number">3</span>,</span><br><span class="line">                <span class="string">&quot;helpers&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;regenerator&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;useESModules&quot;</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// import &quot;@babel/polyfill&quot;     //这种是全部引入，按需引入的话在.babelrc中设置</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sum</span> = (<span class="params">a, b</span>) =&gt; a + b;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新的 API -- presets-env只解析ES6语法，只配置presets-env是不会解析ES6或者更高版本API是不管的</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">100</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> data);</span><br><span class="line"><span class="comment">// 新的 API</span></span><br><span class="line">[<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>].<span class="title function_">includes</span>(<span class="number">20</span>);</span><br><span class="line"><span class="comment">// Promise本身的语法，符合 ES5 语法规范，但babel没有Promise的api，所以需要使用babel-polifill补丁 --&gt; 引入&quot;@babel/polyfill&quot;</span></span><br><span class="line"><span class="comment">// 运行之后，解析完语法后变成 require(&quot;@babel/polyfill&quot;)  -- 但是babel不处理模块化,webpack才处理模块化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们不去污染全局环境，重新定义一个新的全局变量，防止和用户冲突</span></span><br><span class="line"><span class="comment">// window.Promise1 = function() &#123;&#125;</span></span><br><span class="line"><span class="comment">// Array.prototype.includes1 = function () &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用方想怎么定义就怎么定义，如果我们污染了全局环境，则两边有一方会出现副作用</span></span><br><span class="line"><span class="comment">// window.Promise = &#x27;abc&#x27;</span></span><br><span class="line"><span class="comment">// Array.prototype.includes = 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 generator函数（处理异步），被async/await代替</span></span><br><span class="line"><span class="comment">// generator语法： -- 【使用regenerator来解析】</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">tell</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;执行a处理&quot;</span>);</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;执行b处理&quot;</span>);</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&quot;b&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;执行c处理&quot;</span>);</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&quot;c&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> k = <span class="title function_">tell</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(k.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(k.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(k.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(k.<span class="title function_">next</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行npx babel src/index.js  -- 启用babel去编译index.js</span></span><br><span class="line"><span class="comment">// 使用webpack的话需要安装babel-loader</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>问：前端为何要进行打包和构建？</p>
</blockquote>
<p>代码层面：<br>体积更小（Tree-Shaking、压缩、合并），加载更快<br>编译高级语言或语法（TS、ES6+、模块化、scss）<br>兼容性和错误检查（Polyfill、postcss、eslint）</p>
<p>研发流程方面：<br>统一、高效的开发环境<br>统一的构建流程和产出标准<br>集成公司构建规范（提测、上线等）</p>
<blockquote>
<p>问：module chunk bundle 的区别？</p>
</blockquote>
<p>见上面</p>
<blockquote>
<p>问：loader 和 plugin 的区别？</p>
</blockquote>
<p>loader 模块转换器，如 less-&gt;css<br>plugin 扩展插件，如 HtmlWebpackPlugin</p>
<p>loader 将浏览器看不懂的代码变成看得懂的代码（翻译能力）<br>plugin（插件）拥有别的能力。具有可插拔（需要时安装，不用就删）。强大且灵活</p>
<blockquote>
<p>问：常见 loader 和 plugin 有哪些？</p>
</blockquote>
<p><a href="https://www.webpackjs.com/loaders/">https://www.webpackjs.com/loaders/</a><br><a href="https://www.webpackjs.com/plugins/">https://www.webpackjs.com/plugins/</a></p>
<blockquote>
<p>问：babel 和 webpack 的区别？</p>
</blockquote>
<p>babel-JS 新语法编译工具，不关心模块化<br>webpack-打包构建工具，是多个 loader plugin 的集合</p>
<blockquote>
<p>问：如何产出一个 lib</p>
</blockquote>
<p>参考 webpack.dll.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">output</span>:&#123;</span><br><span class="line">    <span class="comment">//lib的文件名</span></span><br><span class="line">    <span class="attr">filename</span>:<span class="string">&#x27;lodash.js&#x27;</span>,</span><br><span class="line">    <span class="comment">//输出lib到dist目录下</span></span><br><span class="line">    <span class="attr">path</span>:distPath,</span><br><span class="line">    <span class="comment">//lib的全局变量名</span></span><br><span class="line">    <span class="attr">library</span>:<span class="string">&#x27;lodash&#x27;</span>    <span class="comment">//&lt;------产出第三方的类</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>问：babel-polyfill 和 babel-runtime 的区别？</p>
</blockquote>
<p>babel-polyfill 会污染全局<br>babel-runtime 不会污染全局<br>产出第三方 lib 要用 babel-runtime</p>
<blockquote>
<p>问：webpack 如何实现懒加载？</p>
</blockquote>
<p>import()<br>结合 Vue React 异步组件<br>结合 Vue-router React-router 异步加载路由</p>
<blockquote>
<p>问：为何 Proxy 不能被 Polyfill？</p>
</blockquote>
<p>如 Class 可以用 function 模拟<br>如 Promise 可以用 callback 来模拟<br>但 Proxy 的功能用 Object.defineProperty 无法模拟</p>
<blockquote>
<p>问：webpack 如何优化构建速度？</p>
</blockquote>
<p>见上面</p>
<blockquote>
<p>问：webpack 如何性能优化 - 产出代码？</p>
</blockquote>
<p>见上面</p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>性能优化</tag>
        <tag>Webpack</tag>
        <tag>babel</tag>
      </tags>
  </entry>
  <entry>
    <title>Webpack深入浅出</title>
    <url>/2020/11/18/webpack%E5%AD%A6%E4%B9%A0/Webpack%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA/</url>
    <content><![CDATA[<h4 id="Webpack-深入浅出"><a href="#Webpack-深入浅出" class="headerlink" title="Webpack 深入浅出"></a>Webpack 深入浅出</h4><h5 id="1-Webpack-是什么？"><a href="#1-Webpack-是什么？" class="headerlink" title="1.Webpack 是什么？"></a>1.Webpack 是什么？</h5><p>webpack 是一个现代<strong>JavaScript</strong>应用程序的静态模块<strong>打包器</strong></p>
<p>这意味着 webpack 在不进行处理的情况下，只认识 JavaScript 这一种语言。</p>
<p><img src="https://www.daykalif.com/blog_img/chunk.png" alt="chunk"></p>
<h5 id="2-打包的场景"><a href="#2-打包的场景" class="headerlink" title="2.打包的场景"></a>2.打包的场景</h5><blockquote>
<p>为什么要打包？</p>
</blockquote>
<p>逻辑多、文件多，项目的复杂度提升了。</p>
<p>1.在打包之外，它还进化出了“翻译官技能”–loader：将浏览器看不懂的代码变成看得懂的代码 2.在加上一些了不得的“小动作”–plugin</p>
<p>它们有一个共同的特性：可插拔</p>
<p><em>webpack，不仅强大，而且灵活。</em></p>
<h4 id="Webpack-介绍"><a href="#Webpack-介绍" class="headerlink" title="Webpack 介绍"></a>Webpack 介绍</h4><ul>
<li>前端模块化</li>
<li>Webpack 打包的核心思路</li>
<li>Webpack 中的“关键人物”（loader 和 plugin）</li>
</ul>
<h4 id="Webpack-的原理与背景"><a href="#Webpack-的原理与背景" class="headerlink" title="Webpack 的原理与背景"></a>Webpack 的原理与背景</h4><h5 id="1-理解前端模块化"><a href="#1-理解前端模块化" class="headerlink" title="1.理解前端模块化"></a>1.理解前端模块化</h5><ul>
<li>作用域<br>运行时 - 变量 函数 对象 可访问性<br>作用域决定了代码中变量和其他资源的可见性</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">a</span>); <span class="comment">//1  -- 全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">//b is not defined  -- 局部变量</span></span><br></pre></td></tr></table></figure>

<ul>
<li>命名空间</li>
</ul>
<p>引用多个 js 文件时，如果变量设置为全局变量，则很容易被修改。为了避免被随意访问和篡改，命名空间解决了命名冲突。</p>
<p>但是命名空间写法还是会将数据暴露在全局下。</p>
<ul>
<li>模块化</li>
</ul>
<p>模块化作用域，可以使用闭包来阻止数据被暴露。</p>
<blockquote>
<p>模块化的优点：</p>
</blockquote>
<p>1).作用域封装<br>2).重用性<br>3).解除耦合（可以快速定位问题，提升系统可维护性）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"><span class="variable language_">window</span></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&quot;daykalif&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> sex = <span class="string">&quot;male&quot;</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">tell</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是：&quot;</span>, name);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我的性别是：&quot;</span>, sex);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">daykalifModule</span> = &#123; tell &#125;;</span><br><span class="line">&#125;)(<span class="variable language_">window</span>);</span><br></pre></td></tr></table></figure>

<h5 id="2-模块化方案进化史"><a href="#2-模块化方案进化史" class="headerlink" title="2.模块化方案进化史"></a>2.模块化方案进化史</h5><h6 id="1-AMD-Asynchronous-Module-Definition-异步模块定义"><a href="#1-AMD-Asynchronous-Module-Definition-异步模块定义" class="headerlink" title="1.AMD(Asynchronous Module Definition) - 异步模块定义"></a>1.AMD(Asynchronous Module Definition) - 异步模块定义</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//求和模块定义</span></span><br><span class="line"><span class="title function_">define</span>(<span class="string">&quot;getSum&quot;</span>, [<span class="string">&quot;math&quot;</span>], <span class="keyword">function</span> (<span class="params">math</span>) &#123;</span><br><span class="line">  <span class="comment">//第一个参数：当前模块定义（起名字）；第二个参数：当前模块依赖；第三个参数：函数【函数的返回值将定义的模块到处】或对象【这个对象本身就是当前模块的导出值】</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sum:&quot;</span> + math.<span class="title function_">sum</span>(a, b));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h6 id="2-CommonJS"><a href="#2-CommonJS" class="headerlink" title="2.CommonJS"></a>2.CommonJS</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过require函数引入</span></span><br><span class="line"><span class="keyword">const</span> math = <span class="built_in">require</span>(<span class="string">&quot;./math&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过exports将模块导出</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">getSum</span> = <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h6 id="3-ES6-Module"><a href="#3-ES6-Module" class="headerlink" title="3.ES6 Module"></a>3.ES6 Module</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// import 导入</span></span><br><span class="line"><span class="keyword">import</span> math <span class="keyword">from</span> <span class="string">&quot;./math&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// export导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-Webpack-的打包机制"><a href="#3-Webpack-的打包机制" class="headerlink" title="3.Webpack 的打包机制"></a>3.Webpack 的打包机制</h5><ul>
<li>webpack 与立即执行函数的关系</li>
<li>webpack 打包的核心逻辑</li>
</ul>
<p><strong>大体结构：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params">modules</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> installedModules = &#123;&#125;; <span class="comment">//定义一个installedModules对象，专门放置已经被加载过的模块</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">__webpack_require__</span>(<span class="params">moduleId</span>) &#123;</span><br><span class="line">    <span class="comment">//核心方法（相当于是浏览器下的require）</span></span><br><span class="line">    <span class="comment">/* code */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">__webpack_require__</span>(<span class="number">0</span>); <span class="comment">//enrty file  调用require，加载工程的入口模块</span></span><br><span class="line">&#125;)([</span><br><span class="line">  <span class="comment">/* modules array */</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<p><strong>核心方法：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">__webpack_require__</span>(<span class="params">moduleId</span>) &#123;</span><br><span class="line">  <span class="comment">// check if module is in cache</span></span><br><span class="line">  <span class="keyword">if</span> (installedModules[moduleId]) &#123;</span><br><span class="line">    <span class="comment">//1.判断当前调用进来的模块是否已经加载过了，去已加载模块列表里去查这个ID，如果已经加载过了，则直接把结果返回。</span></span><br><span class="line">    <span class="keyword">return</span> installedModules[moduleId].<span class="property">exports</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Create a new module (and put it into the cache)</span></span><br><span class="line">  <span class="keyword">var</span> <span class="variable language_">module</span> = (installedModules[moduleId] = &#123;</span><br><span class="line">    <span class="comment">//2.如果没有加载过，则存下来到installedModules做个记录。</span></span><br><span class="line">    <span class="attr">i</span>: moduleId,</span><br><span class="line">    <span class="attr">l</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">exports</span>: &#123;&#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// Excute the module function</span></span><br><span class="line">  modules[moduleId].<span class="title function_">call</span>(</span><br><span class="line">    <span class="comment">//3.将module的this指向到导出的结果里面，并且执行已经包装好的逻辑。</span></span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">exports</span>,</span><br><span class="line">    <span class="variable language_">module</span>,</span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">exports</span>,</span><br><span class="line">    __webpack_require__</span><br><span class="line">  );</span><br><span class="line">  <span class="comment">// Flag the module as loaded</span></span><br><span class="line">  <span class="variable language_">module</span>.<span class="property">l</span> = <span class="literal">true</span>;</span><br><span class="line">  <span class="comment">// Return the exports of the module</span></span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">module</span>.<span class="property">exports</span>; <span class="comment">//4.return 模块的返回值。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Webpack 打包过程：</strong></p>
<ul>
<li>从入口文件开始，分析整个应用的依赖树</li>
<li>将每个依赖模块包装起来，放到一个数组中等待调用【也就是立即执行函数的入参数组】</li>
<li>实现模块加载的方法，并把它放到模块执行的环境中，确保模块间可以互相调用</li>
<li>把执行入口文件的逻辑放在一个函数表达式中，并立即执行这个函数</li>
</ul>
<h4 id="Webpack-实战"><a href="#Webpack-实战" class="headerlink" title="Webpack 实战"></a>Webpack 实战</h4><h5 id="一、配置开发环境【配置开发环境–npm-与包管理】"><a href="#一、配置开发环境【配置开发环境–npm-与包管理】" class="headerlink" title="一、配置开发环境【配置开发环境–npm 与包管理】"></a>一、配置开发环境【配置开发环境–npm 与包管理】</h5><h6 id="1-包管理器"><a href="#1-包管理器" class="headerlink" title="1.包管理器"></a>1.包管理器</h6><p>【让开发者便捷的获取代码和分发代码的工具】<br>【npm 依赖于 node 环境】<br><code>npm init -y</code>初始化项目</p>
<h6 id="2-npm-核心特性"><a href="#2-npm-核心特性" class="headerlink" title="2.npm 核心特性"></a>2.npm 核心特性</h6><p>1).单线程、非阻塞型 I／O<br>2).事件驱动机制</p>
<h6 id="3-npm“仓库”与“依赖”的概念"><a href="#3-npm“仓库”与“依赖”的概念" class="headerlink" title="3.npm“仓库”与“依赖”的概念"></a>3.npm“仓库”与“依赖”的概念</h6><p>1).仓库遵循 npm 包规范的一个站点，它提供一下 API，让用户可以上传，下载，获取包信息，管理账号等等。<br>2).国内可以使用淘宝镜像。<code>npm config set registry https://registry.npm.taobao.org</code><br>3).<code>npm install lodash --save</code>&#x2F;&#x2F;安装在“dependencies”【生产环境的依赖】<br><code>npm install jquery --save-dev</code>&#x2F;&#x2F;安装在“devDependencies”【开发环境下的依赖】<br>4).<code>npm install --only=dev</code> –&gt; 只会安装 dev 下的包（构建工具，质量检测工具等，如 eslint）<br><code>npm install --only=prod</code> –&gt; 只会安装 dependencies 下的包（功能相关依赖）</p>
<p><strong>⚠️ 注意</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">devDependencies</span>:里面的插件只用于开发环境</span><br><span class="line">--save-dev      缩写【-D】</span><br><span class="line">如：构建工具，测试工具：babel，webpack（打包工具），gulp（前端自动化构建工具）</span><br><span class="line"></span><br><span class="line"><span class="attr">dependencies</span>:是需要发不到生产环境的，且生产环境是真是环境</span><br><span class="line">--save          缩写【-S】</span><br><span class="line">如：开发应用中使用的框架，库：jq，vue，react</span><br></pre></td></tr></table></figure>

<h6 id="4-npm“语义化版本”"><a href="#4-npm“语义化版本”" class="headerlink" title="4.npm“语义化版本”"></a>4.npm“语义化版本”</h6><p>1).^version:中版本和小版本（^1.0.1 -&gt; 1.x.x）<br>2).~version:小版本（～ 1.0.1 -&gt; 1.0.x）<br>3).version:特定版本</p>
<h6 id="5-npm-自定义工程脚本的方法"><a href="#5-npm-自定义工程脚本的方法" class="headerlink" title="5.npm 自定义工程脚本的方法"></a>5.npm 自定义工程脚本的方法</h6><blockquote>
<p>scripts 是 npm 提供的脚本命令功能，它有两种形式：</p>
</blockquote>
<p>1.npm 自己的生命周期命令(npm 发布和安装过程中，允许开发者写的钩子)<br>如：preinstall postinstall prepublish postpublish 2.自定义命令(npm 自有生命周期以外的命令)</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span><span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span><span class="string">&quot;webpack-dev-server&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span><span class="string">&quot;eslint ./src &amp;&amp; webpack&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h6 id="npm-install-的过程"><a href="#npm-install-的过程" class="headerlink" title="npm install 的过程"></a>npm install 的过程</h6><ul>
<li>寻找包版本信息文件（package.json），依照它来进行安装</li>
<li>查找 package.json 中的依赖，并检查项目中其他的版本信息文件</li>
<li>如果发现了新包，就更新版本信息文件</li>
</ul>
<h5 id="二、Webpack-构建工程"><a href="#二、Webpack-构建工程" class="headerlink" title="二、Webpack 构建工程"></a>二、Webpack 构建工程</h5><p>1.使用 webpack 构建简单的工程</p>
<p><code>npm install webpack-cli</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// moduleLog.js:</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;moduleLog is loaded&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">import</span> moduleLog <span class="keyword">from</span> <span class="string">&quot;./moduleLog&quot;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;indexjs is loaded&quot;</span>);</span><br><span class="line"><span class="title function_">moduleLog</span>();</span><br></pre></td></tr></table></figure>

<p>允许<code>webpack</code>即进行了打包。</p>
<p>2.webpack 配置文件</p>
<p>node_modules 下就有 webpack-der-server<br>控制台运行<code>./node_modules/.bin/webpack-dev-server</code>即可<br>使用 webpack-der-server 是不会打不出来 dist 文件，资源只存在与内存当中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;app.js&quot;</span>, <span class="comment">//工程资源的入口</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;dist&quot;</span>), <span class="comment">//绝对路径</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">port</span>: <span class="number">3000</span>, <span class="comment">//服务端口</span></span><br><span class="line">    <span class="attr">publicPath</span>: <span class="string">&quot;./dist&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>3.“一切皆模块与 loaders”的思想</p>
<p><strong>loader - 文件加载器</strong>：文件转译和编译功能</p>
<p>4.webpack 中的“关键人物”</p>
<p><strong>plugins</strong>用于增强 webpack 功能，强调事件监听的能力。plugins 可以在 webpack 内部监听事件，并且改变文件打包后的输出结果。</p>
<p>–如代码压缩:<br><code>npm install uglifyjs-webpack-plugin --save-dev</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* style.css: */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#333333</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.js:</span></span><br><span class="line"><span class="keyword">import</span> moduleLog <span class="keyword">from</span> <span class="string">&quot;./moduleLog&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./style.css&quot;</span>; <span class="comment">//webpack下可以引入css，less，scss，png等</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;indexjs is loaded&quot;</span>);</span><br><span class="line"><span class="title function_">moduleLog</span>();</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">UglifyJSPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;uglifyjs-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;app.js&quot;</span>, <span class="comment">//工程资源的入口</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;dist&quot;</span>), <span class="comment">//绝对路径</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">port</span>: <span class="number">3000</span>, <span class="comment">//服务端口</span></span><br><span class="line">    <span class="attr">publicPath</span>: <span class="string">&quot;./dist&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          <span class="comment">//执行顺序从后往前</span></span><br><span class="line">          <span class="string">&quot;style-loader&quot;</span>, <span class="comment">//需要安装npm install style-loader --save-dev</span></span><br><span class="line">          <span class="string">&quot;css-loader&quot;</span>, <span class="comment">//css-loader解决了css语法解析前提是需要安装npm install css-loader --save-dev</span></span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="keyword">new</span> <span class="title class_">UglifyJSPlugin</span>()],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="三、Webpack-核心特性"><a href="#三、Webpack-核心特性" class="headerlink" title="三、Webpack 核心特性"></a>三、Webpack 核心特性</h5><p>1.webpack 会默认将 index.js 当作入口文件；创建一个 main.js 作为出口文件</p>
<p>2.要想自定义入口文件和出口文件，需要自己手动配置</p>
<p>创建一个 webpack.config.js 文件<br>在这个文件中引入 path 模块：const path&#x3D;require(‘path’);<br>entry：工程资源的入口，依赖树的根；<br>output：配置对象，对最终打包的产物进行配置；<br>–path：必须是绝对路径；<br>–filename：打包结果的文件名<br>3.webpack-dev-server:起一个本地服务，监听工程文件的改动，自动重新打包，刷新浏览器；</p>
<p>默认监听端口号 8080；</p>
<p>手动配置：在 webpack.config.js 文件中<br>–devServer{<br>port:3000,&#x2F;&#x2F;指定服务端口<br>publicPath:’&#x2F;dist’&#x2F;&#x2F;指定打包之后的资源路径<br>}</p>
<p>通过 webpack-dev-server 打包与 webpack 的最大区别在于：打包时不会生成实际的文件，只存在于内存之中</p>
<p>4.一切皆模块</p>
<p>webpack 将所有的资源都当作模块，例如样式等，需要用到 loader<br>loader:文件加载器；实现文件的转义编译；<br>在项目中安装好对应的 loader 之后，还需要在配置文件中进行配置；<br>5.plugins</p>
<p>增强事件监听的能力，可以改变文件打包后的输出结果<br>压缩功能<br>–安装 uglifyjs-webpack-plugin 插件，并配置文件</p>
<h5 id="四、更强的-Webpack：loader-和-plugin"><a href="#四、更强的-Webpack：loader-和-plugin" class="headerlink" title="四、更强的 Webpack：loader 和 plugin"></a>四、更强的 Webpack：loader 和 plugin</h5><p><strong>webpack 构建工程示例：</strong></p>
<ul>
<li>使用 webpack 构建 react 工程</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.</span><br><span class="line">mkdir react-demo</span><br><span class="line">cd react-demo</span><br><span class="line">npm init -y     //此时拥有npm包管理，package.json</span><br><span class="line"></span><br><span class="line">2.安装react依赖</span><br><span class="line">npm install react react-dom --save</span><br><span class="line"></span><br><span class="line">3.</span><br><span class="line">npm install webpack webpack-cli -d  //安装webpack依赖，以及webpack命令行工具,此时使用./node_modules/.bin/webpack运行</span><br><span class="line">如果想使用运行webpack便可运行项目，需要在安装webpack时改为全局安装npm install webpack webpack-cli -g</span><br></pre></td></tr></table></figure>

<ul>
<li>babel 的用法和原理</li>
</ul>
<p>babel 核心库和命令行工具：<code>npm install @babel/core @babel/cli -g</code></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/App.jsx:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDom</span> <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">//ES6语法</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>React 大法好<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br><span class="line"><span class="title class_">ReactDom</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;app&quot;</span>));</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html: --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<p>要处理 ES6 语法，需要 babel 转换规则，一个集合的的包：<code>npm install @babel/preset-env</code></p>
<p>演示 babel：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test.js:</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><code>babel test.js --presets=@babel/preset-env</code></p>
<hr>
<p>项目中使用 babel 的话，可以在 package.json 中进行配置：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;babel&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;presets&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;@babel/presets-env&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>或者：</strong></p>
<p>新建.babelrc:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;preset&quot;:[&quot;@babel/preset-env&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>高频 loader 和 plugin</li>
<li>生产级别的 webpack 配置</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/index.jsx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App&quot;</span>; <span class="comment">//不写后缀是因为在webpack.config.js中配置了resolve</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">UglifyJSPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;uglifyjs-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);<span class="comment">//`npm install html-webpack-plugin -d`</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">resolve</span>:&#123;</span><br><span class="line">        <span class="attr">extentions</span>:[<span class="string">&#x27;.wasm&#x27;</span>,<span class="string">&#x27;.mjs&#x27;</span>,<span class="string">&#x27;.js&#x27;</span>,<span class="string">&#x27;.jsx&#x27;</span>,<span class="string">&#x27;.json&#x27;</span>]<span class="comment">//以这些为后缀的文件，引入时都可以不写后缀</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attr">entry</span>:path.<span class="title function_">resolve</span>(__dirname,<span class="string">&#x27;src/index.jsx&#x27;</span>),<span class="comment">//工程资源的入口</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="attr">path</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;dist&#x27;</span>),<span class="comment">//绝对路径</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&#x27;bundle.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">devServer</span>:&#123;</span><br><span class="line">        <span class="attr">port</span>:<span class="number">3000</span>,<span class="comment">//服务端口</span></span><br><span class="line">        <span class="attr">publicPath</span>:<span class="string">&#x27;./dist&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/\.css$/</span>,</span><br><span class="line">                <span class="attr">use</span>:[<span class="comment">//执行顺序从后往前</span></span><br><span class="line">                    <span class="string">&#x27;style-loader&#x27;</span>,<span class="comment">//需要安装npm install style-loader --save-dev</span></span><br><span class="line">                    <span class="string">&#x27;css-loader&#x27;</span><span class="comment">//css-loader解决了css语法解析前提是需要安装npm install css-loader --save-dev</span></span><br><span class="line">                ]</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/\.jsx?/</span>,<span class="comment">//匹配js和jsx</span></span><br><span class="line">                <span class="attr">exclude</span>:<span class="regexp">/node_modules/</span>,</span><br><span class="line">                <span class="attr">use</span>:&#123;</span><br><span class="line">                    <span class="attr">loader</span>:<span class="string">&#x27;babel-loader&#x27;</span>,<span class="comment">//需要安装npm install babel-loader</span></span><br><span class="line">                    <span class="attr">presets</span>:[<span class="comment">//在这里写了就表示webpack可以不用去找.babelrc文件了，转译规则在这里。</span></span><br><span class="line">                        <span class="built_in">require</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;@babel/preset-react&#x27;</span>),<span class="comment">//转译jsx的规则//安装npm install @babel/preset-env @babel/preset-react</span></span><br><span class="line">                        [<span class="built_in">require</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;@babel/preset-env&#x27;</span>,&#123;<span class="attr">modules</span>:<span class="literal">false</span>&#125;)]<span class="comment">//&#123;modules:false&#125;表示编译ES6代码的时候，是否需要将import语法也当作ES6语法来编译。webpack可以识别import和export。我们已经有了CommonJS模块化方案，因此modules就可以置成false</span></span><br><span class="line">                    ],</span><br><span class="line">                    <span class="attr">cacheDirectory</span>:<span class="literal">true</span><span class="comment">//编译结果是否缓存，默认值false</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">UglifyJSPlugin</span>(),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">template</span>:path.<span class="title function_">resolve</span>(__dirname,<span class="string">&#x27;src/index.html&#x27;</span>),<span class="comment">//HtmlWebpackPlugin将src/index.html重新打包生成html文件</span></span><br><span class="line">            <span class="attr">filename</span>:<span class="string">&#x27;index.html&#x27;</span><span class="comment">//在目标文件下的名称</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行<code>webpack --mode development</code>进行打包</p>
<p>运行<code>webpack-dev-server</code> 或 <code>webpack-dev-server --open</code>进行项目预览，webpack4.x 也可以运行<code>webpack serve</code>进行预览。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json:</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;scripts:&quot;</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span><span class="string">&quot;webpack-dev-server --mode development --open&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>此时可以运行<code>npm run start</code> –&gt; 会自刷新页面</p>
<p><strong>使用 HMR 热更新：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpackage.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> react = <span class="built_in">require</span>(<span class="string">&quot;webpack&quot;</span>);<span class="comment">//引入</span></span><br><span class="line"></span><br><span class="line"><span class="attr">plugins</span>:[</span><br><span class="line">    <span class="keyword">new</span> webpack.<span class="title class_">HotModuleReplacementPlugin</span>()</span><br><span class="line">],</span><br><span class="line"><span class="attr">devServer</span>:&#123;</span><br><span class="line">    <span class="attr">hot</span>:<span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/index.jsx:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">module</span>.<span class="property">hot</span>) &#123;</span><br><span class="line">  <span class="variable language_">module</span>.<span class="property">hot</span>.<span class="title function_">accept</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;热替换出BUG了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时运行<code>webpack-dev-server --open</code>，可以实现热更新。</p>
<h4 id="Webpack-与前端性能"><a href="#Webpack-与前端性能" class="headerlink" title="Webpack 与前端性能"></a>Webpack 与前端性能</h4><h5 id="1-Webpack-性能调优"><a href="#1-Webpack-性能调优" class="headerlink" title="1.Webpack 性能调优"></a>1.Webpack 性能调优</h5><ul>
<li>打包结果优化</li>
</ul>
<p>打包之后的分析器：<code>npm install webpack-bundle-analyzer</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">TerserPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;terser-webpack-plugin&quot;</span>); <span class="comment">//uglify在ES5好用，ES6下不好用，因此有uglify-es拉的一个分支变成Terser进行维护。</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">BundleAnalyzerPlugin</span> =</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&quot;webpack-bundle-analy&quot;</span>).<span class="property">BundleAnalyzerPlugin</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="attr">minimizer</span>: [</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">TerserPlugin</span>(&#123;</span><br><span class="line">        <span class="attr">cache</span>: <span class="literal">true</span>, <span class="comment">//使用缓存，加快构建速度</span></span><br><span class="line">        <span class="attr">parallel</span>: <span class="literal">true</span>, <span class="comment">//开启多线程</span></span><br><span class="line">        <span class="attr">terserOptions</span>: &#123;</span><br><span class="line">          <span class="attr">compress</span>: &#123;</span><br><span class="line">            <span class="attr">unused</span>: <span class="literal">true</span>, <span class="comment">//没有用的代码剔除</span></span><br><span class="line">            <span class="attr">drop_debugger</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">drop_console</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">dead_code</span>: <span class="literal">true</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;),</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">BundleAnalyzerPlugin</span>(),</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>运行打包<code>npm run build</code></p>
<ul>
<li>构建过程优化</li>
</ul>
<p>思路 1:减少查找<br>思路 2:减少解析<br>思路 3:利用多线程<br>思路 4:预编译<br>思路 5:缓存【实效性不强】<br>思路 6:切换 loader，plugin【如：fast-sass-loader 比 sass-loader 快很多。】</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ⚠️注意：nodejs是单线程的，webpack运行在nodejs上，所以webpack是单线程的，处理事情是一件一件处理的。通过插件实现多线程打包。</span></span><br><span class="line"><span class="comment">// 1.thread-loader  --针对loader优化，将loader放到线程池worker中，达到多线程构建的目的。使用时，它在配置项中，它必须放在所有loader之前。</span></span><br><span class="line"><span class="comment">// 2.HappyPack是多进程模型，可以加速代码构建。利用多核cpu，HappyPack可以将任务分配到多个子进程。当子进程完成后返回给主进程。</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HappyPack</span> = <span class="built_in">require</span>(<span class="string">&#x27;happypack&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> happyThreadPool = <span class="title class_">Happypack</span>.<span class="title class_">ThreadPool</span>(&#123;<span class="attr">size</span>:<span class="title class_">OscillatorNode</span>.<span class="title function_">cups</span>().<span class="property">length</span>&#125;)<span class="comment">//根据cpu树创建线程池--利用多进程实现多线程</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Sourcemap 本质上是一个信息文件，里面储存着代码转换前后的对应位置信息。它记录了转换压缩后的代码所对应的转换前的源代码位置，是源代码和生产代码的映射。 Sourcemap 解决了在打包过程中，代码经过压缩，去空格以及 babel 编译转化后，由于代码之间差异性过大，造成无法debug的问题。 ----  构建时间长，也可以优化</span></span><br><span class="line"></span><br><span class="line"><span class="attr">module</span>:&#123;</span><br><span class="line">    <span class="attr">noParse</span>:<span class="regexp">/\node_modules\/(jquery\.js)/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="attr">rules</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">test</span>:<span class="regexp">/\.jsx?/</span>,</span><br><span class="line">        <span class="attr">exclude</span>:<span class="regexp">/node_modules/</span>,</span><br><span class="line">        <span class="attr">include</span>:path.<span class="title function_">resolve</span>(<span class="string">&#x27;src&#x27;</span>), <span class="comment">//优先级比exclude和test最高</span></span><br><span class="line">        <span class="attr">use</span>:[</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">            <span class="string">&#x27;thread-loader&#x27;</span>,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"><span class="attr">plugins</span>:[</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HappyPack</span>(&#123;</span><br><span class="line">        <span class="attr">id</span>:<span class="string">&#x27;jsx&#x27;</span>,</span><br><span class="line">        <span class="attr">threads</span>:happyThreadPool,</span><br><span class="line">        <span class="attr">loaders</span>:[<span class="string">&#x27;babel-loader&#x27;</span>]<span class="comment">//有的loader才支持HappyPack  -- 如：url-loader file-loader就不支持HappyPack</span></span><br><span class="line">    &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ul>
<li>Tree-Shaking</li>
</ul>
<p>本质：消除无用的 JS 代码。无用代码消除，这个过程叫做 DCE。</p>
<p>webpack 会分析 ES6 的 modules 引入情况，去除不使用的 import 的引入，借助一些工具如 TerserPlugin，对无用模块进行删除。这些工具只有在 production 的时候才会使用到这些工具。<br>mode 为 dev 下，只会去掉无用的引用。<br>mode 为 production 下，会彻底删除无用代码。</p>
<h4 id="线程和进程的区别"><a href="#线程和进程的区别" class="headerlink" title="线程和进程的区别"></a>线程和进程的区别</h4><p>类似”进程是资源分配的最小单位，线程是 CPU 调度的最小单位“这样的回答感觉太抽象，都不太容易让人理解。<br>做个简单的比喻：进程&#x3D;火车，线程&#x3D;车厢线程在进程下行进（单纯的车厢无法运行）</p>
<ul>
<li>一个进程可以包含多个线程（一辆火车可以有多个车厢）</li>
<li>不同进程间数据很难共享（一辆火车上的乘客很难换到另外一辆火车，比如站点换乘）</li>
<li>同一进程下不同线程间数据很易共享（A 车厢换到 B 车厢很容易）</li>
<li>进程要比线程消耗更多的计算机资源（采用多列火车相比多个车厢更耗资源）</li>
<li>进程间不会相互影响，一个线程挂掉将导致整个进程挂掉（一列火车不会影响到另外一列火车，但是如果一列火车上中间的一节车厢着火了，将影响到所有车厢）</li>
<li>进程可以拓展到多机，线程最多扩展到多核 CPU，而不能扩展到多机。（不同火车可以开在多个轨道上，同一火车的车厢不能在行进的不同的轨道上）</li>
<li>进程使用的内存地址可以上锁，即一个线程使用某些共享内存时，其他线程必须等它结束，才能使用这一块内存。（比如火车上的洗手间）－”互斥锁”</li>
<li>进程使用的内存地址可以限定使用量（比如火车上的餐厅，最多只允许多少人进入，如果满了需要在门口等，等有人出来了才能进去）－“信号量”</li>
</ul>
<h4 id="Webpack-不止”pack”"><a href="#Webpack-不止”pack”" class="headerlink" title="Webpack 不止”pack”"></a>Webpack 不止”pack”</h4><blockquote>
<p>webpack 是什么？</p>
</blockquote>
<ul>
<li>前端发展的产物</li>
<li>模块化打包方案</li>
<li>工程化方案</li>
</ul>
<p><img src="https://www.daykalif.com/blog_img/webpack-bundle-analyzer.png" alt="webpack-bundle-analyzer"></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>性能优化</tag>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>Reack Hook官网实践</title>
    <url>/2021/11/22/React/Reack-Hook%E5%AE%98%E7%BD%91%E5%AE%9E%E8%B7%B5%EF%BC%88%E8%A7%86%E9%A2%91%EF%BC%9Apokemon%EF%BC%89/</url>
    <content><![CDATA[<h3 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1.创建项目"></a>1.创建项目</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npx create-react-app my-app</span><br><span class="line">cd my-app</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure>

<h3 id="2-useState"><a href="#2-useState" class="headerlink" title="2.useState"></a>2.useState</h3><h4 id="1-错误使用"><a href="#1-错误使用" class="headerlink" title="1).错误使用"></a>1).错误使用</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 报错：</span></span><br><span class="line"><span class="comment">        React Hook &quot;useState&quot; is called conditionally. </span></span><br><span class="line"><span class="comment">        React Hooks must be called in the exact same order in every component </span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        Hook Rules：</span></span><br><span class="line"><span class="comment">        只在最顶层使用 Hook</span></span><br><span class="line"><span class="comment">    不要在循环，条件或嵌套函数中调用 Hook， 确保总是在你的 React 函数的最顶层以及任何 return 之前调用他们。</span></span><br><span class="line"><span class="comment">        遵守这条规则，你就能确保 Hook 在每一次渲染中都按照同样的顺序被调用。</span></span><br><span class="line"><span class="comment">        这让 React 能够在多次的 useState 和 useEffect 调用之间保持 hook 状态的正确。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> [b, setB] = <span class="title function_">useState</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello bilibili<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<h4 id="2-正确使用"><a href="#2-正确使用" class="headerlink" title="2).正确使用"></a>2).正确使用</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> h = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">colot:</span> &quot;<span class="attr">hotpink</span>&quot; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">    hello bilibili</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">AppChild</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; count &#125; = props;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">React.Fragment</span>&gt;</span>lower:&#123;count&#125;<span class="tag">&lt;/<span class="name">React.Fragment</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">AppChild</span> <span class="attr">count</span>=<span class="string">&#123;count&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;increment<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<h4 id="3-使用-2-个值"><a href="#3-使用-2-个值" class="headerlink" title="3).使用 2 个值"></a>3).使用 2 个值</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 命名规则：Naming Convention</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * 第二个变量也必须是camelCase！！</span></span><br><span class="line"><span class="comment">   * 第一个变量是xxx的话，第二个必须是setXxx</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">const</span> [value, setValue] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [value1, setValue1] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;value&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;value1&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          setValue(value + 1);</span></span><br><span class="line"><span class="language-xml">          setValue1(value1 + 10);</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        add</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<h4 id="4-编写-2-个-input-框，实现输入姓名和密码；（函数组件中调用）"><a href="#4-编写-2-个-input-框，实现输入姓名和密码；（函数组件中调用）" class="headerlink" title="4).编写 2 个 input 框，实现输入姓名和密码；（函数组件中调用）"></a>4).编写 2 个 input 框，实现输入姓名和密码；（函数组件中调用）</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [form, setForm] = <span class="title function_">useState</span>(&#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">name</span>=<span class="string">&quot;username&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&#123;form.username&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          /**</span></span><br><span class="line"><span class="language-xml">           * ...(spread operator)</span></span><br><span class="line"><span class="language-xml">           * 这应该算是逻辑运算符与 &amp;&amp; || 是一类的呀</span></span><br><span class="line"><span class="language-xml">           */</span></span><br><span class="line"><span class="language-xml">          setForm(&#123; ...form, username: e.target.value &#125;);</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">name</span>=<span class="string">&quot;password&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&#123;form.password&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          setForm(&#123; ...form, password: e.target.value &#125;);</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<p>实现自定义 hook，省略重复操作：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useForm</span> = (<span class="params">initialValue</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [form, setForm] = <span class="title function_">useState</span>(initialValue);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleChange</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setForm</span>(&#123; ...form, [e.<span class="property">target</span>.<span class="property">name</span>]: e.<span class="property">target</span>.<span class="property">value</span> &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> [form, handleChange];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> initForm = &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&quot;yoyo&quot;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> [form, handleChange] = <span class="title function_">useForm</span>(initForm);</span><br><span class="line">  <span class="comment">// 复用自定义hook</span></span><br><span class="line">  <span class="keyword">const</span> [myForm, handleChange2] = <span class="title function_">useForm</span>(&#123; <span class="attr">firstName</span>: <span class="string">&quot;yoyo&quot;</span>, <span class="attr">lastName</span>: <span class="string">&quot;&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">name</span>=<span class="string">&quot;username&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&#123;form.username&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChange</span>=<span class="string">&#123;handleChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">name</span>=<span class="string">&quot;password&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&#123;form.password&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChange</span>=<span class="string">&#123;handleChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<h3 id="3-useEffect"><a href="#3-useEffect" class="headerlink" title="3.useEffect"></a>3.useEffect</h3><h4 id="1-基本用法"><a href="#1-基本用法" class="headerlink" title="1).基本用法"></a>1).基本用法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Tool</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// componentDidMount</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;App&quot;</span>);</span><br><span class="line">    <span class="comment">// componentWillUnmount</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;go&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, []); <span class="comment">// dependency array</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>工具人<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [showTool, setShowTool] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;showTool &amp;&amp; <span class="tag">&lt;<span class="name">Tool</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setShowTool(!showTool)&#125;&gt;召唤<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<h4 id="2-useEffect-的使用示例"><a href="#2-useEffect-的使用示例" class="headerlink" title="2).useEffect 的使用示例"></a>2).useEffect 的使用示例</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Tool</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">focusOnUserName</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">      <span class="comment">// 召唤出工具人之后，按下“反斜杠”，自动聚焦输入框</span></span><br><span class="line">      <span class="keyword">if</span> (e.<span class="property">keyCode</span> === <span class="number">191</span>) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input[name=&quot;username&quot;]&#x27;</span>).<span class="title function_">focus</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;keydown&quot;</span>, focusOnUserName);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;keydown&quot;</span>, focusOnUserName);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, []); <span class="comment">// dependency array</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>工具人<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [showTool, setShowTool] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;showTool &amp;&amp; <span class="tag">&lt;<span class="name">Tool</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setShowTool(!showTool)&#125;&gt;召唤<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<h4 id="3-useEffect-使用-fetch-请求数据"><a href="#3-useEffect-使用-fetch-请求数据" class="headerlink" title="3).useEffect 使用 fetch 请求数据"></a>3).useEffect 使用 fetch 请求数据</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Tool</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [pokemon, setPokemon] = <span class="title function_">useState</span>(&#123;&#125;);</span><br><span class="line">  <span class="keyword">const</span> [isLoading, setIsLoading] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setIsLoading</span>(<span class="literal">true</span>);</span><br><span class="line">    <span class="title function_">fetch</span>(<span class="string">&quot;https://pokeapi.co/api/v2/pokemon/1/&quot;</span>)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> res.<span class="title function_">json</span>())</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">        <span class="title function_">setPokemon</span>(res);</span><br><span class="line">        <span class="title function_">setIsLoading</span>(<span class="literal">false</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;, []); <span class="comment">// dependency array</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>工具人<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;!isLoading &amp;&amp; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;pokemon.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;/* 如果没有返回值，可以不使用isLoading，改用 xx?.yy 问号形式 */&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;pokemon.sprites.front_default&#125;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">      )&#125;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [showTool, setShowTool] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;showTool &amp;&amp; <span class="tag">&lt;<span class="name">Tool</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setShowTool(!showTool)&#125;&gt;召唤<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<h4 id="4-自定义-hook，实现-fetch-和-axios-的统一处理"><a href="#4-自定义-hook，实现-fetch-和-axios-的统一处理" class="headerlink" title="4).自定义 hook，实现 fetch 和 axios 的统一处理"></a>4).自定义 hook，实现 fetch 和 axios 的统一处理</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户可以自定义请求方式：</span></span><br><span class="line"><span class="comment"> *  axios or fetch   安装依赖：yarn add axios</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// fetch</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fetcher</span> = (<span class="params">url</span>) =&gt; <span class="title function_">fetch</span>(url).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> res.<span class="title function_">json</span>());</span><br><span class="line"><span class="comment">// axios</span></span><br><span class="line"><span class="comment">// const fetcher = url =&gt; Axios.get(url).then(res =&gt; res.data);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useFetch</span> = (<span class="params">url, fetcher</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [state, setState] = <span class="title function_">useState</span>(&#123; <span class="attr">data</span>: <span class="literal">null</span>, <span class="attr">isLoading</span>: <span class="literal">false</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">fn</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="title function_">setState</span>(&#123; <span class="attr">data</span>: <span class="literal">null</span>, <span class="attr">isLoading</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">      <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">fetcher</span>(url);</span><br><span class="line">      <span class="title function_">setState</span>(&#123; data, <span class="attr">isLoading</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">fn</span>();</span><br><span class="line">  &#125;, [fetcher, url]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> state;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [number, setNumber] = <span class="title function_">useState</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="comment">// 使用自定义的hook，重命名data为pokemon</span></span><br><span class="line">  <span class="comment">// axios or fetch   安装依赖：yarn add axios</span></span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">data</span>: pokemon, isLoading &#125; = <span class="title function_">useFetch</span>(</span><br><span class="line">    <span class="string">`https://pokeapi.co/api/v2/pokemon/<span class="subst">$&#123;number&#125;</span>/`</span>,</span><br><span class="line">    fetcher</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setNumber(number + 1)&#125;&gt;召唤下一个pokemon<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;!isLoading ? (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;pokemon?.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;pokemon?.sprites?.front_default&#125;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">      ) : (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是谁？<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">      )&#125;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<h3 id="3-useRef"><a href="#3-useRef" class="headerlink" title="3.useRef"></a>3.useRef</h3><h4 id="1-useRef-的使用场景"><a href="#1-useRef-的使用场景" class="headerlink" title="1).useRef 的使用场景"></a>1).useRef 的使用场景</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useEffect, useRef &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户可以自定义请求方式：</span></span><br><span class="line"><span class="comment"> *  axios or fetch   安装依赖：yarn add axios</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// fetch</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fetcher</span> = (<span class="params">url</span>) =&gt; <span class="title function_">fetch</span>(url).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> res.<span class="title function_">json</span>());</span><br><span class="line"><span class="comment">// axios</span></span><br><span class="line"><span class="comment">// const fetcher = url =&gt; Axios.get(url).then(res =&gt; res.data);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useFetch</span> = (<span class="params">url, fetcher</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [state, setState] = <span class="title function_">useState</span>(&#123; <span class="attr">data</span>: <span class="literal">null</span>, <span class="attr">isLoading</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">  <span class="keyword">const</span> isMount = <span class="title function_">useRef</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      isMount.<span class="property">current</span> = <span class="literal">false</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">fn</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="title function_">setState</span>(&#123; <span class="attr">data</span>: <span class="literal">null</span>, <span class="attr">isLoading</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">      <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">fetcher</span>(url);</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isMount.<span class="property">current</span>) &#123;</span><br><span class="line">          <span class="title function_">setState</span>(&#123; data, <span class="attr">isLoading</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">fn</span>();</span><br><span class="line">  &#125;, [fetcher, url]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> state;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [number, setNumber] = <span class="title function_">useState</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="comment">// 使用自定义的hook，重命名data为pokemon</span></span><br><span class="line">  <span class="comment">// axios or fetch   安装依赖：yarn add axios</span></span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">data</span>: pokemon, isLoading &#125; = <span class="title function_">useFetch</span>(</span><br><span class="line">    <span class="string">`https://pokeapi.co/api/v2/pokemon/<span class="subst">$&#123;number&#125;</span>/`</span>,</span><br><span class="line">    fetcher</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> copyRef = <span class="title function_">useRef</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&#123;pokemon?.forms?.[0].url&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChange</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;&#125;&#125;</span></span><br><span class="line"><span class="language-xml">        name=&quot;url&quot;</span></span><br><span class="line"><span class="language-xml">        ref=&#123;copyRef&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">color:</span> &quot;<span class="attr">gray</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">cursor:</span> &quot;<span class="attr">pointer</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">textDecoration:</span> &quot;<span class="attr">underline</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onMouseOver</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          // 相当于 document.querySelector(&#x27;[name=&quot;url&quot;]&#x27;)</span></span><br><span class="line"><span class="language-xml">          console.log(copyRef.current);</span></span><br><span class="line"><span class="language-xml">          copyRef.current.select();</span></span><br><span class="line"><span class="language-xml">          document.execCommand(&quot;copy&quot;);</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        复制</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setNumber(number + 1)&#125;&gt;召唤下一个pokemon<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;!isLoading ? (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;pokemon?.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;pokemon?.sprites?.front_default&#125;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">      ) : (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是谁？<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">      )&#125;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<h4 id="2-useRef-高级用法，实现刷新页面就使-input-框-focus"><a href="#2-useRef-高级用法，实现刷新页面就使-input-框-focus" class="headerlink" title="2).useRef 高级用法，实现刷新页面就使 input 框 focus"></a>2).useRef 高级用法，实现刷新页面就使 input 框 focus</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useEffect, useRef &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三方的Input组件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Input</span> = (<span class="params">&#123; type, name, value, onChange &#125;, ref</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">type</span>=<span class="string">&#123;type&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">name</span>=<span class="string">&#123;name&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">value</span>=<span class="string">&#123;value&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">onChange</span>=<span class="string">&#123;onChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MyInput</span> = <span class="title class_">React</span>.<span class="title function_">forwardRef</span>(<span class="title class_">Input</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> nameRef = <span class="title function_">useRef</span>();</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 刷新页面就使input框focus</span></span><br><span class="line">    nameRef.<span class="property">current</span>.<span class="title function_">focus</span>();</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">MyInput</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&quot;daykalif&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChange</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;&#125;&#125;</span></span><br><span class="line"><span class="language-xml">        name=&quot;url&quot;</span></span><br><span class="line"><span class="language-xml">        ref=&#123;nameRef&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<h3 id="4-useLayoutEffect"><a href="#4-useLayoutEffect" class="headerlink" title="4.useLayoutEffect"></a>4.useLayoutEffect</h3><h4 id="1-基本使用（useLayoutEffect-执行时机会比-useEffect-先执行）"><a href="#1-基本使用（useLayoutEffect-执行时机会比-useEffect-先执行）" class="headerlink" title="1).基本使用（useLayoutEffect 执行时机会比 useEffect 先执行）"></a>1).基本使用（useLayoutEffect 执行时机会比 useEffect 先执行）</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useEffect, useLayoutEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [emoji, setEmoji] = <span class="title function_">useState</span>(<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;from Effect&quot;</span>);</span><br><span class="line">    <span class="title function_">setEmoji</span>(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// useLayoutEffect 会比useEffect先执行</span></span><br><span class="line">  <span class="title function_">useLayoutEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setEmoji</span>(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;from layoutEffect&quot;</span>);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* 输出aaa */&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;emoji&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<h3 id="5-useCallback"><a href="#5-useCallback" class="headerlink" title="5.useCallback"></a>5.useCallback</h3><h4 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1).基本使用"></a>1).基本使用</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useRef, useCallback &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Counter</span> = <span class="title class_">React</span>.<span class="title function_">memo</span>(<span class="function">(<span class="params">&#123; onClick, name &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> number = <span class="title function_">useRef</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;number is &quot;</span> + number.<span class="property">current</span>++);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span>&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [counter, setCounter] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用useCallback用于缓存无副作用的方法</span></span><br><span class="line">  <span class="keyword">const</span> onClick = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setCounter</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> c + <span class="number">1</span>);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 不使用useCallback将每次点击都刷新Counter组件</span></span><br><span class="line">  <span class="comment">// const onClick = () =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//   setCounter(c =&gt; c + 1);</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;counter&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Counter</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span> <span class="attr">name</span>=<span class="string">&#123;</span>&quot;<span class="attr">增加</span>&quot;&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<h3 id="6-useMemo"><a href="#6-useMemo" class="headerlink" title="6.useMemo"></a>6.useMemo</h3><h4 id="1-基本使用-1"><a href="#1-基本使用-1" class="headerlink" title="1).基本使用"></a>1).基本使用</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useRef, useCallback, useMemo &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Counter</span> = <span class="title class_">React</span>.<span class="title function_">memo</span>(<span class="function">(<span class="params">&#123; onClick, name &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> number = <span class="title function_">useRef</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;number is &quot;</span> + number.<span class="property">current</span>++);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span>&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [counter, setCounter] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用useMemo后，会根据counter重新计算，点击增加按钮会有卡顿</span></span><br><span class="line">  <span class="comment">// 如果没有依赖项，这个方法可以被缓存，点击增加按钮可以瞬间刷新内容</span></span><br><span class="line">  <span class="keyword">const</span> bigNum = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3000000000</span>; i++) &#123;</span><br><span class="line">      num++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num + counter;</span><br><span class="line">  &#125;, [counter]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用useCallback用于缓存无副作用的方法</span></span><br><span class="line">  <span class="keyword">const</span> onClick = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setCounter</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> c + <span class="number">1</span>);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;counter&#125; - &#123;bigNum&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Counter</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span> <span class="attr">name</span>=<span class="string">&#123;</span>&quot;<span class="attr">增加</span>&quot;&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<h3 id="7-useImperativeHandle"><a href="#7-useImperativeHandle" class="headerlink" title="7.useImperativeHandle"></a>7.useImperativeHandle</h3><h4 id="1-基本使用-2"><a href="#1-基本使用-2" class="headerlink" title="1).基本使用"></a>1).基本使用</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useEffect, useRef, useImperativeHandle &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三方的Input组件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MyInput</span> = <span class="title class_">React</span>.<span class="title function_">forwardRef</span>(<span class="function">(<span class="params">&#123; type, name, value, onChange &#125;, ref</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> inputRef = <span class="title function_">useRef</span>();</span><br><span class="line">  <span class="comment">// 操作dom Element</span></span><br><span class="line">  <span class="title function_">useImperativeHandle</span>(</span><br><span class="line">    ref,</span><br><span class="line">    <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">      <span class="attr">focus</span>: <span class="function">() =&gt;</span> inputRef.<span class="property">current</span>.<span class="title function_">focus</span>(),</span><br><span class="line">      <span class="attr">hey</span>: <span class="function">() =&gt;</span> <span class="title function_">alert</span>(<span class="string">&quot;hello react&quot;</span>),</span><br><span class="line">    &#125;),</span><br><span class="line">    []</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">type</span>=<span class="string">&#123;type&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">name</span>=<span class="string">&#123;name&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">value</span>=<span class="string">&#123;value&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">onChange</span>=<span class="string">&#123;onChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">ref</span>=<span class="string">&#123;inputRef&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> nameRef = <span class="title function_">useRef</span>();</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(nameRef);</span><br><span class="line">    nameRef.<span class="property">current</span>.<span class="title function_">focus</span>();</span><br><span class="line">    nameRef.<span class="property">current</span>.<span class="title function_">hey</span>();</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">MyInput</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&quot;daykalif&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChange</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;&#125;&#125;</span></span><br><span class="line"><span class="language-xml">        name=&quot;url&quot;</span></span><br><span class="line"><span class="language-xml">        ref=&#123;nameRef&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<h3 id="8-useDebugValue"><a href="#8-useDebugValue" class="headerlink" title="8.useDebugValue"></a>8.useDebugValue</h3><h4 id="1-基本使用-3"><a href="#1-基本使用-3" class="headerlink" title="1).基本使用"></a>1).基本使用</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useEffect, useRef, useDebugValue &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fetch</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fetcher</span> = (<span class="params">url</span>) =&gt; <span class="title function_">fetch</span>(url).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> res.<span class="title function_">json</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useFetch</span> = (<span class="params">url, fetcher</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [state, setState] = <span class="title function_">useState</span>(&#123; <span class="attr">data</span>: <span class="literal">null</span>, <span class="attr">isLoading</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">  <span class="keyword">const</span> isMount = <span class="title function_">useRef</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// useDebugValue记录isMount</span></span><br><span class="line">  <span class="title function_">useDebugValue</span>(isMount);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      isMount.<span class="property">current</span> = <span class="literal">false</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">fn</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="title function_">setState</span>(&#123; <span class="attr">data</span>: <span class="literal">null</span>, <span class="attr">isLoading</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">      <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">fetcher</span>(url);</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isMount.<span class="property">current</span>) &#123;</span><br><span class="line">          <span class="title function_">setState</span>(&#123; data, <span class="attr">isLoading</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">fn</span>();</span><br><span class="line">  &#125;, [fetcher, url]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// useDebugValue记录state</span></span><br><span class="line">  <span class="title function_">useDebugValue</span>(state);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> state;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [number, setNumber] = <span class="title function_">useState</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">data</span>: pokemon, isLoading &#125; = <span class="title function_">useFetch</span>(</span><br><span class="line">    <span class="string">`https://pokeapi.co/api/v2/pokemon/<span class="subst">$&#123;number&#125;</span>/`</span>,</span><br><span class="line">    fetcher</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setNumber(number + 1)&#125;&gt;召唤下一个pokemon<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;!isLoading ? (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;pokemon?.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;pokemon?.sprites?.front_default&#125;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">      ) : (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是谁？<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">      )&#125;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<h3 id="9-useReducer"><a href="#9-useReducer" class="headerlink" title="9.useReducer"></a>9.useReducer</h3><h4 id="1-基本用法-1"><a href="#1-基本用法-1" class="headerlink" title="1).基本用法"></a>1).基本用法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useReducer &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">reducer</span> = (<span class="params">state, action</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;increment&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> state + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;decrement&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> state - <span class="number">1</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [counter, dispatch] = <span class="title function_">useReducer</span>(reducer, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;counter&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;increment&quot; &#125;)&#125;&gt;increment<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;decrement&quot; &#125;)&#125;&gt;decrement<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<h4 id="2-实现-TodoList"><a href="#2-实现-TodoList" class="headerlink" title="2).实现 TodoList"></a>2).实现 TodoList</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useReducer &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">reducer</span> = (<span class="params">state, action</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;input&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">todos</span>: state.<span class="property">todos</span>,</span><br><span class="line">        <span class="attr">text</span>: action.<span class="property">payload</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;add&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">todos</span>: [...state.<span class="property">todos</span>, &#123; <span class="attr">thing</span>: action.<span class="property">payload</span> &#125;],</span><br><span class="line">        <span class="attr">text</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [&#123; todos, text &#125;, dispatch] = <span class="title function_">useReducer</span>(reducer, &#123;</span><br><span class="line">    <span class="attr">todos</span>: [],</span><br><span class="line">    <span class="attr">text</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">form</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onSubmit</span>=<span class="string">&#123;(e)</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          e.preventDefault();</span></span><br><span class="line"><span class="language-xml">          dispatch(&#123; type: &quot;add&quot;, payload: text &#125;);</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">value</span>=<span class="string">&#123;text&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> dispatch(&#123; type: &quot;input&quot;, payload: e.target.value &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">        /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;todos?.map((t, idx) =&gt; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;idx&#125;</span>&gt;</span>&#123;t.thing&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        ))&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<h4 id="3-TodoList-完成"><a href="#3-TodoList-完成" class="headerlink" title="3).TodoList 完成"></a>3).TodoList 完成</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useReducer &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">reducer</span> = (<span class="params">state, action</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;input&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">todos</span>: state.<span class="property">todos</span>,</span><br><span class="line">        <span class="attr">text</span>: action.<span class="property">payload</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;add&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">todos</span>: [...state.<span class="property">todos</span>, &#123; <span class="attr">thing</span>: action.<span class="property">payload</span>, <span class="attr">completed</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">        <span class="attr">text</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;complete&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">todos</span>: state.<span class="property">todos</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">t, idx</span>) =&gt;</span></span><br><span class="line">          idx === action.<span class="property">payload</span></span><br><span class="line">            ? &#123; <span class="attr">thing</span>: t.<span class="property">thing</span>, <span class="attr">completed</span>: !t.<span class="property">completed</span> &#125;</span><br><span class="line">            : t</span><br><span class="line">        ),</span><br><span class="line">        <span class="attr">tetx</span>: state.<span class="property">text</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [&#123; todos, text &#125;, dispatch] = <span class="title function_">useReducer</span>(reducer, &#123;</span><br><span class="line">    <span class="attr">todos</span>: [],</span><br><span class="line">    <span class="attr">text</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">form</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onSubmit</span>=<span class="string">&#123;(e)</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          e.preventDefault();</span></span><br><span class="line"><span class="language-xml">          dispatch(&#123; type: &quot;add&quot;, payload: text &#125;);</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">value</span>=<span class="string">&#123;text&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> dispatch(&#123; type: &quot;input&quot;, payload: e.target.value &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">        /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;todos?.map((t, idx) =&gt; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">key</span>=<span class="string">&#123;idx&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">textDecoration:</span> <span class="attr">t.completed</span> ? &quot;<span class="attr">line-through</span>&quot; <span class="attr">:</span> &quot;&quot; &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;complete&quot;, payload: idx &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">          &gt;</span></span><br><span class="line"><span class="language-xml">            &#123;t.thing&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        ))&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<h3 id="10-useContext"><a href="#10-useContext" class="headerlink" title="10.useContext"></a>10.useContext</h3><h4 id="1-基本用法-2"><a href="#1-基本用法-2" class="headerlink" title="1).基本用法"></a>1).基本用法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useReducer, createContext, useContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MyContext</span> = <span class="title function_">createContext</span>();</span><br><span class="line"><span class="title class_">MyContext</span>.<span class="property">displayName</span> = <span class="string">&quot;PokemonContext&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Tools</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; counter, dispatch &#125; = <span class="title function_">useContext</span>(<span class="title class_">MyContext</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>counter:&#123;counter&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;increment&quot; &#125;)&#125;&gt;add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">counterReducer</span> = (<span class="params">state, action</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;increment&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">counter</span>: state.<span class="property">counter</span> + <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;decrement&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">counter</span>: state.<span class="property">counter</span> - <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [&#123; counter &#125;, counterDispatch] = <span class="title function_">useReducer</span>(counterReducer, &#123;</span><br><span class="line">    <span class="attr">counter</span>: <span class="number">1</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">MyContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;</span> <span class="attr">counter</span>, <span class="attr">dispatch:</span> <span class="attr">counterDispatch</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Tools</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;counter&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> counterDispatch(&#123; type: &quot;increment&quot; &#125;)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        increment</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> counterDispatch(&#123; type: &quot;decrement&quot; &#125;)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        decrement</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">MyContext.Provider</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<p>参考视频：<br><a href="https://www.bilibili.com/video/BV1Ua4y1e74i">https://www.bilibili.com/video/BV1Ua4y1e74i</a></p>
]]></content>
  </entry>
  <entry>
    <title>react hooks实战指南--腾讯NEXT学院视频</title>
    <url>/2021/03/13/React/react-hooks%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97%EF%BC%88%E8%A7%86%E9%A2%91%EF%BC%9A%E8%85%BE%E8%AE%AFNext%E5%AD%A6%E9%99%A2%EF%BC%89/</url>
    <content><![CDATA[<h2 id="React-Hooks-实战"><a href="#React-Hooks-实战" class="headerlink" title="React Hooks 实战"></a>React Hooks 实战</h2><h3 id="核心主旨-–-什么是-UI？"><a href="#核心主旨-–-什么是-UI？" class="headerlink" title="核心主旨 – 什么是 UI？"></a>核心主旨 – 什么是 UI？</h3><ul>
<li>如果这样思考：UI &#x3D; f(data),准确吗？</li>
<li>如何理解：函数 f 将数据(data)<strong>映射</strong>到<strong>用户界面</strong>(UI) 【MVVM 思想】</li>
<li>例如：[商品 1,商品 2,商品 3…] -&gt; 商品列表</li>
</ul>
<h3 id="状态是数据吗？"><a href="#状态是数据吗？" class="headerlink" title="状态是数据吗？"></a>状态是数据吗？</h3><ul>
<li>状态有一个隐含的意思，就是存在改变状态的行为(behavior).</li>
<li>例如：点赞数（like-状态）隐含了增加一个赞（addLike-行为）；而这个行为（点赞）只有在某中上下文（context）中才会存在。</li>
</ul>
<h3 id="React-Hooks-的基本概念"><a href="#React-Hooks-的基本概念" class="headerlink" title="React Hooks 的基本概念"></a>React Hooks 的基本概念</h3><h4 id="什么是-React-Hooks"><a href="#什么是-React-Hooks" class="headerlink" title="什么是 React Hooks"></a>什么是 React Hooks</h4><ul>
<li>React16.8 的新增特性，可以让你在不屑 class 的情况下使用 state 等 react 特性。</li>
<li>hooks 是对函数式组件的极大加强</li>
</ul>
<p><strong>数据拆分：不变的是属性，变化的是状态</strong></p>
<p>状态影射了行为，因此行为可以封装在状态内…</p>
<p>v &#x3D; f(props,state){…}</p>
<p>状态–&gt;视图<br>作用–&gt;视图<br>上下文–&gt;视图</p>
<p>属性–&gt;视图</p>
<h4 id="什么是-Hooks？"><a href="#什么是-Hooks？" class="headerlink" title="什么是 Hooks？"></a>什么是 Hooks？</h4><ul>
<li>重新定义 UI 界面是什么，有哪些要素：</li>
<li>state hook</li>
<li>effect hook</li>
<li>context hook</li>
<li>函数 V &#x3D; f(props,state) , UI &#x3D; V usehook1() usehook2() …</li>
</ul>
<h4 id="一、3-个基础的-hook：状态、作用和上下文"><a href="#一、3-个基础的-hook：状态、作用和上下文" class="headerlink" title="一、3 个基础的 hook：状态、作用和上下文"></a>一、3 个基础的 hook：状态、作用和上下文</h4><h5 id="1-状态"><a href="#1-状态" class="headerlink" title="1).状态"></a>1).状态</h5><ul>
<li>在某个上下文中（用户界面）数据和改变数据的行为</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//计数器例子</span></span><br><span class="line"><span class="keyword">const</span> [count,setCount] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">        状态    行为       hooks <span class="variable constant_">API</span></span><br></pre></td></tr></table></figure>

<p>React hooks 帮助大家将数据和行为绑定。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      your count : &#123;count&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          setCount(count + 1);</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        Add</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>改版：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useCount</span>(<span class="params">initialValue</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(initialValue);</span><br><span class="line">  <span class="keyword">return</span> [</span><br><span class="line">    count,</span><br><span class="line">    <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setCount</span>(count + <span class="number">1</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  ];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, addCount] = <span class="title function_">useCount</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      your count : &#123;count&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> addCount()&#125;&gt;Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="2-作用（Effect）"><a href="#2-作用（Effect）" class="headerlink" title="2).作用（Effect）"></a>2).作用（Effect）</h5><ul>
<li>UI 如果这样实现，它不仅仅是一个将数据映射到视图的函数。</li>
<li>客观世界存在输入和输出之外的东西（改变 URL，改变环境…）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">UI</span> = data -&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;xxx&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`you clicked count <span class="subst">$&#123;count&#125;</span> times`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      your count : &#123;count&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          setCount(count + 1);</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        Add</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>解读 useEffect：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">log</span>(<span class="params">count</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`you clicked count <span class="subst">$&#123;count&#125;</span> times`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 读作：依赖xx变化的作用   useEffect(log.bind(null,count),deps);</span></span><br><span class="line">  <span class="title function_">useEffect</span>(log.<span class="title function_">bind</span>(<span class="literal">null</span>, count), []); <span class="comment">//依赖空变化的作用，但是空本身不会变化，因此只会执行1次；</span></span><br><span class="line">  <span class="title function_">useEffect</span>(log.<span class="title function_">bind</span>(<span class="literal">null</span>, count), [<span class="number">1</span>, <span class="number">2</span>]); <span class="comment">//依赖1,2变化的作用，但是1,2是常数，本身不会变化，因此也只会执行1次；</span></span><br><span class="line">  <span class="title function_">useEffect</span>(log.<span class="title function_">bind</span>(<span class="literal">null</span>, count), [count]); <span class="comment">//依赖count变化的作用，则count一旦变化就会触发；</span></span><br><span class="line">  <span class="title function_">useEffect</span>(log.<span class="title function_">bind</span>(<span class="literal">null</span>, count)); <span class="comment">//依赖 变化 变化的作用，则这个function有任何状态发生变化就会触发；</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      your count : &#123;count&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          setCount(count + 1);</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        Add</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>定时器：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(count); <span class="comment">//每秒输出一个0</span></span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;, []); <span class="comment">//整个effect只会执行一次；因此count只会保存第一次的count值；</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(count); <span class="comment">//输出当前值</span></span><br><span class="line">  &#125;, [count]);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="number">5</span>) &#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&quot;https://www.baidu.com&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [count]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      your count : &#123;count&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          setCount(count + 1);</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        Add</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h6 id="React-Hooks-如何描述作用（Effect）"><a href="#React-Hooks-如何描述作用（Effect）" class="headerlink" title="React Hooks 如何描述作用（Effect）"></a>React Hooks 如何描述作用（Effect）</h6><ul>
<li>客观世界有 url、计时器、logger…我们做不到完美而纯净（pure functuinal）的视图渲染。</li>
<li>相同（或类似）的作用如何进行复用，React 团队提出了这个方案。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(someEffect)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">someEffect</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>深入定时器：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useInterval</span>(<span class="params">callback, time</span>) &#123;</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> I = <span class="built_in">setInterval</span>(callback, time);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(I);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, []); <span class="comment">//构造一个定时器，这个构造只要产生一次就行了，所以它的依赖为空;</span></span><br><span class="line">  <span class="comment">// 方式1的时候使用的就是最初版本的callback，用了最初版本的count：0</span></span><br><span class="line">  <span class="comment">// 方式2的时候react会帮助我们取最新的count值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 方式1:</span></span><br><span class="line">  <span class="title function_">useInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(count); <span class="comment">//计时器在一直执行，但是值是没有变的。</span></span><br><span class="line">    <span class="title function_">setCount</span>(count + <span class="number">1</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 方式2:</span></span><br><span class="line">  <span class="title function_">useInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(<span class="function">(<span class="params">count</span>) =&gt;</span> count + <span class="number">1</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      your count : &#123;count&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          setCount(count + 1);</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        Add</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="3-上下文"><a href="#3-上下文" class="headerlink" title="3).上下文"></a>3).上下文</h5><h6 id="React-Hooks-解决方案"><a href="#React-Hooks-解决方案" class="headerlink" title="React Hooks 解决方案"></a>React Hooks 解决方案</h6><ul>
<li>UI 产生的过程中，能够从 context 中获取信息（知识）。</li>
<li>UI 更像一个人而不是机械的结构。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">UI</span> =&gt; <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; userType &#125; = <span class="title function_">useContext</span>(<span class="title class_">UserTypeContext</span>)</span><br><span class="line">    <span class="keyword">switch</span>(userType)&#123;</span><br><span class="line">        ...不同的渲染逻辑</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 useContext：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> themes = &#123;</span><br><span class="line">  <span class="attr">light</span>: &#123;</span><br><span class="line">    <span class="attr">foreground</span>: <span class="string">&quot;#000000&quot;</span>,</span><br><span class="line">    <span class="attr">background</span>: <span class="string">&quot;#eeeeee&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">dark</span>: &#123;</span><br><span class="line">    <span class="attr">foreground</span>: <span class="string">&quot;#ffffff&quot;</span>,</span><br><span class="line">    <span class="attr">background</span>: <span class="string">&quot;#222222&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ThemeContext</span> = <span class="title class_">React</span>.<span class="title function_">createContext</span>(&#123;</span><br><span class="line">  <span class="attr">theme</span>: themes.<span class="property">light</span>,</span><br><span class="line">  <span class="attr">toogle</span>: <span class="function">() =&gt;</span> &#123;&#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [theme, setTheme] = <span class="title function_">useState</span>(themes.<span class="property">light</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ThemeContext.Provider</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">value</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">theme</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">toogle:</span> () =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          setTheme(theme === themes.light ? themes.dark : themes.light);</span></span><br><span class="line"><span class="language-xml">        &#125;,</span></span><br><span class="line"><span class="language-xml">      &#125;&#125;</span></span><br><span class="line"><span class="language-xml">    &gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Toolbar</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ThemeContext.Provider</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Toolbar</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">ThemeButton</span> /&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ThemeButton</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> context = <span class="title function_">useContext</span>(<span class="title class_">ThemeContext</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">fontSize:</span> &quot;<span class="attr">32px</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">color:</span> <span class="attr">context.theme.foreground</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">backgroundColor:</span> <span class="attr">context.theme.background</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">        context.toogle();</span></span><br><span class="line"><span class="language-xml">      &#125;&#125;</span></span><br><span class="line"><span class="language-xml">    &gt;</span></span><br><span class="line"><span class="language-xml">      Click Me!</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="4-reducer"><a href="#4-reducer" class="headerlink" title="4).reducer"></a>4).reducer</h5><ul>
<li>（设计模式）提供一种抽象状态行为的通用封装（action），以及计算过程的抽象方案（reducer）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useReducer &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reducer</span>(<span class="params">state, action</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(state, action);</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;add&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;sub&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">count</span>: state.<span class="property">count</span> - <span class="number">1</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [counter, dispatch] = <span class="title function_">useReducer</span>(reducer, &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      your counter is: &#123;counter.count&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;add&quot; &#125;)&#125;&gt;+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;sub&quot; &#125;)&#125;&gt;-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="5-引用行为（reference）"><a href="#5-引用行为（reference）" class="headerlink" title="5).引用行为（reference）"></a>5).引用行为（reference）</h5><ul>
<li>引用 React 管理以外的对象</li>
<li>需要在 React 之外做一些事情：例如：focus、媒体对象操作等</li>
<li>通常搭配 useEffect</li>
<li>附带作用：方便地保存值</li>
</ul>
<p>useRef:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useRef &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">useRefExample</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> refInput = <span class="title function_">useRef</span>();</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;refInput&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          refInput.current.focus();</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        Focus</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>保存值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useRef &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">useRefExample</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [counter, setCounter] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> prev = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>当前值：&#123;counter&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>前一个值：&#123;prev.current&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          prev.current = counter;</span></span><br><span class="line"><span class="language-xml">          setCounter((x) =&gt; x + 1);</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        Click me to add</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          prev.current = counter;</span></span><br><span class="line"><span class="language-xml">          setCounter((x) =&gt; x - 1);</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        Click me to sub</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="二、缓存"><a href="#二、缓存" class="headerlink" title="二、缓存"></a>二、缓存</h5><ul>
<li><p>为什么要缓存？</p>
</li>
<li><p>V &#x3D; f(state,props) useHooks…</p>
</li>
<li><p>想在 f 中 new Object();只创建一次</p>
</li>
<li><p>一些复杂的计算只有在状态改变后才做</p>
</li>
<li><p>缓存一个函数（useCallback）</p>
</li>
<li><p>缓存一个值（useMemo）</p>
</li>
</ul>
<p>缓存值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useMemo &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">UseMemoExample</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [counter, setCounter] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> memorizedText = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;run useMemo function,每点击10次才会+1&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`this is a memorized text <span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span>`</span>;</span><br><span class="line">  &#125;, [<span class="title class_">Math</span>.<span class="title function_">floor</span>(counter / <span class="number">10</span>)]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;memorizedText&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>you clicked &#123;counter&#125; times<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCounter(counter + 1)&#125;&gt;Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">UseMemoExample</span>;</span><br></pre></td></tr></table></figure>

<p>缓存函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useMemo, useCallback &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> s1 = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"><span class="keyword">const</span> s2 = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">UseMemoExample</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [counter, setCounter] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">addCount1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">setCounter</span>(counter + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  s1.<span class="title function_">add</span>(addCount1);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s1.<span class="property">size</span>); <span class="comment">//累加</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> addCount2 = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setCounter</span>(counter + <span class="number">1</span>);</span><br><span class="line">  &#125;, []);</span><br><span class="line">  s2.<span class="title function_">add</span>(addCount2);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s2.<span class="property">size</span>); <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>you clicked &#123;counter&#125; times<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;addCount1&#125;</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;addCount2&#125;</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">UseMemoExample</span>;</span><br></pre></td></tr></table></figure>

<h5 id="三、使用建议"><a href="#三、使用建议" class="headerlink" title="三、使用建议"></a>三、使用建议</h5><h6 id="Tips1-使用-React-mome-减少重绘次数"><a href="#Tips1-使用-React-mome-减少重绘次数" class="headerlink" title="Tips1:使用 React.mome 减少重绘次数"></a>Tips1:使用 React.mome 减少重绘次数</h6><h6 id="Tips2-hooks-同步问题"><a href="#Tips2-hooks-同步问题" class="headerlink" title="Tips2:hooks 同步问题"></a>Tips2:hooks 同步问题</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">myEffect</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> i = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(count); <span class="comment">//count一直为0</span></span><br><span class="line">      <span class="title function_">setCount</span>(<span class="function">(<span class="params">count</span>) =&gt;</span> count + <span class="number">1</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="built_in">clearInterval</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// useEffect(myEffect, []);//效果的依赖为空，因此效果被使用了一次；每次进入这个大的Test函数，导致myEffect函数只有第一次生效【这个就是同步问题】，这个count是在第一个myEffect函数的闭包中被创建出来的，count拿的都是最早的count</span></span><br><span class="line">  <span class="title function_">useEffect</span>(myEffect, [count]); <span class="comment">//确保每一次的count都是最新的，但这样会导致每次都需要执行setInterval，会创建很多个setInterval；因此需要进行回收；此时这个setInterval就相当于setTimeout；</span></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h6 id="Tips3-可以创造自己的-hooks-封装行为"><a href="#Tips3-可以创造自己的-hooks-封装行为" class="headerlink" title="Tips3:可以创造自己的 hooks 封装行为"></a>Tips3:可以创造自己的 hooks 封装行为</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sleep</span>(<span class="params">time</span>) &#123;</span><br><span class="line">  <span class="comment">//3</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;, time);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getPerson</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//1</span></span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">sleep</span>(<span class="number">200</span>); <span class="comment">//2</span></span><br><span class="line">  <span class="keyword">return</span> [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>]; <span class="comment">//4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">usePerson</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [list, setList] = <span class="title function_">useState</span>(<span class="literal">null</span>); <span class="comment">//8</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">request</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//6</span></span><br><span class="line">    <span class="keyword">const</span> list = <span class="keyword">await</span> <span class="title function_">getPerson</span>(); <span class="comment">//7</span></span><br><span class="line">    <span class="title function_">setList</span>(list); <span class="comment">//9</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(request, []); <span class="comment">//5</span></span><br><span class="line">  <span class="keyword">return</span> list; <span class="comment">//10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> list = <span class="title function_">usePerson</span>(); <span class="comment">//11</span></span><br><span class="line">  <span class="keyword">if</span> (list === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">//12</span></span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Loding...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;list.map((name, i) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">        return <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>;</span></span><br><span class="line"><span class="language-xml">      &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h6 id="Tips4-每种行为一个-Hook"><a href="#Tips4-每种行为一个-Hook" class="headerlink" title="Tips4:每种行为一个 Hook"></a>Tips4:每种行为一个 Hook</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="comment">// 这种是一个概念下的东西，所以可以进行一个hooks的整体使用，但是建议进行封装</span></span><br><span class="line">  <span class="keyword">const</span> [personList, setPersonList] = <span class="title function_">useState</span>(&#123;</span><br><span class="line">    <span class="attr">isError</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">loading</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">data</span>: [],</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这是不同概念下的东西，不建议在一个hooks中进行整体使用，应当拆分成多个hooks进行调用</span></span><br><span class="line">  <span class="keyword">const</span> [state, setState] = <span class="title function_">useState</span>(&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">company</span>: <span class="string">&quot;Apple&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;state.count&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;state.company&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          setState((prev) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">            return &#123;</span></span><br><span class="line"><span class="language-xml">              company: prev.company,</span></span><br><span class="line"><span class="language-xml">              count: prev.count + 1,</span></span><br><span class="line"><span class="language-xml">            &#125;;</span></span><br><span class="line"><span class="language-xml">          &#125;);</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        btn</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h6 id="Tips5-不要再思考生命周期"><a href="#Tips5-不要再思考生命周期" class="headerlink" title="Tips5:不要再思考生命周期"></a>Tips5:不要再思考生命周期</h6><h5 id="四、拖拽列表实战"><a href="#四、拖拽列表实战" class="headerlink" title="四、拖拽列表实战"></a>四、拖拽列表实战</h5><p>App.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./styles.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> useDraggable <span class="keyword">from</span> <span class="string">&quot;./useDraggable&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> list = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">src</span>: <span class="string">&quot;https://www.daykalif.com/blog_img/vuex.jpg&quot;</span>,</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;万事屋找我&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;吃吃吃……&quot;</span>,</span><br><span class="line">    <span class="attr">src</span>: <span class="string">&quot;https://www.daykalif.com/blog_img/promise1.png&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;汪汪&quot;</span>,</span><br><span class="line">    <span class="attr">src</span>: <span class="string">&quot;https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=968093909,4033932240&amp;fm=26&amp;gp=0.jpg&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">cls</span>(<span class="params">def, ...conditions</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> list = [def];</span><br><span class="line">  conditions.<span class="title function_">forEach</span>(<span class="function">(<span class="params">cond</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (cond[<span class="number">0</span>]) &#123;</span><br><span class="line">      list.<span class="title function_">push</span>(cond[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> list.<span class="title function_">join</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">DraggableList</span> <span class="attr">list</span>=<span class="string">&#123;list&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">DraggableList</span>(<span class="params">&#123; list &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; dragList, createDraggerProps, createDropperProps &#125; =</span><br><span class="line">    <span class="title function_">useDraggable</span>(list);</span><br><span class="line">  <span class="keyword">return</span> dragList.<span class="title function_">map</span>(<span class="function">(<span class="params">item, i</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (item.<span class="property">type</span> === <span class="string">&quot;BAR&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Bar</span> <span class="attr">id</span>=<span class="string">&#123;i&#125;</span> &#123;<span class="attr">...createDropperProps</span>(<span class="attr">i</span>)&#125; <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span> /&gt;</span></span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">Draggable</span> &#123;<span class="attr">...createDraggerProps</span>(<span class="attr">i</span>, <span class="attr">item.id</span>)&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Card</span> &#123;<span class="attr">...item.data</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Draggable</span>&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//List</span></span><br><span class="line"><span class="comment">// Draggable</span></span><br><span class="line"><span class="comment">// Bar</span></span><br><span class="line"><span class="comment">// Draggable</span></span><br><span class="line"><span class="comment">// Bar</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Draggable</span>(<span class="params">&#123; children, eventHandlers, dragging, id &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#123;<span class="attr">...eventHandlers</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">draggable</span>=<span class="string">&#123;true&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">className</span>=<span class="string">&#123;cls(</span>&quot;<span class="attr">draggable</span>&quot;, [<span class="attr">dragging</span> === <span class="string">id,</span> &quot;<span class="attr">dragging</span>&quot;])&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Bar</span>(<span class="params">&#123; id, dragging, dragOver, eventHandlers &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (id === dragging + <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#123;<span class="attr">...eventHandlers</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">className</span>=<span class="string">&#123;cls(</span>&quot;<span class="attr">draggable--bar</span>&quot;, [<span class="attr">dragOver</span> === <span class="string">id,</span> &quot;<span class="attr">dragover</span>&quot;])&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">className</span>=<span class="string">&quot;inner&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">height:</span> <span class="attr">id</span> === <span class="string">dragOver</span> ? &quot;<span class="attr">80px</span>&quot; <span class="attr">:</span> &quot;<span class="attr">0px</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Card</span>(<span class="params">&#123; src, title &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;src&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;title&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>useDraggable.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DRAGGABLE</span> = <span class="string">&quot;DRAGGABLE&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">BAR</span> = <span class="string">&quot;BAR&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">draggable</span>(<span class="params">item, id</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="variable constant_">DRAGGABLE</span>,</span><br><span class="line">    id,</span><br><span class="line">    <span class="attr">data</span>: item,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">insertBars</span>(<span class="params">list</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>; <span class="comment">// ID</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">newBar</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="variable constant_">BAR</span>,</span><br><span class="line">      <span class="attr">id</span>: i++,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// |A|B|C|</span></span><br><span class="line">  <span class="keyword">return</span> [<span class="title function_">newBar</span>()].<span class="title function_">concat</span>(</span><br><span class="line">    ...list.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> [<span class="title function_">draggable</span>(item, i++), <span class="title function_">newBar</span>()];</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">clacChanging</span>(<span class="params">list, drag, drop</span>) &#123;</span><br><span class="line">  list = list.<span class="title function_">slice</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> dragItem = list[drag];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// dir &gt; 0从下往上 &lt;0 从上往下</span></span><br><span class="line">  <span class="keyword">const</span> dir = drag &gt; drop ? -<span class="number">2</span> : <span class="number">2</span>;</span><br><span class="line">  <span class="comment">// drop的地方是bar</span></span><br><span class="line">  <span class="keyword">const</span> end = dir &gt; <span class="number">0</span> ? drop - <span class="number">1</span> : drop + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = drag; i != end; i += dir) &#123;</span><br><span class="line">    list[i] = list[i + dir];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  list[end] = dragItem;</span><br><span class="line">  <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">useDraggable</span>(<span class="params">list</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [dragList, setDragList] = <span class="title function_">useState</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">insertBars</span>(list);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> [dragOver, setDragOver] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> [dragging, setDragging] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    dragList,</span><br><span class="line">    <span class="attr">createDropperProps</span>: <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        dragging,</span><br><span class="line">        dragOver,</span><br><span class="line">        <span class="attr">eventHandlers</span>: &#123;</span><br><span class="line">          <span class="attr">onDragOver</span>: <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">            e.<span class="title function_">preventDefault</span>();</span><br><span class="line">            <span class="title function_">setDragOver</span>(id);</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">onDragLeave</span>: <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">            e.<span class="title function_">preventDefault</span>();</span><br><span class="line">            <span class="title function_">setDragOver</span>(<span class="literal">null</span>);</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">onDrop</span>: <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">            e.<span class="title function_">preventDefault</span>();</span><br><span class="line">            <span class="title function_">setDragOver</span>(<span class="literal">null</span>);</span><br><span class="line">            <span class="title function_">setDragList</span>(<span class="function">(<span class="params">list</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="title function_">clacChanging</span>(list, dragging, id);</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">createDraggerProps</span>: <span class="function">(<span class="params">id, key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        id,</span><br><span class="line">        key,</span><br><span class="line">        dragging,</span><br><span class="line">        <span class="attr">eventHandlers</span>: &#123;</span><br><span class="line">          <span class="attr">onDragStart</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">setDragging</span>(id);</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">onDragEnd</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">setDragging</span>(<span class="literal">null</span>);</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./index.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> serviceWorker <span class="keyword">from</span> <span class="string">&quot;./serviceWorker&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// If you want your app to work offline and load faster, you can change</span></span><br><span class="line"><span class="comment">// unregister() to register() below. Note this comes with some pitfalls.</span></span><br><span class="line"><span class="comment">// Learn more about service workers: https://bit.ly/CRA-PWA</span></span><br><span class="line">serviceWorker.<span class="title function_">unregister</span>();</span><br></pre></td></tr></table></figure>

<p>styles.css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.App</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.draggable--bar</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: background-color <span class="number">1s</span> ease-out;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.draggable--bar</span><span class="selector-class">.dragover</span> <span class="selector-class">.inner</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: height <span class="number">0.3s</span> ease;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: grey <span class="number">1px</span> <span class="number">2px</span> <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  user-select: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">36px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">72px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">72px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.draggable</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: white;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.draggable</span><span class="selector-class">.dragging</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>学习一下 Haskell type class</p>
</blockquote>
<p>参考视频：<br><a href="https://www.bilibili.com/video/BV1Ge411W7Ra">https://www.bilibili.com/video/BV1Ge411W7Ra</a></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>组件化</tag>
        <tag>React</tag>
        <tag>react-hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>【技术胖】React Hooks使用</title>
    <url>/2021/02/07/React/React-Hooks%E4%BD%BF%E7%94%A8%EF%BC%88%E8%A7%86%E9%A2%91%EF%BC%9A%E6%8A%80%E6%9C%AF%E8%83%96%EF%BC%89/</url>
    <content><![CDATA[<h4 id="React-Hooks-简介"><a href="#React-Hooks-简介" class="headerlink" title="React Hooks 简介"></a>React Hooks 简介</h4><p>2018 年底 FaceBook 的 React 小组推出 Hooks 以来，所有的 React 的开发者都对它大为赞赏。React Hooks 就是用函数的形式代替原来的继承类的形式，并且使用预函数的形式管理 state，有 Hooks 可以不再使用类的形式定义组件了。这时候你的认知也要发生变化了，原来把组件分为有状态组件和无状态组件，有状态组件用类的形式声明，无状态组件用函数的形式声明。那现在所有的组件都可以用函数来声明了。</p>
<h5 id="1-使用-create-react-app-创建项目"><a href="#1-使用-create-react-app-创建项目" class="headerlink" title="1.使用 create-react-app 创建项目"></a>1.使用 create-react-app 创建项目</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ReactHooksDemo</span><br><span class="line"><span class="built_in">cd</span> ReactHooksDemo</span><br><span class="line">create-react-app demo01</span><br></pre></td></tr></table></figure>

<blockquote>
<p>原始写法</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>You clicked &#123;this.state.count&#125; times<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.addCount.bind(this)&#125;</span>&gt;</span>Chlick me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">addCount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Example</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>React Hooks 写法：【⚠️ 注：React 版本 16.8 以上才有 React Hooks 新特性】</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Example</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>You clicked &#123;count&#125; times<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          setCount(count + 1);</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        click me</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Example</span>;</span><br></pre></td></tr></table></figure>

<p>从这两个程序的对比上可以看出 Hooks 本质上就是一类特殊的函数，他们可以为你的函数型组件（function component）注入一些特殊的功能。这听起来有点像以前 React 中的 Mixins 差不多哦。其实是由很多不同，hooks 的目的就是让你不再写 class，让 function 一统江湖。</p>
<h5 id="2-useState-的介绍和多状态声明"><a href="#2-useState-的介绍和多状态声明" class="headerlink" title="2.useState 的介绍和多状态声明"></a>2.useState 的介绍和多状态声明</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">useState介绍：</span><br><span class="line">useState是react自带的一个hook函数，它的作用是用来声明状态变量。</span><br><span class="line">我们从三个方面来看useState的用法，分别是声明、读取、使用（修改）。</span><br></pre></td></tr></table></figure>

<blockquote>
<p>声明:</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>); <span class="comment">// 这种方法是ES6语法中的数组解构，这样看起来代码变的简单易懂。</span></span><br><span class="line"><span class="comment">// 如果不写成数组解构，上边的语法要写成下面的三行:</span></span><br><span class="line"><span class="keyword">let</span> _useState = <span class="title function_">userState</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">let</span> count = _useState[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">let</span> setCount = _useState[<span class="number">1</span>];</span><br></pre></td></tr></table></figure>

<p>useState 这个函数接收的参数是状态的初始值(Initial state)，它返回一个数组，这个数组的第 0 位是当前的状态值，第 1 位是可以改变状态值的方法函数。 所以上面的代码的意思就是声明了一个状态变量为 count，并把它的初始值设为 0，同时提供了一个可以改变 count 的状态值的方法函数。</p>
<blockquote>
<p>读取状态中的值:</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;<span class="title class_">You</span> clicked &#123;count&#125; times&lt;/p&gt;</span><br><span class="line"><span class="comment">// 你可以发现，我们读取是很简单的。只要使用&#123;count&#125;就可以，因为这时候的count就是JS里的一个变量，想在JSX中使用，值用加上&#123;&#125;就可以。</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>改变 State 中的值:</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;button</span><br><span class="line">  onClick=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(count + <span class="number">1</span>);</span><br><span class="line">  &#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">  click me</span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<p>直接调用 setCount 函数，这个函数接收的参数是修改过的新状态值。接下来的事情就交给 React,他会重新渲染组件。React 自动帮助我们记忆了组件的上一次状态值，但是这种记忆也给我们带来了一点小麻烦，但是这种麻烦你可以看成规则，只要准守规则，就可以愉快的进行编码。</p>
<blockquote>
<p>多状态声明的注意事项</p>
</blockquote>
<p>比如现在我们要声明多个状态，有年龄（age）、性别(sex)和工作(work)。代码可以这么写.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Example2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [age, setAge] = <span class="title function_">useState</span>(<span class="number">18</span>);</span><br><span class="line">  <span class="comment">//useState这个函数接收的参数是状态的初始值(Initial state)，它返回一个数组，这个数组的第0位是当前的状态值，第1位是可以改变状态值的方法函数。</span></span><br><span class="line">  <span class="comment">// 声明了一个状态变量为age，并把它的初始值设为18，同时提供了一个可以改变age的状态值的方法函数setAge。</span></span><br><span class="line">  <span class="keyword">const</span> [sex, setSex] = <span class="title function_">useState</span>(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> [work, setWork] = <span class="title function_">useState</span>(<span class="string">&quot;前端程序员&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>JSPang 今年:&#123;age&#125;岁<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>性别:&#123;sex&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>工作是:&#123;work&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Example2</span>;</span><br></pre></td></tr></table></figure>

<p>在使用 useState 的时候只赋了初始值，并没有绑定任何的 key,那 React 是怎么保证这三个 useState 找到它自己对应的 state 呢？<br><strong>答案是：React 是根据 useState 出现的顺序来确定的</strong></p>
<p>比如我们把代码改成下面的样子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> showSex = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Example2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [age, setAge] = <span class="title function_">useState</span>(<span class="number">18</span>);</span><br><span class="line">  <span class="keyword">if</span> (showSex) &#123;</span><br><span class="line">    <span class="keyword">const</span> [sex, setSex] = <span class="title function_">useState</span>(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">    showSex = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [work, setWork] = <span class="title function_">useState</span>(<span class="string">&quot;前端程序员&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>JSPang 今年:&#123;age&#125;岁<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>性别:&#123;sex&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>工作是:&#123;work&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Example2</span>;</span><br></pre></td></tr></table></figure>

<p>这时候控制台就会直接给我们报错，错误如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="title class_">React</span> <span class="title class_">Hook</span> <span class="string">&quot;useState&quot;</span> is called conditionally. <span class="title class_">React</span> <span class="title class_">Hooks</span> must be called <span class="keyword">in</span> the exact same order <span class="keyword">in</span> every component render</span><br><span class="line"></span><br><span class="line"><span class="comment">//  意思就是useState不能在if...else...这样的条件语句中进行调用，必须要按照相同的顺序进行渲染。如果不理解，记住这样一句话就可以了：就是React Hooks不能出现在条件判断语句中，因为它必须有完全一样的渲染顺序。</span></span><br></pre></td></tr></table></figure>

<h5 id="3-useEffect-代替常用生命周期函数"><a href="#3-useEffect-代替常用生命周期函数" class="headerlink" title="3.useEffect 代替常用生命周期函数"></a>3.useEffect 代替常用生命周期函数</h5><p>在用 Class 制作组件时，经常会用生命周期函数，来处理一些额外的事情（副作用：和函数业务主逻辑关联不大，特定时间或事件中执行的动作，比如 Ajax 请求后端数据，添加登录监听和取消登录，手动修改 DOM 等等）。在 React Hooks 中也需要这样类似的生命周期函数，比如在每次状态（State）更新时执行，它为我们准备了 useEffect。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">useEffect(effect: React.EffectCallback, deps?: ReadonlyArray&lt;any&gt; | undefined)</span><br><span class="line"></span><br><span class="line">作用：处理函数组件中的副作用，如异步操作、延迟操作等，可以替代Class Component的componentDidMount、componentDidUpdate、componentWillUnmount等生命周期。</span><br></pre></td></tr></table></figure>

<p>与 useState 传入的是具体 state 不同，useEffect 传入的是一个 callback 函数，与 useState 最大的不同是执行时机，useEffect callback 是在组件被渲染为真实 DOM 后执行（所以可以用于 DOM 操作）</p>
<blockquote>
<p>用 Class 的方式为计数器增加生命周期函数</p>
</blockquote>
<p>为了更好的理解 useEffect 的使用，先用原始的方式把计数器的 Demo 增加两个生命周期函数 componentDidMount 和 componentDidUpdate。分别在组件第一次渲染后在浏览器控制台打印出计数器结果和在每次计数器状态发生变化后打印出结果。代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Example3</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`ComponentDidMount=&gt;You clicked <span class="subst">$&#123;<span class="variable language_">this</span>.state.count&#125;</span> times`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">componentDidUpdate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`componentDidUpdate=&gt;You clicked <span class="subst">$&#123;<span class="variable language_">this</span>.state.count&#125;</span> times`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>You clicked &#123;this.state.count&#125; times<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.addCount.bind(this)&#125;</span>&gt;</span>Chlick me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">addCount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Example3</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>用 useEffect 函数来代替生命周期函数</p>
</blockquote>
<p>在使用 React Hooks 的情况下，可以使用下面的代码来完成上边代码的生命周期效果，代码如下（修改了以前的 diamond）： 记得要先引入 useEffect 后，才可以正常使用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Example</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//---关键代码---------start-------</span></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//异步的，不会阻断视图更新</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`useEffect=&gt;You clicked <span class="subst">$&#123;count&#125;</span> times`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">//---关键代码---------end-------</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>You clicked &#123;count&#125; times<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          setCount(count + 1);</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        click me</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Example</span>;</span><br></pre></td></tr></table></figure>

<p>写完后，可以到浏览器中进行预览一下，可以看出跟 class 形式的生命周期函数是完全一样的，这代表第一次组件渲染和每次组件更新都会执行这个函数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">梳理一下:首先，我们声明了一个状态变量count,将它的初始值设为0，然后我们告诉react，我们的这个组件有一个副作用。</span><br><span class="line">给useEffecthook传了一个匿名函数，这个匿名函数就是我们的副作用。</span><br><span class="line">在这里我们打印了一句话，当然也可以手动的去修改一个DOM元素。</span><br><span class="line">当React要渲染组件时，它会记住用到的副作用，然后执行一次。</span><br><span class="line">等Reat更新了State状态时，它再一次执行定义的副作用函数。</span><br></pre></td></tr></table></figure>

<blockquote>
<p>useEffect 两个注意点</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.React首次渲染和之后的每次渲染都会调用一遍useEffect函数，而之前我们要用两个生命周期函数分别表示首次渲染(componentDidMonut)和更新导致的重新渲染(componentDidUpdate)。</span><br><span class="line"></span><br><span class="line">2.useEffect中定义的函数的执行不会阻碍浏览器更新视图，也就是说这些函数时异步执行的，而componentDidMonut和componentDidUpdate中的代码都是同步执行的。个人认为这个有好处也有坏处吧，比如我们要根据页面的大小，然后绘制当前弹出窗口的大小，如果时异步的就不好操作了。</span><br></pre></td></tr></table></figure>

<h5 id="4-useEffect-实现-componentWillUnmount-生命周期函数"><a href="#4-useEffect-实现-componentWillUnmount-生命周期函数" class="headerlink" title="4:useEffect 实现 componentWillUnmount 生命周期函数"></a>4:useEffect 实现 componentWillUnmount 生命周期函数</h5><p>在写 React 应用的时候，在组件中经常用到 componentWillUnmount 生命周期函数（组件将要被卸载时执行）。比如我们的定时器要清空，避免发生内存泄漏;比如登录状态要取消掉，避免下次进入信息出错。所以这个生命周期函数也是必不可少的，故来用 useEffect 来实现这个生命周期函数。</p>
<blockquote>
<p>useEffect 解绑副作用</p>
</blockquote>
<p>学习 React Hooks 时，我们要改掉生命周期函数的概念（人往往有先入为主的毛病，所以很难改掉），因为 Hooks 叫它副作用，所以 componentWillUnmount 也可以理解成解绑副作用。为了演示用 useEffect 来实现类似 componentWillUnmount 效果，先安装 React-Router 路由,进入项目根本录，使用 npm 进行安装。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save react-router-dom</span><br></pre></td></tr></table></figure>

<p>然后打开 Example.js 文件，进行改写代码，先引入对应的 React-Router 组件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span> <span class="keyword">as</span> <span class="title class_">Router</span>, <span class="title class_">Route</span>, <span class="title class_">Link</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>在文件中编写两个新组件，因为这两个组件都非常的简单，所以就不单独建立一个新的文件来写了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Index</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>www.daykalif.com<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">List</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>List-Page<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有了这两个组件后，接下来可以编写路由配置，在以前的计数器代码中直接增加就可以了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>You clicked &#123;count&#125; times<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">        setCount(count + 1);</span></span><br><span class="line"><span class="language-xml">      &#125;&#125;</span></span><br><span class="line"><span class="language-xml">    &gt;</span></span><br><span class="line"><span class="language-xml">      click me</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;&quot; &quot;&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">Link</span>&gt;</span>&#123;&quot; &quot;&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/list/&quot;</span>&gt;</span>列表<span class="tag">&lt;/<span class="name">Link</span>&gt;</span>&#123;&quot; &quot;&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">exact</span> <span class="attr">component</span>=<span class="string">&#123;Index&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/list/&quot;</span> <span class="attr">component</span>=<span class="string">&#123;List&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>然后到浏览器中查看一下，看看组件和路由是否可用。如果可用，我们现在可以调整 useEffect 了。在两个新组件中分别加入 useEffect()函数:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Index</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;useEffect=&gt;老弟，你来了！Index页面&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>JSPang.com<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">List</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;useEffect=&gt;老弟，你来了！List页面&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>List-Page<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这时候我们点击 Link 进入任何一个组件，在浏览器中都会打印出对应的一段话。这时候可以用返回一个函数的形式进行解绑，代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Index</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;useEffect=&gt;老弟你来了！Index页面&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//解绑</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;老弟，你走了!Index页面&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>www.daykalif.com<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这时候你在浏览器中预览，我们仿佛实现了 componentWillUnmount 方法。但这只是好像实现了，当点击计数器按钮时，你会发现老弟，你走了!Index 页面，也出现了。这到底是怎么回事呢？其实每次状态发生变化，useEffect 都进行了解绑。</p>
<blockquote>
<p>useEffect 的第二个参数</p>
</blockquote>
<p>那到底要如何实现类似 componentWillUnmount 的效果那?这就需要请出 useEffect 的第二个参数，它是一个数组，数组中可以写入很多状态对应的变量，意思是当状态值发生变化时，我们才进行解绑。但是当传空数组[]时，就是当组件将被销毁时才进行解绑，这也就实现了 componentWillUnmount 的生命周期函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Index</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;useEffect=&gt;老弟你来了！Index页面&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;老弟，你走了!Index页面&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, []);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>JSPang.com<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了更加深入了解第二个参数的作用，把计数器的代码也加上 useEffect 和解绑方法，并加入第二个参数为空数组。代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Example</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`useEffect=&gt;You clicked <span class="subst">$&#123;count&#125;</span> times`</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;====================&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>You clicked &#123;count&#125; times<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          setCount(count + 1);</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        click me</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;&quot; &quot;&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">Link</span>&gt;</span>&#123;&quot; &quot;&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/list/&quot;</span>&gt;</span>列表<span class="tag">&lt;/<span class="name">Link</span>&gt;</span>&#123;&quot; &quot;&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">exact</span> <span class="attr">component</span>=<span class="string">&#123;Index&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/list/&quot;</span> <span class="attr">component</span>=<span class="string">&#123;List&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这时候的代码是不能执行解绑副作用函数的。但是如果我们想每次 count 发生变化，我们都进行解绑，只需要在第二个参数的数组里加入 count 变量就可以了。代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Example</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`useEffect=&gt;You clicked <span class="subst">$&#123;count&#125;</span> times`</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//解绑的副作用函数</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;====================&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, [count]); <span class="comment">//只有count的状态变化时，才会执行return解绑的副作用函数</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>You clicked &#123;count&#125; times<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          setCount(count + 1);</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        click me</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;&quot; &quot;&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">Link</span>&gt;</span>&#123;&quot; &quot;&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/list/&quot;</span>&gt;</span>列表<span class="tag">&lt;/<span class="name">Link</span>&gt;</span>&#123;&quot; &quot;&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">exact</span> <span class="attr">component</span>=<span class="string">&#123;Index&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/list/&quot;</span> <span class="attr">component</span>=<span class="string">&#123;List&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这时候只要 count 状态发生变化，都会执行解绑副作用函数，浏览器的控制台也就打印出了一串&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;。</p>
<h5 id="5-useContext-让父子组件传值更简单"><a href="#5-useContext-让父子组件传值更简单" class="headerlink" title="5:useContext 让父子组件传值更简单"></a>5:useContext 让父子组件传值更简单</h5><p>有了 useState 和 useEffect 已经可以实现大部分的业务逻辑了，但是 React Hooks 中还是有很多好用的 Hooks 函数的，比如 useContext 和 useReducer。</p>
<p>在用类声明组件时，父子组件的传值是通过组件属性和 props 进行的，那现在使用方法(Function)来声明组件，已经没有了 constructor 构造函数也就没有了 props 的接收，那父子组件的传值就成了一个问题。React Hooks 为我们准备了 useContext。</p>
<p>useContext 可以帮助我们跨越组件层级直接传递变量，实现共享。需要注意的是 useContext 和 redux 的作用是不同的，一个解决的是组件之间值传递的问题，一个是应用中统一管理状态的问题，但通过和 useReducer 的配合使用，可以实现类似 Redux 的作用。</p>
<h6 id="Context-的作用就是对它所包含的组件树提供全局共享数据的一种技术。"><a href="#Context-的作用就是对它所包含的组件树提供全局共享数据的一种技术。" class="headerlink" title="Context 的作用就是对它所包含的组件树提供全局共享数据的一种技术。"></a>Context 的作用就是对它所包含的组件树提供全局共享数据的一种技术。</h6><blockquote>
<p>createContext 函数创建 context</p>
</blockquote>
<p>直接在 src 目录下新建一个文件 Example4.js,然后拷贝 Example.js 里的代码，并进行修改，删除路由部分和副作用的代码，只留计数器的核心代码就可以了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Example4</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>You clicked &#123;count&#125; times<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          setCount(count + 1);</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        click me</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Example4</span>;</span><br></pre></td></tr></table></figure>

<p>然后修改一下 index.js 让它渲染这个 Example4.js 组件，修改的代码如下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Example</span> <span class="keyword">from</span> <span class="string">&quot;./Example4&quot;</span>;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Example</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>之后在 Example4.js 中引入 createContext 函数，并使用得到一个组件，然后在 return 方法中进行使用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, createContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="comment">//===关键代码</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CountContext</span> = <span class="title function_">createContext</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Example4</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>You clicked &#123;count&#125; times<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          setCount(count + 1);</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        click me</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/*======关键代码 */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">CountContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;count&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">CountContext.Provider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Example4</span>;</span><br></pre></td></tr></table></figure>

<p>这段代码就相当于把 count 变量允许跨层级实现传递和使用了（也就是实现了上下文），当父组件的 count 变量发生变化时，子组件也会发生变化。接下来就看一个 React Hooks 的子组件如何接收到这个变量。</p>
<blockquote>
<p>useContext 接收上下文变量</p>
</blockquote>
<p>已经有了上下文变量，剩下的就时如何接收了，接收这个直接使用 useContext 就可以，但是在使用前需要新进行引入 useContext（不引入是没办法使用的）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, createContext, useContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>引入后写一个 Counter 组件（子组件），只是显示上下文中的 count 变量代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> count = <span class="title function_">useContext</span>(<span class="title class_">CountContext</span>); <span class="comment">//一句话就可以得到count</span></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>得到后就可以显示出来了，但是要记得在&lt;CountContext.Provider&gt;的闭合标签中,代码如下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">CountContext</span>.<span class="property">Provider</span> value=&#123;count&#125;&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Counter</span> /&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">CountContext</span>.<span class="property">Provider</span>&gt;</span><br></pre></td></tr></table></figure>

<h5 id="6-useReducer-介绍和简单使用"><a href="#6-useReducer-介绍和简单使用" class="headerlink" title="6:useReducer 介绍和简单使用"></a>6:useReducer 介绍和简单使用</h5><p>useContext 函数和 useReducer 函数，因为他们两个很像，并且合作可以完成类似的 Redux 库的操作。在开发中使用 useReducer 可以让代码具有更好的可读性和可维护性，并且会给测试提供方便。</p>
<blockquote>
<p>reducer 到底是什么？</p>
</blockquote>
<p>为了更好的理解 useReducer，所以先要了解 JavaScript 里的 Redcuer 是什么。它的兴起是从 Redux 广泛使用开始的，但不仅仅存在 Redux 中，可以使用 JavaScript 来完成 Reducer 操作。那 reducer 其实就是一个函数，这个函数接收两个参数，一个是状态，一个用来控制业务逻辑的判断参数。举一个最简单的例子。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">countReducer</span>(<span class="params">state, action</span>) &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;add&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> state + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;sub&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> state - <span class="number">1</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码就是 Reducer，主要理解的就是这种形式和两个参数的作用，一个参数是状态，一个参数是如何控制状态。</p>
<blockquote>
<p>useReducer 的使用</p>
</blockquote>
<p>了解 reducer 的含义后，就可以讲 useReducer 了，它也是 React hooks 提供的函数，可以增强我们的 Reducer，实现类似 Redux 的功能。新建一个 Example5.js 的文件，然后用 useReducer 实现计数器的加减双向操作。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useReducer &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ReducerDemo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, dispatch] = <span class="title function_">useReducer</span>(<span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;add&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> state + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;sub&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> state - <span class="number">1</span>;</span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">0</span>); <span class="comment">//useReducer的第二个参数表示state初始值</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>现在的分数是&#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&quot;add&quot;)&#125;&gt;Increment<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&quot;sub&quot;)&#125;&gt;Decrement<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ReducerDemo</span>;</span><br></pre></td></tr></table></figure>

<p>这段代码是 useReducer 的最简单实现了，这时候可以在浏览器中实现了计数器的增加减少。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Example</span> <span class="keyword">from</span> <span class="string">&quot;./Example5&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Example</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>));</span><br></pre></td></tr></table></figure>

<h5 id="7-useReducer-代替-Redux-小案例-1"><a href="#7-useReducer-代替-Redux-小案例-1" class="headerlink" title="7:useReducer 代替 Redux 小案例-1"></a>7:useReducer 代替 Redux 小案例-1</h5><p>使用 useContext 和 useReducer 是可以实现类似 Redux 的效果，并且一些简单的个人项目，完全可以用下面的方案代替 Redux，这种做法要比 Redux 简单一些。</p>
<blockquote>
<p>理论上的可行性</p>
</blockquote>
<p>先从理论层面看看替代 Redux 的可能性，只要巧妙的结合两个函数，这种替代方案是完全可行的。</p>
<p><strong>useContext</strong>：可访问全局状态，避免一层层的传递状态。这符合 Redux 其中的一项规则，就是状态全局化，并能统一管理。</p>
<p><strong>useReducer</strong>：通过 action 的传递，更新复杂逻辑的状态，主要是可以实现类似 Redux 中的 Reducer 部分，实现业务逻辑的可行性。</p>
<blockquote>
<p>编写基本 UI 组件</p>
</blockquote>
<p>在&#x2F;src 目录下新建一个文件夹 Example6，有了文件夹后，在文件夹下面建立一个 showArea.js 文件。代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ShowArea</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> &quot;<span class="attr">blue</span>&quot; &#125;&#125;&gt;</span>字体颜色为blue<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ShowArea</span>;</span><br></pre></td></tr></table></figure>

<p>显示区域写完后，新建一个 Buttons.js 文件，用来编写按钮，这个是两个按钮，一个红色一个黄色。先不写其他任何业务逻辑。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Buttons</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span>&gt;</span>红色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span>&gt;</span>黄色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Buttons</span>;</span><br></pre></td></tr></table></figure>

<p>然后再编写一个组合他们的 Example6.js 组件，引入两个新编写的组件 ShowArea 和 Buttons，并用 div 标签给包裹起来。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useReducer &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ShowArea</span> <span class="keyword">from</span> <span class="string">&quot;./ShowArea&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Buttons</span> <span class="keyword">from</span> <span class="string">&quot;./Buttons&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Example6</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ShowArea</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Buttons</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Example6</span>;</span><br></pre></td></tr></table></figure>

<p>这步做完，需要到&#x2F;src 目录下的 index.js 中引入一下 Example6.js 文件，引入后 React 才能正确渲染出刚写的 UI 组件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Example</span> <span class="keyword">from</span> <span class="string">&quot;./Example6/Example6&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Example</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>));</span><br></pre></td></tr></table></figure>

<blockquote>
<p>编写颜色共享组件 color.js</p>
</blockquote>
<p>有了 UI 组件后，就可以写一些业务逻辑了，实现状态共享，这个就是利用 useContext。建立一个 color.js 文件，然后写入下面的代码。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; createContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">ColorContext</span> = <span class="title function_">createContext</span>(&#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">Color</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ColorContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> &quot;<span class="attr">blue</span>&quot; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;props.children&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ColorContext.Provider</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>代码中引入了 createContext 用来创建共享上下文 ColorContext 组件，然后我们要用{props.children}来显示对应的子组件。</p>
<p>有了这个组件后，我们就可以把 Example6.js 进行改写，让她可以共享状态。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useReducer &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ShowArea</span> <span class="keyword">from</span> <span class="string">&quot;./ShowArea&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Buttons</span> <span class="keyword">from</span> <span class="string">&quot;./Buttons&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Color</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./color&quot;</span>; <span class="comment">//引入Color组件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Example6</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Color</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ShowArea</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Buttons</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Color</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Example6</span>;</span><br></pre></td></tr></table></figure>

<p>然后再改写 showArea.js 文件，引入 useContext 和在 color.js 中声明的 ColorContext，让组件可以接收全局变量。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ColorContext</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./color&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ShowArea</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; color &#125; = <span class="title function_">useContext</span>(<span class="title class_">ColorContext</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> <span class="attr">color</span> &#125;&#125;&gt;</span>字体颜色为&#123;color&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ShowArea</span>;</span><br></pre></td></tr></table></figure>

<p>这时候就通过 useContext 实现了状态的共享，可以到浏览器中看一下效果。</p>
<h5 id="8-useReducer-代替-Redux-小案例-2"><a href="#8-useReducer-代替-Redux-小案例-2" class="headerlink" title="8:useReducer 代替 Redux 小案例-2"></a>8:useReducer 代替 Redux 小案例-2</h5><p>用 useContext 实现了 Redux 状态共享的能力，这节课看一下如何使用 useReducer 来实现业务逻辑的控制。</p>
<blockquote>
<p>在 color.js 中添加 Reducer</p>
</blockquote>
<p>颜色（state）管理的代码我们都放在了 color.js 中，所以在文件里添加一个 reducer，用于处理颜色更新的逻辑。先声明一个 reducer 的函数，它就是 JavaScript 中的普通函数，在讲 useReducer 的时候已经详细讲过了。有了 reducer 后，在 Color 组件里使用 useReducer,这样 Color 组件就有了那个共享状态和处理业务逻辑的能力，跟以前使用的 Redux 几乎一样了。之后修改一下共享状态。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; createContext, useReducer &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">ColorContext</span> = <span class="title function_">createContext</span>(&#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">UPDATE_COLOR</span> = <span class="string">&quot;UPDATE_COLOR&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">reducer</span> = (<span class="params">state, action</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="attr">UPDATE_COLOR</span>:</span><br><span class="line">      <span class="keyword">return</span> action.<span class="property">color</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">Color</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [color, dispatch] = <span class="title function_">useReducer</span>(reducer, <span class="string">&quot;blue&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ColorContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;</span> <span class="attr">color</span>, <span class="attr">dispatch</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;props.children&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ColorContext.Provider</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>注意，这时候我们共享出去的状态变成了 color 和 dispatch,如果不共享出去 dispatch，是没办法完成按钮的相应事件的。</p>
<blockquote>
<p>通过 dispatch 修改状态</p>
</blockquote>
<p>目前程序已经有了处理共享状态的业务逻辑能力，接下来就可以在 buttons.js 使用 dispatch 来完成按钮的相应操作了。先引入 useContext、ColorContext 和 UPDATE_COLOR，然后写 onClick 事件就可以了。代码如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ColorContext</span>, <span class="variable constant_">UPDATE_COLOR</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./color&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Buttons</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; dispatch &#125; = <span class="title function_">useContext</span>(<span class="title class_">ColorContext</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          dispatch(&#123; type: UPDATE_COLOR, color: &quot;red&quot; &#125;);</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        红色</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          dispatch(&#123; type: UPDATE_COLOR, color: &quot;yellow&quot; &#125;);</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        黄色</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Buttons</span>;</span><br></pre></td></tr></table></figure>

<p>这样代码就编写完成了，用 useContext 和 useReducer 实现了 Redux 的效果，这个代码编写过程比 Redux 要简单，但是也是有一定难度的。</p>
<h5 id="9-useMemo-优化-React-Hooks-程序性能"><a href="#9-useMemo-优化-React-Hooks-程序性能" class="headerlink" title="9:useMemo 优化 React Hooks 程序性能"></a>9:useMemo 优化 React Hooks 程序性能</h5><p>useMemo 主要用来解决使用 React hooks 产生的无用渲染的性能问题。使用 function 的形式来声明组件，失去了 shouldCompnentUpdate（在组件更新之前）这个生命周期，也就是说我们没有办法通过组件更新前条件来决定组件是否更新。而且在函数组件中，也不再区分 mount 和 update 两个状态，这意味着函数组件的每一次调用都会执行内部的所有逻辑，就带来了非常大的性能损耗。useMemo 和 useCallback 都是解决上述性能问题的。</p>
<blockquote>
<p>性能问题展示案例</p>
</blockquote>
<p>先编写一下刚才所说的性能问题，建立两个组件,一个父组件一个子组件，组件上由两个按钮，一个是小红，一个是志玲，点击哪个，那个就像我们走来了。在&#x2F;src 文件夹下，新建立一个 Example7 的文件夹，在文件夹下建立一个 Example7.js 文件.然后先写第一个父组件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useMemo &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Example7</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [xiaohong, setXiaohong] = <span class="title function_">useState</span>(<span class="string">&quot;小红待客状态&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> [zhiling, setZhiling] = <span class="title function_">useState</span>(<span class="string">&quot;志玲待客状态&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          setXiaohong(new Date().getTime());</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        小红</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          setZhiling(new Date().getTime() + &quot;,志玲向我们走来了&quot;);</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        志玲</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ChildComponent</span> <span class="attr">name</span>=<span class="string">&#123;xiaohong&#125;</span>&gt;</span>&#123;zhiling&#125;<span class="tag">&lt;/<span class="name">ChildComponent</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>父组件调用了子组件，子组件我们输出两个姑娘的状态，显示在界面上。代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ChildComponent</span>(<span class="params">&#123; name, children &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">changeXiaohong</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;她来了，她来了。小红向我们走来了&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> name + <span class="string">&quot;,小红向我们走来了&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> actionXiaohong = <span class="title function_">changeXiaohong</span>(name); <span class="comment">//每次父组件发生变化，子组件也会每次触发，代码都会重新渲染一遍，性能严重消耗</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;actionXiaohong&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后再导出父组件，让 index.js 可以渲染。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Example7</span>;</span><br></pre></td></tr></table></figure>

<p>这时候你会发现在浏览器中点击志玲按钮，小红对应的方法都会执行，结果虽然没变，但是每次都执行，这就是性能的损耗。目前只有子组件，业务逻辑也非常简单，如果是一个后台查询，这将产生严重的后果。所以这个问题必须解决。当我们点击志玲按钮时，小红对应的 changeXiaohong 方法不能执行，只有在点击小红按钮时才能执行。</p>
<blockquote>
<p>useMemo 优化性能</p>
</blockquote>
<p>其实只要使用 useMemo，然后给她传递第二个参数，参数匹配成功，才会执行。代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ChildComponent</span>(<span class="params">&#123; name, children &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">changeXiaohong</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;她来了，她来了。小红向我们走来了&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> name + <span class="string">&quot;,小红向我们走来了&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> actionXiaohong = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> <span class="title function_">changeXiaohong</span>(name), [name]); <span class="comment">//第二个参数表示：只有name发生变化的时候才触发changeXiaohong</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;actionXiaohong&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这时在浏览器中点击一下志玲按钮，changeXiaohong 就不再执行了。也节省了性能的消耗。</p>
<h5 id="10-useRef-获取-DOM-元素和保存变量"><a href="#10-useRef-获取-DOM-元素和保存变量" class="headerlink" title="10:useRef 获取 DOM 元素和保存变量"></a>10:useRef 获取 DOM 元素和保存变量</h5><p>useRef 在工作中虽然用的不多，但是也不能缺少。它有两个主要的作用:</p>
<ul>
<li><p>用 useRef 获取 React JSX 中的 DOM 元素，获取后你就可以控制 DOM 的任何东西了。但是一般不建议这样来作，React 界面的变化可以通过状态来控制。</p>
</li>
<li><p>用 useRef 来保存变量，这个在工作中也很少能用到，我们有了 useContext 这样的保存其实意义不大，但是这是学习，也要把这个特性讲一下。</p>
</li>
</ul>
<blockquote>
<p>1.useRef 获取 DOM 元素</p>
</blockquote>
<p>界面上有一个文本框，在文本框的旁边有一个按钮，当我们点击按钮时，在控制台打印出 input 的 DOM 元素，并进行复制到 DOM 中的 value 上。这一切都是通过 useRef 来实现。</p>
<p>在&#x2F;src 文件夹下新建一个 Example8.js 文件，然后先引入 useRef，编写业务逻辑代码如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useRef &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Example8</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> inputEl = <span class="title function_">useRef</span>(<span class="literal">null</span>); <span class="comment">//获取DOM</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">onButtonClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    inputEl.<span class="property">current</span>.<span class="property">value</span> = <span class="string">&quot;Hello,Daykalif&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(inputEl); <span class="comment">//输出获取到的DOM节点</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/*保存input的ref到inputEl */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;inputEl&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onButtonClick&#125;</span>&gt;</span>在input上展示文字<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Example8</span>;</span><br></pre></td></tr></table></figure>

<p>当点击按钮时，你可以看到在浏览器中的控制台完整的打印出了 DOM 的所有东西，并且界面上的 input 框的 value 值也输出了我们写好的 Hello,Daykalif。这一切说明我们可以使用 useRef 获取 DOM 元素，并且可以通过 useRefu 控制 DOM 的属性和值。</p>
<blockquote>
<p>2.useRef 保存普通变量</p>
</blockquote>
<p>这个操作在实际开发中用的并不多,就是 useRef 可以保存 React 中的变量。这里就写一个文本框，文本框用来改变 text 状态。又用 useRef 把 text 状态进行保存，最后打印在控制台上。写这段代码会觉的很绕，其实显示开发中没必要这样写，用一个 state 状态就可以搞定，这里只是为了展示知识点。</p>
<p>接着上面的代码来写，就没必要重新写一个文件了。先用 useState 声明了一个 text 状态和 setText 函数。然后编写界面，界面就是一个文本框。然后输入的时候不断变化。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useRef, useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Example8</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> inputEl = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">onButtonClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    inputEl.<span class="property">current</span>.<span class="property">value</span> = <span class="string">&quot;Hello ,useRef&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(inputEl);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> [text, setText] = <span class="title function_">useState</span>(<span class="string">&quot;daykalif&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/*保存input的ref到inputEl */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;inputEl&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onButtonClick&#125;</span>&gt;</span>在input上展示文字<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&#123;text&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          setText(e.target.value);</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Example8</span>;</span><br></pre></td></tr></table></figure>

<p>这时想每次 text 发生状态改变，保存到一个变量中或者说是 useRef 中，这时候就可以使用 useRef 了。先声明一个 textRef 变量，他其实就是 useRef 函数。然后使用 useEffect 函数实现每次状态变化都进行变量修改，并打印。最后的全部代码如下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useRef, useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Example8</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> inputEl = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">onButtonClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    inputEl.<span class="property">current</span>.<span class="property">value</span> = <span class="string">&quot;Hello ,useRef&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(inputEl);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//-----------关键代码--------start</span></span><br><span class="line">  <span class="keyword">const</span> [text, setText] = <span class="title function_">useState</span>(<span class="string">&quot;daykalif&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> textRef = <span class="title function_">useRef</span>();</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    textRef.<span class="property">current</span> = text;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;textRef.current:&quot;</span>, textRef.<span class="property">current</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">//----------关键代码--------------end</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/*保存input的ref到inputEl */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;inputEl&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onButtonClick&#125;</span>&gt;</span>在input上展示文字<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&#123;text&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          setText(e.target.value);</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Example8</span>;</span><br></pre></td></tr></table></figure>

<p>这时候就可以实现每次状态修改，同时保存到 useRef 中了。也就是我们说的保存变量的功能。那 useRef 的主要功能就是获得 DOM 和变量保存。</p>
<h5 id="11-自定义-Hooks-函数获取窗口大小"><a href="#11-自定义-Hooks-函数获取窗口大小" class="headerlink" title="11: 自定义 Hooks 函数获取窗口大小"></a>11: 自定义 Hooks 函数获取窗口大小</h5><p>其实自定义 Hooks 函数和用 Hooks 创建组件很相似，跟我们平时用 JavaScript 写函数几乎一模一样，可能就是多了些 React Hooks 的特性，自定义 Hooks 函数偏向于功能，而组件偏向于界面和业务逻辑。由于差别不大，所以使用起来也是很随意的。如果是小型项目是可以的，但是如果项目足够复杂，这会让项目结构不够清晰。</p>
<blockquote>
<p>编写自定义函数</p>
</blockquote>
<p>在实际开发中，为了界面更加美观。获取浏览器窗口的尺寸是一个经常使用的功能，这样经常使用的功能，就可以封装成一个自定义 Hooks 函数，记住一定要用 use 开头，这样才能区分出什么是组件，什么是自定义函数。</p>
<p>新建一个文件 Example9.js,然后编写一个 useWinSize,编写时我们会用到 useState、useEffect 和 useCallback 所以先用 import 进行引入。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useEffect, useCallback &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>然后编写函数，函数中先用 useState 设置 size 状态，然后编写一个每次修改状态的方法 onResize，这个方法使用 useCallback，目的是为了缓存方法(useMemo 是为了缓存变量)。 然后在第一次进入方法时用 useEffect 来注册 resize 监听时间。为了防止一直监听所以在方法移除时，使用 return 的方式移除监听。最后返回 size 变量就可以了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">useWinSize</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//自定义hooks函数名，以use开头</span></span><br><span class="line">  <span class="keyword">const</span> [size, setSize] = <span class="title function_">useState</span>(&#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> onResize = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//useCallback会缓存方法；useMemo是为了缓存变量</span></span><br><span class="line">    <span class="title function_">setSize</span>(&#123;</span><br><span class="line">      <span class="attr">width</span>: <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span>,</span><br><span class="line">      <span class="attr">height</span>: <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;, []);</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>, onResize);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//销毁时执行</span></span><br><span class="line">      <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;resize&quot;</span>, onResize);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, []);</span><br><span class="line">  <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这就是一个自定义函数，方法名默认 use 开头，其实和以前写的 JS 函数没什么区别。</p>
<blockquote>
<p>编写组件并使用自定义函数</p>
</blockquote>
<p>自定义 Hooks 函数已经写好了，可以直接进行使用，用法和 JavaScript 的普通函数用起来是一样的。直接在 Example9 组件使用 useWinSize 并把结果实时展示在页面上。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Example9</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> size = <span class="title function_">useWinSize</span>();</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      页面Size:&#123;size.width&#125;x&#123;size.height&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Example9</span>;</span><br></pre></td></tr></table></figure>

<p>之后就可以在浏览器中预览一下结果，可以看到当放大缩小浏览器窗口时，页面上的结果都会跟着进行变化。说明自定义的函数起到了作用。</p>
<h3 id="useReducer-的简单应用"><a href="#useReducer-的简单应用" class="headerlink" title="useReducer 的简单应用"></a>useReducer 的简单应用</h3><p>1.counter 计数器示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.引入 useReducer</span></span><br><span class="line"><span class="comment">// import &#123; useReducer &#125; from &quot;react&quot;;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useReducer &#125; <span class="keyword">from</span> <span class="string">&quot;./fakeReducer&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.编写处理函数，传入两个参数【纯函数：如数变量确定的话，输出是不变的】</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">reducer</span> = (<span class="params">state, action</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;ADD&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> state + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;DECREASE&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> state - <span class="number">1</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Counter</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 2.调用 useReducer，传入两个参数，第一个参数是处理函数，第二个参数是初始值</span></span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = <span class="title function_">useReducer</span>(reducer, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      第 4 步：展示计数器&#123;state&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;/_ 第 5 步：点击派发动作 _/&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;ADD&quot; &#125;)&#125;&gt;+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;DECREASE&quot; &#125;)&#125;&gt;-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Counter</span>;</span><br></pre></td></tr></table></figure>

<p>2.手写 useReducer</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/\*\*</span><br><span class="line"></span><br><span class="line">- 手写 reducer</span><br><span class="line">  \*/</span><br><span class="line">  <span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">useReducer</span> = (<span class="params">reducer, initialState = &#123;&#125;</span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">const</span> [state, updateState] = <span class="title function_">useState</span>(initialState);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">dispatch</span> = (<span class="params">action</span>) =&gt; &#123;</span><br><span class="line"><span class="title function_">updateState</span>(<span class="title function_">reducer</span>(state, action))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> [state, dispatch];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.复杂应用 demo，购物车实现<br>购物车 jsx：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useReducer &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; shoppingCartReducer &#125; <span class="keyword">from</span> <span class="string">&quot;./shoppingCartReducer&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">  <span class="attr">products</span>: [</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;太阳眼镜&quot;</span>, <span class="attr">num</span>: <span class="number">1</span>, <span class="attr">price</span>: <span class="number">200</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;充电宝&quot;</span>, <span class="attr">num</span>: <span class="number">1</span>, <span class="attr">price</span>: <span class="number">96</span> &#125;,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">total</span>: <span class="number">296</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ShoppingCart</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = <span class="title function_">useReducer</span>(shoppingCartReducer, initialState);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>购物车<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;state.products.map((product) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">          return (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;product.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              &#123;product.name&#125; &#123;product.num&#125; &#123;product.price&#125;</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;ADD&quot;, payload: product.id &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">              &gt;</span></span><br><span class="line"><span class="language-xml">                +</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span></span></span><br><span class="line"><span class="language-xml">                  dispatch(&#123; type: &quot;DECREASE&quot;, payload: product.id &#125;)</span></span><br><span class="line"><span class="language-xml">                &#125;</span></span><br><span class="line"><span class="language-xml">              &gt;</span></span><br><span class="line"><span class="language-xml">                -</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          );</span></span><br><span class="line"><span class="language-xml">        &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;CLEAR&quot; &#125;)&#125;&gt;清空<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      总计：&#123;state.total&#125;元</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ShoppingCart</span>;</span><br></pre></td></tr></table></figure>

<p>reduer 实现：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">shoppingCartReducer</span> = (<span class="params">state, action</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> newState = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(state));</span><br><span class="line">  <span class="keyword">const</span> id = action.<span class="property">payload</span>;</span><br><span class="line">  <span class="keyword">const</span> index = state.<span class="property">products</span>.<span class="title function_">findIndex</span>(<span class="function">(<span class="params">product</span>) =&gt;</span> product.<span class="property">id</span> === id);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;ADD&quot;</span>:</span><br><span class="line">      newState.<span class="property">products</span>[index].<span class="property">num</span>++;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;DECREASE&quot;</span>:</span><br><span class="line">      <span class="keyword">if</span> (state.<span class="property">products</span>[index].<span class="property">num</span> &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        newState.<span class="property">products</span>.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        newState.<span class="property">products</span>[index].<span class="property">num</span>--;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;CLEAR&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">products</span>: [], <span class="attr">total</span>: <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  newState.<span class="property">total</span> = newState.<span class="property">products</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">total, product</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> total + product.<span class="property">num</span> * product.<span class="property">price</span>;</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> newState;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>参考视频：<br><a href="https://www.bilibili.com/video/BV1y4411Q7yH">https://www.bilibili.com/video/BV1y4411Q7yH</a></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>组件化</tag>
        <tag>React</tag>
        <tag>react-hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>React原理</title>
    <url>/2019/08/10/React/%E3%80%90%E4%B8%93%E9%A2%98%E3%80%912%EF%BC%9AReact%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h4 id="React-原理"><a href="#React-原理" class="headerlink" title="React 原理"></a>React 原理</h4><h5 id="1-函数式编程"><a href="#1-函数式编程" class="headerlink" title="1.函数式编程"></a>1.函数式编程</h5><p>一种编程方式（面向对象的编程方式），概念比较多<br>1).纯函数<br>2).不可变值</p>
<p>结合 SCU 和 Redux 代码</p>
<h5 id="2-vdom-和-diff-算法"><a href="#2-vdom-和-diff-算法" class="headerlink" title="2.vdom 和 diff 算法"></a>2.vdom 和 diff 算法</h5><p>JS 运算快，DOM 渲染慢。将 DOM 操作放到内存中处理，将所有的节点，操作都先放到内存中进行计算，但渲染总不能每次都渲染一遍，这意味着一部分一部分的渲染，只更新渲染部分，历史性的开创了虚拟 DOM 和差值算法。</p>
<p>【在数据驱动视图框架中，vdom 和 diff 占据核心的底层能力】<br>h 函数<br>vnode 结构<br>patch 函数</p>
<p>只比较同一级，不跨级比较<br>tag 不相同，则直接删掉重建，不再深度比较<br>tag 和 key，两者都相同，则认为是相同节点，不再深度比较</p>
<h5 id="3-JSX-本质"><a href="#3-JSX-本质" class="headerlink" title="3.JSX 本质"></a>3.JSX 本质</h5><p>JSX 等同于 Vue 模板<br>Vue 模板不是 html<br>JSX 也不是 JS</p>
<p><a href="https://www.babeljs.cn/">babel</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// https://www.babeljs.cn/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// JSX 基本用法</span></span><br><span class="line"><span class="keyword">const</span> imgElem = <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>some text<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;imgUrl&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// JSX style</span></span><br><span class="line"><span class="keyword">const</span> styleData = &#123; <span class="attr">fontSize</span>: <span class="string">&#x27;30px&#x27;</span>,  <span class="attr">color</span>: <span class="string">&#x27;blue&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">const</span> styleElem = <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&#123;styleData&#125;</span>&gt;</span>设置 style<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// JSX 加载组件</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Input</span> <span class="attr">submitTitle</span>=<span class="string">&#123;onSubmitTitle&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">List</span> <span class="attr">list</span>=<span class="string">&#123;list&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// JSX 事件</span></span><br><span class="line"><span class="keyword">const</span> eventList = <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">onClick</span>=<span class="string">&#123;this.clickHandler&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    some text</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// JSX list</span></span><br><span class="line"><span class="keyword">const</span> listElem = <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;this.state.list.map((item, index) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">    return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span>index &#123;index&#125;; title &#123;item.title&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&#125;)&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 总结</span></span><br><span class="line"><span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;tag&#x27;</span>, <span class="literal">null</span>, [child1, child2, child3])</span><br><span class="line"><span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>, &#123;...属性...&#125;, child1, child2, child3)</span><br><span class="line"><span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="title class_">List</span>, <span class="literal">null</span>, child1, child2, <span class="string">&#x27;文本节点&#x27;</span>)</span><br><span class="line"><span class="comment">// createElement相当于是 h 函数</span></span><br><span class="line"><span class="comment">// 返回 vnode</span></span><br><span class="line"><span class="comment">// patch对vnode进行处理</span></span><br></pre></td></tr></table></figure>

<p>React.createElement 即 h 函数，返回 vnode<br>第一个参数，可能是组件，也可能是 html tag<br>组件名，首字母必须要大写【通过首字母大小写来判断是一个 tag 还是组件】</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一个参数是List组件</span></span><br><span class="line"><span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="title class_">List</span>, &#123;</span><br><span class="line">  <span class="attr">list</span>: list,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//找到List组件jsx结构，继续拆分</span></span><br><span class="line"><span class="title class_">React</span>.<span class="title function_">createElement</span>(</span><br><span class="line">  <span class="string">&quot;ul&quot;</span>,</span><br><span class="line">  <span class="literal">null</span>,</span><br><span class="line">  list.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">item, index</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">React</span>.<span class="title function_">createElement</span>(</span><br><span class="line">      <span class="string">&quot;li&quot;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">key</span>: item.<span class="property">id</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;title&quot;</span>,</span><br><span class="line">      item.<span class="property">title</span></span><br><span class="line">    );</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h5 id="4-合成事件"><a href="#4-合成事件" class="headerlink" title="4.合成事件"></a>4.合成事件</h5><p>所有事件挂在到 document 上<br>event 不是原生的，是 SyntheticEvent 合成事件对象<br>和 Vue 事件不同，和 DOM 事件也不同</p>
<p><img src="https://www.daykalif.com/blog_img/syntheticEvent.png" alt="syntheticEvent"></p>
<blockquote>
<p>问：为何要合成事件机制？</p>
</blockquote>
<p>尽可能摆脱 dom 事件逻辑，自己实现一套逻辑，只需配合 dom 派发给对应处理器执行，更好的兼容性和跨平台<br>载到 document，减少内存消耗，避免频繁解绑，减少和 DOM 的依赖<br>方便事件的统一管理（如事务机制）</p>
<h5 id="5-setState-和-batchUpdate"><a href="#5-setState-和-batchUpdate" class="headerlink" title="5.setState 和 batchUpdate"></a>5.setState 和 batchUpdate</h5><p>setState 现象：</p>
<ul>
<li>有时异步（普通使用），有时同步（setTimeout、DOM 事件）</li>
<li>有时合并（对象形式，像 Object.assign），有时不合并（函数形式）</li>
</ul>
<p>setState 原理：</p>
<ul>
<li>setState 主流程</li>
<li>batchUpdate 机制</li>
<li>transaction（事务）机制</li>
</ul>
<blockquote>
<p>isBatchingUpdates</p>
</blockquote>
<p><img src="https://www.daykalif.com/blog_img/isBatchingUpdates.jpeg" alt="isBatchingUpdates"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 走异步：</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListDemo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;&#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  increase = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 开始：处于batchUpdate</span></span><br><span class="line">    <span class="comment">// isBatchingUpdates = true  -- 这个变量不是设置在函数里面，在函数执行前设置一个isBatchingUpdates = true。这里只是为了演示有这个机制</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 结束</span></span><br><span class="line">    <span class="comment">//isBatchingUpdates = false -- 函数执行完之后设置isBatchingUpdates = false</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 走同步：</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListDemo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;&#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  increase = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 开始：处于batchUpdate</span></span><br><span class="line">    <span class="comment">// isBatchingUpdates = true</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 此时isBatchingUpdates是false</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 结束</span></span><br><span class="line">    <span class="comment">//isBatchingUpdates = false</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 走同步：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始：处于batchUpdate</span></span><br><span class="line"><span class="comment">// isBatchingUpdates = true</span></span><br><span class="line"><span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 此时 isBatchingUpdates 是false</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">            <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;count in body event&#x27;</span>, <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 结束</span></span><br><span class="line">    <span class="comment">// isBatchingUpdates = false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>问：setState 异步还是同步？</p>
</blockquote>
<p>setState 无所谓异步还是同步<br>看是否能够命中 batchUpdate 机制<br>判断 isBatchingUpdates</p>
<blockquote>
<p>问：哪些能命中 batchUpdate 机制？</p>
</blockquote>
<p>生命周期（和它调用的函数）<br>React 中注册的事件（和它调用的函数），onClick…<br>React 可以“管理”的入口</p>
<blockquote>
<p>问：哪些不能命中 batchUpdate 机制？</p>
</blockquote>
<p>setTimeout setInterval 等（和它调用的函数）<br>自定义的 DOM 事件（和它调用的函数）<br>React“管不到”的入口</p>
<blockquote>
<p>transaction 事务机制：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*                       wrappers (injected at creation time)</span><br><span class="line"> *                                      +        +</span><br><span class="line"> *                                      |        |</span><br><span class="line"> *                    +-----------------|--------|--------------+</span><br><span class="line"> *                    |                 v        |              |</span><br><span class="line"> *                    |      +---------------+   |              |</span><br><span class="line"> *                    |   +--|    wrapper1   |---|----+         |</span><br><span class="line"> *                    |   |  +---------------+   v    |         |</span><br><span class="line"> *                    |   |          +-------------+  |         |</span><br><span class="line"> *                    |   |     +----|   wrapper2  |--------+   |</span><br><span class="line"> *                    |   |     |    +-------------+  |     |   |</span><br><span class="line"> *                    |   |     |                     |     |   |</span><br><span class="line"> *                    |   v     v                     v     v   | wrapper</span><br><span class="line"> *                    | +---+ +---+   +---------+   +---+ +---+ | invariants</span><br><span class="line"> * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained</span><br><span class="line"> * +-----------------&gt;|-|---|-|---|--&gt;|anyMethod|---|---|-|---|-|--------&gt;</span><br><span class="line"> *                    | |   | |   |   |         |   |   | |   | |</span><br><span class="line"> *                    | |   | |   |   |         |   |   | |   | |</span><br><span class="line"> *                    | |   | |   |   |         |   |   | |   | |</span><br><span class="line"> *                    | +---+ +---+   +---------+   +---+ +---+ |</span><br><span class="line"> *                    |  initialize                    close    |</span><br><span class="line"> *                    +-----------------------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListDemo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;&#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  increase = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 开始：处于batchUpdate</span></span><br><span class="line">    <span class="comment">// isBatchingUpdates = true   //这个变量不是设置在函数里面，在函数执行前设置</span></span><br><span class="line">    <span class="comment">//其他任何操作</span></span><br><span class="line">    <span class="comment">// 结束</span></span><br><span class="line">    <span class="comment">//isBatchingUpdates = false</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这是一套transaction机制演示：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始的逻辑</span></span><br><span class="line">transaction.<span class="property">initialize</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;initialize&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 结束的逻辑</span></span><br><span class="line">transaction.<span class="property">close</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;close&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 执行的方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">method</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">transaction.<span class="title function_">perform</span>(method);</span><br><span class="line"><span class="comment">//输出&#x27;initialize&#x27;</span></span><br><span class="line"><span class="comment">//输出&#x27;abc&#x27;</span></span><br><span class="line"><span class="comment">//输出&#x27;close&#x27;</span></span><br></pre></td></tr></table></figure>

<h5 id="6-组件渲染过程"><a href="#6-组件渲染过程" class="headerlink" title="6.组件渲染过程"></a>6.组件渲染过程</h5><p>JSX 如何渲染为页面<br>setState 之后如何更新页面</p>
<p>1.回顾 Vue 组件渲染和更新过程;</p>
<p>2.回顾 JSX 本质和 vdom：</p>
<ul>
<li><p>JSX 即 createElement 函数</p>
</li>
<li><p>执行生成 vnode</p>
</li>
<li><p>patch(elem,vnode)和 patch(vnode,newVnode)</p>
<p>3.回顾 dirtyComponents（参考 isBatchingUpdates）</p>
</li>
</ul>
<blockquote>
<p>讲解内容：</p>
</blockquote>
<h6 id="1-组件渲染和更新过程"><a href="#1-组件渲染和更新过程" class="headerlink" title="1).组件渲染和更新过程"></a>1).组件渲染和更新过程</h6><p>组件渲染过程：</p>
<ul>
<li>有了 props 和 state</li>
<li>render()解析 jsx 结构生成 vnode</li>
<li>patch(elem,vnode) – 【React 中可能不是使用 patch 这个名字，但是会有 patch 这个过程】</li>
</ul>
<p>更新过程：</p>
<ul>
<li>setState(newState) – setState 的时候生成–&gt;dirtyComponents(可能有子组件)</li>
<li>在更新 dirtyComponents 时我们去遍历所有的组件，去 render()生成 newVnode</li>
<li>再执行 patch(vnode,newVnode)</li>
</ul>
<h6 id="2-更新的两个阶段"><a href="#2-更新的两个阶段" class="headerlink" title="2).更新的两个阶段"></a>2).更新的两个阶段</h6><p>上述的 patch 被拆分成两个阶段：</p>
<p>1.reconciliation 阶段（协调阶段）- 执行 diff 算法，纯 JS 计算<br>2.commit 阶段 - 将 diff 结果渲染 DOM</p>
<p>可能会有性能问题：<br>JS 是单线程，且和 DOM 渲染共用一个线程<br>当组件足够复杂，组件更新时计算和渲染都压力大，此时再有 DOM 操作需求（动画，鼠标拖拽等），将卡顿</p>
<h6 id="3-第二步性能问题的解决方案-React-fiber"><a href="#3-第二步性能问题的解决方案-React-fiber" class="headerlink" title="3).第二步性能问题的解决方案 React fiber"></a>3).第二步性能问题的解决方案 React fiber</h6><ul>
<li>将 reconciliation 阶段进行任务拆分（不过 commit 阶段是 dom 渲染阶段，无法拆分）</li>
<li>DOM 需要渲染时暂停，空闲时恢复</li>
<li>当浏览器需要渲染时，使用 window.requestIdleCallback 机制，将 reconciliation 子任务进行暂停，空闲时就恢复 reconciliation 子任务</li>
</ul>
<p>关于 fiber：React 内部运行机制，开发者体会不到</p>
<h5 id="7-前端路由原理"><a href="#7-前端路由原理" class="headerlink" title="7.前端路由原理"></a>7.前端路由原理</h5><p>稍微复杂一点的 SPA，都需要路由</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">网页url组成部分：</span><br><span class="line"><span class="comment">//http://127.0.0.1:8881/01-hash.html?a=100&amp;b=20#/aaa/bbb</span></span><br><span class="line">location.<span class="property">protocol</span>       <span class="comment">//&#x27;http:&#x27;</span></span><br><span class="line">location.<span class="property">hostname</span>       <span class="comment">//&#x27;127.0.0.1&#x27;</span></span><br><span class="line">location.<span class="property">host</span>           <span class="comment">//&#x27;127.0.0.1:8881&#x27;</span></span><br><span class="line">location.<span class="property">port</span>           <span class="comment">//&#x27;8881&#x27;</span></span><br><span class="line">location.<span class="property">pathname</span>       <span class="comment">//&#x27;01-hash.html&#x27;</span></span><br><span class="line">location.<span class="property">search</span>         <span class="comment">//&#x27;?a=100&amp;b=200&#x27;</span></span><br><span class="line">location.<span class="property">hash</span>           <span class="comment">//&#x27;#/aaa/bbb&#x27;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>hash 的特点</p>
</blockquote>
<p>hash 变化会触发网页跳转，即浏览器的前进、后退<br>hash 变化不会刷新页面，SPA 必需的特点<br>hash 永远不会提交到 server 端（前端自生自灭）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>hash test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>hash test<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>修改 hash<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// hash 变化，包括：</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// a. JS 修改 url</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// b. 手动修改 url 的 hash</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// c. 浏览器前进、后退</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="property">onhashchange</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;old url&quot;</span>, event.<span class="property">oldURL</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;new url&quot;</span>, event.<span class="property">newURL</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hash:&quot;</span>, location.<span class="property">hash</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 页面初次加载，获取 hash</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hash:&quot;</span>, location.<span class="property">hash</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// JS 修改 url</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn1&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        location.<span class="property">href</span> = <span class="string">&quot;#/user&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>H5 history（需要后端支持）</p>
</blockquote>
<p>用 url 规范的路由(用户看不出来是前端路由还是后端路由)，但跳转时不刷新页面<br>history.pushState<br>window.onpopstate</p>
<p>正常页面浏览：<br><code>https://github.com/xxx 刷新页面</code><br><code>https://github.com/xxx/yyy 刷新页面</code><br><code>https://github.com/xxx/yyy/zzz 刷新页面</code></p>
<p>改造成 H5 history 模式：<br><code>https://github.com/xxx 刷新页面</code><br><code>https://github.com/xxx/yyy 前端跳转，不刷新页面</code><br><code>https://github.com/xxx/yyy/zzz 前端跳转，不刷新页面</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>history API test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>history API test<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>修改 url<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 页面初次加载，获取 path</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;load&quot;</span>, location.<span class="property">pathname</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 打开一个新的路由</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 【注意】用 pushState 方式，浏览器不会刷新页面</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn1&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> state = &#123; <span class="attr">name</span>: <span class="string">&quot;page1&quot;</span> &#125;;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;切换路由到&quot;</span>, <span class="string">&quot;page1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        history.<span class="title function_">pushState</span>(state, <span class="string">&quot;&quot;</span>, <span class="string">&quot;page1&quot;</span>); <span class="comment">// 重要！！</span></span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 监听浏览器前进、后退</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="property">onpopstate</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 重要！！</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;onpopstate&quot;</span>, event.<span class="property">state</span>, location.<span class="property">pathname</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 需要 server 端配合，可参考</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// https://router.vuejs.org/zh/guide/essentials/history-mode.html#%E5%90%8E%E7%AB%AF%E9%85%8D%E7%BD%AE%E4%BE%8B%E5%AD%90</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结</p>
</blockquote>
<p>hash - window.onhashchange<br>H5 history - history.pushState 和 window.onpopstate<br>H5 history 需要后端支持</p>
<blockquote>
<p>两种如何选择</p>
</blockquote>
<p>to B 的系统推荐用 hash，简单易用，对 url 规范不敏感<br>to C 的系统，可以考虑选择 H5 history，但需要服务端支持<br>能选择简单的，就别用复杂的，要考虑成本和收益</p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>React使用</title>
    <url>/2019/08/10/React/%E3%80%90%E4%B8%93%E9%A2%98%E3%80%911%EF%BC%9AReact%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h5 id="React-面试题"><a href="#React-面试题" class="headerlink" title="React 面试题"></a>React 面试题</h5><p>1.React 组件如何通讯？</p>
<ul>
<li><p>父子组件通过 props</p>
</li>
<li><p>context，顶层组件向子孙组件下发数据</p>
</li>
<li><p>redux</p>
</li>
<li><p>自定义事件</p>
<p>2.JSX 本质是什么？</p>
</li>
<li><p>createElement</p>
</li>
<li><p>执行返回 vnode</p>
<p>3.context 是什么，有何用途？</p>
</li>
<li><p>公共信息（如：主题颜色，语言 怎么向子组件去派发）</p>
<p>4.scu（shouldComponentUpdate）的用途</p>
</li>
<li><p>性能优化，默认都会返回 true，可以给用户一个权利去阻止是否需要渲染，但是要结合不可变值</p>
<p>5.描述 redux 单项数据流</p>
</li>
</ul>
<p><img src="https://www.daykalif.com/blog_img/redux1.png" alt="redux"></p>
<p><img src="https://www.daykalif.com/blog_img/redux.png" alt="redux"><br>View 组件通过 click 等事件，dispatch 一个(actionCreator 返回的)action，通过 Store 把当前状态 state 和 action 传递给订阅者 reducer 函数,reducer 返回一个新的状态存储在 Store 中，Store 又把新的 State 传递给 View 组件触发组件更新。</p>
<p><img src="https://www.daykalif.com/blog_img/redux2.jpeg" alt="redux"></p>
<p>6.setState 是同步还是异步？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListDemo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// count 初始值为 0</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span> &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1&quot;</span>, <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span>); <span class="comment">// 0</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span> &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2&quot;</span>, <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span>); <span class="comment">// 0</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span> &#125;);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;3&quot;</span>, <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span>); <span class="comment">// 2</span></span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span> &#125;);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;4&quot;</span>, <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span>); <span class="comment">// 3</span></span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ListDemo</span>;</span><br></pre></td></tr></table></figure>

<p>7.高阶函数</p>
<p>一般而言，我们要理解常见的高阶函数还是很容易的。比如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> add3 = <span class="title function_">add</span>(<span class="number">3</span>);</span><br><span class="line"><span class="title function_">add3</span>(<span class="number">4</span>) === <span class="number">3</span> + <span class="number">4</span>; <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p>add 函数在 ES6 里的写法等价为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">add</span> = (<span class="params">a</span>) =&gt; <span class="function">(<span class="params">b</span>) =&gt;</span> a + b;</span><br></pre></td></tr></table></figure>

<h4 id="React-使用"><a href="#React-使用" class="headerlink" title="React 使用"></a>React 使用</h4><h5 id="1-自己用-create-react-app-创建项目"><a href="#1-自己用-create-react-app-创建项目" class="headerlink" title="1.自己用 create-react-app 创建项目"></a>1.自己用 create-react-app 创建项目</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">安装：npm install -g create-react-app</span><br><span class="line"></span><br><span class="line">create-react-app my-app</span><br><span class="line"><span class="built_in">cd</span> my-app</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure>

<h5 id="2-基本用法"><a href="#2-基本用法" class="headerlink" title="2.基本用法"></a>2.基本用法</h5><p>1).变量、表达式<br>2).class style<br>3).子元素和组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./style.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">List</span> <span class="keyword">from</span> <span class="string">&quot;../List&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JSXBaseDemo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;daykalif&quot;</span>,</span><br><span class="line">      <span class="attr">imgUrl</span>: <span class="string">&quot;https://img1.mukewang.com/5a9fc8070001a82402060220-140-140.jpg&quot;</span>,</span><br><span class="line">      <span class="attr">flag</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 1.获取变量 插值</span></span><br><span class="line">    <span class="keyword">const</span> pElem = <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.state.name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line">    <span class="keyword">return</span> pElem;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.表达式</span></span><br><span class="line">    <span class="keyword">const</span> exprElem = <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.state.flag ? &quot;yes&quot; : &quot;no&quot;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line">    <span class="keyword">return</span> exprElem;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.子元素</span></span><br><span class="line">    <span class="keyword">const</span> imgElem = (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我的头像<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;xxxx.png&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;this.state.imgUrl&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> imgElem;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.class</span></span><br><span class="line">    <span class="keyword">const</span> classElem = <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;title&quot;</span>&gt;</span>设置 css class<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line">    <span class="keyword">return</span> classElem;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.style</span></span><br><span class="line">    <span class="keyword">const</span> styleData = &#123; <span class="attr">fontSize</span>: <span class="string">&quot;30px&quot;</span>, <span class="attr">color</span>: <span class="string">&quot;blue&quot;</span> &#125;;</span><br><span class="line">    <span class="keyword">const</span> styleElem = <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&#123;styleData&#125;</span>&gt;</span>设置 style<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line">    <span class="comment">// 6.style内联写法，注意 &#123;&#123; 和 &#125;&#125;</span></span><br><span class="line">    <span class="keyword">const</span> styleElem = (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">fontSize:</span> &quot;<span class="attr">30px</span>&quot;, <span class="attr">color:</span> &quot;<span class="attr">blue</span>&quot; &#125;&#125;&gt;</span>设置 style<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 7.style静态写法</span></span><br><span class="line">    <span class="keyword">const</span> styleElem = <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;font-size:30px;&quot;</span>&gt;</span>设置 style<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line">    <span class="keyword">return</span> styleElem;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 8.原生 html</span></span><br><span class="line">    <span class="keyword">const</span> rawHtml = <span class="string">&quot;&lt;span&gt;富文本内容&lt;i&gt;斜体&lt;/i&gt;&lt;b&gt;加粗&lt;/b&gt;&lt;/span&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> rawHtmlData = &#123;</span><br><span class="line">      <span class="attr">__html</span>: rawHtml, <span class="comment">// 注意，必须是这种格式</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> rawHtmlElem = (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">dangerouslySetInnerHTML</span>=<span class="string">&#123;rawHtmlData&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 会显示富文本 */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;rawHtml&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 不会显示富文本 */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> rawHtmlElem;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 9.加载组件</span></span><br><span class="line">    <span class="keyword">const</span> componentElem = (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>JSX 中加载一个组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">List</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> componentElem;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">JSXBaseDemo</span>;</span><br></pre></td></tr></table></figure>

<p>4).条件判断：<br>if else<br>三元表达式<br>逻辑运算符 &amp;&amp; ||</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./style.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConditionDemo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">theme</span>: <span class="string">&quot;black&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> blackBtn = <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;btn-black&quot;</span>&gt;</span>black btn<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">    <span class="keyword">const</span> whiteBtn = <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;btn-white&quot;</span>&gt;</span>white btn<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.if else</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">theme</span> === <span class="string">&quot;black&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> blackBtn;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> whiteBtn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.三元运算符</span></span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.state.theme === &quot;black&quot; ? blackBtn : whiteBtn&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.&amp;&amp;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.state.theme === &quot;black&quot; &amp;&amp; blackBtn&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ConditionDemo</span>;</span><br></pre></td></tr></table></figure>

<p>5).列表渲染：<br>map：返回一个新数组，新数组的每个元素是根据函数的逻辑进行重组返回。【map 是纯函数】<br>key：JSX 中的 key 和 vue 中的 key 类似。必填，不能是 index 或 random</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListDemo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">list</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="string">&quot;id-1&quot;</span>,</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&quot;标题1&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="string">&quot;id-2&quot;</span>,</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&quot;标题2&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="string">&quot;id-3&quot;</span>,</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&quot;标题3&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;</span></span><br><span class="line"><span class="language-xml">          /* vue v-for */</span></span><br><span class="line"><span class="language-xml">          this.state.list.map((item, index) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">            // 这里的 key 和 Vue 的 key 类似，必填，不能是 index 或 random</span></span><br><span class="line"><span class="language-xml">            return (</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                index &#123;index&#125;; id &#123;item.id&#125;; title &#123;item.title&#125;</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            );</span></span><br><span class="line"><span class="language-xml">          &#125;)</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ListDemo</span>;</span><br></pre></td></tr></table></figure>

<p>6).事件：<br>1.bind this 2.关于 event 参数</p>
<ul>
<li><p>event 是 SyntheticEvent ，模拟出来 DOM 事件所有能力【全都由 react 体系自己控制的】</p>
</li>
<li><ol start="2">
<li>event.nativeEvent 是原生事件对象</li>
</ol>
</li>
<li><ol start="3">
<li>所有的事件，都被挂载到 document 上，这一点和 DOM 事件不一样，和 Vue 事件也不一样</li>
</ol>
<p>3.传递自定义参数</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EventDemo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">      <span class="attr">list</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="string">&quot;id-1&quot;</span>,</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&quot;标题1&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="string">&quot;id-2&quot;</span>,</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&quot;标题2&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="string">&quot;id-3&quot;</span>,</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&quot;标题3&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 1.修改方法的 this 指向</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">clickHandler1</span> = <span class="variable language_">this</span>.<span class="property">clickHandler1</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 1.this - 使用 bind - 只会bind一次</span></span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">onClick</span>=<span class="string">&#123;this.clickHandler1&#125;</span>&gt;</span>&#123;this.state.name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.this - 使用静态方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">onClick</span>=<span class="string">&#123;this.clickHandler2&#125;</span>&gt;</span>clickHandler2 &#123;this.state.name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.event</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.daykalif.com&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;this.clickHandler3&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        click me</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.传递参数 - 用 bind(this, a, b) - 每点击一次就会bind一次</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;this.state.list.map((item, index) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">          return (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">onClick</span>=<span class="string">&#123;this.clickHandler4.bind(this,</span> <span class="attr">item.id</span>, <span class="attr">item.title</span>)&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &gt;</span></span></span><br><span class="line"><span class="language-xml">              index &#123;index&#125;; title &#123;item.title&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          );</span></span><br><span class="line"><span class="language-xml">        &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">clickHandler1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 1.console.log(&#x27;this....&#x27;, this) // this 默认是 undefined</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;lisi&quot;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 2.静态方法，this 指向当前实例</span></span><br><span class="line">  clickHandler2 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;lisi&quot;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 3.获取 event</span></span><br><span class="line">  clickHandler3 = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    event.<span class="title function_">preventDefault</span>(); <span class="comment">// 阻止默认行为</span></span><br><span class="line">    event.<span class="title function_">stopPropagation</span>(); <span class="comment">// 阻止冒泡</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;target&quot;</span>, event.<span class="property">target</span>); <span class="comment">// 指向当前元素 -- a标签，即当前元素触发</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;current target&quot;</span>, event.<span class="property">currentTarget</span>); <span class="comment">// 指向当前元素 -- a标签，假象！！！</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注意，event 其实是 React 封装的。</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;event&quot;</span>, event); <span class="comment">// 不是原生的 Event ，原生的是 MouseEvent</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;event.__proto__.constructor&quot;</span>, event.<span class="property">__proto__</span>.<span class="property">constructor</span>); <span class="comment">//可以看 __proto__.constructor 是 SyntheticEvent 组合事件</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 原生 event 如下。其 __proto__.constructor 是 MouseEvent</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;nativeEvent&quot;</span>, event.<span class="property">nativeEvent</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;nativeEvent target&quot;</span>, event.<span class="property">nativeEvent</span>.<span class="property">target</span>); <span class="comment">// 指向当前元素 -- a标签，即当前元素触发</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;nativeEvent current target&quot;</span>, event.<span class="property">nativeEvent</span>.<span class="property">currentTarget</span>); <span class="comment">// 绑定事件元素指向 -- document ！！！</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1). event 是 SyntheticEvent ，模拟出来 DOM 事件所有能力【全都由react体系自己控制的】</span></span><br><span class="line">    <span class="comment">// 2). event.nativeEvent 是原生事件对象</span></span><br><span class="line">    <span class="comment">// 3). 所有的事件，都被挂载到 document 上，这一点和 DOM 事件不一样，和 Vue 事件也不一样</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 4.传递参数</span></span><br><span class="line">  <span class="title function_">clickHandler4</span>(<span class="params">id, title, event</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(id, title);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;event&quot;</span>, event); <span class="comment">// 最后追加一个参数，即可接收 event</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">EventDemo</span>;</span><br></pre></td></tr></table></figure>

<p>7).表单：<br>受控组件<br>input textarea select 用 value<br>checkbox radio 用 checked</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FormDemo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;daykalif&quot;</span>,</span><br><span class="line">      <span class="attr">info</span>: <span class="string">&quot;个人信息&quot;</span>,</span><br><span class="line">      <span class="attr">city</span>: <span class="string">&quot;shanghai&quot;</span>,</span><br><span class="line">      <span class="attr">flag</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">gender</span>: <span class="string">&quot;male&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 1.受控组件：&lt;input&gt;和state中的值进行关联，input里面的值，已经受state控制了。</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.state.name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">&quot;inputName&quot;</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span> &#123;/* for在js中是保留字，用 htmlFor 代替 for */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">id</span>=<span class="string">&quot;inputName&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">value</span>=<span class="string">&#123;this.state.name&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onChange</span>=<span class="string">&#123;this.onInputChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 如果有个按钮修改了this.state.name，那么这个input框和p标签里面的name值也会跟着改变。*/&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;xxx&#125;</span>&gt;</span>change name<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.textarea - 使用 value</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* <span class="tag">&lt;<span class="name">textarea</span>&gt;</span>&#123;this.state.info&#125;<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span>---这么写是不对的 */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">value</span>=<span class="string">&#123;this.state.info&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.onTextareaChange&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.state.info&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.select - 使用 value</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">value</span>=<span class="string">&#123;this.state.city&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.onSelectChange&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;beijing&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;shanghai&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;shenzhen&quot;</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.state.city&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.checkbox</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">checked</span>=<span class="string">&#123;this.state.flag&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onChange</span>=<span class="string">&#123;this.onCheckboxChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.state.flag.toString()&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.radio</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        male&#123;&quot; &quot;&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">value</span>=<span class="string">&quot;male&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">checked</span>=<span class="string">&#123;this.state.gender</span> === <span class="string">&quot;male&quot;</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onChange</span>=<span class="string">&#123;this.onRadioChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">        female <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">value</span>=<span class="string">&quot;female&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">checked</span>=<span class="string">&#123;this.state.gender</span> === <span class="string">&quot;female&quot;</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onChange</span>=<span class="string">&#123;this.onRadioChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.state.gender&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//1.</span></span><br><span class="line">  onInputChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>: e.<span class="property">target</span>.<span class="property">value</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//2.</span></span><br><span class="line">  onTextareaChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">info</span>: e.<span class="property">target</span>.<span class="property">value</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//3.</span></span><br><span class="line">  onSelectChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">city</span>: e.<span class="property">target</span>.<span class="property">value</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//4.</span></span><br><span class="line">  onCheckboxChange = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">flag</span>: !<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">flag</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//5.</span></span><br><span class="line">  onRadioChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">gender</span>: e.<span class="property">target</span>.<span class="property">value</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">FormDemo</span>;</span><br></pre></td></tr></table></figure>

<p>8).组件使用：组件和 Props（类型检查）<br>props 传递数据<br>props 传递函数<br>props 类型检查</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PropTypes</span> <span class="keyword">from</span> <span class="string">&quot;prop-types&quot;</span>; <span class="comment">//用于类型检查</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Input</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&#123;this.state.title&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.onTitleChange&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.onSubmit&#125;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  onTitleChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">title</span>: e.<span class="property">target</span>.<span class="property">value</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  onSubmit = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; submitTitle &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">    <span class="title function_">submitTitle</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">title</span>); <span class="comment">// &#x27;xxx&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// props 类型检查</span></span><br><span class="line"><span class="title class_">Input</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">submitTitle</span>: <span class="title class_">PropTypes</span>.<span class="property">func</span>.<span class="property">isRequired</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">List</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; list &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;list.map((item, index) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">          return (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;item.title&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          );</span></span><br><span class="line"><span class="language-xml">        &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 针对List组件，进行props类型检查；接收一个list属性，这个属性必须是一个数组，每个数组都是一个对象，并且为Required，必须有的</span></span><br><span class="line"><span class="title class_">List</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">list</span>: <span class="title class_">PropTypes</span>.<span class="title function_">arrayOf</span>(<span class="title class_">PropTypes</span>.<span class="property">object</span>).<span class="property">isRequired</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TodoListDemo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="comment">// 状态（数据）提升【数据放到最外层管理】</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">list</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="string">&quot;id-1&quot;</span>,</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&quot;标题1&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="string">&quot;id-2&quot;</span>,</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&quot;标题2&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="string">&quot;id-3&quot;</span>,</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&quot;标题3&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Input</span> <span class="attr">submitTitle</span>=<span class="string">&#123;this.onSubmitTitle&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">List</span> <span class="attr">list</span>=<span class="string">&#123;this.state.list&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  onSubmitTitle = <span class="function">(<span class="params">title</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">list</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">list</span>.<span class="title function_">concat</span>(&#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">`id-<span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span>`</span>,</span><br><span class="line">        title,</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">TodoListDemo</span>;</span><br></pre></td></tr></table></figure>

<h6 id="6-state-和-setState"><a href="#6-state-和-setState" class="headerlink" title="6.state 和 setState"></a>6.state 和 setState</h6><p>1.state 要在构造函数中定义 2.不可变值 3.可能是异步更新 4.可能会被合并</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数组件，默认没有 state</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// class组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StateDemo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第一，state 要在构造函数constructor中定义</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.increase&#125;</span>&gt;</span>累加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  increase = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 第二，不要直接修改 state ，使用不可变值【使用新对象，不能修改老的对象】：</span></span><br><span class="line">    <span class="comment">// 1.值：</span></span><br><span class="line">    <span class="comment">// 错误1:</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span>++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 错误2:</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span>++;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 正确:</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span>, <span class="comment">// SCU</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.不可变值（函数式编程，纯函数） - 操作数组的常用形式：</span></span><br><span class="line">    <span class="comment">// 错误3:【在shouldComponentUpdate中会有问题】</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">list1</span>.<span class="title function_">push</span>(<span class="number">100</span>); <span class="comment">// 注意，不能直接对 this.state.list 进行 push pop shift unshift splice 等，这样违反不可变值</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">listi1</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">listi1</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 正确:【什么时候修改，什么时候才去设值，并且不能影响到之前state的值】</span></span><br><span class="line">    <span class="keyword">const</span> list5Copy = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">list5</span>.<span class="title function_">slice</span>(); <span class="comment">//拷贝副本</span></span><br><span class="line">    list5Copy.<span class="title function_">splice</span>(<span class="number">2</span>, <span class="number">0</span>, <span class="string">&quot;a&quot;</span>); <span class="comment">// 中间插入/删除</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">list1</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">list1</span>.<span class="title function_">concat</span>(<span class="number">100</span>), <span class="comment">//追加【不会影响this.state.list1，this.state.list1.concat(100)返回的是我们想要的结果】</span></span><br><span class="line">      <span class="attr">list2</span>: [...<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">list2</span>, <span class="number">100</span>], <span class="comment">// 追加</span></span><br><span class="line">      <span class="attr">list3</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">list3</span>.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">3</span>), <span class="comment">// 截取</span></span><br><span class="line">      <span class="attr">list4</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">list4</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item &gt; <span class="number">100</span>), <span class="comment">// 筛选</span></span><br><span class="line">      <span class="attr">list5</span>: list5Copy, <span class="comment">// 其他操作</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.不可变值 - 操作对象的的常用形式：【注意，不能直接对 this.state.obj 进行属性设置，这样违反不可变值】</span></span><br><span class="line">    <span class="comment">// 正确：</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">obj1</span>: <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">obj1</span>, &#123; <span class="attr">a</span>: <span class="number">100</span> &#125;),</span><br><span class="line">      <span class="attr">obj2</span>: &#123; ...<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">obj2</span>, <span class="attr">a</span>: <span class="number">100</span> &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第三，setState 可能是异步更新（有可能是同步更新）</span></span><br><span class="line">    <span class="comment">// 1.setState 可能是异步更新</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;count by callback&quot;</span>, <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span>); <span class="comment">// 回调函数中可以拿到最新的 state 【联想 Vue $nextTick - DOM】</span></span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;count&quot;</span>, <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span>); <span class="comment">// 异步的，拿不到最新值；setState完，没有立马进行渲染页面，而是异步渲染页面，但此时同步去拿这个数据的结果，拿到的是当前的数据结果，不是渲染完之后的结果</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.setTimeout 中 setState 是同步的</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;count in setTimeout&quot;</span>, <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.自己定义的 DOM 事件，setState 是同步的。在 componentDidMount 中</span></span><br><span class="line">    bodyClickHandler = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;count in body event&quot;</span>, <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 自己定义的 DOM 事件，setState 是同步的</span></span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="variable language_">this</span>.<span class="property">bodyClickHandler</span>); <span class="comment">//将函数抽离出来是因为需要及时销毁自定义事件</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">componentWillUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 及时销毁自定义 DOM 事件</span></span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="variable language_">this</span>.<span class="property">bodyClickHandler</span>);</span><br><span class="line">      <span class="comment">// clearTimeout</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第四，state 异步更新的话，更新前会被合并</span></span><br><span class="line">    <span class="comment">// 1.传入对象，会被合并。每次执行结果只一次 +1。this.state.count 的初始值都是0，每次赋值都是0+1=1；（类似 Object.assign(&#123;count:1&#125;,&#123;count:1&#125;,&#123;count:1&#125;) ）</span></span><br><span class="line">    <span class="comment">// 1,1,1...</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.传入函数，不会被合并。每次执行结果是 +3</span></span><br><span class="line">    <span class="comment">// 3,6,9,...</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">(<span class="params">prevState, props</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">count</span>: prevState.<span class="property">count</span> + <span class="number">1</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">(<span class="params">prevState, props</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">count</span>: prevState.<span class="property">count</span> + <span class="number">1</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">(<span class="params">prevState, props</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">count</span>: prevState.<span class="property">count</span> + <span class="number">1</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">StateDemo</span>;</span><br></pre></td></tr></table></figure>

<h6 id="7-组件和生命周期（react-lifecycle）"><a href="#7-组件和生命周期（react-lifecycle）" class="headerlink" title="7.组件和生命周期（react-lifecycle）"></a>7.组件和生命周期（<a href="https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/">react-lifecycle</a>）</h6><p>ajax 请求在 componentDidMount 中处理；<br>shouldComponentUpdate 进行性能优化【可以控制更新时是否需要继续渲染】；<br>单组件生命周期<br>父子组件生命周期，和 Vue 一样</p>
<p>加载阶段：<br>1.getDefaultProps(){}<br>2.getInitialState(){}<br>3.componentWillMount(){}—–16.x 替换成—-&gt;static getDerivedStateFromProps(props,nextState){}<br>4.render(){}<br>5.componentDidMount(){}</p>
<p>更新阶段：<br>6.componentWillReceiveProps(){}—-16.x 替换成—-&gt;static getDerivedStateFromProps(props,nextState){}<br>7.shouldComponentUpdate(){}———–&gt;组件性能优化在这里进行<br>8.componentWillUpdate(){}————&gt;getSnapShotBeforeUpdate(){}<br>9.render(){}<br>10.ComponentDidUpdate(){}</p>
<p>销毁阶段：<br>11.componentWillUnMount(){}</p>
<p>16.x 新增：<br>componentDidCatch(error,info)</p>
<h5 id="3-高级使用"><a href="#3-高级使用" class="headerlink" title="3.高级使用"></a>3.高级使用</h5><h6 id="1-函数式组件"><a href="#1-函数式组件" class="headerlink" title="1.函数式组件"></a>1.函数式组件</h6><ul>
<li>纯函数，输入 props，输出 JSX</li>
<li>没有实例，没有生命周期，没有 state</li>
<li>不能扩展其他方法</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// clss组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">List</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; list &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;list.map((item, index) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">          return (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">span</span>&gt;</span>title &#123;item.title&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          );</span></span><br><span class="line"><span class="language-xml">        &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数组件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">List</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//undefined</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;props.list.map((item, index) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">        return (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>title &#123;item.title&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        );</span></span><br><span class="line"><span class="language-xml">      &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="2-非受控组件、refs"><a href="#2-非受控组件、refs" class="headerlink" title="2.非受控组件、refs"></a>2.非受控组件、refs</h6><ul>
<li>ref</li>
<li>defaultValue defaultChecked</li>
<li>手动操作 DOM 元素</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;daykalif&quot;</span>,</span><br><span class="line">      <span class="attr">flag</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">nameInputRef</span> = <span class="title class_">React</span>.<span class="title function_">createRef</span>(); <span class="comment">// 创建 ref</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">fileInputRef</span> = <span class="title class_">React</span>.<span class="title function_">createRef</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 1.input defaultValue</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 非受控组件使用 defaultValue 而不是 value ，只是拿state作一个初始值而已。要获取值使用 ref */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">defaultValue</span>=<span class="string">&#123;this.state.name&#125;</span> <span class="attr">ref</span>=<span class="string">&#123;this.nameInputRef&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* input没有onChange事件，所以state 并不会随着改变 */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>state.name: &#123;this.state.name&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.alertName&#125;</span>&gt;</span>alert name<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.非受控组件中checkbox使用defaultChecked</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">defaultChecked</span>=<span class="string">&#123;this.state.flag&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.非受控组件中操作DOM使用场景：上传文件 -- file</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;this.fileInputRef&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.alertFile&#125;</span>&gt;</span>alert file<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  alertName = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> elem = <span class="variable language_">this</span>.<span class="property">nameInputRef</span>.<span class="property">current</span>; <span class="comment">// 通过 ref 获取 DOM 节点</span></span><br><span class="line">    <span class="title function_">alert</span>(elem.<span class="property">value</span>); <span class="comment">// 不是 this.state.name，而是ref获取DOM元素的值</span></span><br><span class="line">  &#125;;</span><br><span class="line">  alertFile = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> elem = <span class="variable language_">this</span>.<span class="property">fileInputRef</span>.<span class="property">current</span>; <span class="comment">// 通过 ref 获取 DOM 节点</span></span><br><span class="line">    <span class="title function_">alert</span>(elem.<span class="property">files</span>[<span class="number">0</span>].<span class="property">name</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>非受控组件使用场景</p>
</blockquote>
<p>必须手动操作 DOM 元素，setState 实现不了<br>文件上传<code>&lt;input type=file&gt;</code><br>某些富文本编辑器，需要传入 DOM 元素</p>
<blockquote>
<p>受控组件 VS 非受控组件</p>
</blockquote>
<p>优先使用受控组件，符合 React 设计原则<br>必须操作 DOM 时，再使用非受控组件</p>
<h6 id="3-Protals-传送门"><a href="#3-Protals-传送门" class="headerlink" title="3.Protals(传送门)"></a>3.Protals(传送门)</h6><p>组件默认会按照既定层次嵌套渲染<br>如何让组件渲染到父组件以外？</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">style<span class="selector-class">.css</span>: .modal &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#000</span>;</span><br><span class="line">  <span class="comment">/* opacity: .2; */</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 子组件 PortalsDemo.js:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./style.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 1.正常渲染</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;modal&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;this.props.children&#125; &#123;/* 类似于vue slot */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.使用 Portals【第二个参数表示要渲染到什么地方】</span></span><br><span class="line">    <span class="comment">// fixed 元素要放在 body 上，有更好的浏览器兼容性。</span></span><br><span class="line">    <span class="comment">// 组件结构不会变，但是渲染的时候，此处会渲染到document.body上</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">ReactDOM</span>.<span class="title function_">createPortal</span>(</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;modal&quot;</span>&gt;</span>&#123;this.props.children&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>,</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span> <span class="comment">//DOM 节点</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父组件 index.js：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PortalsDemo</span> <span class="keyword">from</span> <span class="string">&quot;./PortalsDemo&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AdvancedUse</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">PortalsDemo</span>&gt;</span>Modal 内容<span class="tag">&lt;/<span class="name">PortalsDemo</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">AdvancedUse</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Protals 使用场景</p>
</blockquote>
<p>overflow：hidden<br>父组件 z-index 值太小<br>fixed 需要放在 body 第一层级</p>
<h6 id="4-context"><a href="#4-context" class="headerlink" title="4.context"></a>4.context</h6><p>公共信息（语言、主题）如何传递给每个组件？<br>用 props 太繁琐<br>用 redux 小题大做</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改主题颜色示例：</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 Context 填入默认值（任何一个 js 变量）</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ThemeContext</span> = <span class="title class_">React</span>.<span class="title function_">createContext</span>(<span class="string">&quot;light&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 底层组件 - class 组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThemedButton</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="comment">// static contextType = ThemeContext // 第一步：方法1).ES6中新语法，指定 contextType 读取当前的 theme context。</span></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> theme = <span class="variable language_">this</span>.<span class="property">context</span>; <span class="comment">// 第二步：React 会往上找到最近的 theme Provider，然后使用它的值。</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>button&#x27;s theme is &#123;theme&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">ThemedButton</span>.<span class="property">contextType</span> = <span class="title class_">ThemeContext</span>; <span class="comment">// 第一步：方法2).指定 contextType 读取当前的 theme context。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 底层组件 - 函数式组件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ThemeLink</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="comment">// const theme = this.context // 会报错。函数式组件没有实例，即没有 this</span></span><br><span class="line">  <span class="comment">// 函数式组件可以使用 Consumer</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ThemeContext.Consumer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;(value) =&gt; <span class="tag">&lt;<span class="name">p</span>&gt;</span>link&#x27;s theme is &#123;value&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#125;&#123;&quot; &quot;&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;/* 用value来获取最近的context */&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ThemeContext.Consumer</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中间的组件再也不必指明往下传递 theme 了。    //为了演示代码，这个地方没有消费这个context</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Toolbar</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ThemedButton</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ThemeLink</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">theme</span>: <span class="string">&quot;light&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">ThemeContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;this.state.theme&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Toolbar</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeTheme&#125;</span>&gt;</span>change theme<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ThemeContext.Provider</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  changeTheme = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">theme</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">theme</span> === <span class="string">&quot;light&quot;</span> ? <span class="string">&quot;dark&quot;</span> : <span class="string">&quot;light&quot;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<h6 id="5-异步组件（懒加载）"><a href="#5-异步组件（懒加载）" class="headerlink" title="5.异步组件（懒加载）"></a>5.异步组件（懒加载）</h6><p>组件比较大时，或者组件懒加载时可以使用异步组件：<br>import()<br>React.lazy<br>React.Suspense</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ContextDemo</span> = <span class="title class_">React</span>.<span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;./ContextDemo&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>引入一个动态组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">React.Suspense</span> <span class="attr">fallback</span>=<span class="string">&#123;</span>&lt;<span class="attr">div</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">ContextDemo</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">React.Suspense</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 强制刷新，可看到 loading... （看不到就限制一下 chrome 网速）</span></span><br><span class="line">    <span class="comment">// 2. 看 network 的 js 加载</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<h6 id="6-性能优化"><a href="#6-性能优化" class="headerlink" title="6.性能优化"></a>6.性能优化</h6><blockquote>
<p>1.shouldComponentUpdate（简称 SCU）</p>
</blockquote>
<p>示例 1:演示 shouldComponentUpdate 的基本使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.onIncrease&#125;</span>&gt;</span>increase<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  onIncrease = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">shouldComponentUpdate</span>(<span class="params">nextProps, nextState</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nextState.<span class="property">count</span> !== <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 可以渲染</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 不重复渲染</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<p>示例 2:为什么默认返回 true？还给用户可定制的权利</p>
<p>React 默认：父组件有更新，子组件则无条件也更新！！！<br>性能优化对于 React 更加重要！<br>SCU 一定要每次都用吗？—— 优化的权利交给自己，需要的时候才优化</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PropTypes</span> <span class="keyword">from</span> <span class="string">&quot;prop-types&quot;</span>; <span class="comment">//用于类型检查</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Input</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&#123;this.state.title&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.onTitleChange&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.onSubmit&#125;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  onTitleChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">title</span>: e.<span class="property">target</span>.<span class="property">value</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  onSubmit = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; submitTitle &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">    <span class="title function_">submitTitle</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">title</span>); <span class="comment">// &#x27;xxx&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// props 类型检查</span></span><br><span class="line"><span class="title class_">Input</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">submitTitle</span>: <span class="title class_">PropTypes</span>.<span class="property">func</span>.<span class="property">isRequired</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">List</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; list &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;list.map((item, index) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">          return (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;item.title&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          );</span></span><br><span class="line"><span class="language-xml">        &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 针对List组件，进行props类型检查；接收一个list属性，这个属性必须是一个数组，每个数组都是一个对象，并且为Required，必须有的</span></span><br><span class="line"><span class="title class_">List</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">list</span>: <span class="title class_">PropTypes</span>.<span class="title function_">arrayOf</span>(<span class="title class_">PropTypes</span>.<span class="property">object</span>).<span class="property">isRequired</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Footer</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;this.props.text&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;this.props.length&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">componentDidUpdate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;footer did update&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">shouldComponentUpdate</span>(<span class="params">nextProps, nextState</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      nextProps.<span class="property">text</span> !== <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">text</span> ||</span><br><span class="line">      nextProps.<span class="property">length</span> !== <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">length</span></span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 可以渲染</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 不重复渲染</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// React 默认：父组件有更新，子组件则无条件也更新！！！</span></span><br><span class="line">  <span class="comment">// 性能优化对于 React 更加重要！</span></span><br><span class="line">  <span class="comment">// SCU 一定要每次都用吗？—— 优化的权利交给自己，需要的时候才优化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TodoListDemo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="comment">// 状态（数据）提升【数据放到最外层管理】</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">list</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="string">&quot;id-1&quot;</span>,</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&quot;标题1&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="string">&quot;id-2&quot;</span>,</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&quot;标题2&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="string">&quot;id-3&quot;</span>,</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&quot;标题3&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">footerInfo</span>: <span class="string">&quot;底部文字&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Input</span> <span class="attr">submitTitle</span>=<span class="string">&#123;this.onSubmitTitle&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">List</span> <span class="attr">list</span>=<span class="string">&#123;this.state.list&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Footer</span> <span class="attr">text</span>=<span class="string">&#123;this.state.footerInfo&#125;</span> <span class="attr">length</span>=<span class="string">&#123;this.state.list.length&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  onSubmitTitle = <span class="function">(<span class="params">title</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">list</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">list</span>.<span class="title function_">concat</span>(&#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">`id-<span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span>`</span>,</span><br><span class="line">        title,</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">TodoListDemo</span>;</span><br></pre></td></tr></table></figure>

<p>配合 setState 不可变值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PropTypes</span> <span class="keyword">from</span> <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&quot;lodash&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Input</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&#123;this.state.title&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.onTitleChange&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.onSubmit&#125;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  onTitleChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">title</span>: e.<span class="property">target</span>.<span class="property">value</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  onSubmit = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; submitTitle &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">    <span class="title function_">submitTitle</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">title</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// props 类型检查</span></span><br><span class="line"><span class="title class_">Input</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">submitTitle</span>: <span class="title class_">PropTypes</span>.<span class="property">func</span>.<span class="property">isRequired</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">List</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; list &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;list.map((item, index) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">          return (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;item.title&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          );</span></span><br><span class="line"><span class="language-xml">        &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 增加 shouldComponentUpdate -- 一定要配合setState不可变值来使用</span></span><br><span class="line">  <span class="title function_">shouldComponentUpdate</span>(<span class="params">nextProps, nextState</span>) &#123;</span><br><span class="line">    <span class="comment">// _.isEqual 做对象或者数组的深度比较（一次性递归到底），所以不建议执行深度比较，也不建议把state层级写的较深</span></span><br><span class="line">    <span class="keyword">if</span> (_.<span class="title function_">isEqual</span>(nextProps.<span class="property">list</span>, <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">list</span>)) &#123;</span><br><span class="line">      <span class="comment">// 相等，则不重复渲染</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 不相等，则渲染</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// props 类型检查</span></span><br><span class="line"><span class="title class_">List</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">list</span>: <span class="title class_">PropTypes</span>.<span class="title function_">arrayOf</span>(<span class="title class_">PropTypes</span>.<span class="property">object</span>).<span class="property">isRequired</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TodoListDemo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">list</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="string">&quot;id-1&quot;</span>,</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&quot;标题1&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="string">&quot;id-2&quot;</span>,</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&quot;标题2&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="string">&quot;id-3&quot;</span>,</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&quot;标题3&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Input</span> <span class="attr">submitTitle</span>=<span class="string">&#123;this.onSubmitTitle&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">List</span> <span class="attr">list</span>=<span class="string">&#123;this.state.list&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  onSubmitTitle = <span class="function">(<span class="params">title</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 正确的用法</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">list</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">list</span>.<span class="title function_">concat</span>(&#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">`id-<span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span>`</span>,</span><br><span class="line">        title,</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为了演示 SCU ，故意写的错误用法 -- 先push，再设值；这违反了setState不可变值，如果这么写，会使List组件中的SCU前后的两个值相等，无法进行判断是否需要更新渲染，所以这里需要使用不可变值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// this.state.list.push(&#123;</span></span><br><span class="line">    <span class="comment">//     id: `id-$&#123;Date.now()&#125;`,</span></span><br><span class="line">    <span class="comment">//     title</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">    <span class="comment">// this.setState(&#123;</span></span><br><span class="line">    <span class="comment">//     list: this.state.list</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">TodoListDemo</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>SCU 使用总结</p>
</blockquote>
<p>SCU 默认返回 true,即 React 默认重新渲染所有子组件<br>必须配合“不可变值”一起使用<br>可先不用 SCU，有性能问题时再考虑使用</p>
<blockquote>
<p>2.PureComponent 和 React.memo</p>
</blockquote>
<p>1).纯组件 PureComponent（class 组件），SCU 中实现了浅比较【也要配合 setState 不可变值】</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//普通组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Input</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//纯组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">List</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.PureComponent</span> &#123;</span><br><span class="line">  <span class="comment">// 类似于隐藏的加了一个SCU的生命周期，里面做了浅比较</span></span><br><span class="line">  <span class="title function_">shouldComponentUpdate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">/* 浅比较 */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2).memo，函数组件中的 PureComponent</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">TodoListDemo</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyComponent</span>(<span class="params">props</span>)&#123;</span><br><span class="line">    <span class="comment">/* 使用props渲染 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">areEqual</span>(<span class="params">prevProps,nextProps</span>) &#123; <span class="comment">//类似于SCU的函数</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        如果把 nextProps 传入 render 方法的返回结果与</span></span><br><span class="line"><span class="comment">        将 prevProps 传入 render 方法的返回结果进行比较，</span></span><br><span class="line"><span class="comment">        一致则返回true，否则返回false</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">React</span>.<span class="title function_">memo</span>(<span class="title class_">MyComponent</span>,areEqual);</span><br></pre></td></tr></table></figure>

<p>3).浅比较已使用大部分情况（尽量不要做深度比较）</p>
<blockquote>
<p>3.不可变值 immutable.js</p>
</blockquote>
<p>彻底拥抱“不可变值”<br>基于共享数据技术（类似深拷贝，但不是深拷贝），性能好，速度快<br>但是有一定学习和迁移成本，按需使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> map1 = <span class="title class_">Immutable</span>.<span class="title class_">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> map2 = map1.<span class="title function_">set</span>(<span class="string">&quot;b&quot;</span>, <span class="number">50</span>);</span><br><span class="line">map1.<span class="title function_">get</span>(<span class="string">&quot;b&quot;</span>); <span class="comment">//2</span></span><br><span class="line">map2.<span class="title function_">get</span>(<span class="string">&quot;b&quot;</span>); <span class="comment">//50</span></span><br></pre></td></tr></table></figure>

<h6 id="7-关于组件公共逻辑的抽离"><a href="#7-关于组件公共逻辑的抽离" class="headerlink" title="7.关于组件公共逻辑的抽离"></a>7.关于组件公共逻辑的抽离</h6><blockquote>
<p>1）.mixin，已被 React 弃用</p>
</blockquote>
<blockquote>
<p>2）.高阶组件 HOC</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例1：</span></span><br><span class="line"><span class="comment">// 高阶组件不是一种功能，而是一种类似于工厂模式</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">HOCFactory</span> = (<span class="params">Component</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">HOC</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="comment">// 在此定义多个组件的公共逻辑</span></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...this.props</span>&#125; /&gt;</span></span>; <span class="comment">//返回拼装结果</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable constant_">HOC</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">EnhancedComponent1</span> = <span class="title class_">HOCFactory</span>(<span class="title class_">WrappedComponent1</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">EnhancedComponent1</span> = <span class="title class_">HOCFactory</span>(<span class="title class_">WrappedComponent2</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例2:</span></span><br><span class="line"><span class="comment">// 子组件 HOCDemo.js:</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 高阶组件【接收一个组件，再返回一个组件】，不是一种功能，而是一种模式</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">withMouse</span> = (<span class="params">Component</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">withMouseComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">      <span class="variable language_">super</span>(props);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">state</span> = &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在此定义多个组件的公共逻辑</span></span><br><span class="line">    handleMouseMove = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="attr">x</span>: event.<span class="property">clientX</span>,</span><br><span class="line">        <span class="attr">y</span>: event.<span class="property">clientY</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="comment">// 返回拼装的结果</span></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">height:</span> &quot;<span class="attr">500px</span>&quot; &#125;&#125; <span class="attr">onMouseMove</span>=<span class="string">&#123;this.handleMouseMove&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;/* 1. 透传所有高阶组件的props,所有props从index.js中获取 （Vue中使用$props传，v-bind） 2. 增加 mouse 属性 */&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...this.props</span>&#125; <span class="attr">mouse</span>=<span class="string">&#123;this.state&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> withMouseComponent;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> a = props.<span class="property">a</span>; <span class="comment">//这个a通过高阶组件的透传所有属性从index.js中获取</span></span><br><span class="line">  <span class="keyword">const</span> &#123; x, y &#125; = props.<span class="property">mouse</span>; <span class="comment">// 接收 mouse 属性</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">height:</span> &quot;<span class="attr">500px</span>&quot; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        The mouse position is (&#123;x&#125;, &#123;y&#125;)</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;a&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">withMouse</span>(<span class="title class_">App</span>); <span class="comment">// 返回高阶函数</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父组件 index.js:</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HOCDemo</span> <span class="keyword">from</span> <span class="string">&quot;./HOCDemo&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AdvancedUse</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">HOCDemo</span> <span class="attr">a</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">AdvancedUse</span>;</span><br></pre></td></tr></table></figure>

<p>redux connect 是高阶组件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">VisibleTodoList</span> = <span class="title function_">connect</span>(mapStateToProps, mapDispatchToProps)(<span class="title class_">TodoList</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">VisibleTodoList</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// connect源码：</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">connect</span> =</span><br><span class="line">  (<span class="params">mapStateToProps, mapDispatchToProps</span>) =&gt; <span class="function">(<span class="params">WrappedComponent</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Connect</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">      <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">          <span class="attr">allProps</span>: &#123;&#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">/* 中间省略N行代码 */</span></span><br><span class="line">      <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...this.state.allProps</span>&#125; /&gt;</span></span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Connect</span>;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>问：Vue 如何实现高阶组件？</p>
</blockquote>
<p><a href="https://blog.csdn.net/z609373067/article/details/81258966">Vue 高阶组件</a></p>
<blockquote>
<p>3）.Render Props</p>
</blockquote>
<p>Render Props 的核心思想：<br>通过一个函数将 class 组件的 state 作为 props 传递给纯函数组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例1:</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Factory</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="comment">/* state 即多个组件的公共逻辑的数据 */</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* 修改state */</span></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.props.render(this.state)&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Factory</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">render</span>=<span class="string">&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /* <span class="attr">render是一个函数组件</span> */</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      (<span class="attr">props</span>) =&gt;</span> (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;props.a&#125;</span></span><br><span class="line"><span class="language-xml">          &#123;props.b&#125;...</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      )</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml">  /&gt;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例2:</span></span><br><span class="line"><span class="comment">// 子组件 RenderPropDemo.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PropTypes</span> <span class="keyword">from</span> <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mouse</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleMouseMove = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">x</span>: event.<span class="property">clientX</span>,</span><br><span class="line">      <span class="attr">y</span>: event.<span class="property">clientY</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">height:</span> &quot;<span class="attr">500px</span>&quot; &#125;&#125; <span class="attr">onMouseMove</span>=<span class="string">&#123;this.handleMouseMove&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 将当前 state 作为 props ，传递给 render （render 是一个函数组件） */&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;this.props.render(this.state)&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Mouse</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="title class_">PropTypes</span>.<span class="property">func</span>.<span class="property">isRequired</span>, <span class="comment">// 必须接收一个 render 属性，而且是函数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params">props</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">height:</span> &quot;<span class="attr">500px</span>&quot; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;props.a&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span> &#123;/* 这里的a来自index.js */&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Mouse</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">render</span>=<span class="string">&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /* <span class="attr">render</span> <span class="attr">是一个函数组件</span> */</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        (&#123; <span class="attr">x</span>, <span class="attr">y</span> &#125;) =&gt;</span> (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            The mouse position is (&#123;x&#125;, &#123;y&#125;)</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        )</span></span><br><span class="line"><span class="language-xml">      &#125;</span></span><br><span class="line"><span class="language-xml">    /&gt;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 即，定义了 Mouse 组件，只有获取 x y 的能力。</span></span><br><span class="line"><span class="comment"> * 至于 Mouse 组件如何渲染，App 说了算，通过 render prop 的方式告诉 Mouse 。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父组件 index.js:</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">RenderPropDemo</span> <span class="keyword">from</span> <span class="string">&quot;./RenderPropDemo&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AdvancedUse</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">RenderPropDemo</span> <span class="attr">a</span>=<span class="string">&quot;200&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">AdvancedUse</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>HOC vs Render Props</p>
</blockquote>
<p>HOC:模式简单，但会增加组件层级<br>Render Props:代码简介，学习成本较高<br>按需使用</p>
<h4 id="React-周边工具"><a href="#React-周边工具" class="headerlink" title="React 周边工具"></a>React 周边工具</h4><h5 id="1-redux"><a href="#1-redux" class="headerlink" title="1.redux"></a>1.redux</h5><p><a href="https://www.redux.org.cn/">redux</a><br>和 Vuex 作用相同，但比 Vuex 学习成本高<br>不可变值，纯函数</p>
<p>基本概念：<br>1).store state action reducer</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这是一个 reducer，形式为 (state, action) =&gt; state 的纯函数。</span></span><br><span class="line"><span class="comment"> * 描述了 action 如何把 state 转变成下一个 state。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * state 的形式取决于你，可以是基本类型、数组、对象、</span></span><br><span class="line"><span class="comment"> * 甚至是 Immutable.js 生成的数据结构。惟一的要点是</span></span><br><span class="line"><span class="comment"> * 当 state 变化时需要返回全新的对象，而不是修改传入的参数。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 下面例子使用 `switch` 语句和字符串来做判断，但你可以写帮助类(helper)</span></span><br><span class="line"><span class="comment"> * 根据不同的约定（如方法映射）来判断，只要适用你的项目即可。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">counter</span>(<span class="params">state = <span class="number">0</span>, action</span>) &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;INCREMENT&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> state + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;DECREMENT&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> state - <span class="number">1</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 Redux store 来存放应用的状态。</span></span><br><span class="line"><span class="comment">// API 是 &#123; subscribe, dispatch, getState &#125;。</span></span><br><span class="line"><span class="keyword">let</span> store = <span class="title function_">createStore</span>(counter);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以手动订阅更新，也可以事件绑定到视图层。</span></span><br><span class="line">store.<span class="title function_">subscribe</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(store.<span class="title function_">getState</span>()));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改变内部 state 惟一方法是 dispatch 一个 action。</span></span><br><span class="line"><span class="comment">// action 可以被序列化，用日记记录和储存下来，后期还可以以回放的方式执行</span></span><br><span class="line">store.<span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;INCREMENT&quot;</span> &#125;);</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line">store.<span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;INCREMENT&quot;</span> &#125;);</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line">store.<span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;DECREMENT&quot;</span> &#125;);</span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<p>2).单向数据流</p>
<ul>
<li><p>dispatch(action)</p>
</li>
<li><p>reducer-&gt;newState【这里一定要用不可变值】</p>
</li>
<li><p>subscribe 触发通知</p>
<p>3).react-redux</p>
</li>
<li><p>provider</p>
</li>
<li><p>connect</p>
</li>
<li><p>mapStateToProps</p>
</li>
<li><p>mapDispatchToProps</p>
<p>4).异步 action</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 同步action</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">addTodo</span> = (<span class="params">text</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 返回action对象</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;ADD_TODO&quot;</span>,</span><br><span class="line">    <span class="attr">id</span>: nextTodoId++,</span><br><span class="line">    text,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步action -- 需要中间件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">addTodoAsync</span> = (<span class="params">text</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 返回函数，其中有dispatch参数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ajax异步获取数据</span></span><br><span class="line">    <span class="title function_">fetch</span>(url).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 执行action</span></span><br><span class="line">      <span class="title function_">dispatch</span>(<span class="title function_">addTodo</span>(res.<span class="property">text</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>5).中间件</p>
<p><img src="https://www.daykalif.com/blog_img/middleware.jpeg" alt="middleware"></p>
<ul>
<li>redux-thunk</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">&quot;redux-thunk&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> rootReducer <span class="keyword">from</span> <span class="string">&quot;./reducers/index&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建store时，作为中间件引入redux-thunk</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(rootReducer, <span class="title function_">applyMiddleware</span>(thunk));</span><br></pre></td></tr></table></figure>

<ul>
<li>redux-promise</li>
<li>redux-saga</li>
<li>redux-logger</li>
</ul>
<blockquote>
<p>redux 中间件：redux-logger 实现</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> createLogger <span class="keyword">from</span> <span class="string">&quot;redux-logger&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">&quot;redux-thunk&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> logger = <span class="title function_">createLogger</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建store时，作为中间件引入redux-thunk</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(reducer, <span class="title function_">applyMiddleware</span>(thunk, logger)); <span class="comment">//会按顺序执行</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自己修改dispatch，增加logger</span></span><br><span class="line"><span class="keyword">let</span> next = store.<span class="property">dispatch</span>;</span><br><span class="line">store.<span class="property">dispatch</span> = <span class="keyword">function</span> <span class="title function_">dispatchAndLog</span>(<span class="params">action</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;dispatching&quot;</span>, action);</span><br><span class="line">  <span class="title function_">next</span>(action);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;next state&quot;</span>, store.<span class="title function_">getState</span>());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>redux 示例:</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"><span class="comment">//1.提供一个仓库</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//8.引入connect   //11.引入Provider</span></span><br><span class="line"><span class="keyword">import</span> &#123; connect, <span class="title class_">Provider</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.创建一个数据的仓库   //6.将reducer放入仓库，这就意味着仓库中有reducer，即仓库中有状态值了</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(reducer);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.仓库里面现在没有数据，存储数据的地方在reducer，reducer是一个函数，可以存放state状态  //16.传入第二个参数action</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reducer</span>(<span class="params">state = &#123; counter: <span class="number">0</span> &#125;, action</span>) &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;INCREASE&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">counter</span>: state.<span class="property">counter</span> + <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//15.创建按钮方法,派发</span></span><br><span class="line"><span class="keyword">const</span> mapDispatchToProps = &#123;</span><br><span class="line">  <span class="attr">increase</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;INCREASE&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//7.store仓库和组件间没有任何关系，而state只能在组件中(reducer)进行修改，无法进行传递，而想要将store的state传递到component中，就得想办法将state转成props</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapStateToProps</span> = (<span class="params">state</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">counter</span>: state.<span class="property">counter</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.现在需要一个组件   //13.console.log(this.props);里面有一个counter  //14.新建按钮    //18.添加onClick=&#123;this.props.increase&#125;,从this.props属性中提取increase</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Counter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">props</span>);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Counter:&#123;this.props.counter&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.props.increase&#125;</span>&gt;</span>counter++<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//9.mapStateToProps已经将状态转成了属性，但是和组件还是没有建立起连接,所以需要进行连接操作,创建一个容器组件，连接的是mapStateToProps属性，将连接放到Counter组件中   //17.将方法放到连接中</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CounterContainer</span> = <span class="title function_">connect</span>(mapStateToProps, mapDispatchToProps)(<span class="title class_">Counter</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.加载组件   //10.此时不在渲染Counter组件，而是渲染CounterContainer容器组件  //12.使用provider,提供数据仓库，而仓库中就有state状态值</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">CounterContainer</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;app&quot;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//总结：</span></span><br><span class="line"><span class="comment">// 1.创建仓库，并且将reducer放入仓库，这就意味着仓库中有state</span></span><br><span class="line"><span class="comment">// 2.仓库里面有数据吗，现在没有，存储数据的地方是在reducer</span></span><br><span class="line"><span class="comment">// 3.store仓库和组件间没有任何关系，而state只能在组件中进行修改，无法进行传递，而想要将store的state传递到component中，就得想办法将state转成props</span></span><br><span class="line"><span class="comment">// 4.mapStateToProps已经将状态转成了属性，但是和组件还是没有建立起连接</span></span><br><span class="line"><span class="comment">// 5.将属性与组件通过connect建立起连接</span></span><br><span class="line"><span class="comment">// 6.给组件提供 Store 数据仓库，而仓库中就有 state 状态值</span></span><br><span class="line"><span class="comment">// 7. 创建方法</span></span><br></pre></td></tr></table></figure>

<h5 id="2-react-router"><a href="#2-react-router" class="headerlink" title="2.react-router"></a>2.react-router</h5><p>路由模式（hash、H5 history），同 vue-router<br>路由配置（动态路由、懒加载），同 vue-router</p>
<p>React-router 路由模式：<br>hash 模式（默认），如<a href="http://abc.com/#/user/10">http://abc.com/#/user/10</a><br>H5 history 模式，如<a href="http://abc.com/user/20">http://abc.com/user/20</a><br>后者需要 server 端支持，因此无特殊需求可选择前者</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// React-router路由模式：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">HashRouter</span> <span class="keyword">as</span> <span class="title class_">Router</span>, <span class="comment">//hash模式</span></span><br><span class="line">  <span class="title class_">Switch</span>,</span><br><span class="line">  <span class="title class_">Route</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">BrowserRouter</span> <span class="keyword">as</span> <span class="title class_">Router</span>, <span class="comment">//H5 history模式</span></span><br><span class="line">  <span class="title class_">Switch</span>,</span><br><span class="line">  <span class="title class_">Route</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">RouterComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Home</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/project/:id&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Project</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;*&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">NotFound</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// React-router路由配置 动态路由：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">RouterComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Home</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/project/:id&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Project</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;*&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">NotFound</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Link</span>, useParams &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Project</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 获取url参数，如&#x27;/project/10&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> &#123; id &#125; = <span class="title function_">useParams</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;url param id&quot;</span>, id);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// React-router JS跳转路由：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useHistory &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Trash</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> history = <span class="title function_">useHistory</span>();</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    history.<span class="title function_">push</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        回到首页</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// React-router路由配置 懒加载：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span> <span class="keyword">as</span> <span class="title class_">Router</span>, <span class="title class_">Route</span>, <span class="title class_">Switch</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Suspense</span>, lazy &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Home</span> = <span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;./routes/Home&quot;</span>));</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">About</span> = <span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;./routes/About&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Suspense</span> <span class="attr">fallback</span>=<span class="string">&#123;</span>&lt;<span class="attr">div</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="React-中构建组件的三种方式"><a href="#React-中构建组件的三种方式" class="headerlink" title="React 中构建组件的三种方式"></a>React 中构建组件的三种方式</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">react中构建组件的三种方式：</span><br><span class="line">  <span class="number">1.</span>函数式定义的组件（无状态组件）</span><br><span class="line">    - 组件不能被实例化</span><br><span class="line">    - 渲染性能比较高</span><br><span class="line">    - 组件无法访问<span class="variable language_">this</span></span><br><span class="line">    - 组件无法访问生命周期</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">MyComponent</span>(<span class="params">props</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我的组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="number">2.</span>es5</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">MyComponent</span> = <span class="title class_">React</span>.<span class="title function_">createClass</span>(&#123;</span><br><span class="line">    <span class="attr">render</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我的组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="number">3.</span>es6</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">MyComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="title function_">constructr</span>(<span class="params">props</span>)&#123;</span><br><span class="line">      <span class="variable language_">super</span>(props)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(): <span class="title class_">React</span>.<span class="property">ReactNode</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我的组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  注意：组件名称首字母必须大写</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>React 面试真题</title>
    <url>/2019/08/10/React/%E3%80%90%E4%B8%93%E9%A2%98%E3%80%913%EF%BC%9AReact-%E9%9D%A2%E8%AF%95%E7%9C%9F%E9%A2%98/</url>
    <content><![CDATA[<blockquote>
<p>问：组件之间如何通讯？</p>
</blockquote>
<p>父子组件 props<br>自定义事件<br>Redux 和 Context（顶层组件往子孙组件传递）</p>
<blockquote>
<p>问：JSX 本质是什么？</p>
</blockquote>
<p>createElement<br>执行返回 vnode</p>
<blockquote>
<p>问：Context 是什么，如何应用？</p>
</blockquote>
<p>父组件，向其下所有子孙组件传递信息<br>如一些简单的公共信息：主题色、语言等<br>复杂的公共信息，用 redux</p>
<blockquote>
<p>问：shouldComponentUpdate 用途？</p>
</blockquote>
<p>性能优化<br>配合“不可变值”一起使用，否则会出错</p>
<blockquote>
<p>问：redux 单项数据流</p>
</blockquote>
<p><img src="https://www.daykalif.com/blog_img/redux1.png" alt="redux"></p>
<p><img src="https://www.daykalif.com/blog_img/redux.png" alt="redux"><br>View 组件通过 click 等事件，dispatch 一个(actionCreator 返回的)action，通过 Store 把当前状态 state 和 action 传递给订阅者 reducer 函数,reducer 返回一个新的状态存储在 Store 中，Store 又把新的 State 传递给 View 组件触发组件更新。</p>
<p><img src="https://www.daykalif.com/blog_img/redux2.jpeg" alt="redux"></p>
<blockquote>
<p>问：setState 场景题</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListDemo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// count 初始值为 0</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span> &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1&quot;</span>, <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span>); <span class="comment">// 0</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span> &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2&quot;</span>, <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span>); <span class="comment">// 0</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span> &#125;);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;3&quot;</span>, <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span>); <span class="comment">// 2</span></span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span> &#125;);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;4&quot;</span>, <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span>); <span class="comment">// 3</span></span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ListDemo</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>问：什么是纯函数？</p>
</blockquote>
<p>返回一个新值，没有副作用（不会“偷偷”修改其他值）<br>重点：不可变值<br>如 arr1 &#x3D; arr.slice()</p>
<blockquote>
<p>问：React 发起 ajax 应该在哪个生命周期？</p>
</blockquote>
<p>同 Vue<br>componentDidMount</p>
<blockquote>
<p>问：渲染列表，为何使用 key？</p>
</blockquote>
<p>同 Vue。必须用 key，且不能是 index 和 random<br>diff 算法中通过 tag 和 key 来判断，是否是 sameNode<br>减少渲染次数，提升渲染性能</p>
<blockquote>
<p>问：函数组件和 class 组件区别？</p>
</blockquote>
<p>纯函数，输入 props，输出 JSX<br>没有实例，没有生命周期，没有 state<br>不能扩展其他方法</p>
<blockquote>
<p>问：什么是受控组件？</p>
</blockquote>
<p>表单的值，受 state 控制<br>需要自行监听 onChange，更新 state<br>对比非受控组件</p>
<blockquote>
<p>问：何时使用异步组件？</p>
</blockquote>
<p>同 Vue<br>加载大组件<br>路由懒加载</p>
<blockquote>
<p>问：多个组件有公共逻辑，如何抽离？</p>
</blockquote>
<p>高阶组件 HOC<br>Render Props<br>mixin 已被 React 废弃</p>
<blockquote>
<p>问：redux 如何进行异步请求？</p>
</blockquote>
<p>使用异步 action<br>如 redux-thunk</p>
<p>同步 action 会直接返回对象，异步 action 会在异步中 dispatch 一个 action</p>
<p><img src="https://www.daykalif.com/blog_img/react-redux2.png" alt="redux"></p>
<p><img src="https://www.daykalif.com/blog_img/react-redux1.png" alt="redux"></p>
<blockquote>
<p>问：react-router 如何配置懒加载？</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// React-router路由配置 懒加载：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span> <span class="keyword">as</span> <span class="title class_">Router</span>, <span class="title class_">Route</span>, <span class="title class_">Switch</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Suspense</span>, lazy &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Home</span> = <span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;./routes/Home&quot;</span>));</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">About</span> = <span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;./routes/About&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Suspense</span> <span class="attr">fallback</span>=<span class="string">&#123;</span>&lt;<span class="attr">div</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>问：pureComponent 有何区别？</p>
</blockquote>
<p>实现了浅比较的 shouldComponentUpdate<br>性能优化<br>但要结合不可变值使用</p>
<blockquote>
<p>问：React 事件和 DOM 事件的区别？</p>
</blockquote>
<p>所有事件挂在到 document 上<br>event 不是原生的，是 SyntheticEvent 合成事件对象<br>dispatchEvent</p>
<blockquote>
<p>问：React 性能优化：</p>
</blockquote>
<p>渲染列表时加 key<br>自定义事件、DOM 事件及时销毁<br>合理使用异步组件<br>减少 bind this 的次数<br>合理使用 SCU PureComponent 和 memo<br>合理使用 Immutable.js<br>webpack 层面的优化<br>前端通用的性能优化，如图片懒加载<br>使用 SSR</p>
<blockquote>
<p>问：React 和 Vue 的区别：</p>
</blockquote>
<p>1).同属于 MVVM 框架体系，都是面向于组件化开发<br>2).都是数据驱动视图<br>3).都使用 vdom 操作 DOM<br>4).React 使用 JSX 拥抱 JS，Vue 使用模板拥抱 html<br>5).React 函数式编程【每次修改都是 setState，传入一个 state，返回一个 JSX 或者视图】<br>Vue 声明式编程【Vue 变量先声明好，data.a &#x3D; 100;针对数据变化的监听，针对触发组件更新的方式思路也不同。】<br>6).React 更多需要自力更生，Vue 把想要的都给你</p>
<h5 id="原理上"><a href="#原理上" class="headerlink" title="原理上"></a>原理上</h5><p>Vue 的数据绑定依赖数据劫持<code>Object.defineProperty()</code>中的&#96;&#96;getter<code>和</code>setter<code>,更新视图使用的是发布订阅模式（eventEmitter）来监听值的变化，从而让</code>vitrual DOM<code>驱动 Model 和 View 更新，利用</code>v-model<code>这一语法糖能够轻易实现双向的数据绑定，这种模式被称为</code>MVVM<code>,但本质上还是</code>State-&gt;View-&gt;Action<code>的单向数据流，只是使用了</code>v-model<code>不需要显式地编写</code>View<code>到</code>Model&#96;的更新。</p>
<p>React 则需要依赖<code>onChange/setState</code>模式来实现数据的双向绑定，因为它在诞生之初就是设计成单项数据流的。</p>
<h5 id="通信区别"><a href="#通信区别" class="headerlink" title="通信区别"></a>通信区别</h5><p>父子之间都可以通过<code>props</code>绑定<code>data</code>或<code>state</code>进行传值，又或者通过绑定毁掉函数来传值。</p>
<p>兄弟之间可以通过<strong>发布订阅模式</strong>来写一个<strong>EventBus</strong>来监听值的变化。</p>
<p>跨层级：React 可以通过<code>React.context</code>来进行跨层级通信；Vue 则可以使用<code>provide/inject</code>来实现跨层级注入数据。</p>
<h5 id="模板渲染方式"><a href="#模板渲染方式" class="headerlink" title="模板渲染方式"></a>模板渲染方式</h5><p>React 在 JSX 中使用原生的 JS 语法来实现插值，条件渲染，循环等。<br>Vue 则需要依赖指令进行，更容易上手，但封装程度更高，调试成本更大，难以定位 Bug。</p>
<h5 id="性能差异"><a href="#性能差异" class="headerlink" title="性能差异"></a>性能差异</h5><p>在 React 中组件的更新渲染是从数据发生变化的根组件开始往子组件逐层渲染，而组件的生命周期中有<code>shouldComponentUpdate</code>这一钩子函数可以给开发者优化组件在不需要更新的时候不要更新。</p>
<p>Vue 通过 watcher 监听到数据的变化之后，通过自己的 diff 算法，在 virtualDOM 中直接以最低成本更新视图。</p>
<blockquote>
<p>问：React 的优劣势</p>
</blockquote>
<p>React 概述：<br>1.react 核心解决的问题是数据绑定，开发者只要将数据绑定好，剩下的开发中只要关注业务就行了 2.组件化开发：使得 react 开发的时候，构建任何的页面都是组件 component<br>3.jsx 语法和虚拟 dom：基于 jsx 语法进行创建组件，react 用变量的形式定义了一套 Dom 模型 4.组件具有生命周期，每个组件都有生命周期，开发者可以基于生命周期对组件进行管理 5.单向数据流（父组件数据流向子组件，或者服务器端数据改变，客户端数据更新的操作）【但它也可以实现双向数据绑定】</p>
<p>优势：<br>1.React 不是一个 MVC 框架，只是其中一个层次，理解和学习会变得简单 2.由于轻巧与 vdom 的概念，使得 react 速度非常的快 3.模块化的概念（CommonJS&#x2F;AMD&#x2F;CMD）-&gt;模块定义，模块暴露，模块引用，模块调用 4.单项数据绑定 5.能实现服务端的渲染，便于搜索引擎的优化<br>vue 用 nuxt 实现服务端渲染<br>react 用 next 实现服务端渲染； 6.与其他框架&#x2F;库兼容性好</p>
<p>劣势： 1.本身内容比较新，API 可能存在变化大的风险 2.它仅仅是一个 view 层，处理大型项目的时候需要引入 flux 和 Routing 等相关内容</p>
<blockquote>
<p>React 示例：</p>
</blockquote>
<p>方式一：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入react.min.js【虚拟dom，diff算法在这个文件中】</span></span><br><span class="line"><span class="comment">// 引入react-dom.min.js【dom渲染】</span></span><br><span class="line"><span class="comment">// browser.min.js【解析jsx成js语法】</span></span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">Message</span> = <span class="title class_">React</span>.<span class="title function_">createClass</span>(&#123;<span class="comment">//首字母大写</span></span><br><span class="line">        <span class="comment">//1.外部css（如：bootstrap）</span></span><br><span class="line">        <span class="attr">render</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="comment">// 2.设置样式对象</span></span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;xxx&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#123;/* 3.外部全局设置样式的JS对象 */&#125;</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello React<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="title class_">ReactDom</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Message</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;app&#x27;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.原型链方式</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>方式二：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数式组件【无状态组件】</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello React<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">List</span>(<span class="params">props</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;list&#125; = props;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;</span></span><br><span class="line"><span class="language-xml">                list.map(value,index)=&gt;&#123;</span></span><br><span class="line"><span class="language-xml">                    return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;item.title&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#125;</span></span><br><span class="line"><span class="language-xml">            &#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常规组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.component</span>&#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello React<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js使用：</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDom</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDom</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;app&#x27;</span>));</span><br></pre></td></tr></table></figure>

<blockquote>
<p>问：React 组件间数据传递</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父传子：</span></span><br><span class="line">&lt;<span class="title class_">Child</span> name=&#123;<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">result</span>&#125;/&gt;<span class="comment">// 父：</span></span><br><span class="line"></span><br><span class="line">&#123;<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">name</span>&#125;<span class="comment">//子</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 子传父：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 父：</span></span><br><span class="line">&lt;<span class="title class_">Chile</span> callbackParent=&#123;<span class="variable language_">this</span>.<span class="property">onChildChange</span>&#125;/&gt;</span><br><span class="line"><span class="title function_">onChildChange</span>(<span class="params">val</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">value</span>:val&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子：</span></span><br><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> onchange=&#123;<span class="variable language_">this</span>.<span class="property">handleChange</span>&#125; data-title=<span class="string">&quot;list&quot;</span>&gt;</span><br><span class="line"><span class="title function_">handleChange</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">callbackParent</span>(e.<span class="property">target</span>.<span class="property">value</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">taeget</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-list&#x27;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>问：React 组件生命周期</p>
</blockquote>
<p>单组件生命周期<br>父子组件生命周期<br>注意 SCU</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">加载阶段：</span><br><span class="line"><span class="number">1.</span><span class="title function_">getDefaultProps</span>(<span class="params"></span>)&#123;&#125;       <span class="comment">//16.x中使用state defaultProps=&#123;&#125;</span></span><br><span class="line"><span class="number">2.</span><span class="title function_">getInitialState</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="comment">// //16.x中使用</span></span><br><span class="line"><span class="comment">// constructor(props)&#123;</span></span><br><span class="line"><span class="comment">//     super(props);</span></span><br><span class="line"><span class="comment">//     this.state = &#123;</span></span><br><span class="line"><span class="comment">//         result:&#x27;默认状态&#x27;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// // 或者：</span></span><br><span class="line"><span class="comment">// state = &#123;</span></span><br><span class="line"><span class="comment">//     result:&#x27;新的默认设置&#x27;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span><span class="title function_">componentWillMount</span>(<span class="params"></span>)&#123;&#125;    <span class="comment">//15.x中进行了性能优化  --&gt;16.x中被static getDerivedStateFromProps(props,state)替换</span></span><br><span class="line"><span class="number">4.</span><span class="title function_">render</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="number">5.</span><span class="title function_">componentDidMount</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line">更新阶段：</span><br><span class="line"><span class="number">6.</span><span class="title function_">componentWillReceiveProps</span>(<span class="params">newProps,newState</span>)&#123;&#125;    <span class="comment">//只有存在父子组件关系时，并且只在子组件中调用    --&gt;16.x中被static getDerivedStateFromProps(props,state)替换</span></span><br><span class="line"><span class="number">7.</span><span class="title function_">shouldComponentUpdate</span>(<span class="params">nextProps,nextState</span>)&#123;&#125; <span class="comment">//组件性能优化,可以进行判断返回true/false</span></span><br><span class="line"><span class="number">8.</span><span class="title function_">componentWillUpdate</span>(<span class="params"></span>)&#123;&#125;   <span class="comment">//--&gt; 16.x中被getSnapShotBeforeUpdate（快照）替换</span></span><br><span class="line"><span class="number">9.</span><span class="title function_">render</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="number">10.</span><span class="title function_">componentDidUpdate</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//16.x新增一个componentDidCatch(error,info)   //异常捕获，新增了对错误的处理</span></span><br><span class="line"></span><br><span class="line">卸载阶段：</span><br><span class="line"><span class="number">11.</span><span class="title function_">componentWillUnmount</span>(<span class="params"></span>)&#123;&#125;  <span class="comment">//要先有装载，才有卸载</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>问：为啥要用 bind 和箭头函数</p>
</blockquote>
<p>事件处理函数里面用到了 this，但这个 this 是 undefined</p>
<p>常见回答：React 事件处理函数是没有默认绑定 this 的，虽然没有错，但是没有 get 到真正的点</p>
<p><strong>原因：</strong><br>首先，这是 JavaScript 函数和 this 工作原理导致的，并不是 React 的问题，事件处理的那个 props——onClick 接收到了函数，却不知道执行上下文.<br>this 是当前函数运行所在的环境，也就是总是指向函数运行所在的那个对象。</p>
<p><strong>解决方案：</strong> 1.使用 bind 绑定 2.使用箭头函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 把 onClick = this.handleClick</span></span><br><span class="line"><span class="comment">*  改成 onClick = this.handleClick.bind(this)</span></span><br><span class="line"><span class="comment">*  或者 把 handleClick 改为 handleClick = () =&gt; &#123;&#125;</span></span><br><span class="line"><span class="comment">*  然后再 执行 onClick ，打印的就会是CustomReact 对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick.bind(this)&#125;</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 或者：</span></span><br><span class="line">handleClick改为handleClick=<span class="function">()=&gt;</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>问：class 中，handleClick() {} 和 handleClick &#x3D; () &#x3D;&gt; {} 的区别</p>
</blockquote>
<p>区别一：前者是方法的简写，所以还是 function 函数，后者是箭头函数</p>
<p>区别二：前者是原型方法，后者是实例方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">      instanceFunc = <span class="function">() =&gt;</span> &#123;&#125;  <span class="comment">// 实例方法</span></span><br><span class="line"></span><br><span class="line">      <span class="title function_">protoFunc</span>(<span class="params"></span>) &#123;&#125; <span class="comment">// 原型方法。这是ES6对象方法的简写</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面代码等同于</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">instanceFunc</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Test</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">    <span class="attr">constructor</span>: <span class="title class_">Test</span></span><br><span class="line">    <span class="attr">protoFunc</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>问：在 render 中绑定 this 和 在外面绑定的区别？</p>
</blockquote>
<p>在 render 中绑定 this 的时候，不管 bind 还是箭头函数都会新创建一个函数，这会可能会破坏它本身严格比较的优化</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>this.handleClick&#125;&gt;Click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick.bind(this)&#125;</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>相比较于这两种，更推荐使用下面两种用法:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">handleClick</span> = <span class="variable language_">this</span>.<span class="property">handleClick</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)</span><br><span class="line">.....</span><br><span class="line">onClick=&#123;<span class="variable language_">this</span>.<span class="property">handleClick</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、</span></span><br><span class="line">handleClick = <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line">....</span><br><span class="line">onClickonClick=&#123;<span class="variable language_">this</span>.<span class="property">handleClick</span>&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Vue-router 和 React-router 的区别</p>
</blockquote>
<p><strong>Vue-router 示例：</strong></p>
<p>开发的时候有时候会遇到一种情况，比如 ：点击这个链接跳转到其他组件的情况，通常会跳转到新的页面，蛋是，我们不想跳转到新页面，只在当前页面切换着显示，那么就要涉及到路由的嵌套了，也可以说是子路由的使用。</p>
<p>以饿了么订餐的情景来说吧，在同个页面，切换显示不同组件的相应内容，同时地址栏的地址是会变的</p>
<p><img src="https://www.daykalif.com/blog_img/router-view.gif" alt="router-view"></p>
<p>怎么实现它呢？</p>
<p>首先 我们在导航组件 navbar.vue 中写了三个导航链接，他们对应地址分别为：&#x2F;food,&#x2F;rating,&#x2F;seller,点击每个导航链接会跳转到不同的组件，并且加上<code>&lt;router-view&gt;&lt;/router-view&gt;</code>这个标签</p>
<p>navbar.vue：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navbar&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span>  <span class="attr">to</span>=<span class="string">&quot;/food&quot;</span> &gt;</span>商品<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span>  <span class="attr">to</span>=<span class="string">&quot;/rating&quot;</span>&gt;</span>评价<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span>  <span class="attr">to</span>=<span class="string">&quot;/seller&quot;</span>&gt;</span>商家<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">            <span class="comment">&lt;!-- 路由匹配到的组件将显示在这里 --&gt;</span></span></span><br><span class="line"><span class="language-xml">           <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>然后，我们在 index.vue 引入 navbar.vue：</p>
<p>index.vue：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;shop-header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;imgbox&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../../static/img/56.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>黄蜀郞鸡公煲<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;ico&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;info1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>*4.6<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>月售738<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>商家配送约44分钟<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>距离345m<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;info2&quot;</span>&gt;</span>店内免费涮煲，（蔬菜、小料、主食、糕点、凉菜、水果、免费吃）闻香识辣，入口知麻，一锅两吃，独具特色！！！外卖米饭请自点！！评价问题商家会一一看，可能不能及时回复。有问题详询18232966036<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!--在这里引入navbar组件在这里引入navbar组件在这里引入navbar组件在这里引入navbar组件--&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">navbar</span>&gt;</span><span class="tag">&lt;/<span class="name">navbar</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!--在这里引入navbar组件在这里引入navbar组件在这里引入navbar组件在这里引入navbar组件--&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">import</span> navbar <span class="keyword">from</span> <span class="string">&#x27;@/components/navbar&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">import</span> food <span class="keyword">from</span> <span class="string">&#x27;@/components/food&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">name</span>: <span class="string">&#x27;HelloWorld&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">msg</span>:[]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            navbar</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- <span class="title class_">Add</span> <span class="string">&quot;scoped&quot;</span> attribute to limit <span class="variable constant_">CSS</span> to <span class="variable language_">this</span> component only --&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;stylus&quot;</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="keyword">@import</span> <span class="string">&#x27;../../static/css/index.styl&#x27;</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>最后，路由都是怎么配的呢，在 index.js 中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;index&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: index,</span><br><span class="line">    <span class="attr">redirect</span>:<span class="string">&#x27;/food&#x27;</span>,</span><br><span class="line">    <span class="attr">children</span>:[&#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;food&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;food&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: food</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;seller&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;seller&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: seller</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;rating&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;rating&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: rating</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p><strong>react-router 示例：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span> <span class="keyword">as</span> <span class="title class_">Router</span>, <span class="title class_">Route</span>, <span class="title class_">Link</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Some folks find value in a centralized route config.</span></span><br><span class="line"><span class="comment">// A route config is just data. React is great at mapping</span></span><br><span class="line"><span class="comment">// data into components, and &lt;Route&gt; is a component.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// first our route components</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Main</span> = (<span class="params"></span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Main<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Sandwiches</span> = (<span class="params"></span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Sandwiches<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Tacos</span> = (<span class="params">&#123; routes &#125;</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Tacos<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/tacos/bus&quot;</span>&gt;</span>Bus<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/tacos/cart&quot;</span>&gt;</span>Cart<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    &#123;routes.map((route, i) =&gt; (</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">RouteWithSubRoutes</span> <span class="attr">key</span>=<span class="string">&#123;i&#125;</span> &#123;<span class="attr">...route</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">    ))&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Bus</span> = (<span class="params"></span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>Bus<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Cart</span> = (<span class="params"></span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>Cart<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// then our route config</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/sandwiches&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Sandwiches</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/tacos&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Tacos</span>,</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;/tacos/bus&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">Bus</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;/tacos/cart&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">Cart</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// wrap &lt;Route&gt; and use this everywhere instead, then when</span></span><br><span class="line"><span class="comment">// sub routes are added to any route it&#x27;ll work</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">RouteWithSubRoutes</span> = (<span class="params">route</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">path</span>=<span class="string">&#123;route.path&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">render</span>=<span class="string">&#123;(props)</span> =&gt;</span> (</span></span><br><span class="line"><span class="language-xml">      // pass the sub-routes down to keep nesting</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">route.component</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">routes</span>=<span class="string">&#123;route.routes&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    )&#125;</span></span><br><span class="line"><span class="language-xml">  /&gt;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">RouteConfigExample</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/tacos&quot;</span>&gt;</span>Tacos<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/sandwiches&quot;</span>&gt;</span>Sandwiches<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      &#123;routes.map((route, i) =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">RouteWithSubRoutes</span> <span class="attr">key</span>=<span class="string">&#123;i&#125;</span> &#123;<span class="attr">...route</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">RouteConfigExample</span>;</span><br></pre></td></tr></table></figure>

<h3 id="红灯三秒亮一次，绿灯一秒亮一次，黄灯-2-秒亮一次；如何让三个灯不断交替重复亮灯？"><a href="#红灯三秒亮一次，绿灯一秒亮一次，黄灯-2-秒亮一次；如何让三个灯不断交替重复亮灯？" class="headerlink" title="红灯三秒亮一次，绿灯一秒亮一次，黄灯 2 秒亮一次；如何让三个灯不断交替重复亮灯？"></a>红灯三秒亮一次，绿灯一秒亮一次，黄灯 2 秒亮一次；如何让三个灯不断交替重复亮灯？</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">red</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;red&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">green</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;green&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">yellow</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;yellow&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> light = <span class="keyword">function</span> (<span class="params">timmer, cb</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">cb</span>();</span><br><span class="line">      <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;, timmer);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> step = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">    .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">light</span>(<span class="number">3000</span>, red);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">light</span>(<span class="number">2000</span>, green);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">light</span>(<span class="number">1000</span>, yellow);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">step</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">step</span>();</span><br></pre></td></tr></table></figure>

<p>参考文档：<br><a href="https://blog.csdn.net/luoyu6/article/details/80098145">https://blog.csdn.net/luoyu6/article/details/80098145</a><br><a href="https://www.jianshu.com/p/6583b7258e78">https://www.jianshu.com/p/6583b7258e78</a></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>【专题】4：React Hooks</title>
    <url>/2022/03/06/React/%E3%80%90%E4%B8%93%E9%A2%98%E3%80%914%EF%BC%9AReact-Hooks/</url>
    <content><![CDATA[<h2 id="一、为什么会有-React-Hooks，它解决了哪些问题？"><a href="#一、为什么会有-React-Hooks，它解决了哪些问题？" class="headerlink" title="一、为什么会有 React Hooks，它解决了哪些问题？"></a>一、为什么会有 React Hooks，它解决了哪些问题？</h2><ul>
<li>完善函数组件的能力，函数更适合 React 组件</li>
<li>组件逻辑复用，Hooks 表现更好</li>
<li>class 复杂组件正在变的费解，不易拆解，不易测试，逻辑混乱<ul>
<li>class 组件中，相同的逻辑散落在各处<ul>
<li>DidMount 和 DidUpdate 中获取数据</li>
<li>DidMount 绑定事件，WillUnMount 解绑事件</li>
<li>使用 Hooks，相同逻辑可分割到一个一个的 useEffect 中</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="函数组件的特点"><a href="#函数组件的特点" class="headerlink" title="函数组件的特点"></a>函数组件的特点</h3><ul>
<li>没有组件实例</li>
<li>没有生命周期</li>
<li>没有 state 和 setState，只能接收 props</li>
</ul>
<h3 id="class-组件的问题"><a href="#class-组件的问题" class="headerlink" title="class 组件的问题"></a>class 组件的问题</h3><ul>
<li>大型组件很难拆分和重构，很难测试（即 class 不易拆分）</li>
<li>相同业务逻辑，分散到各个方法中，逻辑混乱</li>
<li>复用逻辑变得复杂，如 Mixins、HOC、Render Prop</li>
</ul>
<h3 id="React-组件更易用函数表达"><a href="#React-组件更易用函数表达" class="headerlink" title="React 组件更易用函数表达"></a>React 组件更易用函数表达</h3><ul>
<li>React 提倡函数式编程，view &#x3D; fn(props)</li>
<li>函数更灵活，更易拆分，更易测试</li>
<li>但函数组件太简单，需要增强能力–&gt;Hooks</li>
</ul>
<h3 id="让组件实现-state-和-setState"><a href="#让组件实现-state-和-setState" class="headerlink" title="让组件实现 state 和 setState"></a>让组件实现 state 和 setState</h3><ul>
<li>默认函数组件没有 state</li>
<li>函数组件是一个纯函数，执行完即销毁，无法存储 state</li>
<li>需要 State Hook，即把 state 功能“钩”到纯函数中</li>
</ul>
<h3 id="useState-总结"><a href="#useState-总结" class="headerlink" title="useState 总结"></a>useState 总结</h3><ul>
<li>useState(0)传入初始值，返回数组[state,setState]</li>
<li>通过 state 获取值</li>
<li>通过 setState(1)修改值</li>
</ul>
<h3 id="Hooks-命名规范"><a href="#Hooks-命名规范" class="headerlink" title="Hooks 命名规范"></a>Hooks 命名规范</h3><ul>
<li>规定所有的 Hooks 都 use 开头，如 useXxx</li>
<li>自定义 Hook 也要以 use 开头</li>
<li>非 Hooks 的地方，尽量不要使用 useXxx 写法</li>
</ul>
<h2 id="二、React-Hooks-如何模拟组件生命周期？"><a href="#二、React-Hooks-如何模拟组件生命周期？" class="headerlink" title="二、React Hooks 如何模拟组件生命周期？"></a>二、React Hooks 如何模拟组件生命周期？</h2><h3 id="让函数组件模拟生命周期"><a href="#让函数组件模拟生命周期" class="headerlink" title="让函数组件模拟生命周期"></a>让函数组件模拟生命周期</h3><ul>
<li>默认函数组件没有生命周期</li>
<li>函数组件是一个纯函数，执行完即销毁，自己无法实现生命周期</li>
<li>使用 Effect Hook 把生命周期“钩”到纯函数中</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// useEffect 模拟 class 组件的 DidMount 和 DidUpdate</span></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;在此发送一个ajax请求&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟class组件的DidMount</span></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;加载完了&#x27;</span>)</span><br><span class="line">&#125;,[]); <span class="comment">// 第二个参数是[] (不依赖于任何state)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟class组件的DidUpdate</span></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;]</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;更新了&#x27;</span>);</span><br><span class="line">&#125;,[count,name]); <span class="comment">//第二个参数就是依赖的state</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timerId = <span class="variable language_">window</span>.<span class="built_in">setInterval</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>())</span><br><span class="line">  &#125;,<span class="number">1000</span>)</span><br><span class="line">  <span class="comment">// 返回一个函数，模拟willUnMount，此处并不完全等同与WillUnMoint</span></span><br><span class="line">  <span class="comment">// props发生变化，即更新，也会执行结束监听</span></span><br><span class="line">  <span class="comment">// 准确的说：返回的函数，会在下一次effect执行之前，被执行</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="built_in">clearInterval</span>(timerId);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,[]);</span><br></pre></td></tr></table></figure>

<h3 id="useEffect-模拟组件生命周期"><a href="#useEffect-模拟组件生命周期" class="headerlink" title="useEffect 模拟组件生命周期"></a>useEffect 模拟组件生命周期</h3><ul>
<li>模拟 componentDidMount - useEffect 依赖[]</li>
<li>模拟 componentDidUpdate - useEffect 无依赖，或者依赖[a,b]</li>
<li>模拟 componentWillUnMount - useEffect 中返回一个函数</li>
</ul>
<h3 id="useEffect-让纯函数有了副作用"><a href="#useEffect-让纯函数有了副作用" class="headerlink" title="useEffect 让纯函数有了副作用"></a>useEffect 让纯函数有了副作用</h3><ul>
<li>默认情况下，执行纯函数，输入参数，返回结果，无副作用</li>
<li>所谓副作用，就是对函数之外造成影响，如设置全局定时任务</li>
<li>而组件需要副作用，所有需要 useEffect“钩”入纯函数中</li>
</ul>
<h3 id="useEffect-中返回函数-fn"><a href="#useEffect-中返回函数-fn" class="headerlink" title="useEffect 中返回函数 fn"></a>useEffect 中返回函数 fn</h3><ul>
<li>useEffect 依赖[]，组件销毁时执行 fn，等于 WillUnMount</li>
<li>useEffect 无依赖或依赖[a,b]，组件更新时执行 fn</li>
<li>即，下一次执行 useEffect 之前，就会执行 fn，无论更新或卸载</li>
</ul>
<h3 id="useEffect-小结"><a href="#useEffect-小结" class="headerlink" title="useEffect 小结"></a>useEffect 小结</h3><ul>
<li>函数组件更适合 React 组件，但需要 Hooks 增强功能</li>
<li>useState 可实现 state 和 setState</li>
<li>useEffect 可模拟组件主要的生命周期</li>
</ul>
<h3 id="useReducer-和-redux-的区别"><a href="#useReducer-和-redux-的区别" class="headerlink" title="useReducer 和 redux 的区别"></a>useReducer 和 redux 的区别</h3><ul>
<li>useReducer 是 useState 的代替方案，用于 state 复杂变化</li>
<li>useReducer 是个单组件状态管理，组件通讯不需要 props</li>
<li>redux 是全局的状态管理，多组件共享数据</li>
</ul>
<h2 id="三、如何自定义-Hook？"><a href="#三、如何自定义-Hook？" class="headerlink" title="三、如何自定义 Hook？"></a>三、如何自定义 Hook？</h2><h3 id="自定义-Hook"><a href="#自定义-Hook" class="headerlink" title="自定义 Hook"></a>自定义 Hook</h3><ul>
<li><p>封装通用的功能</p>
</li>
<li><p>开发和使用第三方 Hooks</p>
</li>
<li><p>自定义 Hook 带来了无限的扩展性，结偶代码</p>
</li>
<li><p>本质是一个函数，以 use 开头（重要）</p>
</li>
<li><p>内部正常使用 useStet，useEffect 获取其他 Hooks</p>
</li>
<li><p>自定义返回结果，格式不限</p>
</li>
</ul>
<h3 id="第三方-Hooks"><a href="#第三方-Hooks" class="headerlink" title="第三方 Hooks"></a>第三方 Hooks</h3><ul>
<li><a href="https://nikgraf.github.io/react-hooks/">https://nikgraf.github.io/react-hooks/</a></li>
<li><a href="https://github.com/umijs/hooks">https://github.com/umijs/hooks</a></li>
</ul>
<h3 id="Hooks-使用规范"><a href="#Hooks-使用规范" class="headerlink" title="Hooks 使用规范"></a>Hooks 使用规范</h3><ul>
<li>强调命名规范 useXxx</li>
<li>Hooks 使用规范，重要！<ul>
<li>只能用于 React 函数组件和自定义 Hook 中，其他地方不可以</li>
<li>只能用于顶层代码，不能在循环、判断中使用 Hooks</li>
<li>eslint 插件 eslint-plugin-react-hooks</li>
</ul>
</li>
<li>Hooks 的调用顺序必须保持一致<ul>
<li>无论是 render 还是 re-render，Hooks 调用顺序必须一致</li>
<li>如果 Hooks 出现在循环、判断里，则无法保证顺序一致</li>
<li>Hooks 严重依赖于调用顺序！重要！</li>
</ul>
</li>
</ul>
<h2 id="四、React-Hooks-性能优化"><a href="#四、React-Hooks-性能优化" class="headerlink" title="四、React Hooks 性能优化"></a>四、React Hooks 性能优化</h2><h3 id="useMemo-使用总结"><a href="#useMemo-使用总结" class="headerlink" title="useMemo 使用总结"></a>useMemo 使用总结</h3><ul>
<li>React 默认会更新所有子组件</li>
<li>class 组件使用 SCU 和 PurComponent 做优化</li>
<li>Hooks 中使用 useMemo，但优化的原理是相同的</li>
</ul>
<h3 id="useCallback-使用总结"><a href="#useCallback-使用总结" class="headerlink" title="useCallback 使用总结"></a>useCallback 使用总结</h3><ul>
<li>useMemo 缓存数据</li>
<li>useCallback 缓存函数</li>
<li>两者是 React Hooks 的常见优化策略</li>
</ul>
<h2 id="五、使用-React-Hooks-遇到哪些坑？"><a href="#五、使用-React-Hooks-遇到哪些坑？" class="headerlink" title="五、使用 React Hooks 遇到哪些坑？"></a>五、使用 React Hooks 遇到哪些坑？</h2><ul>
<li>useState 初始化值，只有第一次有效</li>
<li>useEffect 依赖如果是[]，内部不能修改 state</li>
<li>useEffect 依赖于引用类型可能出现死循环，react 使用过 Object.is 作比较，如果是引用类型就会判断为值有变化</li>
</ul>
<h2 id="六、Hooks-相比-HOC-和-Render-Prop-有哪些优点？"><a href="#六、Hooks-相比-HOC-和-Render-Prop-有哪些优点？" class="headerlink" title="六、Hooks 相比 HOC 和 Render Prop 有哪些优点？"></a>六、Hooks 相比 HOC 和 Render Prop 有哪些优点？</h2><h3 id="class-组件逻辑复用"><a href="#class-组件逻辑复用" class="headerlink" title="class 组件逻辑复用"></a>class 组件逻辑复用</h3><ul>
<li>Mixins 早已废弃</li>
<li>高阶组件 HOC</li>
<li>Render Prop</li>
</ul>
<h4 id="Mixins-的问题"><a href="#Mixins-的问题" class="headerlink" title="Mixins 的问题"></a>Mixins 的问题</h4><ul>
<li>变量作用域来源不清</li>
<li>属性重名</li>
<li>Mixins 引入过多会导致顺序冲突</li>
</ul>
<h4 id="高阶组件-HOC-的问题"><a href="#高阶组件-HOC-的问题" class="headerlink" title="高阶组件 HOC 的问题"></a>高阶组件 HOC 的问题</h4><ul>
<li>组件层级嵌套过多，不易渲染，不易调试</li>
<li>HOC 会劫持 props，必须严格规范，容易出现疏漏</li>
</ul>
<h4 id="Render-Prop-的问题"><a href="#Render-Prop-的问题" class="headerlink" title="Render Prop 的问题"></a>Render Prop 的问题</h4><ul>
<li>学习成本高，不易理解</li>
<li>只能传递纯函数，而默认情况下纯函数功能有限</li>
</ul>
<h3 id="React-Hooks-组件逻辑复用"><a href="#React-Hooks-组件逻辑复用" class="headerlink" title="React Hooks 组件逻辑复用"></a>React Hooks 组件逻辑复用</h3><ul>
<li>完全符合 Hooks 原有规则，没有其他要求，易理解记忆</li>
<li>变量和作用域明确</li>
<li>不会产生组件嵌套</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>React的源码实现-卡颂视频讲解</title>
    <url>/2021/07/08/React/%E3%80%90%E5%8E%9F%E5%88%9B%E3%80%91React%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[<h5 id="react-源码工作流程"><a href="#react-源码工作流程" class="headerlink" title="react 源码工作流程"></a>react 源码工作流程</h5><p>1.schedule 调度（产生的更新有不同的优先级，进行排序，高优先级的优先 render）<br>2.ender 协调（决定需要改变哪些视图）<br>3.commit 渲染（将需要改变的视图做具体的改变操作）</p>
<p>ClassComponent – 面向对象编程<br>FunctionComponent（编译时优化） – 函数式编程–〉使用代数效应处理副作用<br>Hooks 为了践行函数式编程代数效应，解决其副作用</p>
]]></content>
  </entry>
  <entry>
    <title>虚拟dom和diff算法</title>
    <url>/2021/12/12/React/%E3%80%90%E5%8E%9F%E5%88%9B%E3%80%91%E8%99%9A%E6%8B%9Fdom%E5%92%8Cdiff%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="关于-DOM-的谣言"><a href="#关于-DOM-的谣言" class="headerlink" title="关于 DOM 的谣言"></a>关于 DOM 的谣言</h2><h3 id="1-关于-DOM-操作慢？虚拟-DOM-快"><a href="#1-关于-DOM-操作慢？虚拟-DOM-快" class="headerlink" title="1.关于 DOM 操作慢？虚拟 DOM 快"></a>1.关于 DOM 操作慢？虚拟 DOM 快</h3><ul>
<li>这句话类似于：刘翔矮（对比于姚明）</li>
<li>DOM 操作慢是对比于 JS 原生 API，如数组操作</li>
<li>任何基于 DOM 库（Vue&#x2F;React）都不可能在操作 DOM 时比 DOM 快</li>
</ul>
<h3 id="2-为什么网上有这样的谣言？"><a href="#2-为什么网上有这样的谣言？" class="headerlink" title="2.为什么网上有这样的谣言？"></a>2.为什么网上有这样的谣言？</h3><ul>
<li>因为在某些情况下，虚拟 DOM 快【哪些情况下？】</li>
<li>虚拟 DOM 优点：<ul>
<li>【1.减少 DOM 操作】减少 DOM 可以将多次操作合并为一次操作，比如你添加 1000 个节点，却是一个接一个操作的</li>
<li>虚拟 DOM 借助 DOM diff 可以把多余的操作省掉，比如你添加 1000 个节点，其实只有 10 个是新增的</li>
<li>【2.跨平台】虚拟 DOM 不仅可以变成 DOM，还可以变成小程序，ios 应用，安卓应用，因为虚拟 DOM 本质上只是一个 JS 对象。</li>
</ul>
</li>
</ul>
<h3 id="3-虚拟-DOM-长什么样子"><a href="#3-虚拟-DOM-长什么样子" class="headerlink" title="3.虚拟 DOM 长什么样子"></a>3.虚拟 DOM 长什么样子</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// react</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vNode = &#123;</span><br><span class="line">  <span class="attr">key</span>:<span class="literal">null</span>,</span><br><span class="line">  <span class="attr">props</span>:&#123;</span><br><span class="line">    <span class="attr">children</span>:[ <span class="comment">// 子元素们</span></span><br><span class="line">      &#123;<span class="attr">type</span>:<span class="string">&#x27;span&#x27;</span>,...&#125;</span><br><span class="line">      &#123;<span class="attr">type</span>:<span class="string">&#x27;span&#x27;</span>,...&#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">className</span>:<span class="string">&quot;red&quot;</span> <span class="comment">// 标签上的属性</span></span><br><span class="line">    onClick : <span class="function">() =&gt;</span> &#123;&#125;<span class="comment">// 事件</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">ref</span>:<span class="literal">null</span>,</span><br><span class="line">  <span class="attr">type</span>:<span class="string">&quot;div&quot;</span>,<span class="comment">//标签名或组件名</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vNode = &#123;</span><br><span class="line">  tag :<span class="string">&#x27;div&#x27;</span>,<span class="comment">//标签名或组件名</span></span><br><span class="line">  <span class="attr">data</span>:&#123;</span><br><span class="line">    <span class="attr">class</span>:<span class="string">&#x27;red&#x27;</span>,  <span class="comment">//标签上的属性</span></span><br><span class="line">    <span class="attr">on</span>:&#123;</span><br><span class="line">      <span class="attr">click</span>:<span class="function">()=&gt;</span>&#123;&#125; <span class="comment">//事件</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">children</span>:[ <span class="comment">// 子元素们</span></span><br><span class="line">    &#123;<span class="attr">tag</span>:<span class="string">&quot;span&quot;</span>,...&#125;,</span><br><span class="line">    &#123;<span class="attr">tag</span>:<span class="string">&quot;span&quot;</span>,...&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-如何创建虚拟-DOM"><a href="#4-如何创建虚拟-DOM" class="headerlink" title="4.如何创建虚拟 DOM"></a>4.如何创建虚拟 DOM</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// React.createElement</span></span><br><span class="line"><span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>, &#123; <span class="attr">className</span>: <span class="string">&quot;red&quot;</span>, <span class="attr">onClick</span>: <span class="function">() =&gt;</span> &#123;&#125; &#125;, [</span><br><span class="line">  <span class="title function_">createElement</span>(<span class="string">&quot;span&quot;</span>, &#123;&#125;, <span class="string">&quot;span1&quot;</span>),</span><br><span class="line">  <span class="title function_">createElement</span>(<span class="string">&quot;span&quot;</span>, &#123;&#125;, <span class="string">&quot;span2&quot;</span>),</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Vue(只能在render函数里得到h)</span></span><br><span class="line"><span class="title function_">h</span>(</span><br><span class="line">  <span class="string">&quot;div&quot;</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">class</span>: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">    <span class="attr">on</span>: &#123;</span><br><span class="line">      <span class="attr">click</span>: <span class="function">() =&gt;</span> &#123;&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  [<span class="title function_">h</span>(<span class="string">&quot;span&quot;</span>, &#123;&#125;, <span class="string">&quot;span1&quot;</span>), <span class="title function_">h</span>(<span class="string">&quot;span&quot;</span>, &#123;&#125;, <span class="string">&quot;span2&quot;</span>)]</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="5-用-JSX-简化创建虚拟-DOM"><a href="#5-用-JSX-简化创建虚拟-DOM" class="headerlink" title="5.用 JSX 简化创建虚拟 DOM"></a>5.用 JSX 简化创建虚拟 DOM</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// React JSX</span></span><br><span class="line"><span class="comment">// 通过babel转为createElement形式</span></span><br><span class="line">&lt;div className=<span class="string">&quot;red&quot;</span> onClick=&#123;<span class="function">() =&gt;</span> &#123;&#125;&#125;&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>span1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>span2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Vue Template</span></span><br><span class="line"><span class="comment">// 通过 vue-loader（Vue使用的是.vue文件，不是原生js语法，所以无法使用babel） 转为 h 形式</span></span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;red&quot;</span> @click=<span class="string">&quot;fn&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>span1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>span2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h3><h4 id="1-虚拟-DOM-是什么？"><a href="#1-虚拟-DOM-是什么？" class="headerlink" title="1).虚拟 DOM 是什么？"></a>1).虚拟 DOM 是什么？</h4><p>一个能代表 DOM 树的对象，通常含有标签名、标签上的属性、事件监听和子元素们，以及其他属性</p>
<h4 id="2-虚拟-DOM-有什么优点？"><a href="#2-虚拟-DOM-有什么优点？" class="headerlink" title="2).虚拟 DOM 有什么优点？"></a>2).虚拟 DOM 有什么优点？</h4><p>能减少不必要的 DOM 操作（见上面 2 个例子）<br>能跨平台渲染</p>
<h4 id="3-虚拟-DOM-有什么缺点"><a href="#3-虚拟-DOM-有什么缺点" class="headerlink" title="3).虚拟 DOM 有什么缺点"></a>3).虚拟 DOM 有什么缺点</h4><p>需要额外的创建函数，如 createElement 或 h，但可以通过 JSX 来简化成 XML 写法，但是这种形式严重依赖打包工具，需添加额外的构建过程</p>
<h2 id="对比原生-JS，React，Vue-用时"><a href="#对比原生-JS，React，Vue-用时" class="headerlink" title="对比原生 JS，React，Vue 用时"></a>对比原生 JS，React，Vue 用时</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="variable language_">document</span>.<span class="title function_">querySelect</span>(<span class="string">&quot;#app&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> button = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;button&quot;</span>);</span><br><span class="line">button.<span class="property">textContent</span> = <span class="string">&quot;运行&quot;</span>;</span><br><span class="line">button.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, run);</span><br><span class="line">app.<span class="title function_">appendChild</span>(button);</span><br><span class="line"><span class="keyword">const</span> output = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">app.<span class="title function_">appendChild</span>(output);</span><br><span class="line"><span class="keyword">const</span> test = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">app.<span class="title function_">appendChild</span>(test);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> total = <span class="number">0</span></span><br><span class="line"><span class="keyword">const</span> n = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> t1 = performance.<span class="title function_">now</span>();</span><br><span class="line">  <span class="keyword">const</span> divs = [];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;n,i++)&#123;</span><br><span class="line">    <span class="keyword">const</span> div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">    div.<span class="property">textContent</span> = total +i;</span><br><span class="line">    divs.<span class="title function_">push</span>(div);</span><br><span class="line">  &#125;</span><br><span class="line">  total += n;</span><br><span class="line">  test.<span class="property">append</span>.<span class="title function_">apply</span>(test,divs);</span><br><span class="line">  <span class="keyword">const</span> t2= performance.<span class="title function_">now</span>();</span><br><span class="line">  output.<span class="property">textContent</span> = <span class="string">&#x27;JS用时：&#x27;</span>+(t2-t1)+<span class="string">&#x27;ms&#x27;</span>;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> t3= performance.<span class="title function_">now</span>();</span><br><span class="line">    output.<span class="property">textContent</span> = <span class="string">&#x27;浏览器渲染用时：&#x27;</span>+(t3-t1)+<span class="string">&#x27;ms&#x27;</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-Dom-diff"><a href="#7-Dom-diff" class="headerlink" title="7.Dom diff"></a>7.Dom diff</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 把虚拟DOM想象成树形</span></span><br><span class="line">&lt;div :<span class="keyword">class</span>=<span class="string">&quot;x&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;y&quot;</span>&gt;</span>&#123;string1&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;string2&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>当数据发生变化时，Dom diff 发现<br>「x 从 red 变成 green」</p>
<ul>
<li>div 标签类型没变，只需要更新 div 对应的 DOM 属性</li>
<li>子元素没变，不更新</li>
</ul>
<p>「y 从 true 变成 false」</p>
<ul>
<li>div 没变，不用更新</li>
<li>子元素 1 标签没变，但是 children 变了，更新 DOM 内容</li>
<li>子元素 2 不见了，删除对应的 DOM</li>
</ul>
<h3 id="8-小结"><a href="#8-小结" class="headerlink" title="8.小结"></a>8.小结</h3><p>什么是 DOM diff</p>
<ul>
<li>就是一个函数，我们称之为 patch</li>
<li>patches &#x3D; patch(oldVNode,newVNode)</li>
<li>patches 就是要运行的 DOM 操作，可能长这样：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;<span class="attr">type</span>:<span class="string">&#x27;INSERT&#x27;</span>,<span class="attr">vNode</span>:...&#125;,</span><br><span class="line">  &#123;<span class="attr">type</span>:<span class="string">&#x27;TEST&#x27;</span>,<span class="attr">vNode</span>:...&#125;,</span><br><span class="line">  &#123;<span class="attr">type</span>:<span class="string">&#x27;PROPS&#x27;</span>,<span class="attr">vNode</span>:...&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="9-DOM-diff-可能的大体逻辑"><a href="#9-DOM-diff-可能的大体逻辑" class="headerlink" title="9.DOM diff 可能的大体逻辑"></a>9.DOM diff 可能的大体逻辑</h3><blockquote>
<p>Tree diff</p>
</blockquote>
<p>将新旧两棵树逐层对比，找出哪些节点需要更新<br>如果节点是组件就看 Component diff<br>如果节点时标签就看 Element diff</p>
<blockquote>
<p>Component diff</p>
</blockquote>
<p>如果节点时组件，就先看组件类型<br>类型不同直接替换（删除旧的）<br>类型相同则只更新属性<br>然后深入组件做 Tree diff（递归）</p>
<blockquote>
<p>Element diff</p>
</blockquote>
<p>如果节点时原生标签，则看标签名<br>标签名不同直接替换，相同则只更新属性<br>然后进入标签后代做 Tree diff（递归）</p>
<h3 id="10-DOM-diff-的缺点"><a href="#10-DOM-diff-的缺点" class="headerlink" title="10.DOM diff 的缺点"></a>10.DOM diff 的缺点</h3><blockquote>
<p>同级节点对比存在 bug，会出现识别错误的问题</p>
</blockquote>
<p><a href="https://www.zhihu.com/question/61064119">https://www.zhihu.com/question/61064119</a></p>
<p>参考视频：<br><a href="https://www.bilibili.com/video/BV1bK4y1a7f2">https://www.bilibili.com/video/BV1bK4y1a7f2</a></p>
]]></content>
  </entry>
  <entry>
    <title>【搬】React event总线（发布订阅模式）</title>
    <url>/2023/01/31/React/%E3%80%90%E6%90%AC%E3%80%91React-event%E6%80%BB%E7%BA%BF%EF%BC%88%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F%EF%BC%89/</url>
    <content><![CDATA[<p>1）.新建文件夹 Emitter：<br>创建 index.tsx 文件:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">EventEmitter</span> &#125; <span class="keyword">from</span> <span class="string">&quot;events&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">emitter</span>: <span class="title class_">EventEmitter</span> = <span class="keyword">new</span> <span class="title class_">EventEmitter</span>();</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> emitter;</span><br></pre></td></tr></table></figure>

<p>2).<br>子组件 1：<br>引入 emit 文件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> emitter <span class="keyword">from</span> <span class="string">&quot;../../Emitter&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>设置值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [emmitSwitch, setEmmitSwitch] = useState &lt; boolean &gt; <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>

<p>创建 switch 元素:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;section&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;t-mt&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">marginLeft:</span> &quot;<span class="attr">-8px</span>&quot;, <span class="attr">fontWeight:</span> <span class="attr">600</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">    使用 emmit</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;t-mt&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Switch</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">checked</span>=<span class="string">&#123;emmitSwitch&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">        setEmmitSwitch(!emmitSwitch);</span></span><br><span class="line"><span class="language-xml">      &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      size=&quot;small&quot;</span></span><br><span class="line"><span class="language-xml">    /&gt;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/section&gt;</span><br></pre></td></tr></table></figure>

<p>监听该属性值变更，触发 emit：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  emitter.<span class="title function_">emit</span>(<span class="string">&quot;onSwitch&quot;</span>, emmitSwitch);</span><br><span class="line">&#125;, [emmitSwitch]);</span><br></pre></td></tr></table></figure>

<p>3.子组件 2：<br>引入 emit 文件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> emitter <span class="keyword">from</span> <span class="string">&quot;../Emitter&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>监听 emitter 中属性值变化：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">handleSwitch</span> = (<span class="params">...args</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(...args);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  emitter.<span class="title function_">on</span>(<span class="string">&quot;onSwitch&quot;</span>, handleSwitch);</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    emitter.<span class="title function_">removeListener</span>(<span class="string">&quot;onSwitch&quot;</span>, handleSwitch);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>【搬】浅谈React数据流管理</title>
    <url>/2023/01/31/React/%E3%80%90%E6%90%AC%E3%80%91%E6%B5%85%E8%B0%88React%E6%95%B0%E6%8D%AE%E6%B5%81%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>为什么数据流管理如此重要？<br>react 的核心思想就是：UI&#x3D;render(data)，data 就是我们说的数据，render 是 react 提供的纯函数，所以用户界面的展示完全取决于数据层。</p>
<p><strong>这篇文章希望能用最浅显易懂的话，将 react 中的数据流管理，从自身到借助第三方库，将这些概念理清楚。</strong><br>我会列举几个当下最热的库，包括它们的思想以及优缺点，适用于哪些业务场景。</p>
<p>这篇文章不是教程，不会讲如何去使用它们，更不会一言不合就搬源码，正如文章标题所说，只是浅谈，希望读者在读完以后就算原先没有使用过这些库，也能大致有个思路，知道该如何选择性地深入学习。</p>
<p>在本文正式开始之前，我先试图讲清楚两个概念，<strong>状态和数据：</strong></p>
<p>我们都知道，react 是利用可复用的组件来构建界面的，组件本质上是一个有限状态机，它能够记住当前所处的状态，并且能够根据不同的状态变化做出相应的操作。在 react 中，把这种状态定义为 state，用来描述该组件对应的当前交互界面，表示当前界面展示的一种状况，react 正是通过管理状态来实现对组件的管理，当 state 发生变更时，react 会自动去执行相应的操作：绘制界面。</p>
<p>所以我们接下来提到的状态是针对 react component 这种有限状态机。而数据就广泛了，它不光是指 server 层返回给前端的数据，react 中的状态也是一种数据。当我们改变数据的同时，就要通过改变状态去引发界面的变更。</p>
<p>我们真正要关心的是数据层的管理，我们今天所讨论的数据流管理方案，特别是后面介绍的几种第三方库，不光是配合 react，也可以配合其他的 View 框架（Vue、Angular 等等），就好比开头提到的那个公式，引申一下：UI &#x3D;X(data)，但今天主要是围绕 react 来讲的，因此我们在说 react 的状态管理其实和数据流管理是一样的，包括我们会借助第三方库来帮助 react 管理状态，希望不要有小伙伴太纠结于此。</p>
<h3 id="一、react-自身的数据流管理方案"><a href="#一、react-自身的数据流管理方案" class="headerlink" title="一、react 自身的数据流管理方案"></a>一、react 自身的数据流管理方案</h3><p>我们先来回顾一下，react 自身是如何管理数据流的（也可以理解为如何管理应用状态）：</p>
<p>react 是自上而下的单向组件数据流，容器组件&amp;展示组件（也叫傻瓜组件&amp;聪明组件）是最常用的 react 组件设计方案，容器组件负责处理复杂的业务逻辑以及数据，展示组件负责处理 UI 层，通常我们会将展示组件抽出来进行复用或者组件库的封装，容器组件自身通过 state 来管理状态，setState 更新状态，从而更新 UI，通过 props 将自身的 state 传递给展示组件实现通信。</p>
<p>这是当业务需求不复杂，页面较简单时我们常用的数据流处理方式，仅用 react 自身提供的 props 和 state 来管理足矣，但是如果稍微增加一点复杂度呢，比如当我们项目中遇到这些问题：</p>
<ul>
<li>1）如何实现跨组件通信、状态同步以及状态共享？</li>
</ul>
<p>react V16.3 以前，通过状态提升至最近的共同父组件来实现。（虽然有官方提供的 contextAPI，但是旧版本存在一个问题：看似跨组件，实则还是逐级传递，如果中间组件使用了 ShouldComponentUpdate 检测到当前 state 和 props 没有变化，returnfalse，那么 context 就会无法透传，因此 context 没有被官方推荐使用）。</p>
<p><img src="https://www.daykalif.com/blog_img/context.jpeg" alt="daykalif"></p>
<p>react V16.3 版本以后，新版本 context 解决了之前的问题，可以轻松实现，但依然存在一个问题，context 也是将底部子组件的状态控制交给到了顶级组件，但是顶级组件状态更新的时候一定会触发所有子组件的 re-render，那么也会带来损耗。（虽然我们可以通过一些手段来减少重绘，比如在中间组件的 SCU 里进行一些判断，但是当项目较大时，我们需要花太多的精力去做这件事）<br><img src="https://www.daykalif.com/blog_img/context2.jpeg" alt="daykalif"></p>
<ul>
<li>2）如何避免组件臃肿？</li>
</ul>
<p>当某个组件的业务逻辑非常复杂时，我们会发现代码越写越多，因为我们只能在组件内部去控制数据流，没办法抽离，Model 和 View 都放在了 View 层，整个组件显得臃肿不堪，业务逻辑统统堆在一块，难以维护。</p>
<ul>
<li>3）如何让状态变得可预知，甚至可回溯？</li>
</ul>
<p>当数据流混乱时，我们一个执行动作可能会触发一系列的 setState，我们如何能够让整个数据流变得可“监控”，甚至可以更细致地去控制每一步数据或状态的变更？</p>
<ul>
<li>4）如何处理异步数据流？</li>
</ul>
<p>react 自身并未提供多种处理异步数据流管理的方案，仅用一个 setState 已经很难满足一些复杂的异步流场景；</p>
<h4 id="如何改进？"><a href="#如何改进？" class="headerlink" title="如何改进？"></a>如何改进？</h4><p>这个时候，我们可能需要一个真正的数据流管理工具来帮助 react 了，我们希望它是真正脱离 react 组件的概念的，从 UI 层完全抽离出来，只负责管理数据，让 react 只专注于 View 层的绘制。</p>
<p>那这也是为什么我们需要使用那些第三方数据流管理工具的原因，接下来我们就来了解一些当前社区比较热门的数据流管理工具。</p>
<h3 id="二、redux"><a href="#二、redux" class="headerlink" title="二、redux"></a>二、redux</h3><p>我直接跳过了 flux 来说 redux，主要是因为 redux 是由 flux 演变而来，可以说是 flux 的升级加强版，flux 具备的优势 redux 也做到了。</p>
<h4 id="redux-提供了哪些？"><a href="#redux-提供了哪些？" class="headerlink" title="redux 提供了哪些？"></a>redux 提供了哪些？</h4><p><img src="https://www.daykalif.com/blog_img/redux.jpeg" alt="daykalif"></p>
<ul>
<li>1）store：提供了一个全局的 store 变量，用来存储我们希望从组件内部抽离出去的那些公用的状态；</li>
<li>2）action：提供了一个普通对象，用来记录我们每一次的状态变更，可日志打印与调试回溯，并且这是唯一的途径；</li>
<li>3）reducer：提供了一个纯函数，用来计算状态的变更；</li>
</ul>
<h4 id="为什么需要-redux？"><a href="#为什么需要-redux？" class="headerlink" title="为什么需要 redux？"></a>为什么需要 redux？</h4><p>很多人在用了一段时间的 redux 之后，最大的感想就是，redux 要写大量的模板代码，很麻烦，还不如只用 react 来管理。特别是在 react 的新 context 推出以后，许多人更是直接弃用了 redux，甚至觉得 redux 已死。如果说旧版的 context 的弊端，我们通过 redux 配合 react-redux 来实现跨组件的状态通信同步等问题，那确实新版本的 context 可以替换掉这个功能点，但如果你的项目中仅仅是用 redux 做这些，那思考一下，你是否真的需要 redux？也许从一开始你就不需要它。</p>
<p>（虽然新版的 context 功能强大，但是依然是通过一个新的容器组件来替我们管理状态，那么通过组件管理状态的问题依旧会存在，Consumer 是和 Provider 一一对应的，在项目复杂度较高时，可能会出现多个 Provider，更多个 Consumer，甚至会一个 Consumer 需要对应多个 Provider 的传值等一系列复杂的情况，所以我们依然要谨慎使用）</p>
<h4 id="redux-的核心竞争力"><a href="#redux-的核心竞争力" class="headerlink" title="redux 的核心竞争力"></a>redux 的核心竞争力</h4><p>1）状态持久化：globalstore 可以保证组件就算销毁了也依然保留之前状态；<br>2）状态可回溯：每个 action 都会被序列化，Reducer 不会修改原有状态，总是返回新状态，方便做状态回溯；<br>3）Functional Programming：使用纯函数，输出完全依赖输入，没有任何副作用；<br>4）中间件：针对异步数据流，提供了类 express 中间件的模式，社区也出现了一大批优秀的第三方插件，能够更精细地控制数据的流动，对复杂的业务场景起到了缓冲地作用；<br><img src="https://www.daykalif.com/blog_img/redux3.jpeg" alt="daykalif"></p>
<p>与其说是 redux 来帮助 react 管理状态，不如说是将 react 的部分状态移交至 redux 那里。redux 彻头彻尾的纯函数理念就表明了它不会参与任何状态变化，完全是由 react 自己来完成。只不过 redux 会提供一套工具，react 照着说明书来操作罢了。</p>
<p>所以这注定了想要接受 redux，就必须按照它的规矩来做，除非你不愿意接受这种 FP 的模式。这种模式有利有弊，有利就是在一个大型的多人团队中，这种开发模式反而容易形成一种规约，让整个状态流程变得清晰，弊端就是对于小规模团队，尤其是着急发布上线的，这种繁重的代码模板无疑是一种负担。</p>
<h4 id="redux-的缺点："><a href="#redux-的缺点：" class="headerlink" title="redux 的缺点："></a>redux 的缺点：</h4><p>1）繁重的代码模板：修改一个 state 可能要动四五个文件，可谓牵一发而动全身；<br>2）store 里状态残留：多组件共用 store 里某个状态时要注意初始化清空问题；<br>3）无脑的发布订阅：每次 dispatch 一个 action 都会遍历所有的 reducer，重新计算 connect，这无疑是一种损耗；<br>4）交互频繁时会有卡顿：如果 store 较大时，且频繁地修改 store，会明显看到页面卡顿；<br>5）不支持 typescript；</p>
<p>关于如何优化，网上有很多优秀的案例，redux 官方也提供了很多方法，这里不再赘述。redux 未来不会有太大的变化，那些弊端还是会继续保留，但是这依然不会妨碍忠爱它的用户去使用它。</p>
<p>如果说 redux 那种强硬的函数式编程模式让很多人难以接受，那么当他们开始 mobx 的使用的时候，无疑是一种解脱。</p>
<h3 id="三、mobx"><a href="#三、mobx" class="headerlink" title="三、mobx"></a>三、mobx</h3><p>最开始接触 mobx 也是因为 redux 作者 DanAbramov 的那句：Unhappywith redux？try mobx，我相信很多人也是因为这句话而开始了解学习并使用它的。</p>
<p>下面列举一些 mobx 的优势（和 redux 进行一个对比）</p>
<p>1）redux 不允许直接修改 state，而 mobx 可随意修改；<br>2）redux 修改状态必须走一套指定的流程较麻烦，而 mobx 可以在任何地方直接修改（非严格模式下）；<br>3）redux 模板代码文件多，而 mobx 非常简洁，就一个文件；<br>4）redux 只有一个 store，state orstore 难以取舍，而 mobx 多 store，你可以把所有的 state 都放入 store 中，完全交给 mobx 来管理，减少顾虑；<br>5）redux 需要对监听的组件做 SCU 优化，减少重复 render；而 mobx 都是 SmartComponent，不用我们手动做 SCU；</p>
<p>mobx 的设计思想：<br><img src="https://www.daykalif.com/blog_img/redux4.jpeg" alt="daykalif"></p>
<p>说了这么多，如果你是第一次了解 mobx，是不是听着就感觉很爽！没错，这就是 mobx 的魅力，那它是如何实现这些功能的呢？</p>
<p>这里以 mobx 5 版本为例，实际上它是利用了 ES6 的 proxy 来追踪属性（旧版本是用 Object.defineProperty 来实现的）通过隐式订阅，自动追踪被监听的对象变化，然后触发组件的 UI 更新。</p>
<p>如果说 redux 是把要做的事情都交给了用户，来保证自己的纯净，那么 mobx 就是把最简易的操作给了用户，其它的交给 mobx 内部去实现。用户不必关心这个过程，Model 和 View 完全分离，我们完全可以将业务逻辑写在 action 里，用户只需要操作 Observabledata 就行了。</p>
<p>Observerview 会自动做出响应，这就是 mobx 主打的响应式设计，但是编程风格依然是传统的面向对象的 OO 范式。（熟悉 Vue 的朋友一定对这种响应式设计不陌生，Vue 就是利用了数据劫持来实现双向绑定，其实 React +Mobx 就是一个复杂点的 Vue，Vue 3 版本一个重大改变也是将代理交给了 proxy）</p>
<p>刚刚 mobx 的优势说得比较多了，这边再总结一下：</p>
<p>1）代码量少；<br>2）基于数据劫持来实现精准定位（真正意义上的局部更新）；<br>3）多 store 抽离业务逻辑（Model View 分离）；<br>4）响应式性能良好（频繁的交互依然可以胜任）；<br>5）完全可以替代 react 自身的状态管理；<br>6）支持 typescript；</p>
<p>但是 mobx 真的这么完美吗，当然也有缺陷：</p>
<p>1）没有状态回溯能力：mobx 是直接修改对象引用，所以很难去做状态回溯；（这点 redux 的优势就瞬间体现出来了）<br>2）没有中间件：和 redux 一样，mobx 也没有很好地办法处理异步数据流，没办法更精细地去控制数据流动；（redux 虽然自己不做，但是它提供了 applyMiddleware！）<br>3）store 太多：随着 store 数的增多，维护成本也会增加，而且多 store 之间的数据共享以及相互引用也会容易出错<br>4）副作用：mobx 直接修改数据，和函数式编程模式强调的纯函数相反，这也导致了数据的很多未知性</p>
<p>其实现在主流的数据流管理分为两大派，一类是以 redux 为首的函数式库，还有一类是以 mobx 为首的响应式库，其实通过刚刚的介绍，我们会发现，redux 和 mobx 有一个共同的短板，那就是在处理异步数据流的时候，没有一个很好的解决方案，至少仅仅依靠自身比较吃力，那么接下来给大家介绍一个处理异步数据流的高手：rxjs。</p>
<h3 id="四、rxjs"><a href="#四、rxjs" class="headerlink" title="四、rxjs"></a>四、rxjs</h3><p>我相信很多人听说过 rxjs 学习曲线异常陡峭，是的，除了眼花缭乱的各类操作符（目前 rxjs V6 版本有 120+个），关键是它要求我们在处理事务的时候要贯彻“一切皆为流”的理念，更是让初学者难以理解。</p>
<p>这一小节并不能让读者达到能够上手使用的程度，正如文章开头所说，希望读者（新手）能对 rxjs 有一个新的认知，知道它是做什么的，它是如何实现的，它有哪些优势，我们如何选择它，如果感兴趣还需要私下花大量时间去学习掌握各种操作符，但我也会尝试尽可能地相对于前两个说得更细致一些。</p>
<p>在开始介绍 rxjs 之前，我们先来简单地聊聊什么是响应式编程？我以一个很简单的小例子来看：a + b &#x3D; c。</p>
<p>如果站在传统的命令式编程的角度来看这段公式：c 的值完全依赖于 a 和 b，这时候我们去改变 a 的值，那我们就需要再去手动计算 a + b 的值，a、b 和 c 是相互依赖的。</p>
<p>那么如果站在响应式编程的角度来看，这个公式又会变成这样：c :&#x3D; a + b，a 和 b 完全不关心 c 的值，c 也完全不关心等式那边是 a 或者 b，或者还有什么 d，e，f。。。等式右边改变值了，左边会自动更改数值，这就是响应式编程的思维方式。</p>
<p>我们再来看前端的框架历史，传统命令式编程的代表：jQuery，在过去我们是如何绘制一个页面的？我们会用 jQuery 提供的一套 API，然后手动操作 Dom 来进行绘制，很精准，但是很累，因为完全靠手动操作，且改动时性能损耗较大，开发者的注意力完全在“如何去绘制”上面了。</p>
<p>那我们再来看响应式编程的 react，它是如何来实现的？</p>
<p>开发者根本不用关心界面如何绘制，只要告诉 react 我们希望页面长什么样子，就可以了，剩下的交给 react，react 就会自动帮我们绘制界面，还记得开头时的那个核心思想吗：UI &#x3D;render(data)，我们只要操作 data 就可以了，页面 UI 会自动作出响应，而且我们一切的操作都是基于内存之中，不会有较大的性能损耗，这就是 react 响应式编程的精髓，也是为何它叫作 react。</p>
<p>回到我们的 rxjs 上，rxjs 是如何做到响应式的呢？多亏了它两种强大的设计模式：观察者模式和迭代器模式；简单地介绍一下：</p>
<ul>
<li>1）观察者模式：</li>
</ul>
<p><img src="https://www.daykalif.com/blog_img/rxjs.jpeg" alt="daykalif"></p>
<p>在观察者模式中，有两个重要的角色：Observable 和 Observer，熟悉 mobx 的同学对这个一定不陌生（所以我建议想要学习 rxjs 的同学，如果对 mobx 不熟悉，可以先学习一下 mobx，然后再学习 rxjs，这样会更容易理解一些）。</p>
<p>就是可观察对象和观察者，可观察对象（Observable）也就是事件发布者，负责产生事件，而观察者（Observer）也就是事件响应者，负责对发布的事件作出响应，但是如何连接一个发布者和响应者呢？</p>
<p>通过订阅的形式，也就是 subscribe 方法（这也类似于 redux 的 store.subscribe），而在订阅之前，他们两者是毫无关联的，无论 Observable 发出多少事件，Observer 也不会做出任何响应，同样，当这种订阅关系中断时也不会。</p>
<ul>
<li>2）迭代器模式：</li>
</ul>
<p>在这里要先引出一个新的概念：拉取（pull）和推送（push），rxjs 官方这两种协议有更详细的解释，我这里就直接引用一下：<br><img src="https://www.daykalif.com/blog_img/rxjs2.jpeg" alt="daykalif"></p>
<p>拉取和推送实际上对于观察者来说就是一个主动与被动的区别，是主动去获取还是被动地接收。在 rxjs 中，作为事件响应者（消费者）的 Observer 对象也有一个 next 属性（回调函数），用来接收从发布者那里“推”过来的数据。</p>
<p>（站在开发者的角度，我们一定是希望消息是被动地接收，因为我们倡导的就是通过操作 data 数据层，让 View 层进行一个响应，那么这里 data 数据层一定是事件发布者，而 View 层就是事件响应者，每当 data 数据层发生变化时，都会主动推送一个值给 View 层，这才符合真正意义上的响应式编程，而 rxjs 做到了！）</p>
<p>如何配合 react？</p>
<p>如果说 redux 和 mobx 的出现或多或少是因为 react 的存在，那么不同的是 rxjs 和 react 并没有什么关联，关于 rxjs 的历史这里不多说，感兴趣的可以了解一下 ReactiveExtension，rxjs 只是响应式编程在 JavaScript 中的应用。</p>
<p>那么如何帮助 react 实现状态管理呢，我们只需要将组件作为事件响应者，然后在 next 回调里定义好更新组件状态的动作 setState，当接收到数据推送时，就会自动触发 setState，完成界面更新，这其实有点类似于 mobx 做的事情。（很多人在 react 项目中并没有完全只使用 rxjs，而是用了这个 redux-observable 中间件，利用 rxjs 的操作符来处理异步 action）</p>
<p>除了响应式编程的魅力，rxjs 还有什么优势呢？</p>
<p>1）纯函数：rxjs 中数据流动的过程中，不会改变已经存在的 Observable 实例，会返回一个新的 Observable，没有任何副作用；<br>2）强大的操作符：rxjs 又被称为 lodash forasync，和 lodash 一样，拥有众多强大的操作符来操作数据流，不光是同步数据，特别是针对各种复杂的异步数据流，甚至可以多种事件流组合搭配，汇总到一起处理；<br>3）更独立：rxjs 并不依赖于任何一个框架，它可以任意搭配，因为它的关注点完全就是在于数据流的处理上，而且它更偏底层一些</p>
<p>那 rxjs 有哪些缺点呢？</p>
<p>1）学习曲线陡峭：光是这一点就已经让大多数人止步于此；<br>2）事件流高度抽象：用 rxjs 的用户反馈一般都是两种极端情况，用得好的都觉得这个太厉害了，用得不好的都觉得感觉有点麻烦，增加了项目复杂度。</p>
<h3 id="五、结语"><a href="#五、结语" class="headerlink" title="五、结语"></a>五、结语</h3><p>最后，总结一下各类的适用场景：</p>
<p>1）当我们项目中复杂程度较低时，建议只用 react 就可以了；<br>2）当我们项目中跨组件通信、数据流同步等情况较多时，建议搭配 react 的新 context api；<br>3）当项目复杂度一般时，小规模团队或开发周期较短、要求快速上线时，建议使用 mobx；<br>4）当项目复杂度较高时，团队规模较大或要求对事件分发处理可监控可回溯时，建议使用 redux；<br>5）当项目复杂度较高，且数据流（尤其是异步数据）混杂时，建议使用 rxjs；</p>
<p>其实回顾全篇，我没有提到一个关键点是，各个库的性能对比如何。其实它们之间一定是有差异的，但是这点性能差异，相对于 react 自身组件设计不当而导致的性能损耗来说，是可以忽略的。</p>
<p>如果你现在的项目觉得性能较差或者页面卡顿，建议先从 react 层面去考虑如何进行优化，然后再去考虑如何优化数据管理层。关于上面提到的三个数据流管理工具，有利有弊，针对弊端，网上也有一大批优秀的解决方案和改进，感兴趣的读者可自行查阅。</p>
<p>【推荐阅读】</p>
<ul>
<li>OCR 技术在携程业务中的应用</li>
<li>基于 tendermint 实现 Hyperledger Fabric 的拜占庭容错排序</li>
<li>携程混合云之 kubernetes@AWS 揭秘</li>
<li>携程技术演进之路</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>React Hooks 加持下的函数组件设计</title>
    <url>/2021/02/19/React/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91React-Hooks-%E5%8A%A0%E6%8C%81%E4%B8%8B%E7%9A%84%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h4 id="React-Hooks-加持下的函数组件设计"><a href="#React-Hooks-加持下的函数组件设计" class="headerlink" title="React Hooks 加持下的函数组件设计"></a>React Hooks 加持下的函数组件设计</h4><h5 id="有了-React-Hooks-的加持，妈妈再也不用担心函数组件记不住状态"><a href="#有了-React-Hooks-的加持，妈妈再也不用担心函数组件记不住状态" class="headerlink" title="有了 React Hooks 的加持，妈妈再也不用担心函数组件记不住状态"></a>有了 React Hooks 的加持，妈妈再也不用担心函数组件记不住状态</h5><p>过去，React 中的函数组件都被称为无状态函数式组件(stateless functional component)，这是因为函数组件没有办法拥有自己的状态，只能根据 Props 来渲染 UI ，其性质就相当于是类组件中的 render 函数，虽然结构简单明了，但是作用有限。</p>
<p>但自从 React Hooks 横空出世，函数组件也拥有了保存状态的能力，而且也逐渐能够覆盖到类组件的应用场景，因此可以说 React Hooks 就是未来 React 发展的方向。</p>
<h5 id="React-Hooks-解决了什么问题"><a href="#React-Hooks-解决了什么问题" class="headerlink" title="React Hooks 解决了什么问题"></a>React Hooks 解决了什么问题</h5><h6 id="复杂的组件难以分拆"><a href="#复杂的组件难以分拆" class="headerlink" title="复杂的组件难以分拆"></a>复杂的组件难以分拆</h6><p>我们知道组件化的思想就是将一个复杂的页面&#x2F;大组件，按照不同层次，逐渐抽象并拆分成功能更纯粹的小组件，这样一方面可以减少代码耦合，另外一方面也可以更好地复用代码；但实际上，在使用 React 的类组件时，往往难以进一步分拆复杂的组件，这是因为逻辑是有状态的，如果强行分拆，会令代码复杂性急剧上升；如使用 HOC 和 Render Props 等设计模式，这会形成“嵌套地狱”，使我们的代码变得晦涩难懂。</p>
<h6 id="状态逻辑复杂，给单元测试造成障碍"><a href="#状态逻辑复杂，给单元测试造成障碍" class="headerlink" title="状态逻辑复杂，给单元测试造成障碍"></a>状态逻辑复杂，给单元测试造成障碍</h6><p>这其实也是上一点的延续：要给一个拥有众多状态逻辑的组件写单元测试，无疑是一件令人崩溃的事情，因为需要编写大量的测试用例来覆盖代码执行路径。</p>
<h6 id="组件生命周期繁复"><a href="#组件生命周期繁复" class="headerlink" title="组件生命周期繁复"></a>组件生命周期繁复</h6><p>对于类组件，我们需要在组件提供的生命周期钩子中处理状态的初始化、数据获取、数据更新等操作，处理起来本身逻辑就比较复杂，而且各种“副作用”混在一起也使人头晕目眩，另外还很可能忘记在组件状态变更&#x2F;组件销毁时消除副作用。</p>
<h6 id="React-Hooks-就是来解决以上这些问题的"><a href="#React-Hooks-就是来解决以上这些问题的" class="headerlink" title="React Hooks 就是来解决以上这些问题的"></a>React Hooks 就是来解决以上这些问题的</h6><ul>
<li>针对状态逻辑分拆复用难的问题：其实并不是 React Hooks 解决的，函数这一形式本身就具有逻辑简单、易复用等特性。</li>
<li>针对组件生命周期繁复的问题：React Hooks 屏蔽了生命周期这一概念，一切的逻辑都是由状态驱动，或者说由数据驱动的，那么理解、处理起来就简单多了。</li>
</ul>
<h5 id="利用自定义-Hooks-捆绑封装逻辑与相关-state"><a href="#利用自定义-Hooks-捆绑封装逻辑与相关-state" class="headerlink" title="利用自定义 Hooks 捆绑封装逻辑与相关 state"></a>利用自定义 Hooks 捆绑封装逻辑与相关 state</h5><p>我认为 React Hooks 的亮点不在于 React 官方提供的那些 API ，那些 API 只是一些基础的能力；其亮点还是在于<strong>自定义 Hooks</strong> —— 一种封装复用的设计模式。</p>
<p>例如，一个页面上往往有很多状态，这些状态分别有各自的处理逻辑，如果用类组件的话，这些状态和逻辑都会混在一起，不够直观：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Com</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">c</span>: <span class="number">3</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">handleA</span>();</span><br><span class="line">    <span class="title function_">handleB</span>();</span><br><span class="line">    <span class="title function_">handleC</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而使用 React Hooks 后，我们可以把状态和逻辑关联起来，分拆成多个自定义 Hooks ，代码结构就会更清晰：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">useA</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [a, setA] = <span class="title function_">useState</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">handleA</span>();</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useB</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [b, setB] = <span class="title function_">useState</span>(<span class="number">2</span>);</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">handleB</span>();</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useC</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [c, setC] = <span class="title function_">useState</span>(<span class="number">3</span>);</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">handleC</span>();</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Com</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="title function_">useA</span>();</span><br><span class="line">  <span class="keyword">const</span> b = <span class="title function_">useB</span>();</span><br><span class="line">  <span class="keyword">const</span> c = <span class="title function_">useC</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们除了可以利用自定义 Hooks 来拆分业务逻辑外，还可以拆分成复用价值更高的通用逻辑，比如说目前比较流行的 Hooks 库：<a href="https://github.com/daykalif/react-use-chinese">react-use</a>；另外，React 生态中原来的很多库，也开始提供 Hooks API ，如 <a href="https://reactrouter.com/web/api/Hooks">react-router</a>。</p>
<h5 id="忘记组件生命周期吧"><a href="#忘记组件生命周期吧" class="headerlink" title="忘记组件生命周期吧"></a>忘记组件生命周期吧</h5><p>React 提供了大量的组件生命周期钩子，虽然在日常业务开发中，用到的不多，但光是 componentDidUpdate 和 componentWillUnmount 就让人很头痛了，一不留神就忘记处理 <strong>props 更新</strong> 和 <strong>组件销毁需要处理副作用</strong> 的场景，这不仅会留下肉眼可见的 bug ，还会留下一些内存泄露的隐患。</p>
<p>类 MVVM 框架讲究的是 <strong>数据驱动</strong>，而生命周期这种设计模式，就明显更偏向于传统的事件驱动模型；当我们引入 React Hooks 后，数据驱动的特性能够变得更纯粹。</p>
<h6 id="处理-props-更新"><a href="#处理-props-更新" class="headerlink" title="处理 props 更新"></a>处理 props 更新</h6><p>下面我们以一个非常典型的列表页面来举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">List</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">data</span>: [],</span><br><span class="line">  &#125;;</span><br><span class="line">  fetchData = <span class="function">(<span class="params">id, authorId</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 请求接口</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">fetchData</span>(<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">id</span>, <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">authorId</span>);</span><br><span class="line">    <span class="comment">// ...其它不相关的初始化逻辑</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">componentDidUpdate</span>(<span class="params">prevProps</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">id</span> !== prevProps.<span class="property">id</span> ||</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">authorId</span> !== prevProps.<span class="property">authorId</span> <span class="comment">// 别漏了！</span></span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">fetchData</span>(<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">id</span>, <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">authorId</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...其它不相关的更新逻辑</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>上面这段代码有 3 个问题：</p>
</blockquote>
<ul>
<li>需要同时在两个生命周期里执行几乎相同的逻辑。</li>
<li>在判断是否需要更新数据的时候，容易漏掉依赖的条件。</li>
<li>每个生命周期钩子里，会散落大量不相关的逻辑代码，违反了高内聚的原则，影响阅读代码的连贯性。</li>
</ul>
<p>如果改成用 React Hooks 来实现，问题就能得到很大程度上的解决了：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">List</span>(<span class="params">&#123; id, authorId &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [data, <span class="title class_">SetData</span>] = <span class="title function_">useState</span>([]);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">fetchData</span> = (<span class="params">id, authorId</span>) =&gt; &#123;&#125;;</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">fetchData</span>(id, authorId);</span><br><span class="line">  &#125;, [id, authorId]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>改用 React Hooks 后：</p>
<ul>
<li>我们不需要考虑生命周期，我们只需要把逻辑依赖的状态都丢进依赖列表里， React 会帮我们判断什么时候该执行的。</li>
<li>React 官方提供了 eslint 的插件来检查依赖项列表是否完整。</li>
<li>我们可以使用多个 useEffect ，或者多个自定义 Hooks 来区分开多个无关联的逻辑代码段，保障高内聚特性。</li>
</ul>
<h5 id="处理副作用"><a href="#处理副作用" class="headerlink" title="处理副作用"></a>处理副作用</h5><p>最常见的副作用莫过于绑定 DOM 事件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">List</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  handleFunc = <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;scroll&quot;</span>, <span class="variable language_">this</span>.<span class="property">handleFunc</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">componentWillUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;scroll&quot;</span>, <span class="variable language_">this</span>.<span class="property">handleFunc</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这块也还是会有上述说的，影响高内聚的问题，改成 React Hooks ：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">List</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">useEffect</span>(</span><br><span class="line">    <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;scroll&quot;</span>, <span class="variable language_">this</span>.<span class="property">handleFunc</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;scroll&quot;</span>, <span class="variable language_">this</span>.<span class="property">handleFunc</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而且比较绝的是，除了在组件销毁的时候会触发外，在依赖项变化的时候，也会执行清除上一轮的副作用。</p>
<h5 id="利用-useMemo-做局部性能优化"><a href="#利用-useMemo-做局部性能优化" class="headerlink" title="利用 useMemo 做局部性能优化"></a>利用 useMemo 做局部性能优化</h5><p>在使用类组件的时候，我们需要利用 componentShouldUpdate 这个生命周期钩子来判断当前是否需要重新渲染，而改用 React Hooks 后，我们可以利用 useMemo 来判断是否需要重新渲染，达到局部性能优化的效果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">List</span>(<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">fetchData</span>(props.<span class="property">id</span>)</span><br><span class="line">  &#125;, [props.<span class="property">id</span>])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> (</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  ), [props.<span class="property">id</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上面这段代码中，我们看到最终渲染的内容是依赖于 props. id，那么只要 props.id 不变，即便其它 props 再怎么办，该组件也不会重新渲染。</p>
<h5 id="依靠-useRef-摆脱闭包"><a href="#依靠-useRef-摆脱闭包" class="headerlink" title="依靠 useRef 摆脱闭包"></a>依靠 useRef 摆脱闭包</h5><p>在我们刚开始使用 React Hooks 的时候，经常会遇到这样的场景：在某个事件回调中，需要根据当前状态值来决定下一步执行什么操作；但我们发现事件回调中拿到的总是旧的状态值，而不是最新状态值，这是怎么回事呢？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">log</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(count + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(count);</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;log&#125;</span>&gt;</span>报数<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    如果我们在三秒内连续点击三次，那么count的值最终会变成 3，而随之而来的输出结果是？</span></span><br><span class="line"><span class="comment">    0</span></span><br><span class="line"><span class="comment">    1</span></span><br><span class="line"><span class="comment">    2</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p>“这是 feature 不是 bug ”，哈哈哈，说是 feature 可能也不太准确，因为这不正是 javascript 闭包的特性吗？当我们每次往 setTimeout 里传入回调函数时，这个回调函数都会引用下当前函数作用域（此时 count 的值还未被更新），所以在执行的时候打印出来的就会是旧的状态值。</p>
<h5 id="类组件是怎么实现的？"><a href="#类组件是怎么实现的？" class="headerlink" title="类组件是怎么实现的？"></a>类组件是怎么实现的？</h5><p>那为啥类组件中，每次都能取到最新的状态值呢？这是因为我们在类组件中取状态值都是从 this.state 里取的，这相当于是类组件的一个执行上下文，永远都是保持最新的。</p>
<h5 id="借助-useRef-共享修改"><a href="#借助-useRef-共享修改" class="headerlink" title="借助 useRef 共享修改"></a>借助 useRef 共享修改</h5><blockquote>
<p>通过 useRef 创建的对象，其值只有一份，而且在所有 Rerender 之间共享。</p>
</blockquote>
<p>听上去，这 useRef 其实跟 this.state 很相似嘛，都是一个可以一直维持的值，那我们就可以用它来维护我们的状态了：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> count = <span class="title function_">useRef</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">log</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    count.<span class="property">current</span>++;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(count.<span class="property">current</span>);</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;log&#125;</span>&gt;</span>报数<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    3</span></span><br><span class="line"><span class="comment">    3</span></span><br><span class="line"><span class="comment">    3</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p>转载文档：<br><a href="https://segmentfault.com/a/1190000022992165">https://segmentfault.com/a/1190000022992165</a></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>组件化</tag>
        <tag>React</tag>
        <tag>react-hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>React Hooks 原理剖析</title>
    <url>/2021/02/19/React/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91React-Hooks%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90/</url>
    <content><![CDATA[<h4 id="React-Hooks-原理剖析"><a href="#React-Hooks-原理剖析" class="headerlink" title="React Hooks 原理剖析"></a>React Hooks 原理剖析</h4><h5 id="为什么要学习-React-Hooks-原理"><a href="#为什么要学习-React-Hooks-原理" class="headerlink" title="为什么要学习 React Hooks 原理"></a>为什么要学习 React Hooks 原理</h5><p>首先，功利点来说：目前前端框架三分天下：React、Vue、Angular，而 React 自从 v16.8.0 版本正式推出 React Hooks 概念后，风势已经从原来的类组件猛地转向函数组件，这是一个在设计模式、心智模型层次，且非常近期的革新，因此只要是你谈到自己会 React ，就一定会在面试中被问到 React Hooks 的原理。</p>
<p>再者，从实际角度出发，了解 React Hooks 原理对我们日常开发调试都有莫大的好处；我们可以认识到 React Hooks 其实也并不是什么黑魔法，我们在开发中碰到的奇奇怪怪的问题，只不过是我们还没有掌握 React Hooks 导致的，也不需要用一些 tricky 的方法来解决。</p>
<h5 id="useState-useReducer"><a href="#useState-useReducer" class="headerlink" title="useState &#x2F; useReducer"></a>useState &#x2F; useReducer</h5><p>useState 和 useReducer 都是关于状态值的提取和更新，从本质上来说没有区别，从实现上，可以说 useState 是 useReducer 的一个简化版，其背后用的都是同一套逻辑。</p>
<h5 id="React-Hooks-如何保存状态"><a href="#React-Hooks-如何保存状态" class="headerlink" title="React Hooks 如何保存状态"></a>React Hooks 如何保存状态</h5><p>React 官方文档中有提到，React Hooks 保存状态的位置其实与类组件的一致；翻看源码后，我发现这样的说法没错，但又不全面：</p>
<ul>
<li>两者的状态值都被挂载在组件实例对象 FiberNode 的 memoizedState 属性中。</li>
<li>两者保存状态值的数据结构完全不同；类组件是直接把 state 属性中挂载的这个开发者自定义的对象给保存到 memoizedState 属性中；而 React Hooks 是用链表来保存状态的，memoizedState 属性保存的实际上是这个链表的头指针。</li>
</ul>
<p>下面我们来看看这个链表的节点是什么样的 —— Hook 对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// react-reconciler/src/ReactFiberHooks.js</span></span><br><span class="line"><span class="keyword">export</span> type <span class="title class_">Hook</span> = &#123;</span><br><span class="line">  <span class="attr">memoizedState</span>: any, <span class="comment">// 最新的状态值</span></span><br><span class="line">  <span class="attr">baseState</span>: any, <span class="comment">// 初始状态值，如`useState(0)`，则初始值为0</span></span><br><span class="line">  <span class="attr">baseUpdate</span>: <span class="title class_">Update</span>&lt;any, any&gt; | <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">queue</span>: <span class="title class_">UpdateQueue</span>&lt;any, any&gt; | <span class="literal">null</span>, <span class="comment">// 临时保存对状态值的操作，更准确来说是一个链表数据结构中的一个指针</span></span><br><span class="line">  <span class="attr">next</span>: <span class="title class_">Hook</span> | <span class="literal">null</span>, <span class="comment">// 指向下一个链表节点</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>官方文档一直强调 React Hooks 的调用只能放在函数组件&#x2F;自定义 Hooks 函数体的顶层，这是因为我们只能通过 Hooks 调用的顺序来与实际保存的数据结构来关联：</p>
<p><img src="https://www.daykalif.com/blog_img/useState.png" alt="useState"></p>
<p>PS：虽然上面一致都是以 useState 和 useReducer 来作为例子说明，但实际上所有 React Hooks 都是用这种链表的方式来保存的。</p>
<h5 id="React-Hooks-如何更新状态"><a href="#React-Hooks-如何更新状态" class="headerlink" title="React Hooks 如何更新状态"></a>React Hooks 如何更新状态</h5><p>熟悉 useState API 的话，我们都知道怎么去更新状态：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [name, setName] = <span class="title function_">useState</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="title function_">setName</span>(<span class="string">&quot;张三&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>那么，由 useState 返回的这个用来更新状态的函数（下文称为 dispatcher），运行的原理是怎么样的呢？</p>
<p>当我们在每次调用 dispatcher 时，并不会立刻对状态值进行修改（对的，状态值的更新是异步的），而是创建一条修改操作——在对应 Hook 对象的 queue 属性挂载的链表上加一个新节点：</p>
<p><img src="https://www.daykalif.com/blog_img/stateUpdate.png" alt="useState"></p>
<p>在下次执行函数组件，再次调用 useState 时， React 才会根据每个 Hook 上挂载的更新操作链表来计算最新的状态值。你也许会好奇，为什么要把更新操作都保存起来呢，只保存最新的一次更新操作不就行了吗？你会这样想，大概是忘了 useState 支持这样的语法了吧：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [name, setName] = <span class="title function_">useState</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="title function_">setName</span>(<span class="function">(<span class="params">name</span>) =&gt;</span> name + <span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="title function_">setName</span>(<span class="function">(<span class="params">name</span>) =&gt;</span> name + <span class="string">&quot;b&quot;</span>);</span><br><span class="line"><span class="title function_">setName</span>(<span class="function">(<span class="params">name</span>) =&gt;</span> name + <span class="string">&quot;c&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下次执行时就可以得到 name 的最新状态值为&#x27;abc&#x27;啦</span></span><br></pre></td></tr></table></figure>

<h5 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h5><p>useEffect 的保存方式与 useState &#x2F; useReducer 类似，也是以链表的形式挂载在 FiberNode.updateQueue 中。</p>
<p>下面我们按 mount 和 update 这两个组件生命周期来阐述 useEffect 的执行原理：</p>
<h5 id="mount-阶段：mountEffect"><a href="#mount-阶段：mountEffect" class="headerlink" title="mount 阶段：mountEffect"></a>mount 阶段：mountEffect</h5><p>根据函数组件函数体中依次调用的 useEffect 语句，构建成一个链表并挂载在 FiberNode.updateQueue 中，链表节点的数据结构为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">effect</span>: <span class="title class_">Effect</span> = &#123;</span><br><span class="line">  tag, <span class="comment">// 用来标识依赖项有没有变动</span></span><br><span class="line">  create, <span class="comment">// 用户使用useEffect传入的函数体</span></span><br><span class="line">  destroy, <span class="comment">// 上述函数体执行后生成的用来清除副作用的函数</span></span><br><span class="line">  deps, <span class="comment">// 依赖项列表</span></span><br><span class="line">  <span class="attr">next</span>: (<span class="attr">null</span>: any),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>组件完成渲染后，遍历链表执行。</p>
<h5 id="update-阶段：updateEffect"><a href="#update-阶段：updateEffect" class="headerlink" title="update 阶段：updateEffect"></a>update 阶段：updateEffect</h5><p>同样在依次调用 useEffect 语句时，判断此时传入的依赖列表，与链表节点 Effect.deps 中保存的是否一致（基本数据类型的值是否相同；对象的引用是否相同），如果一致，则在 Effect.tag 标记上 NoHookEffect。</p>
<h5 id="执行阶段"><a href="#执行阶段" class="headerlink" title="执行阶段"></a>执行阶段</h5><p>在每次组件渲染完成后，就会进入 useEffect 的执行阶段：function commitHookEffectList()：</p>
<p>1.遍历链表 2.如果遇到 Effect.tag 被标记上 NoHookEffect 的节点则跳过。 3.如果 Effect.destroy 为函数类型，则需要执行该清除副作用的函数（至于这 Effect.destroy 是从哪里来的，下面马上说到） 4.执行 Effect.create，并将执行结果保存到 Effect.destroy（如果开发者没有配置 return，那得到的自然是 undefined 了，也就是说，开发者认为对于当前 useEffect 代码段，不存在需要清除的副作用）；注意由于闭包的缘故，Effect.destroy 实际上可以访问到本次 Effect.create 函数作用域内的变量。</p>
<p>我们重点请注意到：<strong>是先清除上一轮的副作用，然后再执行本轮的 effect 的。</strong></p>
<h5 id="其它-React-Hooks-Api"><a href="#其它-React-Hooks-Api" class="headerlink" title="其它 React Hooks Api"></a>其它 React Hooks Api</h5><p>其它的的 React Hooks Api ，其实也差不多是这样的原理：用链表数据结构来做全局状态保持；判断依赖项决定是否要更新状态等等，这里不再累述。</p>
<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>本文用比较精炼的语言来阐述了 React Hooks 的原理，目的是让读者有一个感性的认识，也便于应付面试；但实际上 React Hooks 还有非常多的实现细节，有兴趣请阅读源码，入口<a href="https://github.com/facebook/react/blob/master/packages/react/src/ReactHooks.js">在此</a>。</p>
<p>转载文档：<br><a href="https://segmentfault.com/a/1190000023041842">https://segmentfault.com/a/1190000023041842</a></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>组件化</tag>
        <tag>React</tag>
        <tag>react-hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>详解react hooks面试题(含高阶组件)</title>
    <url>/2021/02/19/React/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91%E8%AF%A6%E8%A7%A3react-hooks%E9%9D%A2%E8%AF%95%E9%A2%98-%E5%90%AB%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h4 id="为什么使用-Hooks？"><a href="#为什么使用-Hooks？" class="headerlink" title="为什么使用 Hooks？"></a>为什么使用 Hooks？</h4><p>1.React Hooks 就是让你不必写 class 组件就可以用 state 和其他的 React 特性； 2.你也可以编写自己的 hooks 在不同的组件之间复用； 3.由于业务变动，函数组件不得不改为类组件等等。</p>
<h5 id="React-hooks-优势"><a href="#React-hooks-优势" class="headerlink" title="React hooks 优势"></a>React hooks 优势</h5><p>1.没有破坏性改动<br>完全可选的。 你无需重写任何已有代码就可以在一些组件中尝试 Hook。<br>100% 向后兼容的。 Hook 不包含任何破坏性改动。 2.更容易复用代码:它通过自定义 hooks 来复用状态，从而解决了类组件有些时候难以复用逻辑的问题 3.函数式编程风格:函数式组件、状态保存在运行环境、每个功能都包裹在函数中，整体风格更清爽，更优雅 4.代码量更少 5.更容易拆分组件</p>
<h5 id="React-hooks-缺点"><a href="#React-hooks-缺点" class="headerlink" title="React hooks 缺点"></a>React hooks 缺点</h5><p>hooks 是 React 16.8 的新增特性、以前版本的就别想了 1.部分代码从主动式变成响应式 2.状态不同步:函数的运行是独立的，每个函数都有一份独立的作用域。当我们处理复杂逻辑的时候，经常会碰到“引用不是最新”的问题</p>
<h4 id="一-面试中出现的关于-hooks-的题目"><a href="#一-面试中出现的关于-hooks-的题目" class="headerlink" title="一. 面试中出现的关于 hooks 的题目"></a>一. 面试中出现的关于 hooks 的题目</h4><h5 id="1-简单介绍下什么是-hooks，hooks-产生的背景？hooks-的优点？"><a href="#1-简单介绍下什么是-hooks，hooks-产生的背景？hooks-的优点？" class="headerlink" title="1.简单介绍下什么是 hooks，hooks 产生的背景？hooks 的优点？"></a>1.简单介绍下什么是 hooks，hooks 产生的背景？hooks 的优点？</h5><p>hooks 是针对在使用 react 时存在以下问题而产生的：</p>
<ul>
<li>组件之间复用状态逻辑很难，在 hooks 之前，实现组件复用，一般采用高阶组件和 Render Props，它们本质是将复用逻辑提升到父组件中，很容易产生很多包装组件，带来嵌套地域。</li>
<li>组件逻辑变得越来越复杂，尤其是生命周期函数中常常包含一些不相关的逻辑，完全不相关的代码却在同一个方法中组合在一起。如此很容易产生 bug，并且导致逻辑不一致。</li>
<li>复杂的 class 组件，使用 class 组件，需要理解 JavaScript 中 this 的工作方式，不能忘记绑定事件处理器等操作，代码复杂且冗余。除此之外，class 组件也会让一些 react 优化措施失效。</li>
</ul>
<p>针对上面提到的问题，react 团队研发了 hooks，它主要有两方面作用：</p>
<ul>
<li>用于在函数组件中引入状态管理和生命周期方法</li>
<li>取代高阶组件和 render props 来实现抽象和可重用性</li>
</ul>
<p>优点也很明显：</p>
<ul>
<li>避免在被广泛使用的函数组件在后期迭代过程中，需要承担一些副作用，而必须重构成类组件，它帮助函数组件引入状态管理和生命周期方法。</li>
<li>Hooks 出现之后，我们将复用逻辑提取到组件顶层，而不是强行提升到父组件中。这样就能够避免 HOC 和 Render Props 带来的「嵌套地域」</li>
<li>避免上面陈述的 class 组件带来的那些问题</li>
</ul>
<h5 id="2-知道-hoc-和-render-props-吗，它们有什么作用？有什么弊端？"><a href="#2-知道-hoc-和-render-props-吗，它们有什么作用？有什么弊端？" class="headerlink" title="2.知道 hoc 和 render props 吗，它们有什么作用？有什么弊端？"></a>2.知道 hoc 和 render props 吗，它们有什么作用？有什么弊端？</h5><p>Render Props 组件和高阶组件主要用来实现抽象和可重用性。<br>弊端就是高阶组件和 Render Props 本质上都是将复用逻辑提升到父组件中，很容易产生很多包装组件，带来的「嵌套地域」。由于所有抽象逻辑都被其他 React 组件所隐藏，应用变成了一棵没有可读性的组件树。而那些可见的组件也很难在浏览器的 DOM 中进行跟踪。</p>
<h6 id="2-1-Render-Props"><a href="#2-1-Render-Props" class="headerlink" title="2.1 Render Props"></a>2.1 Render Props</h6><blockquote>
<p>什么是 Render Props？</p>
</blockquote>
<p>render props 模式是一种非常灵活复用性非常高的模式，它可以把特定行为或功能封装成一个组件，提供给其他组件使用让其他组件拥有这样的能力。他把组件可以动态渲染的地方暴露给外部，你不用再关注组件的内部实现，只要把数据通过函数传出去就好。</p>
<p><strong>使用场景：</strong></p>
<ul>
<li>通用业务逻辑的抽取</li>
<li>当两个平级组件之间需要单向依赖的时候，比如两个同级组件 A、B，A 组件需要跟随 B 组件的内部状态来改变自己的内部状态，我们就说 A 依赖 B；或者 B 依赖 A</li>
</ul>
<p>render props demo 参考:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    Mouse组件提供“可变数据源”：鼠标位置不断变化 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据源可变基础组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mouse</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleMouseMove</span> = <span class="variable language_">this</span>.<span class="property">handleMouseMove</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleMouseMove</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">x</span>: event.<span class="property">clientX</span>,</span><br><span class="line">      <span class="attr">y</span>: event.<span class="property">clientY</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">height:</span> &quot;<span class="attr">100</span>%&quot; &#125;&#125; <span class="attr">onMouseMove</span>=<span class="string">&#123;this.handleMouseMove&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          The current mouse position is (&#123;this.state.x&#125;, &#123;this.state.y&#125;)</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;this.props.render(this.state)&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// UI 组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> mouse = <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">mouse</span>;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">img</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">src</span>=<span class="string">&quot;https://dimg04.c-ctrip.com/images/300d0f0000007du6f6DC5_C_230_320.jpg&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">position:</span> &quot;<span class="attr">absolute</span>&quot;, <span class="attr">left:</span> <span class="attr">mouse.x</span>, <span class="attr">top:</span> <span class="attr">mouse.y</span> &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在通用的基础数据源组件里面使用UI组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">MouseTracker</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Move the mouse around!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Mouse</span> <span class="attr">render</span>=<span class="string">&#123;(mouse)</span> =&gt;</span> <span class="tag">&lt;<span class="name">Cat</span> <span class="attr">mouse</span>=<span class="string">&#123;mouse&#125;</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="2-2-Hoc"><a href="#2-2-Hoc" class="headerlink" title="2.2 Hoc"></a>2.2 Hoc</h6><p>hoc 的应用 demo:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 高阶组件的应用</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">preMountHoc</span> = doSomething =&gt; <span class="function"><span class="params">ContentComponent</span> =&gt;</span> <span class="keyword">class</span> <span class="title class_">PreMountComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">            <span class="attr">loading</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">result</span>: &#123;&#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> doList = <span class="title function_">get</span>(doSomething, <span class="string">&#x27;doList&#x27;</span>, []);</span><br><span class="line">        <span class="keyword">const</span> doListLength = <span class="title function_">get</span>(doList, <span class="string">&#x27;length&#x27;</span>) || <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">const</span> keyList = <span class="title function_">get</span>(doSomething, <span class="string">&#x27;keyList&#x27;</span>, []);</span><br><span class="line">        <span class="keyword">const</span> keyListLength = <span class="title function_">get</span>(keyList, <span class="string">&#x27;length&#x27;</span>) || <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (doListLength == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">loading</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Promise</span>.<span class="title function_">all</span>(doList).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> result = &#123;&#125;;</span><br><span class="line">            <span class="keyword">if</span> (doListLength == keyListLength) &#123;</span><br><span class="line">                keyList.<span class="title function_">forEach</span>(<span class="function">(<span class="params">el, index</span>) =&gt;</span> &#123;</span><br><span class="line">                    result[el] = res[index];</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                doList.<span class="title function_">forEach</span>(<span class="function">(<span class="params">el, index</span>) =&gt;</span> &#123;</span><br><span class="line">                    result[<span class="string">`pre_<span class="subst">$&#123;index&#125;</span>`</span>] = res[index];</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; result, <span class="attr">loading</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; loading, result &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">        <span class="keyword">if</span> (loading) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">BlockLoading</span> <span class="attr">loading</span> /&gt;</span></span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">ContentComponent</span> &#123;<span class="attr">...result</span>&#125; &#123;<span class="attr">...this.props</span>&#125; /&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> preMountHoc;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实际应用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ScrmList</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">preMountHoc</span>(&#123;</span><br><span class="line">    <span class="attr">doList</span>: [settingApi.<span class="title function_">getPower</span>(), settingApi.<span class="title function_">hasMemberThreshold</span>()],</span><br><span class="line">    <span class="attr">keyList</span>: [<span class="string">&#x27;memberStoreSetting&#x27;</span>, <span class="string">&#x27;scrmConditionType&#x27;</span>],</span><br><span class="line">&#125;)(<span class="title class_">ScrmList</span>)</span><br></pre></td></tr></table></figure>

<p>hoc 是 React 中用于重用组件逻辑的高级技术，它是一个函数，能够接受一个组件并返回一个新的组件。<br>实现高阶组件的两种方式：</p>
<ul>
<li>属性代理。高阶组件通过包裹的 React 组件来操作 props</li>
<li>反向继承。高阶组件继承于被包裹的 React 组件</li>
</ul>
<p><strong>2.2.1 属性代理</strong><br>a. 什么是属性代理<br>属性代理组件继承自 React.Component，通过传递给被包装的组件 props 得名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 属性代理，把高阶组件接收到的属性传递给传进来的组件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">HOC</span>(<span class="params">WrappedComponent</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">class</span> <span class="title class_">PP</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...this.props</span>&#125; /&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b. 属性代理的用途</p>
<ul>
<li>更改 props，可以对传递的包裹组件的 WrappedComponent 的 props 进行控制</li>
<li>通过 refs 获取组件实例</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">可以通过 ref 获取关键词 this（WrappedComponent 的实例）</span></span><br><span class="line"><span class="comment">当 WrappedComponent 被渲染后，ref 上的回调函数 proc 将会执行，此时就有了这个 WrappedComponent 的实例的引用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">refsHOC</span>(<span class="params">WrappedComponent</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">class</span> <span class="title class_">RefsHOC</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">proc</span>(<span class="params">wrappedComponentInstance</span>) &#123;</span><br><span class="line">      wrappedComponentInstance.<span class="title function_">method</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> props = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, <span class="variable language_">this</span>.<span class="property">props</span>, &#123;</span><br><span class="line">        <span class="attr">ref</span>: <span class="variable language_">this</span>.<span class="property">proc</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>),</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>把 WrappedComponent 与其它 elements 包装在一起</li>
</ul>
<p><strong>2.1.2 反向继承</strong><br>反向继承是继承自传递过来的组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">iiHOC</span>(<span class="params">WrappedComponent</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">class</span> <span class="title class_">Enhancer</span> <span class="keyword">extends</span> <span class="title class_ inherited__">WrappedComponent</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">render</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>反向继承允许高阶组件通过 this 关键词获取 WrappedComponent，意味着它可以获取到 state，props，组件生命周期（component lifecycle）钩子，以及渲染方法（render），所以我们主要用它来做渲染劫持，比如在渲染方法中读取或更改 React Elements tree，或者有条件的渲染等。<br><strong>2.1.3 高阶组件相关的面试题</strong></p>
<ol>
<li><p>这怎么在高阶组件里面访问组件实例<br>答案见上面</p>
</li>
<li><p>你的项目中怎么使用的高阶组件<br>a. 项目中经常存在在配置系统中配置开关&#x2F;全局常量，然后在页面需要请求配置来做控制，如果在每个需要调用全局设置的地方都去请求一下接口，就会有一种不优雅的感觉，这个时候我就想到利用高阶组件抽象一下。<br>b. 项目开发过程中，经常也会遇到需要对当前页面的一些事件的默认执行做阻止，我们也可以写一个高阶组件等。</p>
</li>
</ol>
<h5 id="3-hooks-和-hoc-和-render-props-有什么不同？"><a href="#3-hooks-和-hoc-和-render-props-有什么不同？" class="headerlink" title="3. hooks 和 hoc 和 render props 有什么不同？"></a>3. hooks 和 hoc 和 render props 有什么不同？</h5><p>它们之间最大的不同在于，后两者仅仅是一种开发模式，而自定义的 hooks 是 react 提供的 API 模式，它既能更加自然的融入到 react 的渲染过程也更加符合 react 的函数编程理念。</p>
<h5 id="4-介绍下常用的-hooks？"><a href="#4-介绍下常用的-hooks？" class="headerlink" title="4. 介绍下常用的 hooks？"></a>4. 介绍下常用的 hooks？</h5><ul>
<li>useState()，状态钩子。为函数组建提供内部状态</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 我们实现一个简易版的useState</span></span><br><span class="line"><span class="keyword">let</span> memoizedStates = []; <span class="comment">// 多个useState 时需要使用数组来存</span></span><br><span class="line"><span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useState</span>(<span class="params">initialState</span>) &#123;</span><br><span class="line">  memoizedStates[index] = memoizedStates[index] || initialState;</span><br><span class="line">  <span class="keyword">let</span> currentIndex = index;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">setState</span>(<span class="params">newState</span>) &#123;</span><br><span class="line">    memoizedStates[currentIndex] = newState;</span><br><span class="line">    <span class="title function_">render</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> [memoizedStates[index++], setState];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>useContext()，共享钩子。该钩子的作用是，在组件之间共享状态。 可以解决 react 逐层通过 Porps 传递数据，它接受 React.createContext()的返回结果作为参数，使用 useContext 将不再需要 Provider 和 Consumer。</li>
<li>useReducer()，Action 钩子。useReducer() 提供了状态管理，其基本原理是通过用户在页面中发起 action, 从而通过 reducer 方法来改变 state, 从而实现页面和状态的通信。使用很像 redux</li>
<li>useEffect()，副作用钩子。它接收两个参数， 第一个是进行的异步操作， 第二个是数组，用来给出 Effect 的依赖项</li>
<li>useRef()，获取组件的实例；渲染周期之间共享数据的存储(state 不能存储跨渲染周期的数据，因为 state 的保存会触发组件重渲染）.useRef 传入一个参数 initValue，并创建一个对象{ current: initValue }给函数组件使用，在整个生命周期中该对象保持不变。</li>
<li>useMemo 和 useCallback：可缓存函数的引用或值，useMemo 用在计算值的缓存，注意不用滥用。经常用在下面两种场景（要保持引用相等；对于组件内部用到的 object、array、函数等，如果用在了其他 Hook 的依赖数组中，或者作为 props 传递给了下游组件，应该使用 useMemo&#x2F;useCallback）</li>
<li>useLayoutEffect：会在所有的 DOM 变更之后同步调用 effect，可以使用它来读取 DOM 布局并同步触发重渲染</li>
</ul>
<h5 id="5-描述下-hooks-下怎么模拟生命周期函数，模拟的生命周期和-class-中的生命周期有什么区别吗？"><a href="#5-描述下-hooks-下怎么模拟生命周期函数，模拟的生命周期和-class-中的生命周期有什么区别吗？" class="headerlink" title="5. 描述下 hooks 下怎么模拟生命周期函数，模拟的生命周期和 class 中的生命周期有什么区别吗？"></a>5. 描述下 hooks 下怎么模拟生命周期函数，模拟的生命周期和 class 中的生命周期有什么区别吗？</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// componentDidMount，必须加[],不然会默认每次渲染都执行</span></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;&#125;, []);</span><br><span class="line"></span><br><span class="line"><span class="comment">// componentDidUpdate</span></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">`You clicked <span class="subst">$&#123;count&#125;</span> times`</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 以及 componentWillUnmount 执行的内容</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;, [count]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  shouldComponentUpdate, 只有 Parent 组件中的 count state 更新了，Child 才会重新渲染，否则不会。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> child = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Child</span> <span class="attr">count</span>=<span class="string">&#123;count&#125;</span> /&gt;</span></span>, [count]);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span>&#123;count&#125;<span class="tag">&lt;/&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Count:&#123;props.count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里有一个点需要注意，就是默认的 useEffect（不带[]）中 return 的清理函数，它和 componentWillUnmount 有本质区别的，默认情况下 return，在每次 useEffect 执行前都会执行，并不是只有组件卸载的时候执行。<br>useEffect 在副作用结束之后，会延迟一段时间执行，并非同步执行，和 compontDidMount 有本质区别。遇到 dom 操作，最好使用 useLayoutEffect。</p>
<h5 id="6-hooks-中的坑，以及为什么？"><a href="#6-hooks-中的坑，以及为什么？" class="headerlink" title="6. hooks 中的坑，以及为什么？"></a>6. hooks 中的坑，以及为什么？</h5><ul>
<li>不要在循环，条件或嵌套函数中调用 Hook，必须始终在 React 函数的顶层使用 Hook。这是因为 React 需要利用调用顺序来正确更新相应的状态，以及调用相应的钩子函数。一旦在循环或条件分支语句中调用 Hook，就容易导致调用顺序的不一致性，从而产生难以预料到的后果。<br><a href="https://codepen.io/kellywang/pen/GRjvbEQ">useState 实现原理</a></li>
<li>使用 useState 时候，使用 push，pop，splice 等直接更改数组对象的坑，demo 中使用 push 直接更改数组无法获取到新值，应该采用析构方式，但是在 class 里面不会有这个问题。(这个的原因是 push，pop，splice 是直接修改原数组，react 会认为 state 并没有发生变化，无法更新)<br>这里的坑很多的，经常出现的就是每次修改数组的时候：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [firstData, setFirstData]: any = <span class="title function_">useState</span>([]);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleFirstAdd</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// let temp = firstData // 不要这么写，直接修改原数组相当于没有更新</span></span><br><span class="line">  <span class="keyword">let</span> temp = [...firstData]; <span class="comment">// 必须这么写，多层数组也要这么写</span></span><br><span class="line">  temp.<span class="title function_">push</span>(&#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="title function_">setFirstData</span>(temp);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Indicatorfilter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> [num, setNums] = <span class="title function_">useState</span>([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">test</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 这里坑是直接采用push去更新num，setNums(num)是无法更新num的，必须使用num = [...num ,1]</span></span><br><span class="line">    num.<span class="title function_">push</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// num = [...num ,1]</span></span><br><span class="line">    <span class="title function_">setNums</span>(num);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;filter&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;test&#125;</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;num.map((item, index) =&gt; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        ))&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Indicatorfilter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&lt;any, any&gt; &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props: any</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">nums</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">test</span> = <span class="variable language_">this</span>.<span class="property">test</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// class采用同样的方式是没有问题的</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">nums</span>.<span class="title function_">push</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">nums</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">nums</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; nums &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;this.test&#125;</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;nums.map((item: any, index: number) =&gt; (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          ))&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>useState 设置状态的时候，只有第一次生效，后期需要更新状态，必须通过 useEffect</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TableDeail是一个公共组件，在调用它的父组件里面，我们通过set改变columns的值，以为传递给TableDeail的columns是最新的值，所以tabColumn每次也是最新的值，但是实际tabColumn是最开始的值，不会随着columns的更新而更新</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">TableDeail</span> = (<span class="params">&#123; columns &#125;: TableData</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [tabColumn, setTabColumn] = <span class="title function_">useState</span>(columns);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确的做法是通过useEffect改变这个值</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">TableDeail</span> = (<span class="params">&#123; columns &#125;: TableData</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [tabColumn, setTabColumn] = <span class="title function_">useState</span>(columns);</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setTabColumn</span>(columns);</span><br><span class="line">  &#125;, [columns]);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>必包带来的坑，参考 demo 里面的 state 变量<br>因为每次 render 都有一份新的状态，因此上述代码中的 setTimeout 使用产生了一个闭包，捕获了每次 render 后的 state，也就导致了输出了 0、1、2。如果你希望输出的内容是最新的 state 的话，可以通过 useRef 来保存 state。前文讲过 ref 在组件中只存在一份，无论何时使用它的引用都不会产生变化，因此可以来解决闭包引发的问题。</li>
<li>滥用 useContent</li>
</ul>
<h5 id="7-useState-中的第二个参数更新状态和-class-中的-this-setState-区别？"><a href="#7-useState-中的第二个参数更新状态和-class-中的-this-setState-区别？" class="headerlink" title="7. useState 中的第二个参数更新状态和 class 中的 this.setState 区别？"></a>7. useState 中的第二个参数更新状态和 class 中的 this.setState 区别？</h5><h5 id="8-useEffect-和-useLayoutEffect-区别？"><a href="#8-useEffect-和-useLayoutEffect-区别？" class="headerlink" title="8. useEffect 和 useLayoutEffect 区别？"></a>8. useEffect 和 useLayoutEffect 区别？</h5><p>useEffect 是 render 结束后，callback 函数执行，但是不会阻断浏览器的渲染，算是某种异步的方式吧。但是 class 的 componentDidMount 和 componentDidUpdate 是同步的,在 render 结束后就运行,useEffect 在大部分场景下都比 class 的方式性能更好.</p>
<p>useLayoutEffect 里面的 callback 函数会在 DOM 更新完成后立即执行,但是会在浏览器进行任何绘制之前运行完成,阻塞了浏览器的绘制.</p>
<h5 id="9-使用-hooks-实现一个计时器？（demo）"><a href="#9-使用-hooks-实现一个计时器？（demo）" class="headerlink" title="9. 使用 hooks 实现一个计时器？（demo）"></a>9. 使用 hooks 实现一个计时器？（demo）</h5><p>计时器 demo:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useState, useRef, useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误的写法</span></span><br><span class="line"><span class="comment">// const CountTimer = () =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     let [count, setCount] = useState(0)</span></span><br><span class="line"><span class="comment">//     let CountTimer</span></span><br><span class="line"><span class="comment">//     useEffect(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//         setInterval(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//             setCount(count+1)</span></span><br><span class="line"><span class="comment">//         &#125;)</span></span><br><span class="line"><span class="comment">//         return () =&gt; window.clearInterval(CountTimer)</span></span><br><span class="line"><span class="comment">//     &#125;, [count])</span></span><br><span class="line"><span class="comment">//     return (</span></span><br><span class="line"><span class="comment">//         &lt;React.Fragment&gt;</span></span><br><span class="line"><span class="comment">//             &lt;div&gt; &#123;count&#125; &lt;/div&gt;</span></span><br><span class="line"><span class="comment">//         &lt;/React.Fragment&gt;</span></span><br><span class="line"><span class="comment">//     )</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//正确的写法</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">CountTimer</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">let</span> intervalCb = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">let</span> <span class="title class_">CountTimer</span>;</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    intervalCb.<span class="property">current</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setCount</span>(count + <span class="number">1</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, [count]);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">itvFn</span>(<span class="params"></span>) &#123;</span><br><span class="line">      intervalCb.<span class="title function_">current</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">CountTimer</span> = <span class="variable language_">window</span>.<span class="built_in">setInterval</span>(itvFn, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="variable language_">window</span>.<span class="built_in">clearInterval</span>(<span class="title class_">CountTimer</span>);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleStop</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="built_in">clearInterval</span>(<span class="title class_">CountTimer</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">React.Fragment</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          handleStop();</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        停止计时</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">React.Fragment</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">CountTimer</span>;</span><br></pre></td></tr></table></figure>

<p>注意第一个计时器错误的写法，在 useEffect 里面重复定义 setInterval，正确写法是 setInterval 只定义一次，它的回调函数保存状态的更新，重点是把 count 更新和 setInterval 定义分开。</p>
<h5 id="10-使用-hooks-实现自定义-hooks-一个计算组件从挂载到卸载的时间？（demo，hooks-抽取公共逻辑的应用）"><a href="#10-使用-hooks-实现自定义-hooks-一个计算组件从挂载到卸载的时间？（demo，hooks-抽取公共逻辑的应用）" class="headerlink" title="10. 使用 hooks 实现自定义 hooks, 一个计算组件从挂载到卸载的时间？（demo，hooks 抽取公共逻辑的应用）"></a>10. 使用 hooks 实现自定义 hooks, 一个计算组件从挂载到卸载的时间？（demo，hooks 抽取公共逻辑的应用）</h5><p>转载文档：<br><a href="https://blog.csdn.net/kellywong/article/details/106430977">https://blog.csdn.net/kellywong/article/details/106430977</a></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>组件化</tag>
        <tag>React</tag>
        <tag>react-hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试专题 —— React Hooks 完全解析（视频：troj-木牛木马）</title>
    <url>/2022/04/03/React/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%B8%93%E9%A2%98-%E2%80%94%E2%80%94-React-Hooks-%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%90%EF%BC%88%E8%A7%86%E9%A2%91%EF%BC%9Atroj-%E6%9C%A8%E7%89%9B%E6%9C%A8%E9%A9%AC%EF%BC%89/</url>
    <content><![CDATA[<h3 id="1-useState"><a href="#1-useState" class="headerlink" title="1.useState"></a>1.useState</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [count1, setCount1] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;render&quot;</span>); <span class="comment">// 只会打印一次</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;count1&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          setCount((x) =&gt; x + 1);</span></span><br><span class="line"><span class="language-xml">          setCount1((x) =&gt; x + 1);</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="2-useEffect"><a href="#2-useEffect" class="headerlink" title="2.useEffect"></a>2.useEffect</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 此处的setTimeout在useEffect中,相当于是setInterval;</span></span><br><span class="line">  <span class="comment">// 并且此处的useEffect会执行6次,因为最后1次为6的时候,也会视为依赖5的变化</span></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> I = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setCount</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> x + <span class="number">1</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(I);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, [<span class="title class_">Math</span>.<span class="title function_">min</span>(count, <span class="number">5</span>)]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="3-lifeCycle-迁移"><a href="#3-lifeCycle-迁移" class="headerlink" title="3.lifeCycle 迁移"></a>3.lifeCycle 迁移</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Input</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`value changed:<span class="subst">$&#123;props.value&#125;</span>`</span>);</span><br><span class="line">  &#125;, [props.<span class="property">value</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> /&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (props) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [value, setValue] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;component did mount&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;component will unmount&quot;</span>); <span class="comment">// 切换页面销毁执行</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Input</span> <span class="attr">value</span>=<span class="string">&#123;value&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setValue((x) =&gt; Math.random())&#125;&gt;Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="4-useRef-useImperitiveHandle"><a href="#4-useRef-useImperitiveHandle" class="headerlink" title="4.useRef&#x2F;useImperitiveHandle"></a>4.useRef&#x2F;useImperitiveHandle</h3><p>如下方式违反了设计原则:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;</span><br><span class="line">  useEffect,</span><br><span class="line">  useRef,</span><br><span class="line">  forwardRef,</span><br><span class="line">  useImperativeHandle,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Input</span> = (<span class="params">props, ref</span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    ref.<span class="property">current</span>.<span class="property">value</span> = props.<span class="property">initialValue</span>;</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> props.onChange(e.target.value)&#125; /&gt;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MInput</span> = <span class="title function_">forwardRef</span>(<span class="title class_">Input</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (props) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 违法面向对象封装原则</span></span><br><span class="line">  <span class="keyword">const</span> r1 = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> r2 = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">MInput</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">ref</span>=<span class="string">&#123;r1&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">initialValue</span>=<span class="string">&#123;100&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChange</span>=<span class="string">&#123;(x)</span> =&gt;</span> console.log(&quot;1:&quot; + x)&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">MInput</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">ref</span>=<span class="string">&#123;r2&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">initialValue</span>=<span class="string">&#123;</span>&quot;<span class="attr">hello</span>&quot;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChange</span>=<span class="string">&#123;(x)</span> =&gt;</span> console.log(&quot;2:&quot; + x)&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          console.log(r1); // 这里的r1是button</span></span><br><span class="line"><span class="language-xml">          r1.current.focus();</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        focus 1</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span>&#123;&quot; &quot;&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          r2.current.focus();</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        focus 2</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>推荐使用:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;</span><br><span class="line">  useEffect,</span><br><span class="line">  useRef,</span><br><span class="line">  forwardRef,</span><br><span class="line">  useImperativeHandle,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Input</span> = (<span class="params">props, ref</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> refInput = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useImperativeHandle</span>(</span><br><span class="line">    ref,</span><br><span class="line">    <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">      <span class="attr">focus</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        refInput.<span class="property">current</span>.<span class="title function_">focus</span>();</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">    []</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    refInput.<span class="property">current</span>.<span class="property">value</span> = props.<span class="property">initialValue</span>;</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;refInput&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> props.onChange(e.target.value)&#125; /&gt;</span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MInput</span> = <span class="title function_">forwardRef</span>(<span class="title class_">Input</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (props) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> r1 = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> r2 = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">MInput</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">ref</span>=<span class="string">&#123;r1&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">initialValue</span>=<span class="string">&#123;100&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChange</span>=<span class="string">&#123;(x)</span> =&gt;</span> console.log(&quot;1:&quot; + x)&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">MInput</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">ref</span>=<span class="string">&#123;r2&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">initialValue</span>=<span class="string">&#123;</span>&quot;<span class="attr">hello</span>&quot;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChange</span>=<span class="string">&#123;(x)</span> =&gt;</span> console.log(&quot;2:&quot; + x)&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          console.log(r1); // 这里的r1就只是子组件封装的一个focus方法</span></span><br><span class="line"><span class="language-xml">          r1.current.focus();</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        focus 1</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          r2.current.focus();</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        focus 2</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="5-useContext"><a href="#5-useContext" class="headerlink" title="5.useContext"></a>5.useContext</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ctx = <span class="title class_">React</span>.<span class="title function_">createContext</span>(<span class="literal">null</span>);</span><br><span class="line"><span class="comment">// ctx.Provider</span></span><br><span class="line"><span class="comment">// ctx.Consumer</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Provider</span> &#125; = ctx;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 孙组件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Desendants</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> value = <span class="title function_">useContext</span>(ctx);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;value&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Child</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Desendants</span> /&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Parent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">value</span>=<span class="string">&quot;hello world&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Child</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Parent</span>;</span><br></pre></td></tr></table></figure>

<h3 id="5-misorder-问题"><a href="#5-misorder-问题" class="headerlink" title="5.misorder 问题"></a>5.misorder 问题</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Greetings</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [display, setDisplay] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 不要使用下面的写法1:</span></span><br><span class="line">  <span class="comment">// 错误:递归</span></span><br><span class="line">  <span class="keyword">if</span> (count &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="title function_">setDisplay</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> <span class="literal">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 不要使用下面的写法2:</span></span><br><span class="line">  <span class="comment">// render more hooks than previous render</span></span><br><span class="line">  <span class="keyword">if</span> (count &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setDisplay</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> <span class="literal">true</span>);</span><br><span class="line">    &#125;, []);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setDisplay</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> <span class="literal">false</span>);</span><br><span class="line">    &#125;, []);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 建议使用下面的写法:</span></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setDisplay</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> <span class="literal">false</span>);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount((x) =&gt; x + 1)&#125;&gt;+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;display &amp;&amp; <span class="tag">&lt;<span class="name">Greetings</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="6-useLayoutEffect"><a href="#6-useLayoutEffect" class="headerlink" title="6.useLayoutEffect"></a>6.useLayoutEffect</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useEffect, useLayoutEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`effect:`</span> + <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>());</span><br><span class="line">  &#125;, [count]);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useLayoutEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`layout:`</span> + <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>());</span><br><span class="line">  &#125;, [count]);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> I = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setCount</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> x + <span class="number">1</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(I);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="7-useDebug"><a href="#7-useDebug" class="headerlink" title="7.useDebug"></a>7.useDebug</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useDebugValue, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [isOnline, setIsOnline] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="title function_">useDebugValue</span>(isOnline ? <span class="string">&quot;Online&quot;</span> : <span class="string">&quot;Offline&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="8-要不要使用-useMemo-和-useCallback"><a href="#8-要不要使用-useMemo-和-useCallback" class="headerlink" title="8.要不要使用 useMemo 和 useCallback?"></a>8.要不要使用 useMemo 和 useCallback?</h3><h5 id="「视频代码参考-https-www-bilibili-com-video-BV1gf4y1X7bQ」"><a href="#「视频代码参考-https-www-bilibili-com-video-BV1gf4y1X7bQ」" class="headerlink" title="「视频代码参考:https://www.bilibili.com/video/BV1gf4y1X7bQ」"></a>「视频代码参考:<a href="https://www.bilibili.com/video/BV1gf4y1X7bQ%E3%80%8D">https://www.bilibili.com/video/BV1gf4y1X7bQ」</a></h5><ul>
<li><p>哪些情况一个组件会重新渲染?</p>
<ul>
<li>1.组件自己的 state 变化</li>
<li>2.父组件传递过来的 props 变化</li>
<li>3.父组件重新渲染了</li>
</ul>
</li>
<li><p>useMemo 使用场景</p>
<ul>
<li>1.如果一些值的计算量很大,那么可以用 useMemo 来做一个缓存,只有依赖变化时才会重新计算,而不是每次渲染时都进行计算</li>
</ul>
</li>
<li><p>useCallback 使用场景</p>
<ul>
<li>1.对于需要传递函数给子组件的场合,不使用 useCallback 的话,子组件每次都会重新渲染;</li>
<li>2.在调用节流、防抖函数时.</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在调用节流、防抖函数时使用useCallback</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useCallback &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Input</span> &#125; <span class="keyword">from</span> <span class="string">&quot;antd&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&quot;lodash&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [name, setName] = <span class="title function_">useState</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">search</span> = (<span class="params">value</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`模拟search操作：<span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> debounchSearch = <span class="title function_">useCallback</span>(_.<span class="title function_">debounce</span>(search, <span class="number">300</span>), []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">onChange</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; value &#125; = e.<span class="property">target</span>;</span><br><span class="line">    <span class="title function_">setName</span>(value);</span><br><span class="line">    <span class="title function_">debounchSearch</span>(value);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;styles.wrapper&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Input</span> <span class="attr">value</span>=<span class="string">&#123;name&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;onChange&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>个人观点:<ul>
<li>在出现性能问题后,进行优化时可以考虑使用 useMemo 和 useCallback 对性能进行一定对优化;</li>
<li>如果没有性能问题可以不用,这样可以更专注于代码本身逻辑.</li>
</ul>
</li>
</ul>
<p>父组件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useCallback &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="title class_">Count</span> <span class="keyword">from</span> <span class="string">&quot;./components/Count&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [score, setScore] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useSatet</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;parent render&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于需要传递函数给子组件的场合,不使用 useCallback 的话,子组件每次都会重新渲染</span></span><br><span class="line">  <span class="keyword">const</span> onClickCount = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;&#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;styles.wrapper&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(score + 1)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        parent score+1</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>score:&#123;score<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>setCount(count+1)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        child count+1</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Count</span> <span class="attr">value</span>=<span class="string">&#123;count&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;onClickCount&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>子组件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useMemo &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Card</span> &#125; <span class="keyword">from</span> <span class="string">&quot;antd&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">React</span>.<span class="title function_">memo</span>(<span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; value &#125; = props;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 一些值的计算量很大,那么可以用 useMemo 来做一个缓存</span></span><br><span class="line">  <span class="keyword">const</span> xxx = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value * <span class="number">10</span>;</span><br><span class="line">  &#125;, [value]);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;child render&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Card</span>&gt;</span>count:&#123;value&#125; (这里是子组件)<span class="tag">&lt;/<span class="name">Card</span>&gt;</span></span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="9-useReducer"><a href="#9-useReducer" class="headerlink" title="9.useReducer"></a>9.useReducer</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useReducer &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> initialState = &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reducer</span>(<span class="params">state, action</span>) &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;increment&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;decrement&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.<span class="property">count</span> - <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = <span class="title function_">useReducer</span>(reducer, initialState);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      Count: &#123;state.count&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;decrement&quot; &#125;)&#125;&gt;-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;increment&quot; &#125;)&#125;&gt;+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Counter</span>;</span><br></pre></td></tr></table></figure>

<h3 id="异步请求改造"><a href="#异步请求改造" class="headerlink" title="异步请求改造:"></a>异步请求改造:</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useReducer &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> initialState = &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reducer</span>(<span class="params">state, action</span>) &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;increment&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;decrement&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.<span class="property">count</span> - <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装了一个middleWare</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useMyReducer</span>(<span class="params">reducer, initialState</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = <span class="title function_">useReducer</span>(reducer, initialState);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">myDispatch</span>(<span class="params">action</span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">      <span class="comment">// 举例,这里可以做异步请求</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;url&quot;</span>:</span><br><span class="line">        <span class="title function_">fetch</span>(<span class="string">&quot;https://xxx&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">dispatch</span>(&#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">            data,</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> [state, myDispatch];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = <span class="title function_">useMyReducer</span>(reducer, initialState);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      Count: &#123;state.count&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;decrement&quot; &#125;)&#125;&gt;-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;increment&quot; &#125;)&#125;&gt;+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Counter</span>;</span><br></pre></td></tr></table></figure>

<h3 id="10-react-hoc"><a href="#10-react-hoc" class="headerlink" title="10.react hoc"></a>10.react hoc</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; request &#125; <span class="keyword">from</span> <span class="string">&quot;https&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">withUsers</span> = (<span class="params">Target</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Proxy</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">super</span>();</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">        <span class="attr">users</span>: <span class="literal">null</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">ComponentDidMount</span>() &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">          <span class="attr">users</span>: [<span class="string">&quot;小明&quot;</span>, <span class="string">&quot;小张&quot;</span>],</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; users &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Target</span> <span class="attr">user</span>=<span class="string">&#123;users&#125;</span> /&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Proxy</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useRequest</span> = (<span class="params">url, params</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [data, setData] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">request</span>(url, params).<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setData</span>(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;),</span><br><span class="line">    [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">reload</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">setData</span>(<span class="literal">null</span>);</span><br><span class="line">    <span class="title function_">request</span>(url, params).<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setData</span>(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> [data, reload];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">withUsers</span>(<span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// const &#123;users&#125; = props;</span></span><br><span class="line">  <span class="keyword">const</span> [users, reload] = <span class="title function_">useRequest</span>(<span class="string">&quot;https:..get-users&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">num</span>: <span class="number">210</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (users === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;users.map((x, i) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">        return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;i&#125;</span>&gt;</span>&#123;x&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>;</span></span><br><span class="line"><span class="language-xml">      &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;reload&#125;</span>&gt;</span>重新加载<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="react-hoc-animation-实现"><a href="#react-hoc-animation-实现" class="headerlink" title="react-hoc animation 实现:"></a>react-hoc animation 实现:</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./animation.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useAnimation</span>(<span class="params">_clsName, duration = <span class="number">300</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [phase, setPhase] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [className, setClassName] = <span class="title function_">useState</span>(_clsName);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">play</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">setPhase</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (phase === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="title function_">setClassName</span>(_clsName + <span class="string">&quot; &quot;</span> + className + <span class="string">&quot;-start&quot;</span>);</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">setClassName</span>(_clsName + <span class="string">&quot; &quot;</span> + className + <span class="string">&quot;-end&quot;</span>);</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">setClassName</span>(_clsName);</span><br><span class="line">          <span class="title function_">setPhase</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;, duration);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [phase]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> [className, play];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [className, playAnimation] = <span class="title function_">useAnimation</span>(<span class="string">&quot;box&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;className&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;playAnimation&#125;</span>&gt;</span>play<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box-start</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">transition</span>: margin-left <span class="number">0.3s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box-end</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/source/_posts/img/react-hooks.png" alt="React-hooks"></p>
<p>参考视频：<br><a href="https://www.bilibili.com/video/BV1cE411i7F1">https://www.bilibili.com/video/BV1cE411i7F1</a></p>
<p>github 源码地址:<br><a href="https://github.com/kyjm/react-hooks-example/">https://github.com/kyjm/react-hooks-example/</a></p>
<p>要不要使用 useMemo 和 useCallback：<br><a href="https://www.bilibili.com/video/BV1gf4y1X7bQ">https://www.bilibili.com/video/BV1gf4y1X7bQ</a></p>
]]></content>
  </entry>
  <entry>
    <title>微信小程序</title>
    <url>/2019/04/06/%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h1><p>全局安装 vue-cli<br><code>npm install --global vue-cli</code></p>
<p>创建一个基于 mpvue-quickstart 模板的新项目<br><code>$ vue init mpvue/mpvue-quickstart my-project</code></p>
<p>安装依赖<br><code>cd my-project</code><br><code>npm install</code></p>
<p>启动构建<br><code>npm run dev</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="comment">//github.com/Akryum/vue-virtual-scroller //vue虚拟加载</span></span><br><span class="line"><span class="attr">https</span>:<span class="comment">//github.com/bvaughn/react-virtualized // react虚拟加载</span></span><br><span class="line"><span class="attr">https</span>:<span class="comment">//webpack.js.org/guides/code-splitting/ webpack配置</span></span><br><span class="line"><span class="attr">https</span>:<span class="comment">//juejin.im/post/59eee969f265da430e4e5853 //微信小程序axios简书</span></span><br><span class="line"><span class="attr">https</span>:<span class="comment">//github.com/wendux/fly //github微信小程序请求插件</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>微信公众平台：<a href="https://mp.weixin.qq.com/">https://mp.weixin.qq.com</a></p>
<ul>
<li><p>没有注册 腾讯 任何的服务的空邮箱</p>
<p>具有交易记录且正常使用的微信账号</p>
</li>
<li><p>前后端分离开发时</p>
<ul>
<li>前端开发</li>
<li>后端开发<ul>
<li>前后端数据联调</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="1、设计模式"><a href="#1、设计模式" class="headerlink" title="1、设计模式"></a>1、设计模式</h2><h3 id="1-1、SPA（页面设计思想）"><a href="#1-1、SPA（页面设计思想）" class="headerlink" title="1.1、SPA（页面设计思想）"></a>1.1、SPA（页面设计思想）</h3><ul>
<li><p>单页面 Web 应用（single page web application，SPA）</p>
<ul>
<li>所谓的单页面应用程序，实际上是指，用户通过浏览器访问一个网站的时候，网站中的内容切换，不会产生新的页面。</li>
<li>在开发时，用户可访问的页面只有一个（主体页面），开发时为了适应开发者习惯，引入了一种新的开发模式，页面模板</li>
</ul>
</li>
<li><p>MVVM 框架</p>
<ul>
<li>model view view-model：模型视图视图模型</li>
<li>实际上省略开发时对于页面 DOM 的操作，但是可以实现页面数据变化 内存数据也变化，内层数据变换页面数据也变换的功能</li>
</ul>
</li>
</ul>
<h2 id="2、微信小程序构成"><a href="#2、微信小程序构成" class="headerlink" title="2、微信小程序构成"></a>2、微信小程序构成</h2><h3 id="2-1、文件构成"><a href="#2-1、文件构成" class="headerlink" title="2.1、文件构成"></a>2.1、文件构成</h3><ul>
<li><p>js 文件：为微信小程序添加页面功能（必须）</p>
</li>
<li><p>json 文件：为微信小程序添加初始设置项（app 页面必须）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> loadData（）&#123;</span><br><span class="line">  <span class="comment">//设置参数</span></span><br><span class="line">  <span class="keyword">var</span> option =&#123;</span><br><span class="line">        <span class="attr">url</span>:<span class="string">&#x27;xxx,</span></span><br><span class="line"><span class="string">        .......</span></span><br><span class="line"><span class="string">  &#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  //实际上就是方法</span></span><br><span class="line"><span class="string">  $.ajax(option);</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>wxml 文件：微信标记语言（符合微信规范的标记语言）（必须）</p>
<ul>
<li>html：超文本标记语言（符合 w3c 规范标签）</li>
</ul>
</li>
<li><p>wxss 文件：微信样式表（可以被微信识别的 css 样式）</p>
<ul>
<li>在微信中 有些样式不一定是 HTML 和 CSS 默认显示效果</li>
<li>css：层叠样式表</li>
</ul>
</li>
</ul>
<h3 id="2-2、程序结构构成"><a href="#2-2、程序结构构成" class="headerlink" title="2.2、程序结构构成"></a>2.2、程序结构构成</h3><h3 id="2-3、小程序的技术块"><a href="#2-3、小程序的技术块" class="headerlink" title="2.3、小程序的技术块"></a>2.3、小程序的技术块</h3><ul>
<li><p><strong>框架：用于解释说明，程序运行时的一些基础构成</strong></p>
<p>小程序开发框架的目标是通过尽可能简单、高效的方式让开发者可以在微信中开发具有原生 APP 体验的服务。</p>
<p>框架提供了自己的视图层描述语言 <code>WXML</code> 和 <code>WXSS</code>，以及基于 <code>JavaScript</code> 的逻辑层框架，并在视图层与逻辑层间提供了数据传输和事件系统，让开发者能够专注于数据与逻辑。</p>
<p>框架的核心是一个响应的数据绑定系统。</p>
<p>整个小程序框架系统分为两部分：视图层（View）和逻辑层（App Service）</p>
<p>框架可以让数据与视图非常简单地保持同步。当做数据修改的时候，只需要在逻辑层修改数据，视图层就会做相应的更新。</p>
</li>
<li><p><strong>组件</strong>：对应 wxml，微信定义在程序中可以使用的内置标签</p>
<ul>
<li>view：相当于 HTML 布局标签 div</li>
<li>text：相当于 HTML 布局标签 span</li>
</ul>
</li>
<li><p><strong>API</strong>：对应微信提供一些功能</p>
</li>
</ul>
<h2 id="3、APP-的构成"><a href="#3、APP-的构成" class="headerlink" title="3、APP 的构成"></a>3、APP 的构成</h2><ul>
<li>在微信一个页面应用 .js , .json, .wxml, [.wxss]</li>
<li>在微信项目中 app.wxml（容器）文件是真实存在的 （不对开发者开放，用户访问小程序直接访问该页面）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;page&gt;</span><br><span class="line"></span><br><span class="line">&lt;/page&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-1、app-json"><a href="#3-1、app-json" class="headerlink" title="3.1、app.json"></a>3.1、app.json</h3><ul>
<li>app.json 文件会引导小程序的启动，定义了<strong>模板页面的路径，导航窗口的表现形式</strong></li>
<li><strong>该文件的默认结构</strong></li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>app.json 的配置项</li>
</ul>
<table>
<thead>
<tr>
<th>属性</th>
<th>类型</th>
<th>必填</th>
<th>描述</th>
<th>最低版本</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#pages">pages</a></td>
<td>String Array</td>
<td>是</td>
<td>页面路径列表（<strong>定义小程序可用的模板文件</strong>）</td>
<td></td>
</tr>
<tr>
<td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#window">window</a></td>
<td>Object</td>
<td>否</td>
<td>全局的默认窗口表现（<strong>定义头部导航的显示效果</strong>）</td>
<td></td>
</tr>
<tr>
<td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#tabbar">tabBar</a></td>
<td>Object</td>
<td>否</td>
<td>底部 <code>tab</code> 栏的表现</td>
<td></td>
</tr>
<tr>
<td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#networktimeout">networkTimeout</a></td>
<td>Object</td>
<td>否</td>
<td>网络超时时间</td>
<td></td>
</tr>
<tr>
<td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#debug">debug</a></td>
<td>Boolean</td>
<td>否</td>
<td>是否开启 debug 模式，默认关闭</td>
<td></td>
</tr>
<tr>
<td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#functionalpages">functionalPages</a></td>
<td>Boolean</td>
<td>否</td>
<td>是否启用插件功能页，默认关闭</td>
<td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.1.0</a></td>
</tr>
<tr>
<td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#subpackages">subpackages</a></td>
<td>Object Array</td>
<td>否</td>
<td>分包结构配置</td>
<td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.7.3</a></td>
</tr>
<tr>
<td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#workers">workers</a></td>
<td>String</td>
<td>否</td>
<td><a href="https://developers.weixin.qq.com/miniprogram/dev/api/Worker.html"><code>Worker</code></a> 代码放置的目录</td>
<td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.90</a></td>
</tr>
<tr>
<td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#requiredbackgroundmodes">requiredBackgroundModes</a></td>
<td>String Array</td>
<td>否</td>
<td>需要在后台使用的能力，如「音乐播放」</td>
<td></td>
</tr>
<tr>
<td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#plugins">plugins</a></td>
<td>Object</td>
<td>否</td>
<td>使用到的插件</td>
<td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.6</a></td>
</tr>
<tr>
<td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#preloadrule">preloadRule</a></td>
<td>Object</td>
<td>否</td>
<td>分包预下载规则</td>
<td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.3.0</a></td>
</tr>
<tr>
<td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#resizable">resizable</a></td>
<td>Boolean</td>
<td>否</td>
<td>iPad 小程序是否支持屏幕旋转，默认关闭</td>
<td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.3.0</a></td>
</tr>
<tr>
<td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#navigatetominiprogramappidlist">navigateToMiniProgramAppIdList</a></td>
<td>String Array</td>
<td>否</td>
<td>需要跳转的小程序列表，详见 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/wx.navigateToMiniProgram.html">wx.navigateToMiniProgram</a></td>
<td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.4.0</a></td>
</tr>
<tr>
<td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#usingcomponents">usingComponents</a></td>
<td>Object</td>
<td>否</td>
<td>全局<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/index.html">自定义组件</a>配置</td>
<td>开发者工具 1.02.1810190</td>
</tr>
<tr>
<td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#permission">permission</a></td>
<td>Object</td>
<td>否</td>
<td>小程序接口权限相关设置</td>
<td>微信客户端 7.0.0</td>
</tr>
</tbody></table>
<h3 id="3-2、app-wxss-文件"><a href="#3-2、app-wxss-文件" class="headerlink" title="3.2、app.wxss 文件"></a>3.2、app.wxss 文件</h3><ul>
<li>全局样式表：会被所有模板页面进行继承（模板页面中也会生效）</li>
</ul>
<h3 id="3-3、app-js-文件"><a href="#3-3、app-js-文件" class="headerlink" title="3.3、app.js 文件"></a>3.3、app.js 文件</h3><ul>
<li>多模板页数据共享</li>
</ul>
<h2 id="4、Page-的构成"><a href="#4、Page-的构成" class="headerlink" title="4、Page 的构成"></a>4、Page 的构成</h2><h3 id="4-1、page-json"><a href="#4-1、page-json" class="headerlink" title="4.1、page.json"></a>4.1、page.json</h3><ul>
<li><p>单独对一个模板页面的展示进行设置</p>
<ul>
<li>page.json 文件只能<strong>设置 app.json 文件中的 window 所包含的属性&#x3D;&#x3D;&gt;这些属性作为一级属性存在</strong></li>
<li>page.json 文件中设置的属性<strong>优先级高于 app.json 中 window 优先级&#x3D;&#x3D;&gt;page.json 设置的属性会覆盖 app.json 的设置</strong></li>
<li>page.json 文件在配置项上，删除了<strong>navigationStyle</strong>，增加了<strong>disableScroll</strong></li>
</ul>
</li>
<li><p>disableScroll 属性的作用&#x3D;&#x3D;&gt;overflow:hidden; (禁止模板页的上下滚动)</p>
</li>
</ul>
<h3 id="4-2、page-wxml"><a href="#4-2、page-wxml" class="headerlink" title="4.2、page.wxml"></a>4.2、page.wxml</h3><ul>
<li>功能和 HTML 文件一样</li>
<li>只能使用微信提供的标签</li>
</ul>
<h3 id="4-3、page-wxss"><a href="#4-3、page-wxss" class="headerlink" title="4.3、page.wxss"></a>4.3、page.wxss</h3><ul>
<li>局部样式表：只对当前页面生效</li>
<li>功能和 css 文件一样（css 选择器和样式属性）</li>
<li>部分 css 属性和选择器在 wxss 中不起作用</li>
<li>（<strong>微信的自定义单位</strong>）rpx（responsive pixel）: 可以根据屏幕宽度进行自适应。规定屏幕宽为 750rpx。如在 iPhone6 上，屏幕宽度为 375px，共有 750 个物理像素，则 750rpx &#x3D; 375px &#x3D; 750 物理像素，1rpx &#x3D; 0.5px &#x3D; 1 物理像素。<ul>
<li>在 wxss 中使用 background：url（只接受网络路径），<strong>本地图片路径无法生效&#x3D;&#x3D;&gt;使用图片的 base64 码进行替代</strong></li>
</ul>
</li>
</ul>
<h3 id="4-4、page-js"><a href="#4-4、page-js" class="headerlink" title="4.4、page.js"></a>4.4、page.js</h3><ul>
<li>用于定义该模板可以被微信小程序使用</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Page</span>（options）；</span><br></pre></td></tr></table></figure>

<ul>
<li>需要去传入一些和页面有关的参数<strong>页面逻辑代码</strong></li>
</ul>
<p><strong>options 参数的定义</strong>:</p>
<ul>
<li><p>取值类型 Object&#x3D;&#x3D;{key1:value,key2:value……}</p>
<ul>
<li>key:API 定义的具有固定意义的名称</li>
<li>value：该名称所对应的参数（<strong>固定类型的数据</strong>）</li>
</ul>
</li>
<li><p>data：模板页面的数据仓库 &#x3D;&#x3D; 用于定义页面中的数据</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">data</span>:&#123;</span><br><span class="line">    <span class="title function_">key</span>(属性名)：value（属性值）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>其他</p>
<p>用于定义在页面中被标签绑定的处理方法</p>
<p><strong>事件绑定的事件名</strong></p>
<p><strong>1.在微信小程序的事件绑定中，一定需要遵循小程序规范<code>bind事件名=函数名</code></strong></p>
<p><strong>2.事件绑定后，可在标签中使用<code>data-参数名=参数值</code>的方式进行事件绑定</strong></p>
<p><strong>3.被绑定的函数，有且仅有一个参数，该参数为 event 事件</strong></p>
<p><strong>4.页面中通过 data-传递的数据，被写在了 event.currentTarget.dataset 中</strong></p>
<p><strong>5.自定义函数中，this 表示的是当前页面（模板）的对象</strong></p>
</li>
</ul>
<h4 id="4-4-1、页面生命周期"><a href="#4-4-1、页面生命周期" class="headerlink" title="4.4.1、页面生命周期"></a>4.4.1、页面生命周期</h4><ul>
<li>一段代码从读取开始到代码执行完成，这段时间叫做代码的生命周期</li>
<li>一个程序从打开运行到关闭运行，这段时间叫做程序的生命周期<ul>
<li>钩子函数：在特定的位置进行函数的挂载和调用<ul>
<li>在生命周期的特定时间强制执行的函数（此图有误：onshow 应该要比 onready 早）</li>
<li>onshow 的执行时间点比 onReady 要早</li>
<li>onLoad,onReady 只会在页面装载时执行一次</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="5、组件（标签）"><a href="#5、组件（标签）" class="headerlink" title="5、组件（标签）"></a>5、组件（标签）</h2><h3 id="5-1、内置组件（内置标签）"><a href="#5-1、内置组件（内置标签）" class="headerlink" title="5.1、内置组件（内置标签）"></a>5.1、内置组件（内置标签）</h3><ul>
<li><code>&lt;navigator&gt;</code>可以简单的理解为<code>&lt;a&gt;</code>,可以完成页面的切换，但是不会刷新或重载页面<ul>
<li>url 用于指定需要切换到的模板（<strong>一定是定义在 app.json 中 pages 属性中的模板</strong>）</li>
</ul>
</li>
</ul>
<h3 id="5-2、自定义组件（自定义标签）"><a href="#5-2、自定义组件（自定义标签）" class="headerlink" title="5.2、自定义组件（自定义标签）"></a>5.2、自定义组件（自定义标签）</h3><ul>
<li>代码复用（让开发者在少些代码的情况下完成复杂页面）</li>
<li><strong>使用文件和代码的方式，完成自定义标签的加载和使用</strong></li>
<li><strong>我们构建的标签具有一定的样式和结构</strong></li>
<li><strong>组件构建的要求：</strong><ul>
<li>被组件化的代码（页面代码），一定是项目中重复使用频率很高的代码</li>
<li>被组件化的代码一定是最小单元</li>
</ul>
</li>
</ul>
<p><strong>组件的实现</strong>:</p>
<p><strong>组件引用时注意不要出现引用死循环</strong> :</p>
<p>1.组件的构成和模板的构成一样，由 4 个文件.js,.json,.wxml,.wxss</p>
<p>2.wxml 和 wxss 和模板中得使用方式一样没有区别，（<strong>不建议在组件的 wxss 中使用标签选择器</strong>）</p>
<p>3.组件的 js 文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//组件元素的注册</span></span><br><span class="line"><span class="title class_">Component</span>(&#123;&#125;);</span><br></pre></td></tr></table></figure>

<p>4.组件的 JSON 文件(告知微信这是一个组件而非模板)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;component&quot;</span>:<span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5.组件无需 app.json 管理</p>
<p>6.在需要使用的模板的 json 文件中，进行如下代码的定义</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">key</span>:value</span><br><span class="line"><span class="attr">key</span>:自定义组件名称，组件名称之前不能使用驼峰命名法，现在可以了。使用-进行名称隔离</span><br><span class="line"><span class="attr">value</span>:组件的路径</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;usingComponents&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;filmItem&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../../components/filmItem/filmItem&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--完成组件的装载--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filmItem</span>&gt;</span><span class="tag">&lt;/<span class="name">filmItem</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="5-2-1、事件的处理"><a href="#5-2-1、事件的处理" class="headerlink" title="5.2.1、事件的处理"></a>5.2.1、事件的处理</h4><ul>
<li>在自定义组件中，用户的事件不可以在一级属性上，只能定义在 methods 属性中</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// components/filmItem/filmItem.js</span></span><br><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 组件的属性列表</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">properties</span>: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 组件的初始数据,组件页面中使用的数据定义位置</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 组件的方法列表，组件页面中使用方法定义位置</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">goToDetail</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="5-3、组件数据传递"><a href="#5-3、组件数据传递" class="headerlink" title="5.3、组件数据传递"></a>5.3、组件数据传递</h3><ul>
<li><p>标签传递数据</p>
<ul>
<li>标签传递数据，只需在组件标签上定义<code>自定义属性名=数据</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">film-item</span></span></span><br><span class="line"><span class="tag">  <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123; films &#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">wx:key</span>=<span class="string">&quot;&#123;&#123; index &#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">wx:for-item</span>=<span class="string">&quot;film&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">aaa</span>=<span class="string">&quot;&#123;&#123;film&#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">film-item</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>组件接收数据</p>
<ul>
<li>组件接收模板页面传递的数据，需要.js 文件中使用<code>properties</code>接收</li>
<li><code>properties</code>具有和<code>data</code>属性相同的功能（<strong>数据仓库</strong>）</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// components/filmItem/filmItem.js</span></span><br><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 组件的属性列表,专门用于接收来自调用者的传递数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">properties</span>: &#123;</span><br><span class="line">  <span class="comment">//key 为定义在标签上的属性名称</span></span><br><span class="line">      <span class="comment">//value永远都是object</span></span><br><span class="line">      <span class="attr">film</span>:&#123;</span><br><span class="line">          <span class="comment">//接收传递的数据时，一定需要指定类型和默认值</span></span><br><span class="line">          <span class="comment">//定义数据类型 需要注意首字母大写</span></span><br><span class="line">          type：<span class="title class_">Object</span>,</span><br><span class="line">          <span class="attr">value</span>:<span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="6、逻辑层代码"><a href="#6、逻辑层代码" class="headerlink" title="6、逻辑层代码"></a>6、逻辑层代码</h2><h2 id="7、wxml-的数据操作功能"><a href="#7、wxml-的数据操作功能" class="headerlink" title="7、wxml 的数据操作功能"></a>7、wxml 的数据操作功能</h2><ul>
<li>wxml 不仅可以定义页面结构，同时可以完成数据的获取</li>
</ul>
<h3 id="7-1、数据加载（数据绑定）"><a href="#7-1、数据加载（数据绑定）" class="headerlink" title="7.1、数据加载（数据绑定）"></a>7.1、数据加载（数据绑定）</h3><ul>
<li><p>数据绑定使用 Mustache 语法（双大括号）将变量包起来，可以作用于页面</p>
</li>
<li><p>页面中可以直接在<strong>双大括号</strong>中定义变量值：<strong>语法和 js 变量值的语法一致</strong></p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;变量名&#125;&#125;</span><br><span class="line">&#123;&#123;三元运算符&#125;&#125;</span><br><span class="line">&#123;&#123;简单的四则运算|逻辑运算&#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-2、数据循环（列表循环）"><a href="#7-2、数据循环（列表循环）" class="headerlink" title="7.2、数据循环（列表循环）"></a>7.2、数据循环（列表循环）</h3><ul>
<li>使用数据操作属性 &#x3D;&#x3D; 一定要被定义在标签属性上的<ul>
<li>使用时需要配合 wx:key 进行定义（如果不定义会导致警告，可能会导致审核不通过）</li>
<li>对于循环而言，内置两个变量 index，item<ul>
<li>index 获取循环的下标（次数）可以通过 wx:for-index 进行名称修改</li>
<li>item 循环得到的当前对象 可以通过 wx:for-item 进行名称修改</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">  <span class="attr">strs</span>: [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;aa&quot;</span>, <span class="attr">age</span>: <span class="number">23</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;bb&quot;</span>, <span class="attr">age</span>: <span class="number">21</span> &#125;,</span><br><span class="line">  ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">	<span class="number">1.</span>标签的语法规范	属性=<span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="number">2.</span>数据绑定语法规范</span><br><span class="line">--&gt;</span><br><span class="line">&lt;标签 <span class="attr">wx</span>:<span class="keyword">for</span>=<span class="string">&quot;&#123;&#123; strs &#125;&#125;&quot;</span> <span class="attr">wx</span>:key=<span class="string">&quot;&#123;&#123; index &#125;&#125;&quot;</span> <span class="keyword">class</span>=<span class="string">&quot;&#123;&#123; index &#125;&#125;&quot;</span>&gt;&#123;&#123; index&#125;&#125;:&#123;&#123; item.<span class="property">name</span> &#125;&#125;,&#123;&#123; item.<span class="property">age</span> &#125;&#125;&lt;/标签&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>可以循环对象</p>
<ul>
<li>JS 中对象的循环 建议使用<code>for in，（foreach）</code>循环 <code>== </code>（会将原型链中的属性也循环出来）</li>
<li>只循环对象的属性<ul>
<li>index：就是对象的 key</li>
<li>item：就是当前 key 所对应的值</li>
</ul>
</li>
</ul>
</li>
<li><p>对数值的循环</p>
<ul>
<li>index 从 0 开始</li>
<li>item 从 0 开始</li>
</ul>
</li>
<li><p>对于字符串的循环</p>
<ul>
<li>index 是字符在字符串的下标</li>
<li>item 是当前循环字符</li>
</ul>
</li>
</ul>
<h3 id="7-3、数据判断（条件渲染）"><a href="#7-3、数据判断（条件渲染）" class="headerlink" title="7.3、数据判断（条件渲染）"></a>7.3、数据判断（条件渲染）</h3><ul>
<li>使用数据判断需要依赖标签属性&#x3D;&#x3D;一定要被定义在标签属性上的<ul>
<li>判断当前标签是否需要被写入&#x3D;&#x3D;是否被渲染</li>
<li>依然遵循 JS 的数据类型转换规则<code>（&quot;&quot;==&gt;false  0==&gt;false  null==&gt;false......）</code></li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;标签 <span class="attr">wx</span>:<span class="keyword">if</span>=<span class="string">&quot;&#123;&#123; 条件 &#125;&#125;&quot;</span>&gt;&lt;/标签&gt;</span><br></pre></td></tr></table></figure>

<h3 id="7-4、辅助数据操作标签"><a href="#7-4、辅助数据操作标签" class="headerlink" title="7.4、辅助数据操作标签"></a>7.4、辅助数据操作标签</h3><ul>
<li><code>&lt;block&gt;</code>:页面中不被解析，且不具有任何样式<ul>
<li>为数据判断和数据循环提供标签支持</li>
</ul>
</li>
</ul>
<h2 id="8、API"><a href="#8、API" class="headerlink" title="8、API"></a>8、API</h2><ul>
<li><p>API 是提供开发者对于通过 JS 方式调用相关功能的接口（<strong>内置的操作方法</strong>）</p>
<ul>
<li>api：Application Programming Interface</li>
<li>设备硬件调用 API</li>
<li>微信内置功能的调用</li>
</ul>
</li>
<li><p><strong>在所有的微信程序的 js 文件中都可以直接调用</strong></p>
</li>
</ul>
<h2 id="8-1、wx-navigateTo（OBJECT）"><a href="#8-1、wx-navigateTo（OBJECT）" class="headerlink" title="8.1、wx.navigateTo（OBJECT）"></a>8.1、wx.navigateTo（OBJECT）</h2><ul>
<li><p>实现页面通过 js 方法进行切换</p>
</li>
<li><p><strong>OBJECT 参数说明</strong></p>
</li>
</ul>
<h2 id="8-2、wx-request-OBJECT"><a href="#8-2、wx-request-OBJECT" class="headerlink" title="8.2、wx.request(OBJECT)"></a>8.2、wx.request(OBJECT)</h2><ul>
<li><p>就是通过请求方式，获取远端数据（使用方法类似于 jquery 的$.ajax）</p>
</li>
<li><p>请求地址必须是小程序授权地址</p>
</li>
<li><p>开发者自行配置，微信进行审核</p>
</li>
<li><p>请求地址必须是 HTTPS:&#x2F;&#x2F;加密协议</p>
</li>
</ul>
<h2 id="8-3、消息交互窗口"><a href="#8-3、消息交互窗口" class="headerlink" title="8.3、消息交互窗口"></a>8.3、消息交互窗口</h2><ul>
<li>wx.showToast（OBJECT）显示消息提示窗口</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wx.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">  <span class="comment">//提示消息</span></span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;成功&quot;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//提示图标</span></span><br><span class="line">  <span class="attr">icon</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//延迟隐藏 ms</span></span><br><span class="line">  <span class="attr">duration</span>: <span class="number">2000</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="9、豆瓣数据接口（仅供学习使用）"><a href="#9、豆瓣数据接口（仅供学习使用）" class="headerlink" title="9、豆瓣数据接口（仅供学习使用）"></a>9、豆瓣数据接口（仅供学习使用）</h2><p>1.新片速递：</p>
<p><a href="https://m.douban.com/rexxar/api/v2/subject_collection/movie_latest/items?os=android&callback=jsonp3&start=0&count=8&loc_id=108288&_=0">https://m.douban.com/rexxar/api/v2/subject_collection/movie_latest/items?os=android&amp;callback=jsonp3&amp;start=0&amp;count=8&amp;loc_id=108288&amp;_=0</a></p>
<p>原始地址：<a href="https://m.douban.com/rexxar/api/v2/subject_collection/movie_latest/items">https://m.douban.com/rexxar/api/v2/subject_collection/movie_latest/items</a></p>
<p>参数：</p>
<ul>
<li><p>os&#x3D;android</p>
</li>
<li><p>callback&#x3D;jsonp3</p>
</li>
<li><p>start&#x3D;0 ————从第几个开始获取</p>
</li>
<li><p>count&#x3D;8 —————–获取几条数据</p>
</li>
<li><p>loc<em>id&#x3D;108288&amp;</em>&#x3D;0</p>
<p>2.影院热映：</p>
</li>
</ul>
<p><a href="https://m.douban.com/rexxar/api/v2/subject_collection/movie_showing/items?os=android&callback=jsonp1&start=0&count=8&loc_id=108288&_=0">https://m.douban.com/rexxar/api/v2/subject_collection/movie_showing/items?os=android&amp;callback=jsonp1&amp;start=0&amp;count=8&amp;loc_id=108288&amp;_=0</a></p>
<p>原始地址：<a href="https://m.douban.com/rexxar/api/v2/subject_collection/movie_showing/items">https://m.douban.com/rexxar/api/v2/subject_collection/movie_showing/items</a></p>
<p>参数：</p>
<ul>
<li><p>start&#x3D;0 ————从第几个开始获取</p>
</li>
<li><p>count&#x3D;8 —————–获取几条数据</p>
<p>​</p>
<p>3.免费观影：</p>
</li>
</ul>
<p><a href="https://m.douban.com/rexxar/api/v2/subject_collection/movie_free_stream/items?os=android&callback=jsonp2&start=0&count=8&loc_id=108288&_=0">https://m.douban.com/rexxar/api/v2/subject_collection/movie_free_stream/items?os=android&amp;callback=jsonp2&amp;start=0&amp;count=8&amp;loc_id=108288&amp;_=0</a></p>
<p>原始地址：<a href="https://m.douban.com/rexxar/api/v2/subject_collection/movie_free_stream/items">https://m.douban.com/rexxar/api/v2/subject_collection/movie_free_stream/items</a></p>
<p>参数：</p>
<ul>
<li><p>start&#x3D;0 ————从第几个开始获取</p>
</li>
<li><p>count&#x3D;8 —————–获取几条数据</p>
<p>4.order_by&#x3D;time</p>
</li>
</ul>
<h2 id="10、请求地址的-API-化"><a href="#10、请求地址的-API-化" class="headerlink" title="10、请求地址的 API 化"></a>10、请求地址的 API 化</h2><ul>
<li>将项目中所有的远端请求地址进行统一管理，将所有的远端请求方法进行统一管理<ul>
<li>api.js</li>
<li>server.js</li>
<li>dataServer.js</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>微信</tag>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>【搬】setTimeout转setInterval</title>
    <url>/2023/01/31/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E3%80%90%E6%90%AC%E3%80%91setTimeout%E8%BD%ACsetInterval/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(i++);</span><br><span class="line">  <span class="title function_">func</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setTimeout</span>(fun, <span class="number">100</span>);</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(i++);</span><br><span class="line">  <span class="built_in">setTimeout</span>(fun, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">func</span>();</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>【般】防抖和节流的区别及作用，实现原理与应用场景</title>
    <url>/2023/01/31/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E3%80%90%E8%88%AC%E3%80%91%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81%E7%9A%84%E5%8C%BA%E5%88%AB%E5%8F%8A%E4%BD%9C%E7%94%A8%EF%BC%8C%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
    <content><![CDATA[<h2 id="防抖和节流有什么用？"><a href="#防抖和节流有什么用？" class="headerlink" title="防抖和节流有什么用？"></a>防抖和节流有什么用？</h2><p>简单来说，防抖和节流都是用来减少函数执行的频率，以达到优化项目性能或者实现特定功能的效果</p>
<h3 id="一、防抖"><a href="#一、防抖" class="headerlink" title="一、防抖"></a>一、防抖</h3><p>定义：事件被触发一定时间后再执行回调。如果在这段时间内又被触发了，则重新开始计算时间</p>
<h4 id="常用场景"><a href="#常用场景" class="headerlink" title="常用场景"></a>常用场景</h4><ul>
<li>输入框远程查询事件</li>
<li>在线文档自动保存</li>
<li>浏览器视口大小改变<br>例子<br>张三在某平台搜索一本书籍，发现搜索建议并不是瞬间就出现的，而是自己输入词组结束后出现的。那么该平台在此搜索框可能做了什么操作？<br>代码实现</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;searchElement&quot;</span> /&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> searchElement = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;searchElement&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> <span class="title function_">debounce</span> = (<span class="params">fn, initial</span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="built_in">clearTimeout</span>(timer);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      timer = <span class="built_in">setTimeout</span>(fn, initial);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">searchElement.<span class="property">oninput</span> = <span class="title function_">debounce</span>(<span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> value = searchElement.<span class="property">value</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">if</span> (value) <span class="variable language_">console</span>.<span class="title function_">log</span>(value, <span class="string">&#x27;请求值&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;, <span class="number">1000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">timer = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">clearTimeout</span>;</span><br><span class="line">timer = 1s 后执行函数;</span><br><span class="line"></span><br><span class="line"><span class="number">0.</span>5s 后手动触发 input 事件</span><br><span class="line"></span><br><span class="line">timer !== <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">clearTimeout</span>;</span><br><span class="line">timer = 重新计算时间，过 1s 后执行函数;</span><br></pre></td></tr></table></figure>

<h3 id="二、节流"><a href="#二、节流" class="headerlink" title="二、节流"></a>二、节流</h3><p>定义：在单位时间内只触发一次函数，若单位时间内多次触发只有一次生效<br>常用场景</p>
<ul>
<li>按钮提交事件（当然也可做成点击后就 loading）</li>
<li>页面滚动事件的触发</li>
<li>累计计算鼠标移动距离</li>
</ul>
<p><strong>例子</strong><br>张三参加某平台周年庆活动，他选购了某热门饮品并一直点击抢购按钮，却发现并不是每次点击都会有响应的。那么该平台前端可能做了什么限制？<br>代码实现</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">id</span>=<span class="string">&quot;buttonElement&quot;</span>&gt;</span>抢购<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, interval</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> timer;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">if</span> (timer) <span class="keyword">return</span> <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="built_in">clearTimeout</span>(timer);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        timer = <span class="literal">null</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">fn</span>(event);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;, interval);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> btnClick = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;buttonElement&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">btnClick.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="title function_">throttle</span>(<span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(event, <span class="string">&#x27;点击了&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;, <span class="number">1000</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>可以看到，张三疯狂点击抢购，但还是每秒只响应 1 次<br>节流(立即执行)<br>上面这个代码有个弊端，那就是在张三第一次点击的时候也隔了 1 秒才响应，这不免也太坑了。正常来说第一次应该直接响应的，并且在连续点击结束后的第一次也应该立即触发，其实想实现这样的效果也不难</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">id</span>=<span class="string">&quot;buttonElement&quot;</span>&gt;</span>抢购<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">function</span> <span class="title function_">throttle2</span>(<span class="params">fn, interval</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">let</span> init = <span class="literal">false</span>; <span class="comment">// 引入一个参数记录状态</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">let</span> timer;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">if</span> (init) <span class="keyword">return</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          init = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="built_in">clearTimeout</span>(timer);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              init = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;, interval);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="title function_">fn</span>(event);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> btnClick = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;buttonElement&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">btnClick.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="title function_">throttle2</span>(<span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(event, <span class="string">&#x27;点击了&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;, <span class="number">2000</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>可以看到第一次点击直接打印，第二次疯狂点击只打印一次，最后一次点击也是直接打印</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">coloring</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> r = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">255</span>);</span><br><span class="line">      <span class="keyword">let</span> g = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">255</span>);</span><br><span class="line">      <span class="keyword">let</span> b = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">255</span>);</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">background</span> = <span class="string">`rgb(<span class="subst">$&#123;r&#125;</span>,<span class="subst">$&#123;g&#125;</span>,<span class="subst">$&#123;b&#125;</span>)`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">func, delay</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> timer;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> context = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">let</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line">        <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          func.<span class="title function_">apply</span>(context, args);</span><br><span class="line">          timer = <span class="literal">null</span>;</span><br><span class="line">        &#125;, delay);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>, <span class="title function_">throttle</span>(coloring, <span class="number">2000</span>));</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">coloring</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> r = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">255</span>);</span><br><span class="line">    <span class="keyword">let</span> g = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">255</span>);</span><br><span class="line">    <span class="keyword">let</span> b = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">255</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">background</span> = <span class="string">`rgb(<span class="subst">$&#123;r&#125;</span>,<span class="subst">$&#123;g&#125;</span>,<span class="subst">$&#123;b&#125;</span>)`</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">func, delay</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> pre = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> context = <span class="variable language_">this</span>;</span><br><span class="line">      <span class="keyword">let</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line">      <span class="keyword">let</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">      <span class="keyword">if</span> (now - pre &gt; delay) &#123;</span><br><span class="line">        func.<span class="title function_">apply</span>(context, args);</span><br><span class="line">        pre = now;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>, <span class="title function_">throttle</span>(coloring, <span class="number">2000</span>));</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>⚠️ 注意：<br>在设定防抖函数的时候，没有出现预期中的限制函数执行次数的效果。<br>防抖函数一开始定义如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">debounce</span>(<span class="params"> fn,delay</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    timer = <span class="literal">null</span></span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(fn,delay)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>原因出在闭包里清除 timer 的时候用的是 timer&#x3D;null，而不是 clearTimeout(timer)函数。<br>因为在用 timer&#x3D;null 的时候，只是改变了 timer 的指向，并没有清除掉定时器，此时定时器在内存中虽然没有变量指向它，但它仍存在内存中，待 delay 时间一到，就执行 fn 函数。所以当 fn 经过防抖函数限制后，在 delay 时间内调用多少次 fn 函数，就会有多少次的定时器存在内存中，就会执行多少此 fn 函数，并不能实现预期中的在 delay 时间内只执行一次 fn 函数。<br>clearTimeout(timer)是在内存中清除掉定时器，所以在 delay 时间内，无论执行 fn 多少次，都只会有一个定时器存在<br>防抖函数正确定义如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">debounce</span>(<span class="params"> fn,delay</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(timer) <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(fn,delay)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>三、引入 Lodash 实现<br>官方文档：<a href="https://www.lodashjs.com/">https://www.lodashjs.com/</a></p>
<p>防抖</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&quot;lodash&quot;</span>;</span><br><span class="line"><span class="attr">debounceHandle</span>: _.<span class="title function_">debounce</span>(</span><br><span class="line">  <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;业务代码&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="number">2000</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 在 n 毫秒内触发</span></span><br><span class="line">    <span class="attr">leading</span>: <span class="literal">true</span>, <span class="comment">// 第一次点击立刻执行，默认为 true</span></span><br><span class="line">    <span class="attr">trailing</span>: <span class="literal">true</span>, <span class="comment">// 节流结束后立刻执行，默认为 true</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>节流</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&quot;lodash&quot;</span>;</span><br><span class="line"><span class="attr">throttleHandle</span>: _.<span class="title function_">throttle</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;业务代码&quot;</span>);</span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>浅析tree shaking工作原理</title>
    <url>/2021/01/21/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E6%B5%85%E6%9E%90tree-shaking%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h3 id="浅析-tree-shaking-工作原理"><a href="#浅析-tree-shaking-工作原理" class="headerlink" title="浅析 tree shaking 工作原理"></a>浅析 tree shaking 工作原理</h3><p><img src="https://www.daykalif.com/blog_img/tree-shaking.jpg" alt="tree-shaking"></p>
<p>最近朋友面试问了关于<em>tree shaking</em>相关问题，之前对<em>tree shaking</em>不是很了解，只知道是减少打包体积用的。趁此机会了解了一下它的原委。</p>
<p>当前端项目到达一定的规模后，我们一般会采用按模块方式组织代码，这样可以方便代码的组织及维护。但会存在一个问题，比如我们有一个<em>utils</em>工具类，在另一个模块中导入它。这会在打包的时候将<em>utils</em>中不必要的代码也打包，从而使得打包体积变大，这时候就需要用到<em>Tree shaking</em>技术了。</p>
<blockquote>
<p>Tree shaking 是一种通过清除多余代码方式来优化项目打包体积的技术，专业术语叫 Dead code elimination</p>
</blockquote>
<p>首先，新建一个简单的 webpack 项目，项目结构如下（推荐使用 vscode 编辑器）：</p>
<p><img src="https://www.daykalif.com/blog_img/tree-shaking.png" alt="tree-shaking"></p>
<p>主要文件如下：</p>
<ul>
<li>package.json</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tree-shaking&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tree-shaking demo&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;webpack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;twindyorg&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MIT&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;homepage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://twindy.org&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@babel/core&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.2.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@babel/plugin-transform-runtime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@babel/preset-env&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.3.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;babel-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^8.0.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cross-env&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;jest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^24.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;uglifyjs-webpack-plugin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.3.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;webpack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.29.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;webpack-cli&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.2.1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>webpack.config.js</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/index.js&quot;</span>,</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// new UglifyJsPlugin()</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.m?js$/</span>,</span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">        <span class="attr">use</span>: &#123;</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">          <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="attr">presets</span>: [<span class="string">&quot;@babel/preset-env&quot;</span>],</span><br><span class="line">            <span class="attr">plugins</span>: [<span class="string">&quot;@babel/plugin-transform-runtime&quot;</span>],</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>可在项目根目录运行打包命令</p>
<blockquote>
<p>npm run build</p>
</blockquote>
<p>接下来，创建 utils.js 文件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;add&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">minus</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;minus&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;multiply&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">divide</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;divide&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> a / b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>index.js 文件中导入 utils.js 的 add 方法并调用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; add &#125; <span class="keyword">from</span> <span class="string">&quot;./utils&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">add</span>(<span class="number">10</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<p>运行 npm run build 后查看 dist&#x2F;bundle.js 文件，可以发现 utils.js 中所有的代码都打包了，并没有像我们预期的那样只打包 add()函数。</p>
<p><img src="https://www.daykalif.com/blog_img/tree-shaking1.png" alt="tree-shaking"></p>
<p>当启用 tree shaking 后，多余的代码就不会打入最终的文件。</p>
<h4 id="tree-shaking-如何工作的呢"><a href="#tree-shaking-如何工作的呢" class="headerlink" title="tree shaking 如何工作的呢?"></a>tree shaking 如何工作的呢?</h4><p>虽然<em>tree shaking</em>的概念在 1990 就提出了，但知道 ES6 的 ES6-style 模块出现后才真正被利用起来。这是因为<em>tree shaking</em>只能在静态 modules 下工作。ECMAScript 6 模块加载是静态的,因此整个依赖树可以被静态地推导出解析语法树。所以在 ES6 中使用<em>tree shaking</em>是非常容易的。而且，<em>tree shaking</em>不仅支持 import&#x2F;export 级别，而且也支持 statement(声明)级别。</p>
<p>在 ES6 以前，我们可以使用 CommonJS 引入模块：require()，这种引入是动态的，也意味着我们可以基于条件来导入需要的代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> dynamicModule;</span><br><span class="line"><span class="comment">// 动态导入</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">  myDynamicModule = <span class="built_in">require</span>(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  myDynamicModule = <span class="built_in">require</span>(<span class="string">&quot;bar&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CommonJS 的动态特性模块意味着 tree shaking 不适用。因为它是不可能确定哪些模块实际运行之前是需要的或者是不需要的。在 ES6 中，进入了完全静态的导入语法：import。这也意味着下面的导入是不可行的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不可行，ES6 的import是完全静态的</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">  myDynamicModule = <span class="built_in">require</span>(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  myDynamicModule = <span class="built_in">require</span>(<span class="string">&quot;bar&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们只能通过导入所有的包后再进行条件获取。如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> foo <span class="keyword">from</span> <span class="string">&quot;foo&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> bar <span class="keyword">from</span> <span class="string">&quot;bar&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">  <span class="comment">// foo.xxxx</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// bar.xxx</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ES6 的 import 语法完美可以使用 tree shaking，因为可以在代码不运行的情况下就能分析出不需要的代码。</p>
<h4 id="如何使用-Tree-shaking"><a href="#如何使用-Tree-shaking" class="headerlink" title="如何使用 Tree shaking"></a>如何使用 Tree shaking</h4><p>从<em>webpack 2</em>开始支持实现了<em>Tree shaking</em>特性，<em>webpack 2</em>正式版本内置支持 ES2015 模块（也叫做 harmony 模块）和未引用模块检测能力。新的 webpack 4 正式版本，扩展了这个检测能力，通过 package.json 的 sideEffects 属性作为标记，向 compiler 提供提示，表明项目中的哪些文件是 “pure(纯的 ES2015 模块)”，由此可以安全地删除文件中未使用的部分。</p>
<p>本项目中使用的是 webpack4,只需要将 mode 设置为 production 即可开启<em>tree shaking</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line"><span class="attr">mode</span>: <span class="string">&#x27;production&#x27;</span>, <span class="comment">// 设置为production模式</span></span><br><span class="line"><span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>如果是使用 webpack2,可能你会发现 tree shaking 不起作用。因为 babel 会将代码编译成 CommonJs 模块，而 tree shaking 不支持 CommonJs。所以需要配置不转义：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">options</span>: &#123;</span><br><span class="line">  <span class="attr">presets</span>: [[<span class="string">&quot;es2015&quot;</span>, &#123; <span class="attr">modules</span>: <span class="literal">false</span> &#125;]];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.freecodecamp.org/news/tree-shaking-es6-modules-in-webpack-2-1add6672f31b/">参考 tree-shaking-es6-modules-in-webpack-2</a></p>
<h4 id="关于-side-effects（副作用）"><a href="#关于-side-effects（副作用）" class="headerlink" title="关于 side effects（副作用）"></a>关于 side effects（副作用）</h4><p><em>side effects</em>是指那些当 import 的时候会执行一些动作，但是不一定会有任何 export。比如 ployfill,ployfills 不对外暴露方法给主程序使用。</p>
<p><em>tree shaking</em>不能自动的识别哪些代码属于<em>side effects</em>，因此手动指定这些代码显得非常重要，如果不指定可能会出现一些意想不到的问题。</p>
<p>在 webapck 中，是通过<em>package.json</em>的 sideEffects 属性来实现的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;tree-shaking&quot;</span>,</span><br><span class="line">  <span class="string">&quot;sideEffects&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果所有代码都不包含副作用，我们就可以简单地将该属性标记为 false，来告知 webpack，它可以安全地删除未用到的 export 导出。</p>
<p>如果你的代码确实有一些副作用，那么可以改为提供一个数组：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;tree-shaking&quot;</span>,</span><br><span class="line">  <span class="string">&quot;sideEffects&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;./src/common/polyfill.js&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>为了达到 Tree Shaking 的作用，你需要：</p>
<ul>
<li>tree shaking 不支持动态导入（如 CommonJS 的 require()语法），只支持纯静态的导入（ES6 的 import&#x2F;export）</li>
<li>webpack 中可以在项目 package.json 文件中，添加一个 “sideEffects” 属性,手动指定由副作用的脚本</li>
<li>引入一个能够删除未引用代码（dead-code）的压缩工具（例如 UglifyJSPlugin）</li>
</ul>
<p>tree shaking 其实很好理解：一颗树，用力摇一摇，枯萎的叶子会掉落下来。剩下的叶子都是存活的</p>
<blockquote>
<p>问：为什么可以实现 Tree Shaking？</p>
</blockquote>
<p>ES6 模块依赖关系是确定的，和运行时的状态无关，可以进行可靠的静态分析，这就是 Tree Shaking 的基础。</p>
<p>所谓的 静态分析，就是不执行代码，从字面量上对代码进行分析，ES6 之前的模块化，比如我们可以动态 require 一个模块，只有执行后才知道引用的什么模块，这个就不能通过静态分析去做优化。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// demo.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> a = <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> b = <span class="string">&quot;b&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; a &#125; <span class="keyword">from</span> <span class="string">&quot;./demo.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上代码不运行，仅仅经过扫描分析，抛弃了 const b，代码缩减了 size</span></span><br><span class="line"><span class="comment">// 这就是 Tree Shaking 的静态分析基本原理：有引用就保留，没有引用就抛弃</span></span><br></pre></td></tr></table></figure>

<p>所以为啥 CommonJS 不能 Tree Shaking 就是这个缘故。</p>
<blockquote>
<p>问：下面哪种情况会 Tree Shaking？</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全部导入</span></span><br><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&quot;lodash&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具名导入</span></span><br><span class="line"><span class="keyword">import</span> &#123; debounce &#125; <span class="keyword">from</span> <span class="string">&quot;lodash&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接导入具体模块</span></span><br><span class="line"><span class="keyword">import</span> debounce <span class="keyword">from</span> <span class="string">&quot;lodash/lib/debounce&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>上面导入中：第一种的 全部导入 是不支持 Tree Shaking 的，其他都支持。</p>
<p>为什么呢？因为当你将整个库导入到单个 JavaScript 对象中时，就意味着你告诉 Webpack，你需要整个库，这样 Webpack 就不会摇它。</p>
<p>参考文档：<br><a href="https://webpack.js.org/guides/tree-shaking/#src/components/Sidebar/Sidebar.jsx">webpack-tree-shaking</a><br><a href="https://www.freecodecamp.org/news/tree-shaking-es6-modules-in-webpack-2-1add6672f31b/">tree-shaking-es6-modules</a><br><a href="https://github.com/indutny/webpack-common-shake">webpack-common-shake</a><br><a href="https://en.wikipedia.org/wiki/Tree_shaking">Tree shaking wiki</a><br><a href="https://twindy.org/qian-xi-tree-shakinggong-zuo-yuan-li/">https://twindy.org/qian-xi-tree-shakinggong-zuo-yuan-li/</a><br><a href="https://www.bilibili.com/read/cv8677572?share_medium=iphone&share_plat=ios&share_source=WEIXIN&share_tag=s_i&timestamp=1614214249&unique_k=yWGmjY">https://www.bilibili.com/read/cv8677572?share_medium=iphone&amp;share_plat=ios&amp;share_source=WEIXIN&amp;share_tag=s_i&amp;timestamp=1614214249&amp;unique_k=yWGmjY</a></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>性能优化</tag>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>节流</title>
    <url>/2020/06/16/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E8%8A%82%E6%B5%81/</url>
    <content><![CDATA[<h4 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h4><h5 id="节流原理"><a href="#节流原理" class="headerlink" title="节流原理"></a>节流原理</h5><p>规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只有一次能生效。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#444</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/underscore.js/1.11.0/underscore.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./throttle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> count = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> container = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#container&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        container.<span class="property">innerHTML</span> = count++;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// container.onmousemove = _.throttle(doSomething,2000,&#123;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//     leading: false,   //是否立即执行</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//     trailing: true    //最后一次是否执行</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//     //两者不能同为false,否则就会产生bug,会导致触发事件立即执行一次后就失效了!</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// &#125;);</span></span></span><br><span class="line"><span class="language-javascript">      container.<span class="property">onmousemove</span> = <span class="title function_">throttle</span>(doSomething, <span class="number">2000</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="实现-throttle-有两种方式"><a href="#实现-throttle-有两种方式" class="headerlink" title="实现 throttle 有两种方式"></a>实现 throttle 有两种方式</h4><h5 id="方式一：时间戳实现"><a href="#方式一：时间戳实现" class="headerlink" title="方式一：时间戳实现"></a>方式一：时间戳实现</h5><p>注意:第一次事件会被触发,最后一次不会触发函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.使用时间戳：第一次会触发，最后一次不会触发</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">func, wait</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> _this, args;</span><br><span class="line">  <span class="comment">// 之前的时间戳</span></span><br><span class="line">  <span class="keyword">let</span> old = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    _this = <span class="variable language_">this</span>; <span class="comment">// 保存this</span></span><br><span class="line">    args = <span class="variable language_">arguments</span>; <span class="comment">//保存arguments</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">valueOf</span>(); <span class="comment">// 获取当前时间戳</span></span><br><span class="line">    <span class="keyword">if</span> (now - old &gt; wait) &#123;</span><br><span class="line">      <span class="comment">// 立即执行</span></span><br><span class="line">      func.<span class="title function_">apply</span>(_this, args);</span><br><span class="line">      old = now;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 运行：</span></span><br><span class="line"><span class="comment"> * container.onmousemove = throttle(doSomething,2000)</span></span><br><span class="line"><span class="comment"> * 相当于index.html运行时变为：</span></span><br><span class="line"><span class="comment"> * container.onmousemove = throttle(doSomething,2000,&#123;</span></span><br><span class="line"><span class="comment"> *     leading: true,  //第一次会触发</span></span><br><span class="line"><span class="comment"> *     trailing: false //最后一次不会触发</span></span><br><span class="line"><span class="comment"> * &#125;)</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p>注意和防抖函数进行区分</p>
<h5 id="方式二：定时器实现"><a href="#方式二：定时器实现" class="headerlink" title="方式二：定时器实现"></a>方式二：定时器实现</h5><p>第一次不会被触发,最后一次会触发</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.使用定时器：第一次不会触发，最后一次会触发</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">func, wait</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> _this, args, timeout;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    _this = <span class="variable language_">this</span>;</span><br><span class="line">    args = <span class="variable language_">arguments</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!timeout) &#123;</span><br><span class="line">      timeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        timeout = <span class="literal">null</span>;</span><br><span class="line">        func.<span class="title function_">apply</span>(_this, args);</span><br><span class="line">      &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 运行：</span></span><br><span class="line"><span class="comment"> * container.onmousemove = throttle(doSomething,2000)</span></span><br><span class="line"><span class="comment"> * 相当于index.html运行时变为：</span></span><br><span class="line"><span class="comment"> * container.onmousemove = throttle(doSomething,2000,&#123;</span></span><br><span class="line"><span class="comment"> *     leading: false, //第一次不会触发</span></span><br><span class="line"><span class="comment"> *     trailing: true  //最后一次会触发</span></span><br><span class="line"><span class="comment"> * &#125;)</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h5 id="【使用时间戳-定时器】：不传入第三个参数，默认第一次会触发，最后一次也触发"><a href="#【使用时间戳-定时器】：不传入第三个参数，默认第一次会触发，最后一次也触发" class="headerlink" title="【使用时间戳+定时器】：不传入第三个参数，默认第一次会触发，最后一次也触发"></a>【使用时间戳+定时器】：不传入第三个参数，默认第一次会触发，最后一次也触发</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3.结合两者【使用时间戳+定时器】：第一次会触发，最后一次也触发</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">func, wait</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> _this, args, timeout;</span><br><span class="line">  <span class="keyword">let</span> old = <span class="number">0</span>; <span class="comment">//时间戳</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> later = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    old = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">valueOf</span>(); <span class="comment">//当运行定时器时，需要更新old为当前的时间</span></span><br><span class="line">    timeout = <span class="literal">null</span>;</span><br><span class="line">    func.<span class="title function_">apply</span>(_this, args);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    _this = <span class="variable language_">this</span>;</span><br><span class="line">    args = <span class="variable language_">arguments</span>;</span><br><span class="line">    <span class="keyword">let</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">valueOf</span>();</span><br><span class="line">    <span class="keyword">if</span> (now - old &gt; wait) &#123;</span><br><span class="line">      <span class="comment">// 第一次直接执行</span></span><br><span class="line">      <span class="keyword">if</span> (timeout) &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">        timeout = <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      func.<span class="title function_">apply</span>(_this, args);</span><br><span class="line">      old = now;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!timeout) &#123;</span><br><span class="line">      <span class="comment">//最后一次也被执行</span></span><br><span class="line">      timeout = <span class="built_in">setTimeout</span>(later, wait);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 运行：</span></span><br><span class="line"><span class="comment"> * container.onmousemove = throttle(doSomething,2000)</span></span><br><span class="line"><span class="comment"> * 相当于index.html运行时变为：</span></span><br><span class="line"><span class="comment"> * container.onmousemove = throttle(doSomething,2000,&#123;</span></span><br><span class="line"><span class="comment"> *     leading: true, //第一次会触发</span></span><br><span class="line"><span class="comment"> *     trailing: true  //最后一次也会触发</span></span><br><span class="line"><span class="comment"> * &#125;)</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h5 id="节流进阶"><a href="#节流进阶" class="headerlink" title="节流进阶"></a>节流进阶</h5><p>原生的节流函数有第三个参数,用于控制是否首次事件是否被立即调用,以及最后一次事件是否被调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">container.<span class="property">onmousemove</span> = _.<span class="title function_">throttle</span>(doThrottle, <span class="number">1000</span>, &#123;</span><br><span class="line">  <span class="attr">leading</span>: <span class="literal">false</span>, <span class="comment">//是否立即执行</span></span><br><span class="line">  <span class="attr">trailing</span>: <span class="literal">true</span>, <span class="comment">//最后一次是否执行</span></span><br><span class="line">  <span class="comment">//两者不能同为false,否则就会产生bug,会导致触发事件立即执行一次后就失效了!</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>实现 throttle.js：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4.自定义传入第三个参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">func, wait, options</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> _this, args, timeout;</span><br><span class="line">  <span class="keyword">let</span> old = <span class="number">0</span>; <span class="comment">//时间戳</span></span><br><span class="line">  <span class="comment">//如果没有options就将其设置为空对象</span></span><br><span class="line">  <span class="keyword">if</span> (!options) options = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> later = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    old = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">valueOf</span>(); <span class="comment">//当运行定时器时，需要更新old为当前的时间</span></span><br><span class="line">    timeout = <span class="literal">null</span>;</span><br><span class="line">    func.<span class="title function_">apply</span>(_this, args);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    _this = <span class="variable language_">this</span>;</span><br><span class="line">    args = <span class="variable language_">arguments</span>;</span><br><span class="line">    <span class="keyword">let</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">valueOf</span>();</span><br><span class="line">    <span class="keyword">if</span> (options.<span class="property">leading</span> === <span class="literal">false</span> &amp;&amp; !old) &#123;</span><br><span class="line">      old = now; <span class="comment">//此时now - old 一定不会大于 wait，因此可以做到第一次不会执行</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (now - old &gt; wait) &#123;</span><br><span class="line">      <span class="comment">// 如果进入这里，表示第一次会直接执行</span></span><br><span class="line">      <span class="keyword">if</span> (timeout) &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">        timeout = <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      func.<span class="title function_">apply</span>(_this, args);</span><br><span class="line">      old = now;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!timeout &amp;&amp; options.<span class="property">trailing</span> !== <span class="literal">false</span>) &#123;</span><br><span class="line">      <span class="comment">//如果进入这里，表示最后一次会被执行</span></span><br><span class="line">      timeout = <span class="built_in">setTimeout</span>(later, wait);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * container.onmousemove = throttle(doSomething,2000)</span></span><br><span class="line"><span class="comment"> * 可以自定义第三个参数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * container.onmousemove = throttle(doSomething,2000,&#123;</span></span><br><span class="line"><span class="comment"> *     leading: true,  //第一次会触发</span></span><br><span class="line"><span class="comment"> *     trailing: false //最后一次不会触发</span></span><br><span class="line"><span class="comment"> * &#125;)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * container.onmousemove = throttle(doSomething,2000,&#123;</span></span><br><span class="line"><span class="comment"> *     leading: false, //第一次不会触发</span></span><br><span class="line"><span class="comment"> *     trailing: true  //最后一次会触发</span></span><br><span class="line"><span class="comment"> * &#125;)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * container.onmousemove = throttle(doSomething,2000,&#123;</span></span><br><span class="line"><span class="comment"> *     leading: true, //第一次会触发</span></span><br><span class="line"><span class="comment"> *     trailing: true  //最后一次也会触发</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     //⚠️注意：两者不能同为false,否则就会产生bug,会导致触发事件立即执行一次后就失效了!</span></span><br><span class="line"><span class="comment"> * &#125;)</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h5 id="节流函数常见应用场景"><a href="#节流函数常见应用场景" class="headerlink" title="节流函数常见应用场景"></a>节流函数常见应用场景</h5><p>1.DOM 元素的拖拽功能的实现 2.射击游戏中的每隔一段时间射击 3.计算鼠标移动的距离 4.监听 scroll 滚动事件 5.搜索联想 6.高频点击提交,表单重复提交</p>
<h4 id="防抖节流之间的异同比较"><a href="#防抖节流之间的异同比较" class="headerlink" title="防抖节流之间的异同比较"></a>防抖节流之间的异同比较</h4><p><strong>1.相同:</strong></p>
<ul>
<li>都可以通过 setTimeout 实现</li>
<li>目的都是:降低回调执行频率,节省计算资源</li>
</ul>
<p><strong>2.不同:</strong></p>
<ul>
<li>函数防抖: 在一段连续操作结束后,处理回调,利用 clearTimeout 和 setTimeout 实现.</li>
<li>函数节流:在一段连续操作中,每一段时间只执行一次,频率较高的时间中使用来提高性能.</li>
<li>函数防抖关注一定时间连续触发的事件只在最后执行,而函数节流侧重于一段时间内只执行一次!</li>
</ul>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>防抖</title>
    <url>/2020/06/16/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E9%98%B2%E6%8A%96/</url>
    <content><![CDATA[<h4 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h4><h5 id="防抖原理"><a href="#防抖原理" class="headerlink" title="防抖原理"></a>防抖原理</h5><p>事件响应函数在一段时间后才执行，如果这段时间内再次调用，则重新计算执行时间</p>
<p>也就是说,在这个时间内,无论你怎么触发事件,我都不会执行,只有这段时间无操作后才会执行!</p>
<p>例如:</p>
<p>假如防抖设置为 3 秒</p>
<p>第一次执行事件后，开始倒计时 3 秒</p>
<p>然后等到还剩余 1 秒时，再次触发了事件</p>
<p>重新倒计时，从三秒开始</p>
<p>这样第一次到第二次触发事件就经历了 5 秒，极大的减轻了服务器的压力</p>
<p>先来认识防抖函数的使用: 防抖函数实际上已经封装好了,我们只需要用 cdn 引入就可以进行使用了,但是我们依然要明白其中的原理!</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#444</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/underscore.js/1.11.0/underscore.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./debounce.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> count = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 演示事件频繁发生</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> container = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#container&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// event</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 这里可能是回调或者是ajax请求</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 这里做个示例</span></span></span><br><span class="line"><span class="language-javascript">        container.<span class="property">innerHTML</span> = count++;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// !无防抖，数字会不停的增加，相当于不断的发送请求</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// container.onmousemove = doSomething;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 高阶函数  使用防抖，300ms内不会重复发出请求,true表示立即执行。默认false</span></span></span><br><span class="line"><span class="language-javascript">      container.<span class="property">onmousemove</span> = _.<span class="title function_">debounce</span>(doSomething, <span class="number">300</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://www.daykalif.com/blog_img/debunce1.png" alt="debunce1"></p>
<p>这样鼠标滑过的话,就会不断的触发事件,不停的发送请求,会给服务器带来极大的压力</p>
<blockquote>
<p>针对这种问题,防抖节流的重要性就来了,它们可以降低函数的触发频率,提高性能,避免资源浪费</p>
</blockquote>
<h5 id="手动实现防抖函数"><a href="#手动实现防抖函数" class="headerlink" title="手动实现防抖函数"></a>手动实现防抖函数</h5><p>明白其原理之后,我们就可以慢慢实现一个防抖函数</p>
<p>定义一个 debounce.js 文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//简单构造出防抖大致框架</span></span><br><span class="line"><span class="comment">//func 要执行的函数，wait要等待的时间</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, wait</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timeout;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 清空定时器</span></span><br><span class="line">    <span class="keyword">if</span> (timeout) <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">    timeout = <span class="built_in">setTimeout</span>(func, wait);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样一个最最最基础的防抖就搭建好了,并没有什么难度,只需要规定时间不执行函数就可以啦! 当然为了检验我们的成果,我们可以测试一下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">container.<span class="property">onmousemove</span> = <span class="title function_">debounce</span>(doSomething, <span class="number">300</span>);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="https://www.daykalif.com/blog_img/debunce2.png" alt="debunce2"></p>
<p>很明显,此时防抖函数已经起作用啦,但这是可以从控制台看到打印了一些东西</p>
<p>这就是我们接下来要解决的问题啦</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="comment">// event</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e); <span class="comment">//MouseEvent</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//window</span></span><br><span class="line">  <span class="comment">// 这里可能是回调或者是ajax请求</span></span><br><span class="line">  <span class="comment">// 这里做个示例</span></span><br><span class="line">  container.<span class="property">innerHTML</span> = count++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>我们此次需要解决两个问题,this 和 e 的指向问题. dom 节点在触发事件的时候,this 是指向本身的,在这里理论上是应该指向 container 的.但是很遗憾经过匿名函数的包裹,this 指向了 window,所有我们需要修复它,当然也比较简单,在匿名函数前,this 是指向 container 的,所以我们只需要在匿名函数之前将 this 保存即可</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, wait</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timeout;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// console.log(this);  //=&gt;从中可以测试出this指向的container</span></span><br><span class="line">    <span class="comment">//保存this</span></span><br><span class="line">    <span class="keyword">let</span> _this = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="comment">// 清空定时器</span></span><br><span class="line">    <span class="keyword">if</span> (timeout) <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">    timeout = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// console.log(this)  //=&gt;这里面的this指向window，也就是前面的count那的this是指向window</span></span><br><span class="line">      <span class="comment">//但是防抖函数的this应该是指向container</span></span><br><span class="line">      func.<span class="title function_">apply</span>(_this); <span class="comment">//改变执行函数内部this指向的问题</span></span><br><span class="line">    &#125;, wait);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>event 的问题:事件处理函数有 event 对象,然后在测试中,e 却是 undefined,所以我们需要修正它为 mouseEvennt【也就是当前的鼠标事件对象】</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="comment">// event</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e); <span class="comment">//undefined</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//window</span></span><br><span class="line">  container.<span class="property">innerHTML</span> = count++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, wait</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timeout;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// console.log(this);  //=&gt;从中可以测试出this指向的container</span></span><br><span class="line">    <span class="comment">//保存this</span></span><br><span class="line">    <span class="keyword">let</span> _this = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="comment">// 解决前面的event指向问题</span></span><br><span class="line">    <span class="keyword">let</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line">    <span class="comment">// 清空上从定时器</span></span><br><span class="line">    <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">    timeout = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// console.log(this)  //=&gt;这里面的this指向window，也就是前面的count那的this是指向window</span></span><br><span class="line">      <span class="comment">//但是防抖函数的this应该是指向container</span></span><br><span class="line">      func.<span class="title function_">apply</span>(_this, args);</span><br><span class="line">    &#125;, wait);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样,再次测试,event 已经是指向 mouseEvent 了.这和防抖的源码已经相同啦,这时已经可以解决大多数问题了!</p>
<h5 id="防抖完善优化"><a href="#防抖完善优化" class="headerlink" title="防抖完善优化"></a>防抖完善优化</h5><p>原生防抖中会存在第三个参数,true,表示立即执行,而我们此次的目的,就是完善这个功能!</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">debounce</span>(doAnother, <span class="number">300</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<p>前面的防抖函数,需要经历 n 秒的等待时间,才会执行 而立即执行就是说,开头需要立即执行,然后等待 n 秒,如果期间有触发事件,则等待期推迟 n 秒!然后再执行</p>
<p>当然,只靠说你可能不太清楚,那么我们来完善一下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, wait, immediate</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timeout;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// console.log(this);  //=&gt;从中可以测试出this指向的container</span></span><br><span class="line">    <span class="comment">//保存this</span></span><br><span class="line">    <span class="keyword">let</span> _this = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="comment">// 解决前面的event指向问题</span></span><br><span class="line">    <span class="keyword">let</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line">    <span class="comment">// 清空上从定时器</span></span><br><span class="line">    <span class="keyword">if</span> (timeout) <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">    <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">      <span class="comment">//若在wait时间内执行过了,则不再执行</span></span><br><span class="line">      <span class="keyword">let</span> callNow = !timeout; <span class="comment">//callNow起始值为true,timeout刚开始为undefined,则作取反操作,那么就可以保证callNow初始值为true.</span></span><br><span class="line">      timeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        timeout = <span class="literal">null</span>; <span class="comment">//在wait内,timeout是一个id数字,在在此期间callNow为false,func函数不会执行!</span></span><br><span class="line">      &#125;, wait);</span><br><span class="line">      <span class="comment">//初始为true会直接执行,在wait时间之内,callNow设置为timeout有值,则callNow为false,此时不执行,在wait时间之后,timeout设置为null,此时callNow为true开始执行</span></span><br><span class="line">      <span class="keyword">if</span> (callNow) func.<span class="title function_">apply</span>(_this, args);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//不会立即执行</span></span><br><span class="line">      timeout = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// console.log(this)  //=&gt;这里面的this指向window，也就是前面的count那的this是指向window</span></span><br><span class="line">        <span class="comment">//但是防抖函数的this应该是指向container</span></span><br><span class="line">        func.<span class="title function_">apply</span>(_this, args);</span><br><span class="line">      &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样,我们的立刻执行防抖就完善好了,可以亲自动手尝试一下</p>
<h5 id="代码优化以及添加取消防抖功能"><a href="#代码优化以及添加取消防抖功能" class="headerlink" title="代码优化以及添加取消防抖功能"></a>代码优化以及添加取消防抖功能</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, wait, immediate</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timeout, result;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 检查func是否为函数</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> func !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;Expected a function&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// wait如果忘记设置,,默认为0</span></span><br><span class="line">  wait = wait || <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> debounced = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// console.log(this);  //=&gt;从中可以测试出this指向的container</span></span><br><span class="line">    <span class="comment">//保存this</span></span><br><span class="line">    <span class="keyword">let</span> _this = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="comment">// 解决前面的event指向问题</span></span><br><span class="line">    <span class="keyword">let</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line">    <span class="comment">// 清空上从定时器</span></span><br><span class="line">    <span class="keyword">if</span> (timeout) <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">      <span class="keyword">let</span> callNow = !timeout;</span><br><span class="line">      timeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        timeout = <span class="literal">null</span>;</span><br><span class="line">      &#125;, wait);</span><br><span class="line">      <span class="keyword">if</span> (callNow) result = func.<span class="title function_">apply</span>(_this, args);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      timeout = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// console.log(this)  //=&gt;这里面的this指向window，也就是前面的count那的this是指向window</span></span><br><span class="line">        <span class="comment">//但是防抖函数的this应该是指向container</span></span><br><span class="line">        func.<span class="title function_">apply</span>(_this, args);</span><br><span class="line">      &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result; <span class="comment">//返回一个想要的结果</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//添加取消防抖函数功能</span></span><br><span class="line">  debounced.<span class="property">cancel</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">    timeout = <span class="literal">null</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> debounced;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>完整代码示例:</strong></p>
</blockquote>
<p>index.html:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#444</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>取消防抖<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/underscore.js/1.11.0/underscore.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./debounce.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> count = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 演示事件频繁发生</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> container = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#container&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#btn&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// event指向问题</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 改变执行函数内部this的指向</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 可能会做回调或者ajax请求</span></span></span><br><span class="line"><span class="language-javascript">        container.<span class="property">innerHTML</span> = count++;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="string">&quot;想要的结果&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> doSome = <span class="title function_">debounce</span>(doSomething, <span class="number">2000</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">      btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        doSome.<span class="title function_">cancel</span>();</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">      container.<span class="property">onmousemove</span> = doSome;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>debounce.js:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, wait, immediate</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timeout, result;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> func !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 检查func是否为函数</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;Expected a function&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  wait = wait || <span class="number">0</span>; <span class="comment">// wait如果忘记设置,,默认为0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> debounced = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> _this = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">let</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line">    <span class="keyword">if</span> (timeout) <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">    <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">      <span class="keyword">let</span> callNow = !timeout;</span><br><span class="line">      timeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        timeout = <span class="literal">null</span>;</span><br><span class="line">      &#125;, wait);</span><br><span class="line">      <span class="keyword">if</span> (callNow) result = func.<span class="title function_">apply</span>(_this, args);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      timeout = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        func.<span class="title function_">apply</span>(_this, args);</span><br><span class="line">      &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  debounced.<span class="property">cancel</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//添加取消防抖函数功能</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;cancel&quot;</span>);</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">    timeout = <span class="literal">null</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> debounced;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="防抖函数常见应用场景"><a href="#防抖函数常见应用场景" class="headerlink" title="防抖函数常见应用场景"></a>防抖函数常见应用场景</h5><p>1.scroll 事件的滚动触发 2.搜索框输入查询 3.表单验证 4.按钮提交事件 5.浏览器&#96;窗口缩放,resize 事件</p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JS-WEB-API-AJAX</title>
    <url>/2020/01/23/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E3%80%90%E4%B8%93%E9%A2%98%E3%80%9110%EF%BC%9AJS-WEB-API-AJAX/</url>
    <content><![CDATA[<h4 id="JS-Web-API-AJAX"><a href="#JS-Web-API-AJAX" class="headerlink" title="JS Web API - AJAX"></a>JS Web API - AJAX</h4><h5 id="一、XMLHttpRequest"><a href="#一、XMLHttpRequest" class="headerlink" title="一、XMLHttpRequest"></a>一、XMLHttpRequest</h5><h5 id="二、状态码"><a href="#二、状态码" class="headerlink" title="二、状态码"></a>二、状态码</h5><blockquote>
<p>xhr.readyState:</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span> -（未初始化）还没有调用<span class="title function_">send</span>()方法</span><br><span class="line"><span class="number">1</span> -（载入）已调用<span class="title function_">send</span>()方法，正在发送请求</span><br><span class="line"><span class="number">2</span> -（载入完成）<span class="title function_">send</span>()方法执行完成，已经接收到全部响应内容</span><br><span class="line"><span class="number">3</span> -（交互）正在解析响应内容</span><br><span class="line"><span class="number">4</span> -（完成）响应内容解析完成，可以在客户端调用</span><br></pre></td></tr></table></figure>

<blockquote>
<p>xhr.status:</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">2xx - 表示成功处理请求，如<span class="number">200</span></span><br><span class="line">3xx - 需要重定向，浏览器直接跳转，如<span class="number">301</span>（永久重定向），<span class="number">302</span>（临时重定向），<span class="number">304</span>（资源未改变，浏览器会使用缓存的资源）</span><br><span class="line">4xx - 客户端请求错误，如<span class="number">404</span>（请求地址错误），<span class="number">403</span>（没有权限）</span><br><span class="line">5xx - 服务器端错误</span><br></pre></td></tr></table></figure>

<blockquote>
<p>问：手写一个简易的 ajax【使用 promise】</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//GET</span></span><br><span class="line"><span class="comment">// const xhr = new XMLHttpRequest()</span></span><br><span class="line"><span class="comment">// xhr.open(&#x27;GET&#x27;, &#x27;/data/test.json&#x27;, true)</span></span><br><span class="line"><span class="comment">// xhr.onreadystatechange = function () &#123;</span></span><br><span class="line"><span class="comment">//     // 这里的函数异步执行，可参考之前JS基础中的异步模块</span></span><br><span class="line"><span class="comment">//     if (xhr.readyState === 4) &#123;</span></span><br><span class="line"><span class="comment">//         if (xhr.status === 200) &#123;</span></span><br><span class="line"><span class="comment">//             // console.log(</span></span><br><span class="line"><span class="comment">//             //     JSON.parse(xhr.responseText)</span></span><br><span class="line"><span class="comment">//             // )</span></span><br><span class="line"><span class="comment">//             alert(xhr.responseText)</span></span><br><span class="line"><span class="comment">//         &#125; else if (xhr.status === 404) &#123;</span></span><br><span class="line"><span class="comment">//             console.log(&#x27;404 not found&#x27;)</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// xhr.send(null)   //每触发一次send，都会去调用onreadystatechange，并且里面的readyState和status可能会发生变化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// POST</span></span><br><span class="line"><span class="comment">// var xhr = null</span></span><br><span class="line"><span class="comment">// if(window.XMLHttpRequest)&#123;       //ajax的open方法</span></span><br><span class="line"><span class="comment">//     xhr = new XMLHttpRequest()</span></span><br><span class="line"><span class="comment">// &#125;else&#123;</span></span><br><span class="line"><span class="comment">//     xhr = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// xhr.open(&#x27;POST&#x27;, &#x27;/login&#x27;, true)    //true:异步 false:同步   //创建ajax对象</span></span><br><span class="line"><span class="comment">// xhr.setRequestHeader(&#x27;content-type&#x27;,&#x27;application/x-www-form-urlencoded;charset=utf-8&#x27;)   //设置请求头</span></span><br><span class="line"><span class="comment">// xhr.onreadystatechange = function () &#123;   //回调函数监听状态</span></span><br><span class="line"><span class="comment">//     if (xhr.readyState === 4) &#123;</span></span><br><span class="line"><span class="comment">//         if (xhr.status === 200) &#123;</span></span><br><span class="line"><span class="comment">//             // console.log(</span></span><br><span class="line"><span class="comment">//             //     JSON.parse(xhr.responseText)</span></span><br><span class="line"><span class="comment">//             // )</span></span><br><span class="line"><span class="comment">//             alert(xhr.responseText)</span></span><br><span class="line"><span class="comment">//         &#125; else if (xhr.status === 404) &#123;</span></span><br><span class="line"><span class="comment">//             console.log(&#x27;404 not found&#x27;)</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// const postData = &#123;</span></span><br><span class="line"><span class="comment">//     userName:&#x27;zhangsan&#x27;,</span></span><br><span class="line"><span class="comment">//     password:&#x27;xxx&#x27;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// xhr.send(JSON.stringify(postData)) //发送请求</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装ajax请求</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ajax</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, url, <span class="literal">true</span>);</span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">          <span class="comment">//http协议的状态码</span></span><br><span class="line">          <span class="title function_">resolve</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (xhr.<span class="property">status</span> === <span class="number">404</span> || xhr.<span class="property">status</span> === <span class="number">500</span>) &#123;</span><br><span class="line">          <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;404 not found&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    xhr.<span class="title function_">send</span>(<span class="literal">null</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> url = <span class="string">&quot;/data/test.json&quot;</span>;</span><br><span class="line"><span class="title function_">ajax</span>(url)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err));</span><br></pre></td></tr></table></figure>

<h5 id="三、跨域：同源策略，跨域解决方案"><a href="#三、跨域：同源策略，跨域解决方案" class="headerlink" title="三、跨域：同源策略，跨域解决方案"></a>三、跨域：同源策略，跨域解决方案</h5><h6 id="1-什么是跨域（同源策略）"><a href="#1-什么是跨域（同源策略）" class="headerlink" title="1.什么是跨域（同源策略）"></a>1.什么是跨域（同源策略）</h6><blockquote>
<p>同源策略：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ajax请求时，浏览器要求当前网页和server必须同源（安全）</span><br><span class="line">同源：协议、域名、端口，三者必须一致</span><br><span class="line">前端：http://a.com:8080/;   server:https://b.com/api/xxx</span><br></pre></td></tr></table></figure>

<blockquote>
<p>加载图片，css，js 可无视同源策略</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;img src=跨域的图片地址/&gt;   //有的图片地址的服务端设置了防盗链，这个时候就不可访问了，如果没有设置，则图片也可以访问。但是浏览器是没有限制的</span><br><span class="line"></span><br><span class="line">&lt;<span class="built_in">link</span> href=跨域的css地址/&gt;</span><br><span class="line">&lt;script src=跨域的js地址&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;img/&gt;可用于统计打点，可使用第三方统计服务</span><br><span class="line">&lt;<span class="built_in">link</span>/&gt;&lt;script&gt;可使用CDN，CDN一般都是外域</span><br><span class="line">&lt;script&gt;可实现JSONP</span><br></pre></td></tr></table></figure>

<blockquote>
<p>跨域</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">所有的跨域，都必须经过server端允许和配合</span><br><span class="line">未经server端允许就实现跨域，说明浏览器有漏洞，危险信号</span><br></pre></td></tr></table></figure>

<h6 id="2-跨域的常用实现方式"><a href="#2-跨域的常用实现方式" class="headerlink" title="2.跨域的常用实现方式"></a>2.跨域的常用实现方式</h6><blockquote>
<p>1.JSONP</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">访问https://imooc.com/,服务端一定返回一个html文件吗？</span><br><span class="line">服务器可以任意动态拼接数据返回，只要符合html格式要求</span><br><span class="line">同理于&lt;script src=<span class="string">&quot;https://imooc.com/getData.js&quot;</span>&gt;</span><br><span class="line">&lt;script&gt;可绕过跨域限制</span><br><span class="line">服务器可以任意动态拼接数据返回</span><br><span class="line">所以，&lt;script&gt;就可以获得跨域的数据，只要服务端愿意返回</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>jsonp 演示<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>一段文字 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- jsonp --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="property">abc</span> = <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://localhost:8002/jsonp.js?username=xxx&amp;callback=abc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- JQuery实现jsonp --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">url</span>: <span class="string">&quot;http://localhost:8882/x-origin.json&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">dataType</span>: <span class="string">&quot;jsonp&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">jsonpCallback</span>: <span class="string">&quot;callback&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>2.CORS（服务端支持）-服务器设置 http header</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第二个参数填写允许跨域的域名称，不建议直接写“*”</span></span><br><span class="line">response.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;http://localhost:8081&quot;</span>);</span><br><span class="line">response.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&quot;X-Requested-With&quot;</span>);</span><br><span class="line">response.<span class="title function_">setHeader</span>(</span><br><span class="line">  <span class="string">&quot;Access-Control-Allow-Methods&quot;</span>,</span><br><span class="line">  <span class="string">&quot;PUT,POST,GET,DELETE,OPTIONS&quot;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收跨域的cookie</span></span><br><span class="line">response.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br></pre></td></tr></table></figure>

<h5 id="四、ajax-工具"><a href="#四、ajax-工具" class="headerlink" title="四、ajax 工具"></a>四、ajax 工具</h5><blockquote>
<p>1.jQuery 完整 ajax 示例</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> list = &#123;&#125;; <span class="comment">//请求参数</span></span><br><span class="line">  $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>, <span class="comment">//请求方式</span></span><br><span class="line">    <span class="attr">contentType</span>: <span class="string">&quot;application/json;charset=UTF-8&quot;</span>, <span class="comment">//请求的媒体类型</span></span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;http://127.0.0.1/admin/list/&quot;</span>, <span class="comment">//请求地址</span></span><br><span class="line">    <span class="attr">data</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(list), <span class="comment">//数据，json字符串</span></span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">result</span>) &#123;</span><br><span class="line">      <span class="comment">//请求成功</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="comment">//请求失败，包含具体的错误信息</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">status</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">responseText</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>2.使用 fetch</p>
</blockquote>
<p>请注意，fetch 规范与 jQuery.ajax() 主要有三种方式的不同：</p>
<ul>
<li>当接收到一个代表错误的 HTTP 状态码时，从 fetch() 返回的 Promise 不会被标记为 reject，即使响应的 HTTP 状态码是 404 或 500。相反，它会将 Promise 状态标记为 resolve （但是会将 resolve 的返回值的 ok 属性设置为 false ），仅当网络故障时或请求被阻止时，才会标记为 reject。</li>
<li>fetch() 可以接受跨域 cookies；你也可以使用 fetch() 建立起跨域会话。其他网站的 Set-Cookie 头部字段将会被无视。</li>
<li>fetch 不会发送 cookies。除非你使用了 credentials 的初始化选项。（自 2017 年 8 月 25 日以后，默认的 credentials 政策变更为 same-origin。Firefox 也在 61.0b13 版本中进行了修改）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&quot;http://example.com/movies.json&quot;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> response.<span class="title function_">json</span>();</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">myJson</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(myJson);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>3.使用 axios</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//-----get-----</span></span><br><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&quot;axios&quot;</span>);</span><br><span class="line">axios</span><br><span class="line">  .<span class="title function_">get</span>(<span class="string">&quot;/user?ID=12345&quot;</span>) <span class="comment">// Make a request for a user with a given ID</span></span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="comment">// handle success</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// handle error</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// always executed</span></span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">// Optionally the request above could also be done as</span></span><br><span class="line">axios</span><br><span class="line">  .<span class="title function_">get</span>(<span class="string">&quot;/user&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      <span class="attr">ID</span>: <span class="number">12345</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// always executed</span></span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">// Want to use async/await? Add the `async` keyword to your outer function/method.</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getUser</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&quot;/user?ID=12345&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-----Performing a POST request-----</span></span><br><span class="line">axios</span><br><span class="line">  .<span class="title function_">post</span>(<span class="string">&quot;/user&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&quot;Fred&quot;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&quot;Flintstone&quot;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">//-----Performing multiple concurrent requests-----</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getUserAccount</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> axios.<span class="title function_">get</span>(<span class="string">&quot;/user/12345&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getUserPermissions</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> axios.<span class="title function_">get</span>(<span class="string">&quot;/user/12345/permissions&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">axios.<span class="title function_">all</span>([<span class="title function_">getUserAccount</span>(), <span class="title function_">getUserPermissions</span>()]).<span class="title function_">then</span>(</span><br><span class="line">  axios.<span class="title function_">spread</span>(<span class="keyword">function</span> (<span class="params">acct, perms</span>) &#123;</span><br><span class="line">    <span class="comment">// Both requests are now complete</span></span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>乱码</p>
</blockquote>
<p>出现乱码是非常常见的。</p>
<p>1.文件 2.页面 3.请求 4.地址 5.设置</p>
<p>1).在文件如果没有正确编码设置时会出现乱码<br>2).在页面没有正确编码设置时会出现乱码<br>3).在与后台进行数据交互时没有进行请求编码设置时会出现乱码<br>4).在地址进行参数传递时没有正确编码设置时会出现乱码<br>5).在数据返回及请求时没有正确编码设置时会出现乱码</p>
<blockquote>
<p>ajax:</p>
</blockquote>
<p>1).先明确 get 和 post 的一点区别</p>
<ul>
<li>get 请求 – 参数都是写在 url 上，参数要做 urlencode, 服务端是不会处理 body 里边的内容的，content-type 是没有用的，也不用设置。</li>
<li>post 请求 – 服务端会处理 body 里边的内容。服务端是根据 content-type 来决定如何处理 body 的，所以要指定 content-type，服务端才能正确处理请求。</li>
</ul>
<p>content-type 是 application&#x2F;json，那么 body 的内容就是一窜 json, 如 {“a”:1} 或者 [1,2,3]<br>x-www-form-urlencoded 那么 body 的内容就和写在 url 上的参数形式是一样的如 a&#x3D;1&amp;b&#x3D;2<br>还有其它各种类型的 content-type</p>
<p>2).为什么会有 urlencoded？<br>因为参数的值可能包含一些关键字如 &#x3D; 、&amp; 这些, 所以形如 name1&#x3D;value1&amp;name2&#x3D;value2 的这种形式中的 name 和 value 就要做 urlencode, 把特殊字符转义</p>
<p>3).为什么在使用 http 框架的时候不要自己在 url 上拼参数？<br>在 url 上拼参数是要做 urlencode 的，如果没有做，请求就可能不是一个正确的请求。<br>一般的框架都会提供分别设置 url 和参数的地方，后面会根据具体情况对参数做 urlencode，get 请求放 url 上，作为 queryString。post 请求放 body。<br>也就是框架已经实现了这部分的操作，那么使用方自己再整一遍就是重复多余的，而且可能引入新的 bug，谁知道你有没有处理正确。</p>
<p>4).下面以 jQuery 提供的 ajax 为例：</p>
<p>jQuery 提供的 ajax，他默认的 content-type 就是 x-www-form-urlencoded。<br>var id&#x3D;1,name&#x3D;’a&#x3D;1&amp;b&#x3D;2’;<br>$.ajax({<br>type: ‘post’,<br>url: ‘&#x2F;api’,<br>data: {<br>id: id,<br>name: name<br>}<br>});<br>这个例子发出去的请求是<br>Request URL: <a href="https://host/api">https://host/api</a><br>Request Method: POST<br>body: id&#x3D;1&amp;name&#x3D;a%3d1%26b%3d2</p>
<hr>
<p>如果指定 content-type 为 application&#x2F;json<br>var id&#x3D;1,name&#x3D;’a&#x3D;1&amp;b&#x3D;2’;<br>$.ajax({<br>type: ‘post’,<br>url: ‘&#x2F;api’,<br>data: JSON.stringify({<br>id: id,<br>name: name<br>}),<br>contentType: ‘application&#x2F;json’<br>});<br>这个例子发出去的请求是<br>Request URL: <a href="https://host/api">https://host/api</a><br>Request Method: POST<br>Content—Type: application&#x2F;json<br>body: {“id”:1,”name”:”a&#x3D;1&amp;b&#x3D;2”}</p>
<p>这里边这个 body 就是 JSON.stringify()返回的字符窜</p>
<hr>
<p>var id&#x3D;1,name&#x3D;’a&#x3D;1&amp;b&#x3D;2’;<br>$.ajax({<br>type: ‘get’,<br>url: ‘&#x2F;api’,<br>data: {<br>id: id,<br>name: name<br>}<br>});<br>这个例子发出去的请求是<br>Request URL: <a href="https://host/api?id=1&name=a=1&b=2">https://host/api?id=1&amp;name=a%3d1%26b%3d2</a><br>Request Method: GET<br>没有 body</p>
<hr>
<p>var id&#x3D;1,name&#x3D;’a&#x3D;1&amp;b&#x3D;2’;<br>$.ajax({<br>type: ‘get’,<br>url: ‘&#x2F;api?id&#x3D;’+id + ‘&amp;name&#x3D;’ + name<br>});<br>这个例子发出去的请求是<br>Request URL: <a href="https://host/api?id=1&name=a=1&b=2">https://host/api?id=1&amp;name=a=1&amp;b=2</a><br>Request Method: GET<br>没有 body<br>这样就出问题了。服务端会认为你传过来的 name 是 a&#x3D;1, 并且还有一个参数 b，值是 2。<br>正确的 url 应该是 ‘&#x2F;api?id&#x3D;’+ encodeURIComponent(id) + ‘&amp;name&#x3D;’ + encodeURIComponent(name)<br>但这样做就是把本来框架会帮你做好的事情自己做，重复多余。</p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>js</tag>
        <tag>ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>JS-WEB-API-存储</title>
    <url>/2020/01/24/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E3%80%90%E4%B8%93%E9%A2%98%E3%80%9111%EF%BC%9AJS-WEB-API-%E5%AD%98%E5%82%A8/</url>
    <content><![CDATA[<h4 id="五、JS-WEB-API-存储"><a href="#五、JS-WEB-API-存储" class="headerlink" title="五、JS WEB API - 存储"></a>五、JS WEB API - 存储</h4><h5 id="1-cookie"><a href="#1-cookie" class="headerlink" title="1.cookie"></a>1.cookie</h5><p>本身用于浏览器和 server 通讯<br>被“借用”到本地存储来<br>可用 document.cookie &#x3D; ‘…’ 来修改<br>【同一个 key，会进行覆盖；不同的 key，会进行追加】</p>
<p>cookie 的缺点：<br>存储大小限制，最大 4kB<br>http 请求时需要发送到服务器端，增加请求数据量<br>只能用 document.cookie&#x3D;”…”来修改，太过简陋</p>
<p>存：document.cookie &#x3D; ‘a&#x3D;100’<br>取：document.cookie</p>
<h5 id="2-localStorage-和-sessionStorage"><a href="#2-localStorage-和-sessionStorage" class="headerlink" title="2.localStorage 和 sessionStorage"></a>2.localStorage 和 sessionStorage</h5><p>HTML5 专门为存储而设计，最大可存 5M（每个域名最大都可存 5M）<br>API 简单易用 setItem getItem<br>不会随着 http 请求被发送出去</p>
<p>存：localStorage.setItem(‘a’,100)<br>取：localStorage.getItem(‘a’) &#x2F;&#x2F;‘100’【字符串】</p>
<p>localStorage 数据会永久存储，除非代码或手动删除<br>sessionStorage 数据只存在于当前会话，浏览器关闭则清空<br>一般用 localStorage 会更多一些</p>
<p><strong>保存数据到 sessionStorage</strong><br><code>sessionStorage.setItem(&#39;key&#39;,&#39;value&#39;);</code></p>
<p><strong>从 sessionStorage 获取数据</strong><br><code>var data = sessionStorage.getItem(&#39;key&#39;);</code></p>
<p><strong>从 sessionStorage 删除保存的数据</strong><br><code>sessionStorage.removeItem(&#39;key&#39;);</code></p>
<p><strong>从 sessionStorage 删除所有保存的数据</strong><br><code>sessionStorage.clear();</code></p>
<h5 id="描述-cookie-localStorage-sessionStorage-区别"><a href="#描述-cookie-localStorage-sessionStorage-区别" class="headerlink" title="描述 cookie,localStorage,sessionStorage 区别"></a>描述 cookie,localStorage,sessionStorage 区别</h5><p>容量<br>API 易用性<br>是否跟随 http 请求发送出去</p>
<blockquote>
<p>数组，对象 cookie 的存储和访问？</p>
</blockquote>
<p>1.JSON.parse()函数：将 JS 对象表达式（json）字符串转为对象，具有 json 格式检测功能<br>2.JSON.stringify()函数：将 JS 值转换为 js 对象表示法（json）字符串<br>3.eval()函数–性能不及 JSON.parse()，安全性不高。<br>eval() 函数可计算某个字符串，并执行其中的的 JavaScript 代码。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例子：</span></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;&#123;&#125;&quot;</span>);</span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&quot; &#x27;(&#x27; + &#x27;&#123;&#125;&#x27; + &#x27;)&#x27; &quot;</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>js</tag>
        <tag>存储</tag>
      </tags>
  </entry>
  <entry>
    <title>http浏览器缓存</title>
    <url>/2020/01/27/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E3%80%90%E4%B8%93%E9%A2%98%E3%80%9112%EF%BC%9Ahttp%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<h5 id="一、http-状态码"><a href="#一、http-状态码" class="headerlink" title="一、http 状态码"></a>一、http 状态码</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">状态码的分类：</span><br><span class="line">    1xx服务器收到请求</span><br><span class="line">    2xx请求成功，如200</span><br><span class="line">    3xx重定向，如302</span><br><span class="line">    4xx客户端错误，如404</span><br><span class="line">    5xx服务端错误，如500</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">常见状态码：</span><br><span class="line">    200成功</span><br><span class="line">    301永久重定向（配合location，浏览器自动处理）</span><br><span class="line">    302临时重定向（配合location，浏览器自动处理）</span><br><span class="line">    304资源未被修改</span><br><span class="line">    404资源未找到</span><br><span class="line">    403没有权限</span><br><span class="line">    500服务器错误</span><br><span class="line">    504网关超时</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">关于协议和规范：</span><br><span class="line">    就是一个约定</span><br><span class="line">    要求大家都跟着执行</span><br><span class="line">    不要违反规范，例如IE浏览器</span><br></pre></td></tr></table></figure>

<h5 id="二、http-methods"><a href="#二、http-methods" class="headerlink" title="二、http methods"></a>二、http methods</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">传统的methods：</span><br><span class="line">    get获取服务器的数据</span><br><span class="line">    post向服务器提交数据</span><br><span class="line">    简单的网页功能，就这两个操作</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">现在的methods：</span><br><span class="line">    get获取数据</span><br><span class="line">    post新建数据</span><br><span class="line">    patch/put更新数据</span><br><span class="line">    delete删除数据</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<h5 id="三、Restful-API"><a href="#三、Restful-API" class="headerlink" title="三、Restful API"></a>三、Restful API</h5><blockquote>
<p>问：什么是 Restful API？</p>
</blockquote>
<p>一种新的 API 设计方法（早已推广使用）<br>传统 API 设计：把每个 url 当作一个功能<br>Restfu API 设计：把每个 url 当作一个唯一的资源</p>
<blockquote>
<p>问：如何设计成一个资源？</p>
</blockquote>
<p>尽量不用 url 参数：<br>传统 API 设计： &#x2F;api&#x2F;list?pageIndex&#x3D;2<br>Restfu API 设计： &#x2F;api&#x2F;list&#x2F;2</p>
<p>用 method 表示操作类型（传统 API 设计）：<br>post 请求 &#x2F;api&#x2F;create-blog<br>post 请求 &#x2F;api&#x2F;update-blog?id&#x3D;100<br>get 请求 &#x2F;api&#x2F;get-blog?id&#x3D;100</p>
<p>用 method 表示操作类型（Restful API 设计）：<br>post 请求 &#x2F;api&#x2F;blog<br>patch 请求 &#x2F;api&#x2F;blog&#x2F;100<br>get 请求 &#x2F;api&#x2F;blog&#x2F;100</p>
<h5 id="四、http-headers"><a href="#四、http-headers" class="headerlink" title="四、http headers"></a>四、http headers</h5><blockquote>
<p>问：http 常见的 header 有哪些？</p>
</blockquote>
<p>Accept 浏览器可接收的数据格式<br>Accept-Encoding 浏览器可接收的压缩算法，如 gzip<br>Accept-Language 浏览器可接收的语言，如 zh-CN<br>Connection:keep-alive 一次 TCP 连接重复使用<br>cookie(请求时会带上本地信息)<br>Host<br>User-Agent(简称 UA)浏览器信息<br>Content-type 发送数据的格式，如 application&#x2F;json</p>
<blockquote>
<p>问：常见的 Response Headers</p>
</blockquote>
<p>Content-type 返回数据的格式，如 application&#x2F;json<br>Content-length 返回数据的大小，多少字节<br>Content-Encoding 返回数据的压缩算法，如 gzip<br>Set-Cookie</p>
<blockquote>
<p>问：自定义 header</p>
</blockquote>
<p>axios 中就可以自定义 header：【文档地址：axios-js.com&#x2F;docs&#x2F;#Request-Config】<br>如：headers:{‘X-Requested-With’:’XMLHttpRequest’}</p>
<blockquote>
<p>问：缓存相关的 headers</p>
</blockquote>
<p>Cache-Control Expires（不用了，已经被 Cache-Control 替代了）<br>Last-Modified If-Modified-Since<br>Etag If-None-Match</p>
<h5 id="五、http-缓存策略"><a href="#五、http-缓存策略" class="headerlink" title="五、http 缓存策略"></a>五、http 缓存策略</h5><h6 id="关于缓存的介绍"><a href="#关于缓存的介绍" class="headerlink" title="关于缓存的介绍"></a>关于缓存的介绍</h6><blockquote>
<p>问：什么是缓存？</p>
</blockquote>
<p>简单来说，浏览器缓存就是把一个已经请求过的 Web 资源（如 html 页面，图片，js，数据等）拷贝一份副本储存在浏览器中。缓存会根据进来的请求保存输出内容的副本。当下一个请求来到的时候，如果是相同的 URL，缓存会根据缓存机制决定是直接使用副本响应访问请求，还是向源服务器再次发送请求。比较常见的就是浏览器会缓存访问过网站的网页，当再次访问这个 URL 地址的时候，如果网页没有更新，就不会再次下载网页，而是直接使用本地缓存的网页。只有当网站明确标识资源已经更新，浏览器才会再次下载网页。</p>
<p>概括：在页面请求之后，web 资源都被缓存了，在后面的重复请求中，许多资源都是直接从缓存中读取的（from cache），而不是重新去向服务器请求。</p>
<blockquote>
<p>问：为什么需要缓存？</p>
</blockquote>
<p>1）减少网络带宽消耗</p>
<p>无论对于网站运营者或者用户，带宽都代表着金钱，过多的带宽消耗，只会便宜了网络运营商。当 Web 缓存副本被使用时，只会产生极小的网络流量，可以有效的降低运营成本。</p>
<p>（2）降低服务器压力</p>
<p>给网络资源设定有效期之后，用户可以重复使用本地的缓存，减少对源服务器的请求，间接降低服务器的压力。同时，搜索引擎的爬虫机器人也能根据过期机制降低爬取的频率，也能有效降低服务器的压力。</p>
<p>（3）减少网络延迟，加快页面打开速度</p>
<p>带宽对于个人网站运营者来说是十分重要，而对于大型的互联网公司来说，可能有时因为钱多而真的不在乎。那 Web 缓存还有作用吗？答案是肯定的，对于最终用户，缓存的使用能够明显加快页面打开速度，达到更好的体验。</p>
<p>概括：让页面加载更快。cpu 计算和页面渲染较快，但是网络请求的加载相当较慢。尽量减少网络请求的体积和数量。网络请求是不稳定的。</p>
<blockquote>
<p>问：哪些资源可以被缓存？</p>
</blockquote>
<p>静态资源（js css img）<br>【html 可能会被更新，业务数据会更新（如博客内容），这些都不可缓存】</p>
<h6 id="http-缓存策略（强制缓存-协商缓存）"><a href="#http-缓存策略（强制缓存-协商缓存）" class="headerlink" title="http 缓存策略（强制缓存+协商缓存）"></a>http 缓存策略（强制缓存+协商缓存）</h6><blockquote>
<p>强制缓存：</p>
</blockquote>
<p>Cache-Control：</p>
<ul>
<li>Response Headers 中加入</li>
<li>控制强制缓存的逻辑</li>
<li>例如：Cache-Control:max-age&#x3D;31536000(单位是秒)【1 年】</li>
</ul>
<p>Cache-Control 的值：</p>
<ul>
<li>max-age:过期时间</li>
<li>no-cache:不用强制缓存，由服务端处理</li>
<li>no-store:不用强制缓存，直接服务端拿来就可以了</li>
<li>private:只能允许最终用户做缓存</li>
<li>public：中间路由或中间代理也可以做缓存</li>
</ul>
<p>关于 Expires：</p>
<ul>
<li>同在 Response Headers 中</li>
<li>同为控制缓存过期</li>
<li>已被 Cache-Control 代替</li>
</ul>
<blockquote>
<p>协商缓存（对比缓存）：</p>
</blockquote>
<p>服务器端缓存策略：服务端来判断这个资源是否可以被缓存，而不是缓存在服务端<br>服务器判断客户端资源，是否和服务端资源一样<br>判断资源一样，服务端没有改动过，则一致返回 304，否则返回 200 和最新的资源</p>
<blockquote>
<p>资源标识：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">在Request Headers中，有两种：</span><br><span class="line"></span><br><span class="line">1.Last-Modified（资源的最后修改时间）</span><br><span class="line">浏览器-----------------------初次请求------------------------------------------------&gt;服务器</span><br><span class="line">浏览器&lt;----------------返回资源，和资源标识Last-Modified---------------------------服务器</span><br><span class="line">浏览器-------再次请求，Request Headers带着If-Modified-Since:Last-Modified------&gt;服务器</span><br><span class="line">浏览器&lt;-------返回304，或返回资源和新的资源标识Last-Modified---------------------服务器</span><br><span class="line"></span><br><span class="line">2.Etag资源的唯一标识（一个字符串，类似人类的指纹）</span><br><span class="line">浏览器-----------------------初次请求-----------------------------------&gt;服务器</span><br><span class="line">浏览器&lt;----------------返回资源，和资源标识Etag------------------------服务器</span><br><span class="line">浏览器-------再次请求，Request Headers带着If-None-Match:Etag------&gt;服务器</span><br><span class="line">浏览器&lt;-------返回304，或返回资源和新的资源标识Etag------------------服务器</span><br><span class="line"></span><br><span class="line">Last-Modified和Etag：</span><br><span class="line">这两个可以共存，会优先使用Etag</span><br><span class="line">Last-Modified只能精确到秒级</span><br><span class="line">如果资源被重复生成，而内容不变，则Etag更精确</span><br></pre></td></tr></table></figure>

<blockquote>
<p>问：描述一下 http 的缓存机制【重要】</p>
</blockquote>
<p><img src="https://www.daykalif.com/blog_img/http.jpeg" alt="daykalif"></p>
<blockquote>
<p>一次完整的 http 请求：</p>
</blockquote>
<p>1.域名解析<br>2.tcp3 次握手 3.建立 tcp 链接后，发起 http 请求 4.服务端响应 http 请求，浏览器得到 html 代码 5.浏览器解析 html 代码，并请求 html 代码中的资源 6.浏览器对页面进行渲染，呈现给用户。</p>
<blockquote>
<p>HTTP 和 HTTPS 的区别：</p>
</blockquote>
<p>HTTP 协议通常承载于 TCP 协议之上，在 HTTP 和 TCP 之间添加一个安全协议层（SSL 或 TSL）。这个时候，就成了我们常说的 HTTPS。默认 HTTP 的端口号为 80，HTTPS 的端口号为 443.</p>
<blockquote>
<p>浏览器 HTTP 请求流程：</p>
</blockquote>
<p>第一次请求：<br><img src="https://www.daykalif.com/blog_img/http1.png" alt="daykalif"></p>
<p>再次请求：<br><img src="https://www.daykalif.com/blog_img/http2.png" alt="daykalif"></p>
<blockquote>
<p>刷新操作方式，对缓存的影响：</p>
</blockquote>
<p>三种刷新操作：<br>正常操作：地址栏输入 url,跳转链接，前进后退等<br>手动刷新：F5，command+R,点击刷新按钮，右击菜单刷新<br>强制刷新：ctrl+F5,shift+command+R</p>
<blockquote>
<p>不同刷新操作，不同的缓存策略</p>
</blockquote>
<p>正常刷新：强制缓存有效，协商缓存有效<br>手动刷新：强制缓存失效，协商缓存有效<br>强制刷新：强制缓存失效，协商缓存失效</p>
<blockquote>
<p>不能缓存的请求：</p>
</blockquote>
<p>当然并不是所有请求都能被缓存，无法被浏览器缓存的请求如下：</p>
<ol>
<li>HTTP 信息头中包含 Cache-Control:no-cache，pragma:no-cache（HTTP1.0），或 Cache-Control:max-age&#x3D;0 等告诉浏览器不用缓存的请求</li>
<li>需要根据 Cookie，认证信息等决定输入内容的动态请求是不能被缓存的</li>
<li>经过 HTTPS 安全加密的请求（有人也经过测试发现，ie 其实在头部加入 Cache-Control：max-age 信息，firefox 在头部加入 Cache-Control:Public 之后，能够对 HTTPS 的资源进行缓存，参考《<a href="http://www.ruanyifeng.com/blog/2011/02/seven_myths_about_https.html">HTTPS 的七个误解</a>》）</li>
<li>POST 请求无法被缓存</li>
<li>HTTP 响应头中不包含 Last-Modified&#x2F;Etag，也不包含 Cache-Control&#x2F;Expires 的请求无法被缓存</li>
</ol>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>js</tag>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>开发环境</title>
    <url>/2019/03/27/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E3%80%90%E4%B8%93%E9%A2%98%E3%80%9113%EF%BC%9A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h4 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h4><h5 id="git"><a href="#git" class="headerlink" title="git"></a>git</h5><p>最常用的代码版本管理工具<br>大型项目需要多人协作开发，必须熟用 git</p>
<p>Mac OS 自带 git 命令，windows 可去官网下载安装<br>git 服务端常见的有 github coding.net 等<br>大公司会搭建自己的内网 git 服务</p>
<p>git status:查看改动<br>git diff&#x2F;git diff 文件名 :直观查看修改到了哪些内容<br>git add 文件名&#x2F;git add . ：提交所有的文件<br>git commit -m “xxx”：生成一条记录<br>git log:查看提交记录<br>git show xxxxxxxxxxxxxxxxxxxxxxx:查看本次提交的记录<br>git checkout 文件名&#x2F;git checkout . :撤销<br>git push origin 分支名：将修改 push 到服务端<br>git pull origin master：将服务端最新代码拉下来<br>git branch：获取分支<br>git checkout -b 分支名&#x2F;git checkout 分支名：拉取一个分支&#x2F;切换分枝<br>git fetch:将服务端所有分支都拉下来<br>git merge 分支名：合并代码<br>git stash:不小心在主分支做了修改，可以先放到 stash 中，再切换回子分支<br>git stash pop:切换回子分支后，将 stash 中的内容放到子分支中</p>
<h5 id="调试工具"><a href="#调试工具" class="headerlink" title="调试工具"></a>调试工具</h5><p>Elements:Dom 结构的展示<br>Console：打印一些东西<br>Source:源码（debugger，打断点）<br>Network：资源的加载<br>Application：localStorage,sessionStorage 本地存储</p>
<p>（Chrome 还有包括比如：查看内存泄露，…）</p>
<h5 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h5><p>移动端 h5 页，查看网络请求，需要抓包工具<br>windows 一般用 fiddler<br>Mac OS 一般用 charles</p>
<p>手机和电脑连同一个局域网<br>将手机代理到电脑上<br>手机浏览网页，即可抓包<br>查看网络请求<br>网址代理<br>https</p>
<blockquote>
<p>webpack 和 babel<br>ES6 模块化，浏览器暂不支持<br>ES6 语法，浏览器并不完全支持<br>压缩代码，整合代码，以让网页加载更快</p>
</blockquote>
<h5 id="linux-常用命令"><a href="#linux-常用命令" class="headerlink" title="linux 常用命令"></a>linux 常用命令</h5><p>公司的线上机器一般都是 linux（参考阿里云）<br>测试机也需要保持一致，用 linux<br>测试机或者线上机出了问题，本地又不能复现，需要去排查</p>
<p>例如：<br>本地登陆到线上机器：ssh <a href="mailto:&#x72;&#x6f;&#111;&#x74;&#64;&#49;&#x39;&#50;&#x2e;&#x31;&#54;&#56;&#46;&#x31;&#x30;&#46;&#x32;&#x31;">&#x72;&#x6f;&#111;&#x74;&#64;&#49;&#x39;&#50;&#x2e;&#x31;&#54;&#56;&#46;&#x31;&#x30;&#46;&#x32;&#x31;</a> ,然后输入密码，就可以进入 linux 环境<br>查看文件夹：ls<br>查看文件列表：ll<br>清屏：clear<br>新建文件夹：mkdir abc<br>删除文件夹：rm -rf abc【-r:递归删除，-f:强制删除】<br>定位到目录：cd<br>修改文件名：mv index.html index1.html【将 index.js 文件名修改成 index1.html】<br>移动文件：mv bundle.js ..&#x2F; 【将 bundle.js 移动到上级目录】<br>拷贝：cp a.js a1.js 【将 a.js 拷贝一份叫 a1.js】<br>删除文件：rm a1.js<br>新建文件：touch d.js<br>新建文件并打开：vi c.js 或者 vim c.js<br>查看文件：cat a.js 或者 head a.js【打印开头几行】 或者 tail a.js【打印末尾几行】 或者 grep “babel” package.js【查看文件中是否包含 babel】<br>学习 vim 命令：vimtutor</p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>运行环境</title>
    <url>/2020/01/27/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E3%80%90%E4%B8%93%E9%A2%98%E3%80%9114%EF%BC%9A%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h4 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h4><p>运行环境即浏览器（server 端有 nodejs）<br>下载网页源代码，渲染出页面，期间会执行若干 JS<br>要保证代码在浏览器中：稳定且高效</p>
<h5 id="一、网页加载过程"><a href="#一、网页加载过程" class="headerlink" title="一、网页加载过程"></a>一、网页加载过程</h5><blockquote>
<p>1.加载资源的形式</p>
</blockquote>
<p>html 代码<br>媒体文件，如图片、视频等<br>JavaScript css</p>
<blockquote>
<p>2.加载资源的过程</p>
</blockquote>
<p>DNS 解析：域名-&gt;IP 地址<br>浏览器根据 IP 地址向服务器发起 http 请求<br>服务器处理请求 http 请求，并返回给浏览器</p>
<blockquote>
<p>3.渲染页面的过程</p>
</blockquote>
<p>根据 HTML 代码生成 DOM Tree<br>根据 CSS 代码生成 CSSOM<br>将 DOM Tree 和 CSSOM 整合形成 Render Tree<br>根据 Render Tree 渲染页面<br>遇到 script 标签则暂停渲染，优先加载并执行 JS 代码，完成再继续<br>直至把 Render Tree 渲染完成</p>
<blockquote>
<p>问：为何建议把 css 放到 head 中？</p>
</blockquote>
<p>在 DOM 树生成完成之前，就把 css 加载完，将 DOM Tree 和 CSSOM 整合形成 Render Tree</p>
<blockquote>
<p>问：为何建议把 js 放到 body 最后？</p>
</blockquote>
<p>本来渲染一部分，遇到 js 会暂停渲染，优先加载并执行 JS 代码，完成再继续【在 body 里面的最后】</p>
<p>或者利用 window.onload &#x3D; function(){}代码包裹，文档加载之后再执行，或者 readyState 来触发 js，不建议放在 head 中。</p>
<blockquote>
<p>问：从输入 url 到渲染出页面的整个过程</p>
</blockquote>
<p>下载资源：各个资源类型，下载过程<br>渲染页面：结合 html css javascript 图片等</p>
<blockquote>
<p>window.onload 和 DOMContentLoaded 的区别</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;load&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//页面的全部资源加载完才会执行，包括图片、视频等</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//DOM渲染完即可执行，此时图片、视频还可能没有加载完</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>window.onload：资源全部加载完才能执行，包括图片<br>DOMContentLoade ：DOM 渲染完成即可，图片可能尚未下载</p>
<h5 id="二、性能优化（体验优化）"><a href="#二、性能优化（体验优化）" class="headerlink" title="二、性能优化（体验优化）"></a>二、性能优化（体验优化）</h5><p>性能优化原则：<br>多使用内存、缓存或其他方法<br>减少 CPU 计算量，减少网络加载耗时<br>（适用于所有编程的性能优化—空间换时间）</p>
<h6 id="1-让加载更快"><a href="#1-让加载更快" class="headerlink" title="1.让加载更快"></a>1.让加载更快</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">减少资源体积：压缩代码【如webpack】【服务器端gzip压缩，浏览器进行反解析】</span><br><span class="line">减少访问次数：合并代码【如webpack，如雪碧图】，SSR服务端渲染，缓存</span><br><span class="line">   【缓存】：静态资源加<span class="built_in">hash</span>后缀，根据文件内容计算<span class="built_in">hash</span></span><br><span class="line">文件内容不变，则<span class="built_in">hash</span>不变，则url不变</span><br><span class="line">url和文件不变，则会自动触发http缓存机制，返回304</span><br><span class="line">   【SSR】:服务器端渲染：将网页和数据一起加载，一起渲染</span><br><span class="line">          非SSR（前后端分离）：先加载网页，再加载数据，再渲染数据</span><br><span class="line">          早先的JSP ASP PHP，现在的Vue React SSR</span><br><span class="line">使用更快的网络：CDN</span><br></pre></td></tr></table></figure>

<h6 id="2-让渲染更快"><a href="#2-让渲染更快" class="headerlink" title="2.让渲染更快"></a>2.让渲染更快</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CSS放在<span class="built_in">head</span>，JS放在body最下面</span><br><span class="line">尽早开始执行JS，用DOMContentLoaded触发</span><br><span class="line">懒加载（图片懒加载，上滑加载更多）【将图片地址放在自定义属性data-realsrc中，需要加载时再将地址赋值给src】</span><br><span class="line">对DOM查询进行缓存【例：循环时，将所有节点数量保存起来，再循环，而不是在<span class="keyword">for</span>中每次都去计算数量】</span><br><span class="line">频繁DOM操作，合并到一起插入DOM结构【使用文档碎片】</span><br><span class="line">节流throttle  防抖debounce</span><br></pre></td></tr></table></figure>

<blockquote>
<p>防抖 debounce</p>
</blockquote>
<p>监听一个输入框的，文字变化后触发 change 事件<br>直接用 keyup 事件，则会频发触发 change 事件<br>防抖：用户输入结束或暂停时，才会触发 change 事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> input1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;input1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// let timer = null</span></span><br><span class="line"><span class="comment">// input1.addEvent  Listener(&#x27;keyup&#x27;, function () &#123;</span></span><br><span class="line"><span class="comment">//     if (timer) &#123;</span></span><br><span class="line"><span class="comment">//         clearTimeout(timer)</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     timer = setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//         // 模拟触发 change 事件</span></span><br><span class="line"><span class="comment">//         console.log(input1.value)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//         // 清空定时器</span></span><br><span class="line"><span class="comment">//         timer = null</span></span><br><span class="line"><span class="comment">//     &#125;, 500)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装防抖</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, delay = <span class="number">500</span></span>) &#123;</span><br><span class="line">  <span class="comment">// timer 是闭包中的</span></span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>, <span class="number">2</span>); <span class="comment">//指向container</span></span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    &#125;</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>, <span class="number">3</span>);</span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">      timer = <span class="literal">null</span>;</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">input1.<span class="title function_">addEventListener</span>(</span><br><span class="line">  <span class="string">&quot;keyup&quot;</span>,</span><br><span class="line">  <span class="title function_">debounce</span>(<span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(input1.<span class="property">value</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">600</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------详细封装的防抖函数-----------------</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, wait, immediate</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timeout, result;</span><br><span class="line">  <span class="keyword">let</span> debounced = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// console.log(this);  //=&gt;从中可以测试出this指向的container</span></span><br><span class="line">    <span class="keyword">let</span> _this = <span class="variable language_">this</span>; <span class="comment">//保存this</span></span><br><span class="line">    <span class="keyword">let</span> args = <span class="variable language_">arguments</span>; <span class="comment">// 获取对应的实参，解决前面的event指向问题</span></span><br><span class="line">    <span class="built_in">clearTimeout</span>(timeout); <span class="comment">// 清空上从定时器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">      <span class="comment">//表示立即执行</span></span><br><span class="line">      <span class="comment">//第三个问题，解决立即执行防抖函数</span></span><br><span class="line">      <span class="keyword">let</span> callNow = !timeout;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        timeout = <span class="literal">null</span>;</span><br><span class="line">      &#125;, wait);</span><br><span class="line">      <span class="keyword">if</span> (callNow) result = func.<span class="title function_">apply</span>(_this, args);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//不会立即执行</span></span><br><span class="line">      timeout = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// console.log(this)  //=&gt;这里面的this指向window，也就是前面的count那的this是指向window</span></span><br><span class="line">        <span class="comment">//但是防抖函数的this应该是指向container</span></span><br><span class="line">        result = func.<span class="title function_">apply</span>(_this, args);</span><br><span class="line">      &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result; <span class="comment">//第四个问题，增加函数的返回结果</span></span><br><span class="line">  &#125;;</span><br><span class="line">  debounced.<span class="property">cancel</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//增加取消防抖</span></span><br><span class="line">    <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">    timeout = <span class="literal">null</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> debounced;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Container</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#container&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CancelDebounce</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#btn&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e, <span class="string">&quot;第二个问题.由原来的undefined，指向当前鼠标事件对象&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">    <span class="variable language_">this</span>,</span><br><span class="line">    <span class="string">&quot;第一个问题.由原来指向window，改变成指向container【改变执行函数内部的this指向】&quot;</span></span><br><span class="line">  );</span><br><span class="line">  <span class="title class_">Container</span>.<span class="property">innerHTML</span> = count++; <span class="comment">//可能会做回调或者ajax请求</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;想要的结果&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> doSome = <span class="title function_">debounce</span>(doSomething, <span class="number">1000</span>);</span><br><span class="line"><span class="title class_">CancelDebounce</span>.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//取消防抖</span></span><br><span class="line">  doSome.<span class="title function_">cancel</span>();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//高阶函数 防抖</span></span><br><span class="line"><span class="comment">// Container.onMouseMove = debounce(doSomething,1000,true);</span></span><br><span class="line"><span class="title class_">Container</span>.<span class="property">onMouseMove</span> = doSome;</span><br></pre></td></tr></table></figure>

<p>防抖：事件响应函数在一段时间后才执行，如果在这段时间内再次调用，则重新计算执行时间；当预定的时间内没有再次调用该函数，则执行 doSomething</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">防抖函数常见应用：</span><br><span class="line">    scroll事件的滚动触发</span><br><span class="line">    搜索框输入查询</span><br><span class="line">    表单验证</span><br><span class="line">    按钮提交事件</span><br><span class="line">    浏览器<span class="string">&#x27;窗口缩放,resize事件&#x27;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>节流 throttle</p>
</blockquote>
<p>拖拽一个元素时，要随时拿到该元素被拖拽的位置<br>直接用 drag 事件，则会频发触发，很容易导致卡顿<br>节流：无论拖拽速度多快，都会每隔 100ms 触发一次</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> div1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// let timer = null</span></span><br><span class="line"><span class="comment">// div1.addEventListener(&#x27;drag&#x27;, function (e) &#123;</span></span><br><span class="line"><span class="comment">//     if (timer) &#123;</span></span><br><span class="line"><span class="comment">//         return</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     timer = setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//         console.log(e.offsetX, e.offsetY)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//         timer = null</span></span><br><span class="line"><span class="comment">//     &#125;, 100)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装节流</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, delay = <span class="number">100</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">      timer = <span class="literal">null</span>;</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">div1.<span class="title function_">addEventListener</span>(</span><br><span class="line">  <span class="string">&quot;drag&quot;</span>,</span><br><span class="line">  <span class="title function_">throttle</span>(<span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">offsetX</span>, e.<span class="property">offsetY</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">div1.<span class="title function_">addEventListener</span>(<span class="string">&quot;drag&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//------详细封装的节流函数---------------</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">func, wait, options</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> _this, args, timeout;</span><br><span class="line">  <span class="keyword">let</span> old = <span class="number">0</span>; <span class="comment">//之前的时间戳</span></span><br><span class="line">  <span class="keyword">if</span> (!options) options = &#123;&#125;; <span class="comment">//如果没有options就将其设置为空对象</span></span><br><span class="line">  <span class="keyword">let</span> later = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    old = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">valueOf</span>(); <span class="comment">//每隔1秒执行之后，需要更新时间</span></span><br><span class="line">    timeout = <span class="literal">null</span>;</span><br><span class="line">    func.<span class="title function_">apply</span>(_this, args);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    _this = <span class="variable language_">this</span>;</span><br><span class="line">    args = <span class="variable language_">arguments</span>;</span><br><span class="line">    <span class="keyword">let</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">valueOf</span>(); <span class="comment">//获取当前时间戳</span></span><br><span class="line">    <span class="keyword">if</span> (options.<span class="property">leading</span> === <span class="literal">false</span> &amp;&amp; !old) &#123;</span><br><span class="line">      <span class="comment">//让第一次不进入</span></span><br><span class="line">      old = now;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (now - old &gt; wait) &#123;</span><br><span class="line">      <span class="comment">// 如果走到这里，表示第一次会直接执行</span></span><br><span class="line">      <span class="keyword">if</span> (timeout) &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">        timeout = <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      func.<span class="title function_">apply</span>(_this, args);</span><br><span class="line">      old = now;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!timeout &amp;&amp; options.<span class="property">trailing</span> !== <span class="literal">false</span>) &#123;</span><br><span class="line">      <span class="comment">//每隔1秒会执行</span></span><br><span class="line">      <span class="comment">//最后一次也被执行</span></span><br><span class="line">      timeout = <span class="built_in">setTimeout</span>(later, wait);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doThrottle</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  container.<span class="property">innerHTML</span> = count++;</span><br><span class="line">&#125;</span><br><span class="line">container.<span class="property">onmousemove</span> = <span class="title function_">throttle</span>(doThrottle, <span class="number">1000</span>, &#123;</span><br><span class="line">  <span class="attr">leading</span>: <span class="literal">false</span>, <span class="comment">//是否立即执行【否】</span></span><br><span class="line">  <span class="attr">trailing</span>: <span class="literal">true</span>, <span class="comment">//最后一次是否执行</span></span><br><span class="line">  <span class="comment">//两者不能同为false,否则就会产生bug,会导致触发事件立即执行一次后就失效了!</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">节流应用场景：</span><br><span class="line">    DOM元素的拖拽功能的实现</span><br><span class="line">    射击游戏中的每隔一段时间射击</span><br><span class="line">    计算鼠标移动的距离</span><br><span class="line">    监听scroll滚动事件</span><br><span class="line">    搜索联想</span><br><span class="line">    高频点击提交,表单重复提交</span><br></pre></td></tr></table></figure>

<blockquote>
<p>防抖节流之间的异同比较</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">相同:</span><br><span class="line">    都可以通过setTimeout实现</span><br><span class="line">    目的都是:降低回调执行频率,节省计算资源</span><br><span class="line">不同:</span><br><span class="line">    函数防抖: 在一段连续操作结束后,处理回调,利用clearTimeout和setTimeout实现.</span><br><span class="line">    函数节流:在一段连续操作中,每一段时间只执行一次,频率较高的时间中使用来提高性能.</span><br><span class="line">    函数防抖关注一定时间连续触发的事件只在最后执行,而函数节流侧重于一段时间内只执行一次!</span><br></pre></td></tr></table></figure>

<h5 id="三、安全"><a href="#三、安全" class="headerlink" title="三、安全"></a>三、安全</h5><blockquote>
<p>问：常见的 web 前端攻击方式有哪些？</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">XSS跨站请求攻击：</span><br><span class="line">    一个博客网站，我发表一篇博客，其中嵌入script脚本</span><br><span class="line">    脚本内容：获取cookie，发送到我的服务器（服务器配合跨域）</span><br><span class="line">    发布这篇博客，有人查看它，我轻松收割访问者的cookie</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">XSS预防：</span><br><span class="line">    替换特殊字符，如&lt;变为&amp;lt;&gt;变为&amp;gt;</span><br><span class="line">    &lt;scrtip&gt;变为&amp;lt;script&amp;gt;，直接显示，而不会作为脚本执行</span><br><span class="line">    前端要替换，后端也要替换，都做总不会有错</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">XSRF跨站请求伪造：</span><br><span class="line">    你正在购物，看中了某个商品，商品<span class="built_in">id</span>是100</span><br><span class="line">    付费接口是xxx.com/pay?<span class="built_in">id</span>=100,但没有任何验证</span><br><span class="line">    我是攻击者，我看中了一个商品，<span class="built_in">id</span>是200</span><br><span class="line">    我向你发送一封电子邮件，邮件标题很吸引人</span><br><span class="line">    但邮件正文隐藏着&lt;img src=xxx.com/pay?<span class="built_in">id</span>=200/&gt;</span><br><span class="line">    你一查看邮件，就帮我购买了<span class="built_in">id</span>是200的商品</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">XSRF预防：</span><br><span class="line">    使用post接口</span><br><span class="line">    增加验证，例如密码、短信验证码、指纹等</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JS基础面试真题</title>
    <url>/2020/09/02/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E3%80%90%E4%B8%93%E9%A2%98%E3%80%9115%EF%BC%9AJS%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E7%9C%9F%E9%A2%98/</url>
    <content><![CDATA[<blockquote>
<p>1.var 和 let const 的区别</p>
</blockquote>
<p>var 是 ES5 语法，let const 是 ES6 语法；var 有变量提升<br>var 和 let 是变量，可修改；const 是常量，不可修改；<br>let const 有块级作用域，var 没有</p>
<p><strong>var:</strong> 1.只有函数作用域，没有块作用域，可以声明全局&#x2F;局部变量<br>2.var 定义的变量不能跨函数访问，但可以跨块访问<br>3.var 定义的变量如果不初始化会输出 undefined，但不会报错 4.可以重复定义，后定义的会覆盖先定义的</p>
<p><strong>let:</strong> 1.块级作用域。函数内部使用 let 定义后，对函数外部无影响。<br>2.let 定义的变量只能在块作用域中访问，不能跨块访问，更不能跨函数访问。 3.不能变量声明提起那，否则会报错。 4.不能重复定义，否则会报错。</p>
<p><strong>const:</strong><br>1.const 定义的变量不可修改，并且必须进行初始化<br>2.const 一般用来声明常量，并且声明的常量不允许改变。必须在声明的同时赋值。<br>2.const 也是块作用域，与 let 相同。只能在块作用域里访问。存在暂时性死区，不存在变量声明提前，不允许重复定义。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 变量提升 ES5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于：</span></span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// undefined</span></span><br><span class="line">a = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// --------------------</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">//10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// --------------------</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">//报错</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 块级作用域</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> j = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(j); <span class="comment">//10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">let</span> j = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(j); <span class="comment">//报错</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>2.typeof 返回哪些类型</p>
</blockquote>
<p>undefined string number boolean symbol<br>object（注意，typeof null &#x3D;&#x3D;&#x3D; ‘object’，为 true）<br>function</p>
<blockquote>
<p>3.例举强制类型转换和隐式类型转换</p>
</blockquote>
<p>强制：parseInt parseFloat toString 等<br>隐式：if、逻辑运算、&#x3D;&#x3D;、+拼接字符串</p>
<blockquote>
<p>4.手写深度比较，模拟 lodash.isEqual</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断是否是对象或数组</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isObject</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> obj === <span class="string">&quot;object&quot;</span> &amp;&amp; obj !== <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 全相等（深度比较）</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isEqual</span>(<span class="params">obj1, obj2</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">isObject</span>(obj1) || !<span class="title function_">isObject</span>(obj2)) &#123;</span><br><span class="line">    <span class="comment">// 值类型（注意，参与 equal 的一般不会是函数）</span></span><br><span class="line">    <span class="keyword">return</span> obj1 === obj2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (obj1 === obj2) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 两个都是引用类型，两个都是对象或数组，而且不相等</span></span><br><span class="line">  <span class="comment">// 1. 先取出 obj1 和 obj2 的 keys ，比较个数</span></span><br><span class="line">  <span class="keyword">const</span> obj1Keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj1);</span><br><span class="line">  <span class="keyword">const</span> obj2Keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj2);</span><br><span class="line">  <span class="keyword">if</span> (obj1Keys.<span class="property">length</span> !== obj2Keys.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 2. 以 obj1 为基准，和 obj2 依次递归比较，for...in适用于对象，也适用于数组</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj1) &#123;</span><br><span class="line">    <span class="comment">// 比较当前 key 的 val ---- 递归！！！</span></span><br><span class="line">    <span class="keyword">const</span> res = <span class="title function_">isEqual</span>(obj1[key], obj2[key]);</span><br><span class="line">    <span class="keyword">if</span> (!res) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 3. 全相等</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">b</span>: &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">200</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">b</span>: &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">200</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// console.log( obj1 === obj2 ) //false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isEqual</span>(obj1, obj2)); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isEqual</span>(arr1, arr2));</span><br></pre></td></tr></table></figure>

<blockquote>
<p>5.split() 和 join() 的区别</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;1-2-3&quot;</span></span><br><span class="line">  .<span class="title function_">split</span>(<span class="string">&quot;-&quot;</span>) <span class="comment">//[1,2,3]</span></span><br><span class="line">  [(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)].<span class="title function_">join</span>(<span class="string">&quot;-&quot;</span>); <span class="comment">//&#x27;1-2-3&#x27;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>6.数组的 pop push unshift shift 分别做什么?</p>
</blockquote>
<p>功能是什么？<br>返回值是什么？<br>是否会对原数组造成影响？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>];</span><br><span class="line"><span class="comment">// 这4个都不是纯函数</span></span><br><span class="line"><span class="comment">// pop</span></span><br><span class="line"><span class="keyword">const</span> popRes = arr.<span class="title function_">pop</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(popRes, arr); <span class="comment">//40,[10,20,30]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// push</span></span><br><span class="line"><span class="keyword">const</span> pushRes = arr.<span class="title function_">push</span>(<span class="number">50</span>); <span class="comment">// 返回 length</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pushRes, arr); <span class="comment">//5,[10,20,30,40,50]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// shift</span></span><br><span class="line"><span class="keyword">const</span> shiftRes = arr.<span class="title function_">shift</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(shiftRes, arr); <span class="comment">//10,[20,30,40]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// unshift</span></span><br><span class="line"><span class="keyword">const</span> unshiftRes = arr.<span class="title function_">unshift</span>(<span class="number">5</span>); <span class="comment">// 返回 length</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(unshiftRes, arr); <span class="comment">//5,[5,10,20,30,40]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 纯函数：1. 不改变源数组（没有副作用）；2. 返回一个数组</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// concat</span></span><br><span class="line"><span class="keyword">const</span> arr1 = arr.<span class="title function_">concat</span>([<span class="number">50</span>, <span class="number">60</span>, <span class="number">70</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr, arr1); <span class="comment">//[10,20,30,40],[10,20,30,40,50,60,70]</span></span><br><span class="line"><span class="comment">// map</span></span><br><span class="line"><span class="keyword">const</span> arr2 = arr.<span class="title function_">map</span>(<span class="function">(<span class="params">num</span>) =&gt;</span> num * <span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr, arr2); <span class="comment">//[10,20,30,40],[100,200,300,400]</span></span><br><span class="line"><span class="comment">// filter</span></span><br><span class="line"><span class="keyword">const</span> arr3 = arr.<span class="title function_">filter</span>(<span class="function">(<span class="params">num</span>) =&gt;</span> num &gt; <span class="number">25</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr, arr3); <span class="comment">//[10,20,30,40],[30,40]</span></span><br><span class="line"><span class="comment">// slice</span></span><br><span class="line"><span class="keyword">const</span> arr4 = arr.<span class="title function_">slice</span>(); <span class="comment">//浅拷贝</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr, arr4); <span class="comment">//[10,20,30,40],[10,20,30,40]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 非纯函数</span></span><br><span class="line"><span class="comment">// push pop shift unshift</span></span><br><span class="line"><span class="comment">// forEach</span></span><br><span class="line"><span class="comment">// some every</span></span><br><span class="line"><span class="comment">// reduce</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>7.数组 slice 和 splice 的区别</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// slice 纯函数</span></span><br><span class="line"><span class="keyword">const</span> arr1 = arr.<span class="title function_">slice</span>(); <span class="comment">//【什么也不传，浅拷贝一份数组】</span></span><br><span class="line"><span class="keyword">const</span> arr2 = arr.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">4</span>); <span class="comment">//[20,30,40]    slice(开始的索引，结束的索引【不包括结束索引】)</span></span><br><span class="line"><span class="keyword">const</span> arr3 = arr.<span class="title function_">slice</span>(<span class="number">2</span>); <span class="comment">//[30,40,50]   slice(开始的索引)【从开始的索引到结束为止】</span></span><br><span class="line"><span class="keyword">const</span> arr4 = arr.<span class="title function_">slice</span>(-<span class="number">2</span>); <span class="comment">//[40,50] slice(负数数值)【从末尾往前截取个数】</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// splice 非纯函数</span></span><br><span class="line"><span class="keyword">const</span> spliceRes = arr.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>); <span class="comment">//【开始的索引位置，剪接的长度，要插入的新元素】</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(spliceRes, arr); <span class="comment">//[20,30],[10,&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,40,50]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> spliceRes1 = arr.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">//只想剪接，不插入数值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(spliceRes1, arr); <span class="comment">//[20,30],[10,40,50]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> spliceRes2 = arr.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>); <span class="comment">//不剪接，只插入数值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(spliceRes2, arr);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>8.[10,20,30].map(parseInt)返回结果是什么？</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// map的参数和返回值</span></span><br><span class="line"><span class="comment">// map() 方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。</span></span><br><span class="line"><span class="comment">// map() 方法按照原始数组元素顺序依次处理元素。</span></span><br><span class="line"><span class="comment">// 注意： map() 不会对空数组进行检测。</span></span><br><span class="line"><span class="comment">// 注意： map() 不会改变原始数组。</span></span><br><span class="line"><span class="comment">// array.map(function(currentValue,index,arr), thisValue)</span></span><br><span class="line"><span class="comment">// 返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// parseInt参数和返回值</span></span><br><span class="line"><span class="comment">// static int parseInt(String s)</span></span><br><span class="line"><span class="comment">// static int parseInt(String s, int radix)</span></span><br><span class="line"><span class="comment">// 参数:</span></span><br><span class="line"><span class="comment">// s -- 十进制表示的字符串。</span></span><br><span class="line"><span class="comment">// radix -- 指定的基数。</span></span><br><span class="line"><span class="comment">// 返回值:</span></span><br><span class="line"><span class="comment">// parseInt(String s): 返回用十进制参数表示的整数值。</span></span><br><span class="line"><span class="comment">// parseInt(int i): 使用指定基数的字符串参数表示的整数 (基数可以是 10, 2, 8, 或 16 等进制数) 。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>].<span class="title function_">map</span>(<span class="built_in">parseInt</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">//[10,NaN,NaN]</span></span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">  <span class="comment">// 拆解</span></span><br><span class="line">  (<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>),</span><br><span class="line">].<span class="title function_">map</span>(<span class="function">(<span class="params">num, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">parseInt</span>(num, index);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>9.ajax 请求 get 和 post 的区别？</p>
</blockquote>
<p>get 一般用于查询操作，post 一般用户提交操作<br>get 参数拼接在 url 上，post 放在请求体内（数据体积可更大）<br>安全性：post 易于防止 CSRF</p>
<blockquote>
<p>10.函数 call 和 apply 的区别</p>
</blockquote>
<p>1、call，apply 都属于 Function.prototype 的一个方法，它是 JavaScript 引擎内在实现的，因为属于 Function.prototype，所以每个 Function 对象实例(就是每个方法)都有 call，apply 属性。既然作为方法的属性，那它们的使用就当然是针对方法的了，这两个方法是容易混淆的，因为它们的作用一样，只是使用方式不同。</p>
<p>2、语法：foo.call(this, arg1,arg2,arg3) &#x3D;&#x3D; foo.apply(this, arguments) &#x3D;&#x3D; this.foo(arg1, arg2, arg3);</p>
<p>3、相同点：两个方法产生的作用是完全一样的。</p>
<p>4、不同点：方法传递的参数不同。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例1:</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">flag</span> = <span class="string">&quot;A&quot;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">tip</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">flag</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">B</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">flag</span> = <span class="string">&quot;B&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="title function_">A</span>();</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="title function_">B</span>();</span><br><span class="line"><span class="comment">//a.tip.call(b);</span></span><br><span class="line">a.<span class="property">tip</span>.<span class="title function_">apply</span>(b);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代码解释：(即说明apply和call作用)</span></span><br><span class="line"><span class="comment">// 1、实例代码定义了两个函数A和B，A中包含flag属性和tip属性(这个属性赋值一个函数)，B中有一个flag属性。</span></span><br><span class="line"><span class="comment">// 2、分别创建A和B的对象a和b。</span></span><br><span class="line"><span class="comment">// 3、无论是a.tip.call(b);和a.tip.apply(b);运行的结果都是弹出B。</span></span><br><span class="line"><span class="comment">// 4、从结果中可以看出call和apply都可以让B对象调用A对象的tip方法，并且修改了this的当前作用对象。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例2:</span></span><br><span class="line">fn.<span class="title function_">call</span>(<span class="variable language_">this</span>, p1, p2, p3);</span><br><span class="line">fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>11.事件代理（委托）是什么？</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;p1&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> body = <span class="variable language_">document</span>.<span class="property">body</span>;</span><br><span class="line"><span class="title function_">bindEvent</span>(p1, <span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  e.<span class="title function_">stopPropagation</span>(); <span class="comment">//注释掉这一行，来体会事件冒泡</span></span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;激活&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title function_">bindEvent</span>(body, <span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;取消&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>12.闭包是什么，有什么特性？有什么负面影响？</p>
</blockquote>
<p>回顾作用域和自由变量<br>回顾闭包应用场景：作为参数被传入，作为返回值被返回<br>回顾：自由变量的查找，要在函数定义的地方（而非执行的地方）<br>影响：变量会常驻内存，得不到释放。闭包不要乱用</p>
<p>什么是闭包：<br>简单的理解是函数的嵌套形成闭包，闭包包括函数本身以及它的外部作用域<br>使用闭包可以形成独立的空间，延长变量的生命周期，保存中间状态值。</p>
<p>闭包应用场景： 1.函数外部获取函数内部的局部变量，但是函数内部的函数所引用的变量会被保存下来 2.避免全局变量的污染 3.实现模块化 4.自执行的匿名函数保存循环变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自由变量示例 —— 内存会被释放</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> a1 = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> a2 = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn3</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> a3 = <span class="number">300</span>;</span><br><span class="line">      <span class="keyword">return</span> a + a1 + a2 + a3;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fn3</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">fn2</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn1</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 闭包 函数作为返回值 —— 内存不会被释放</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">create</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> fn = <span class="title function_">create</span>();</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">200</span>; <span class="comment">//这个a被释放</span></span><br><span class="line"><span class="title function_">fn</span>(); <span class="comment">// 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数作为参数被传入</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">print</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">200</span>; <span class="comment">//这个a被释放</span></span><br><span class="line">  <span class="title function_">fn</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">print</span>(fn); <span class="comment">// 100</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>13.如何阻止事件冒泡和默认行为?</p>
</blockquote>
<p>event.stopPropagation event.preventDefault</p>
<blockquote>
<p>14.查找、添加、删除、移动 DOM 节点的方法？</p>
</blockquote>
<p>参考 JS-WEB-API-DOM</p>
<blockquote>
<p>15.如何减少 DOM 操作？</p>
</blockquote>
<p>缓存 DOM 查询结果</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不缓存DOM查询结果</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;p&quot;</span>).<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// 每次循环，都会计算length,频繁进行DOM查询</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓存DOM查询结果</span></span><br><span class="line"><span class="keyword">const</span> pList = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;p&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> length = pList.<span class="property">length</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">  <span class="comment">//缓存length,只进行一次DOM查询</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>多次 DOM 操作，合并到一次插入【文档碎片】</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将频繁操作改为一次性操作--（使用文档碎片）</span></span><br><span class="line"><span class="keyword">const</span> list = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;list&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个文档片段，此时还没有插入到 DOM 结构中</span></span><br><span class="line"><span class="keyword">const</span> frag = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">const</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">  li.<span class="property">innerHTML</span> = <span class="string">`List item <span class="subst">$&#123;i&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 先插入文档片段中</span></span><br><span class="line">  frag.<span class="title function_">appendChild</span>(li);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 都完成之后，再统一插入到 DOM 结构中</span></span><br><span class="line">list.<span class="title function_">appendChild</span>(frag);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>16.解释 jsonp 的原理，为何它不是真正的 ajax？</p>
</blockquote>
<p>ajax 是通过 XMLHttpRequest 实现的<br>浏览器的同源策略（服务端没有同源策略）和跨域<br>哪些 html 标签能绕过跨域？</p>
<blockquote>
<p>17.document load 和 ready 的区别？</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;load&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//页面的全部资源加载完才会执行，包括图片、视频等</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//DOM渲染完即可执行，此时图片、视频还可能没有加载完</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//window.onload：资源全部加载完才能执行，包括图片</span></span><br><span class="line"><span class="comment">//DOMContentLoade ：DOM渲染完成即可，图片可能尚未下载</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>18.&#x3D;&#x3D; 和 &#x3D;&#x3D;&#x3D; 的不同</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">==会尝试类型转换</span><br><span class="line">===严格相等</span><br><span class="line">==运算符：</span><br><span class="line"><span class="number">100</span> == ‘<span class="number">100</span>’    <span class="comment">//true</span></span><br><span class="line"><span class="number">0</span> == <span class="string">&#x27;&#x27;</span>         <span class="comment">//true</span></span><br><span class="line"><span class="number">0</span> == <span class="literal">false</span>      <span class="comment">//true</span></span><br><span class="line"><span class="literal">false</span> == <span class="string">&#x27;&#x27;</span>     <span class="comment">//true</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span>       <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">何时使用===，何时使用==？</span><br><span class="line"><span class="comment">//除了 == null之外，其他都一律用 ===，例如：</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">x</span>:<span class="number">100</span> &#125;</span><br><span class="line"><span class="keyword">if</span>(obj.<span class="property">a</span> == <span class="literal">null</span>)&#123;&#125;</span><br><span class="line"><span class="comment">//相当于：</span></span><br><span class="line"><span class="comment">//if(obj.a === null || obj.a)</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>19.函数声明和函数表达式的区别？</p>
</blockquote>
<p>函数声明：function fn(){…}<br>函数表达式: const fn &#x3D; function(){…}<br>函数声明会在代码执行前预加载，而函数表达式不会</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> res = <span class="title function_">sum</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">//30</span></span><br><span class="line"><span class="comment">// 函数声明，会预加载</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> res = <span class="title function_">sum</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">//sum is not a function</span></span><br><span class="line"><span class="comment">// 函数表达式</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="keyword">function</span> (<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>20.new Object() 和 Object.create()的区别</p>
</blockquote>
<p>{}等同于 new Object(),原型 Object.prototype<br>Object.creact(null)没有原型，Object.creact({…})可指定原型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// new Object()</span></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="title function_">sum</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">a</span> + <span class="variable language_">this</span>.<span class="property">b</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj2 = <span class="keyword">new</span> <span class="title class_">Object</span>(&#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="title function_">sum</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">a</span> + <span class="variable language_">this</span>.<span class="property">b</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1 === obj2); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj21 = <span class="keyword">new</span> <span class="title class_">Object</span>(obj1); <span class="comment">// obj1 === obj21 //true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.create()</span></span><br><span class="line"><span class="keyword">const</span> obj3 = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>); <span class="comment">//没有属性，也没有原型</span></span><br><span class="line"><span class="keyword">const</span> obj4 = <span class="keyword">new</span> <span class="title class_">Object</span>(); <span class="comment">// &#123;&#125;     //没有属性，但是有原型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj5 = <span class="title class_">Object</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="comment">//此时没有属性，打印obj5为空对象&#123;&#125;，但是有原型，原型为当前传入的对象，因此，可以打印出obj5.a</span></span><br><span class="line">  <span class="attr">a</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="title function_">sum</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">a</span> + <span class="variable language_">this</span>.<span class="property">b</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj6 = <span class="title class_">Object</span>.<span class="title function_">create</span>(obj1); <span class="comment">//obj6也是空对象&#123;&#125;，原型指向obj1，此时修改obj1.c=1000，那么obj6的隐式原型变为修改后的obj1，那么obj6.c=1000</span></span><br><span class="line"><span class="comment">// obj6.__proto__ === obj1  //true</span></span><br><span class="line"><span class="comment">// obj6 === obj1    //false</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>21.关于 this 的场景题</p>
</blockquote>
<p>详见专题文章</p>
<blockquote>
<p>22.关于作用域和自由变量的场景题</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">//打印3次4</span></span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>23.判断字符串以字母开头，后面字母数字下划线，长度 6-30</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">const reg = /^[a-zA-Z]\w&#123;5,29&#125;$/        \w:字母数字下划线</span><br><span class="line">学习正则表达式的规则</span><br><span class="line">手写常见的正则表达式</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 邮政编码</span></span><br><span class="line">/\d&#123;<span class="number">6</span>&#125;/</span><br><span class="line"></span><br><span class="line"><span class="comment">// 小写英文字母</span></span><br><span class="line"><span class="regexp">/^[a-z]+$/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 英文字母</span></span><br><span class="line"><span class="regexp">/^[a-zA-Z]+$/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 日期格式 2019.12.1</span></span><br><span class="line"><span class="regexp">/^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;$/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户名</span></span><br><span class="line"><span class="regexp">/^[a-zA-Z]\w&#123;5, 17&#125;$/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单的 IP 地址匹配</span></span><br><span class="line"><span class="regexp">/\d+\.\d+\.\d+\.\d+/</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>24.关于作用域和自由变量的场景题</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//100</span></span><br><span class="line">  a = <span class="number">10</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//10</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>25.手写字符串 trim 方法，保证浏览器兼容性</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">trim</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//原型、this、正则表达式</span></span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">replace</span>(<span class="regexp">/^\s+/</span>, <span class="string">&quot;&quot;</span>).<span class="title function_">replace</span>(<span class="regexp">/\s+$/</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>26.如何获取多个数字中的最大值</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">max</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> nums = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>); <span class="comment">//类数组变为数组</span></span><br><span class="line">  <span class="keyword">let</span> max = <span class="number">0</span>;</span><br><span class="line">  max.<span class="title function_">forEach</span>(<span class="function">(<span class="params">element</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (element &gt; max) &#123;</span><br><span class="line">      max = element;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">或者;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">10</span>, <span class="number">30</span>, <span class="number">20</span>, <span class="number">40</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>27.如何用 JS 实现继承？</p>
</blockquote>
<p>class 继承<br>prototype 继承</p>
<blockquote>
<p>28.如何捕获 JS 程序中的异常？</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">//todo</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(ex); <span class="comment">//手动捕获catch</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="comment">//todo</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//自动捕获</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params">message, source, lineNum, colNum, error</span>) &#123;</span><br><span class="line">  <span class="comment">// 第一，对跨域的js，如CDN的，不会有详细的报错信息</span></span><br><span class="line">  <span class="comment">// 第二，对于压缩的js，还要配合sourceMap反查到未压缩代码的行、列</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>29.什么是 JSON？【键值都需要用双引号】</p>
</blockquote>
<p>json 是一种数据格式，本质是一段字符串<br>json 格式和 JS 对象结构一致，对 JS 语言更友好<br>window.JSON 是一个全局对象：JSON.stringify JSON.parse</p>
<blockquote>
<p>30.获取当前页面 url 参数？</p>
</blockquote>
<p>传统方式，查找 location.search<br>新 API，URLSearchParams</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取当前页面url参数：</span></span><br><span class="line"><span class="comment">// 1.传统方式</span></span><br><span class="line"><span class="keyword">var</span> url = <span class="string">&quot;http://127.0.0.1:8080/index.html?a=10&amp;b=20&amp;c=30#hash&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">query</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> search = location.<span class="property">search</span>.<span class="title function_">substr</span>(<span class="number">1</span>); <span class="comment">//substr(1)把location.search的?截取掉; 类似 array.slice(1)</span></span><br><span class="line">  <span class="comment">// search: &#x27;a=10&amp;b=20&amp;c=30&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">`(^|&amp;)<span class="subst">$&#123;name&#125;</span>=([^&amp;]*)(&amp;|$)`</span>, <span class="string">&quot;i&quot;</span>); <span class="comment">//i:不区分大小写</span></span><br><span class="line">  <span class="keyword">const</span> res = search.<span class="title function_">match</span>(reg);</span><br><span class="line">  <span class="keyword">if</span> (res === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res[<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">query</span>(<span class="string">&quot;d&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.URLSearchParams【注意浏览器兼容性问题】</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">query</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> search = location.<span class="property">search</span>;</span><br><span class="line">  <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(search);</span><br><span class="line">  <span class="keyword">return</span> p.<span class="title function_">get</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">query</span>(<span class="string">&quot;b&quot;</span>));</span><br></pre></td></tr></table></figure>

<blockquote>
<p>31.将 url 参数解析为 JS 对象</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将url参数解析为JS对象:</span></span><br><span class="line"><span class="comment">// 1.传统方式，分析search</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">queryToObj</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> search = location.<span class="property">search</span>.<span class="title function_">substr</span>(<span class="number">1</span>); <span class="comment">//去掉前面的&#x27;?&#x27;</span></span><br><span class="line">  search.<span class="title function_">split</span>(<span class="string">&quot;&amp;&quot;</span>).<span class="title function_">forEach</span>(<span class="function">(<span class="params">paramStr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> arr = paramStr.<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> key = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">const</span> val = arr[<span class="number">1</span>];</span><br><span class="line">    res[key] = val;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.使用URLSearchParams</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">queryToObj</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> pList = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(location.<span class="property">search</span>);</span><br><span class="line">  pList.<span class="title function_">forEach</span>(<span class="function">(<span class="params">val, key</span>) =&gt;</span> &#123;</span><br><span class="line">    res[key] = val;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>32.手写数组 flatern，考虑多层级【数组扁平化】</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>],<span class="number">5</span>]</span><br><span class="line"><span class="comment">// 只能拍平一层</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">concat</span>.<span class="title function_">apply</span>([],arr)     <span class="comment">//[1,2,3,4,5]</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">concat</span>.<span class="title function_">call</span>([],<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>],<span class="number">5</span>)     <span class="comment">//[1,2,3,4,5]</span></span><br><span class="line"></span><br><span class="line">[].<span class="title function_">concat</span>(<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>],<span class="number">5</span>)     <span class="comment">//[1,2,3,4,5]</span></span><br><span class="line">[].<span class="title function_">concat</span>(<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>,[<span class="number">6</span>,<span class="number">7</span>]],<span class="number">5</span>)     <span class="comment">//[1,2,3,4,Array(2),5]  -- concat也只能拍平一层</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组扁平化：</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flat</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="comment">// 验证 arr 中，还有没有深层数组 [1, 2, [3, 4]]</span></span><br><span class="line">    <span class="keyword">const</span> isDeep = arr.<span class="title function_">some</span>(<span class="function"><span class="params">item</span> =&gt;</span> item <span class="keyword">instanceof</span> <span class="title class_">Array</span>)</span><br><span class="line">    <span class="keyword">if</span> (!isDeep) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr <span class="comment">// 已经是 flatern [1, 2, 3, 4]</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> res = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">concat</span>.<span class="title function_">apply</span>([], arr)</span><br><span class="line">    <span class="comment">// 相当于Array.prototype.concat.call([], 1, 2, [3, 4],5)</span></span><br><span class="line">    <span class="comment">// 相当于[].concat(1, 2, [3, 4],5)</span></span><br><span class="line">    <span class="comment">// 都只能扁平化一层，需要执行递归</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">flat</span>(res) <span class="comment">// 递归</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res = <span class="title function_">flat</span>( [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">10</span>, <span class="number">20</span>, [<span class="number">100</span>, <span class="number">200</span>]]], <span class="number">5</span>] )</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>33.数组去重</p>
</blockquote>
<p>传统方式，遍历元素挨个比较、去重<br>使用 Set<br>考虑计算效率</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组去重</span></span><br><span class="line"><span class="comment">// 1.传统方式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = [];</span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="title function_">indexOf</span>(item) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      res.<span class="title function_">push</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 Set （无序，不能重复）</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>(arr);</span><br><span class="line">  <span class="keyword">return</span> [...set];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res = <span class="title function_">unique</span>([<span class="number">30</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">10</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>34.手写深拷贝</p>
</blockquote>
<p>注意：Object.assign 不是深拷贝</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 深拷贝</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">  <span class="attr">address</span>: &#123;</span><br><span class="line">    <span class="attr">city</span>: <span class="string">&quot;beijing&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">arr</span>: [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj2 = <span class="title function_">deepClone</span>(obj1);</span><br><span class="line">obj2.<span class="property">address</span>.<span class="property">city</span> = <span class="string">&quot;shanghai&quot;</span>;</span><br><span class="line">obj2.<span class="property">arr</span>[<span class="number">0</span>] = <span class="string">&quot;a1&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">address</span>.<span class="property">city</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">arr</span>[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 深拷贝</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; obj 要拷贝的对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">obj = &#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&quot;object&quot;</span> || obj == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// obj 是 null ，或者不是对象和数组，直接返回</span></span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化返回结果</span></span><br><span class="line">  <span class="keyword">let</span> result;</span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">    result = [];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    result = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="comment">// 保证 key 不是原型的属性</span></span><br><span class="line">    <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">      <span class="comment">// 递归调用！！！</span></span><br><span class="line">      result[key] = <span class="title function_">deepClone</span>(obj[key]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回结果</span></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 浅拷贝：</span></span><br><span class="line"><span class="comment">// -------</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="number">30</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(obj, &#123; <span class="attr">d</span>: <span class="number">40</span> &#125;); <span class="comment">//追加</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">//&#123;a:10,b:20,c:30,d:40&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj1 = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, obj, &#123; <span class="attr">e</span>: <span class="number">50</span> &#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">//&#123;a:10,b:20,c:30,d:40&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1); <span class="comment">//&#123;a:10,b:20,c:30,d:40,e:50&#125;</span></span><br><span class="line"></span><br><span class="line">obj.<span class="property">a</span> = <span class="number">100</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1); <span class="comment">//&#123;a:10,b:20,c:30,d:40,e:50&#125;    不改变</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// -----</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">b</span>: &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">100</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> obj1 = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, obj, &#123; <span class="attr">c</span>: <span class="number">30</span> &#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">//&#123;a:10,b:&#123;x:100,y:100&#125;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1); <span class="comment">//&#123;a:10,b:&#123;x:100,y:100&#125;,c:30&#125;</span></span><br><span class="line">obj.<span class="property">b</span>.<span class="property">x</span> = <span class="number">101</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">//&#123;a:10,b:&#123;x:101,y:100&#125;,c:30&#125;  会改变</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1); <span class="comment">//&#123;a:10,b:&#123;x:101,y:100&#125;,c:30&#125;  会改变</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>35.介绍一下 RAF requestAnimationFrame</p>
</blockquote>
<p>要想动画流畅，更新频率要 60 帧&#x2F;s，即 16.67ms 更新一次视图<br>setTimeout 要手动控制频率，而 RAF 浏览器会自动控制<br>后台标签或隐藏 iframe 中，RAF 会暂停，而 setTimeout 依然执行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3s钟内， 把宽度从 100px 变为 640px ，即增加 540px</span></span><br><span class="line"><span class="comment">// 60帧/s ，3s要有 180 帧 ，每次变化 3px</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> $div1 = $(<span class="string">&quot;#div1&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> curWidth = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> maxWidth = <span class="number">640</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.setTimeout</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">animate</span>(<span class="params"></span>) &#123;</span><br><span class="line">  curWidth = curWidth + <span class="number">3</span>;</span><br><span class="line">  $div1.<span class="title function_">css</span>(<span class="string">&quot;width&quot;</span>, curWidth);</span><br><span class="line">  <span class="keyword">if</span> (curWidth &lt; maxWidth) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(animate, <span class="number">16.7</span>); <span class="comment">// 自己控制时间</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">animate</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.RAF</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">animate</span>(<span class="params"></span>) &#123;</span><br><span class="line">  curWidth = curWidth + <span class="number">3</span>;</span><br><span class="line">  $div1.<span class="title function_">css</span>(<span class="string">&quot;width&quot;</span>, curWidth);</span><br><span class="line">  <span class="keyword">if</span> (curWidth &lt; maxWidth) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">requestAnimationFrame</span>(animate); <span class="comment">// 时间不用自己控制</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">animate</span>();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>36.前端性能如何优化？一般从哪几个方面考虑？</p>
</blockquote>
<p>原则：多使用内存、缓存、减少计算、减少网络请求<br>方向：加载页面，页面渲染，页面操作流畅度</p>
<blockquote>
<p>37.CSS 常用的选择器</p>
</blockquote>
<p>1).标签选择器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="comment">/*   &lt;!-- 标签选择器 ：写上标签名 --&gt;*/</span></span><br><span class="line">    <span class="selector-tag">p</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: green;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">div</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: pink;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>2).类选择器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="comment">/* 类选择器口诀：样式点定义 结构类（class）调用 一个或多个 开发最常用 */</span></span><br><span class="line">    <span class="selector-class">.red</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.yellow</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: yellow;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>3).id 选择器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* id选择器的口诀：样式#定义，结构id调用，只能调用一次，别人切勿使用 */</span></span><br><span class="line"><span class="selector-id">#pink</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4).通配符选择器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5).复合选择器之后代选择器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ol</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ol</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">0</span>, <span class="number">255</span>, <span class="number">38</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>6).子代选择器【子元素选择器】</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.nav</span> &gt; <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">0</span>, <span class="number">128</span>, <span class="number">15</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>7).并集选择器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 要求2：请把熊大熊二改为红色 还有 小猪一家改为粉色 */</span></span><br><span class="line"><span class="selector-tag">div</span>,</span><br><span class="line"><span class="selector-tag">p</span>,</span><br><span class="line"><span class="selector-class">.pig</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 约定的语法规范，我们并集选择器喜欢竖着写 */</span></span><br><span class="line"><span class="comment">/* 一定要注意，最后一个选择器 不需要加逗号 */</span></span><br></pre></td></tr></table></figure>

<p>8).链接伪类选择器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*3.a:hover选择鼠标经过的那个链接*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>9).focus 选择器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*//把获得光标的nput表单元素选取出来*/</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>!import &gt; 内联 &gt; ID 选择器 &gt; 类选择器 &gt; 标签选择器</p>
<p>css 的继承，继承是一种机制，它允许样式不仅可以应用于某个特定的元素，还可以应用于它的后代。<br>有一些属性不能被继承（如 border,margin,padding,background 等）</p>
<blockquote>
<p>38.display:none 和 visibility:hidden 两者的区别?</p>
</blockquote>
<p><strong>display 与元素的隐藏</strong><br>如果给一个元素设置了 display: none，那么该元素以及它的所有后代元素都会隐藏，它是前端开发人员使用频率最高的一种隐藏方式。隐藏后的元素无法点击，无法使用屏幕阅读器等辅助设备访问，占据的空间消失。</p>
<p><strong>visibility 与元素的隐藏</strong><br>给元素设置 visibility: hidden 也可以隐藏这个元素，但是隐藏元素仍需占用与未隐藏时一样的空间，也就是说虽然元素不可见了，但是仍然会影响页面布局。</p>
<p>很多前端的同学认为 visibility: hidden 和 display: none 的区别仅仅在于 display: none 隐藏后的元素不占据任何空间，而 visibility: hidden 隐藏后的元素空间依旧保留 ，实际上没那么简单，visibility 是一个非常有故事性的属性:</p>
<p>1、visibility 具有继承性，给父元素设置 visibility:hidden;子元素也会继承这个属性。但是如果重新给子元素设置 visibility: visible,则子元素又会显示出来。这个和 display: none 有着质的区别</p>
<p>2、visibility: hidden 不会影响计数器的计数，如图所示，visibility: hidden 虽然让一个元素不见了，但是其计数器仍在运行。这和 display: none 完全不一样</p>
<p>3、CSS3 的 transition 支持 visibility 属性，但是并不支持 display，由于 transition 可以延迟执行，因此可以配合 visibility 使用纯 css 实现 hover 延时显示效果。提高用户体验。</p>
<blockquote>
<p>39.eval 函数的作用</p>
</blockquote>
<p>eval() 函数可计算某个字符串，并执行其中的的 JavaScript 代码。</p>
<p>1.把对应的字符串解析成 js 代码 2.避免使用 eval，不安全。非常耗性能（2 次，一次解析成语句，一次执行）。</p>
<p><strong>返回值</strong><br>通过计算 string 得到的值（如果有的话）。</p>
<p><strong>说明</strong><br>该方法只接受原始字符串作为参数，如果 string 参数不是原始字符串，那么该方法将不作任何改变地返回。因此请不要为 eval() 函数传递 String 对象来作为参数。</p>
<p>如果试图覆盖 eval 属性或把 eval() 方法赋予另一个属性，并通过该属性调用它，则 ECMAScript 实现允许抛出一个 EvalError 异常。</p>
<p><strong>抛出</strong><br>如果参数中没有合法的表达式和语句，则抛出 SyntaxError 异常。</p>
<p>如果非法调用 eval()，则抛出 EvalError 异常。</p>
<p>如果传递给 eval() 的 Javascript 代码生成了一个异常，eval() 将把该异常传递给调用者。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">  <span class="built_in">eval</span>(<span class="string">&quot;x=10;y=20;document.write(x*y)&quot;</span>) <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="built_in">eval</span>(<span class="string">&quot;2+2&quot;</span>)) <span class="keyword">var</span> x=<span class="number">10</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="built_in">eval</span>(x+<span class="number">17</span>))</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 200</span></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 27</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;2+3&quot;</span>); <span class="comment">// 返回 5</span></span><br><span class="line"><span class="keyword">var</span> myeval = <span class="built_in">eval</span>; <span class="comment">// 可能会抛出 EvalError 异常</span></span><br><span class="line"><span class="title function_">myeval</span>(<span class="string">&quot;2+3&quot;</span>); <span class="comment">// 可能会抛出 EvalError 异常</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以使用下面这段代码来检测 eval() 的参数是否合法：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;Result:&quot;</span> + <span class="built_in">eval</span>(<span class="title function_">prompt</span>(<span class="string">&quot;Enter an expression:&quot;</span>, <span class="string">&quot;&quot;</span>)));</span><br><span class="line">&#125; <span class="keyword">catch</span> (exception) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(exception);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>40.哪些操作会造成内存泄漏</p>
</blockquote>
<p>内存泄漏指任何对象在您不再拥有或需要它之后仍然存在。<br>垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的引用数量为 0（没有其他对象引用过该对象），或对该对象的唯一引用是循环的，那么该对象的内存即可回收。</p>
<p>1.setTimeout 的第一个参数使用字符串而非函数的话，会引发内存泄漏 2.闭包 3.控制台 4.循环（在两个对象彼此引用且彼此保留时，就会产生一个循环）</p>
<blockquote>
<p>41.渐进增强和优雅降级的区别？</p>
</blockquote>
<p>渐进增强：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。</p>
<p>优雅降级：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。</p>
<blockquote>
<p>42.CSS3 新特性：</p>
</blockquote>
<p>1.CSS3 实现圆角（border-radius），阴影（box-shadow） 2.对文字加特效（text-shadow），线性渐变（gradient），旋转（transform）<br>3.transform:rotate(9deg) scale(0.85,0.90) translate(0px,-30px) skew(-9deg,0deg);&#x2F;&#x2F;旋转，缩放，定位，倾斜 4.增加了更多的 CSS 选择器 多背景 rgba 5.在 CSS3 中唯一引入的伪元素是 ::selection 6.媒体查询，多栏布局<br>7.border-image</p>
<blockquote>
<p>43.H5 新特性：</p>
</blockquote>
<p>1.拖拽释放（Drag and drop）API 2.语义化更好的内容标签（header，nav，footer，aside，article，section） 3.音频、视频 API(audio,video) 4.画布（Canvas）API 5.地理（Geolocation）API 6.本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失；<br>7.sessionStorage 的数据在浏览器关闭后自动删除 8.表单控件，calendar、date、time、email、url、search 9.新的技术 webworker，websocket，Geolocation</p>
<blockquote>
<p>44.web 性能优化方案</p>
</blockquote>
<p>1.尽量减少 http 请求（雪碧图，精灵图，css script） 2.使用浏览器缓存 3.使用压缩组件，文件压缩和合并 4.图片、JS 的预载入 5.将脚本放在底部 6.将样式文件放在页面顶部 7.使用外部的 JS 和 CSS 8.精简代码 9.减少 DOM 操作（文档碎片） 10.使用 CDN 加速 11.使用 json 数据 12.使用 seo 友好的标签 h1,em,strong,alt,title 13.减少作用域链查找</p>
<blockquote>
<p>45.主流浏览器的内核:</p>
</blockquote>
<p>1).IE 内核(Trident)<br>Trident 内核代表产品 Internet Explorer，又称其为 IE 内核。Trident（又称为 MSHTML），是微软开发的一种排版引擎。国内很多的双核浏览器其中之一就是 Trident，美名其曰“兼容模式”。<br>代表：IE、傲游、世界之窗浏览器、Avant、猎豹安全浏览器、360 极速浏览器、百度浏览器等。<br>Window10 发布后，IE 将其内置浏览器命名为 Edge（原名斯巴达），使用了新内核 Edge 引擎。</p>
<p>2).Firefox（Gecko）<br>Gecko 内核代表作品 Mozilla FirefoxGecko 是一套开放源代码的、以 C++编写的网页排版引擎。Gecko 是最流行的排版引擎之一，仅次于 Trident。使用它的最著名浏览器有 Firefox、Netscape6 至 9。可惜这几年已经没落了，比如打开速度慢、升级频繁、猪一样的队友 flash、神一样的对手 Chrome。</p>
<p>4).Safari（Webkit）<br>苹果公司自己的内核，也是苹果的 Safari 浏览器使用的内核。<br>WebKit 内核代表作品 Safari、Chromewebkit 是一个开源项目，包含了来自 KDE 项目和苹果公司的一些组件，主要用于 Mac OS 系统，它的特点在于源码结构清晰、渲染速度极快。缺点是对网页代码的兼容性不高，导致一些编写不标准的网页无法正常显示。主要代表作品有 Safari 和 Google 的浏览器 Chrome。</p>
<p>5).Chrome（Blink）<br>有 Google 和 Opera Software 开发的浏览器排版引擎，2013 年 4 月发布，现在 Chrome 内核是 Blink。Blink 其实是 webkit 的分支，大部分国产浏览器最新版都采用 Blink 内核。</p>
<p>6).Opera（Presto）<br>Presto 内核代表作品 OperaPresto 是由 Opera Software 开发的浏览器排版引擎，供 Opera 7.0 及以上使用。它取代了旧版 Opera 4 至 6 版本使用的 Elektra 排版引擎，包括加入动态功能，例如网页或其部分可随着 DOM 及 Script 语法的事件而重新排版。在 13 年之后，Opera 宣布加入谷歌阵营，弃用了 Presto。</p>
<blockquote>
<p>46.$符号的介绍</p>
</blockquote>
<p>$是 jquery 前名</p>
<p>如$()也可 jQuery()这样写，相当于页面初始化函数，当页面加载完毕，会执行 jQuery()</p>
<blockquote>
<p>47.ES6 新特性</p>
</blockquote>
<p>1.let 命令<br>2.const 命令 3.解构赋值 4.扩展运算符：用三个点表示，功能是把数组或累数组对象展开成一系列单个的值（用都好隔开的值）</p>
<ul>
<li><p>数组合并<code>arr.concat(arr2)</code></p>
</li>
<li><p>Math.max &#x2F; Math.min(arr)</p>
</li>
<li><p>引用传递-浅拷贝</p>
<p>5.模板字符串 6.箭头函数：</p>
</li>
<li><p>箭头函数没有 function 关机那组，也就没有形成自己的作用域，所以箭头函数本身没有 this，this 来自于父级</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">constructor</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">fn</span>(); <span class="comment">//window对象</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>函数体内的 this 对象，就是定义时所在的对象，而不是使用时所在的对象。this 不会改变了</p>
</li>
<li><p>不可以当作构造函数，也就是说不可以用 new 命令，否则会抛出一个错误</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; <span class="string">&quot;哈哈&quot;</span>;</span><br><span class="line"><span class="keyword">new</span> <span class="title function_">fn</span>(); <span class="comment">//fn is not a constractor</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>不可以使用 arguements 对象，该对象在函数体内不存在</p>
</li>
<li><p>箭头函数一定是匿名函数</p>
</li>
<li><p>箭头函数适用于无复杂逻辑或无副作用的纯函数场景下，例如：map，reducer，filter 回调函数定义中</p>
</li>
<li><p>不要在最外层定义箭头函数，因为函数在内部操作 this 会很容易污染全局作用域。最起码在箭头函数外包一层普通函数，将 this 控制在可见范围内</p>
</li>
<li><p>箭头函数也没有 prototype 属性</p>
</li>
<li><p>箭头函数最吸引人的就是简洁</p>
<p>7.symbol 类型–表示独一无二的值<br>8.iterator 和 for…of 循环</p>
</li>
<li><p>它是一种接口，为各种不同的数据结构提供统一的访问机制。</p>
</li>
<li><p>任何数据结构只要部署 Iterator 接口就可以完成遍历操作</p>
</li>
</ul>
<p>iterator 的作用：<br>1).一是为各种数据结构，提供一个统一的简单访问接口<br>2).二是使得数据结构的成员能够按某种次序排序<br>3).ES6 创造了一种新的遍历命令 for…of 循环，Iterator 接口主要供 for…of 消费</p>
<p>9.数组的扩展方法：</p>
<ul>
<li><p>Array.from(obj)将对象转为真正的数组</p>
</li>
<li><p>Array.of()方法将一组值转为数组</p>
</li>
<li><p>fill()方法使用给定值，填充一个数组</p>
<p>10.对象的扩展方法：</p>
</li>
<li><p>对象的简洁表示法</p>
</li>
<li><p>Object.assign()用于对象的合并<br>将原对象的所有可枚举属性，复制到目标对象，实现浅拷贝。<br><code>Object.assign(&#123;&#125;,obj1,obj2,obj3)</code></p>
</li>
</ul>
<blockquote>
<p>48.同步和异步的区别？</p>
</blockquote>
<ul>
<li><p>同步，可以理解为在执行完一个函数或方法之后，一直等待系统返回值或消息，这时程序是出于阻塞的，只有接收到返回的值或消息后才往下执行其他的命令。</p>
</li>
<li><p>同步，就是实时处理（如打电话），比如服务器一接收客户端请求，马上响应，这样客户端可以在最短的时间内得到结果，但是如果多个客户端，或者一个客户端发出的请求很频繁，服务器无法同步处理，就会造成涌塞。</p>
</li>
<li><p>同步如打电话，通信双方不能断（我们是同时进行，同步），你一句我一句，这样的好处是，对方想表达的信息我马上能收到，但是，我在打着电话，我无法做别的事情。</p>
</li>
<li><p>异步，执行完函数或方法后，不必阻塞性地等待返回值或消息，只需要向系统委托一个异步过程，那么当系统接收到返回值或消息时，系统会自动触发委托的异步过程，从而完成一个完整的流程。</p>
</li>
<li><p>异步，就是分时处理（如收发短信），服务器接收到客户端请求后并不是立即处理，而是等待服务器比较空闲的时候加以处理，可以避免涌塞。</p>
</li>
</ul>
<blockquote>
<p>49.new 操作符具体干了什么？</p>
</blockquote>
<p>1.创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型 2.属性和方法被加入到 this 引用的对象中 3.新创建的对象由 this 所引用，并且最后隐式的返回 this</p>
<blockquote>
<p>50.this 的使用情况</p>
</blockquote>
<ul>
<li><p>this 通常指向的是我们正在执行的函数本身，或者是指向该函数所属的对象【作为普通函数】</p>
</li>
<li><p>全局的 this-&gt;指向 window</p>
</li>
<li><p>函数中的 this-&gt;指向的是函数所在的对象【使用 call，apply，bind（bind 会返回给一个新的函数，需要重新执行这个函数执行，而 call 会立即调用自身）】</p>
</li>
<li><p>对象中的 this-&gt;指向其本身【作为对象方法被调用】</p>
</li>
<li><p>【在 class 方法中调用】-&gt;指向当前实例的本身</p>
</li>
<li><p>【箭头函数】-&gt;上级作用域的 this 的值</p>
<p>1.作为普通函数调用，这是函数属于全局调用，因此 this 就代表全局对象 window 2.作为对象方法的调用。这是 this 就指向这个对象（事件处理函数同理） 3.作为构造函数调用，所谓构造函数，就是通过这个函数生存一个新对象（实例）<br>4.apply、call、bind 的介绍（函数的方法）。都是用来改变 this 要指向的对象。也就是想指定的上下文；第二个参数开始，就是函数本身的参数。apply 第二个参数一定是数组。但 bind 是返回对应的函数便于稍后调用；call、apply 是立即调用。 5.我们知道定时器的匿名函数里不能写 this，它会指向 window，但有了 bind 方法以后，我们可以随意设定 this 的指向。利用变量赋值来改变 this 执行（将正确的 this 存储下来）。箭头函数可以实现。</p>
</li>
</ul>
<blockquote>
<p>51.严格模式的目的：</p>
</blockquote>
<p>消除 Javascript 语法的一些不合理，不严谨之处。减少一些怪异行为。<br>消除代码运行的一些不安全协议，保证代码运行的安全。<br>提高编译器效率没增加运行速度<br>为未来新版本的 Javascript 做好铺垫。</p>
<p>进入严格模式的标志：<br><code>use strict</code></p>
<blockquote>
<p>52.js 延迟加载的方式有哪些？</p>
</blockquote>
<p>方案一：<code>&lt;script&gt;标签的async=“async”属性</code>（详细参见：script 标签的 async 属性）<br>方案二：<code>&lt;script&gt;标签的defer=“defer”属性</code><br>方案三：动态创建 DOM 方式（创建动态<code>&lt;script&gt;</code>标签，插入到 DOM 中，加载完毕后 callBack）<br>方案四：通过 ajax 去获取 js 代码，然后通过 eval 执行【AJAX eval（使用 AJAX 得到脚本内容，然后通过 eval_r(xmlhttp.responseText)来运行脚本）】<br>方案无：创建并插入 iframe，按需异步载入 js</p>
<blockquote>
<p>53.CSS 动画和 JS 动画</p>
</blockquote>
<p>css 动画：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;transition</span><br><span class="line">  appear=<span class="string">&quot;appear&quot;</span></span><br><span class="line">  enter-<span class="keyword">class</span>=<span class="string">&quot;&quot;</span></span><br><span class="line">  enter-active-<span class="keyword">class</span>=<span class="string">&quot;animated bounce&quot;</span></span><br><span class="line">  leave-<span class="keyword">class</span>=<span class="string">&quot;&quot;</span></span><br><span class="line">  leave-active-<span class="keyword">class</span>=<span class="string">&quot;animated shake&quot;</span></span><br><span class="line">&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure>

<p>js 动画：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;transition</span><br><span class="line">  @before-enter=&quot;&quot;</span><br><span class="line">  @enter=&quot;&quot;</span><br><span class="line">  @after-enter=&quot;&quot;</span><br><span class="line">  @enter-canceled=&quot;&quot;</span><br><span class="line">  @before-leave=&quot;&quot;</span><br><span class="line">  @leave=&quot;&quot;</span><br><span class="line">  @after-leave=&quot;&quot;</span><br><span class="line">  @leave-canceled=&quot;&quot;</span><br><span class="line">&gt;</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure>

<p>animated 官网</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">in</span>-<span class="attr">out</span>:新元素先执行，当前元素再执行</span><br><span class="line">out-<span class="attr">in</span>:当前元素先过渡，新元素再执行</span><br></pre></td></tr></table></figure>

<p>过渡动画：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.<span class="property">fade</span>-enter&#123;&#125;</span><br><span class="line">.<span class="property">fade</span>-enter-active&#123;&#125;</span><br><span class="line">.<span class="property">fade</span>-leave&#123;&#125;</span><br><span class="line">.<span class="property">fade</span>-leave-active&#123;&#125;</span><br><span class="line"></span><br><span class="line">&lt;transition name=<span class="string">&quot;fade&quot;</span> appear&gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>54.正则表达式</p>
</blockquote>
<p>创建正则的两种方式： 1.使用 RegExg 包个对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="title class_">RegExg</span>(<span class="string">&#x27;study&#x27;</span>,<span class="string">&#x27;ig&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数1代表正则的规则，可以放变量和字符串</span></span><br><span class="line"><span class="comment">// 第二个参数可选，模式修饰符</span></span><br><span class="line">i 表示 忽略大小写</span><br><span class="line">g 表示 全局匹配</span><br><span class="line">m 表示多行匹配</span><br></pre></td></tr></table></figure>

<p>2.使用字面量方式直接声明（如果正则表达式中有变量则不可用此方式）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/study/gi</span>;</span><br></pre></td></tr></table></figure>

<p>测试正则的方法：<br>1). reg.test(str)方法在字符串中查找是否存在指定的正则表达式，并返回布尔值。如果存在则返回 true，不存在返回 false<br>2).exec():在一个字符串中执行匹配检索。如果没有匹配到返回 null,如果匹配到返回一个数组。<br>3).使用 match 方法匹配内容，返回数组。str.match(reg)<br>4).使用 search 来查找匹配数据，和全局没有关系，查找第一个匹配的位置。相比 indexof 强大点，因为 search 方法可以在不确定具体值的情况下查找。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str.<span class="title function_">search</span>(reg);</span><br><span class="line">str.<span class="title function_">indexof</span>(<span class="string">&quot;6&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>5).使用 repalce 替换匹配到的数据，2 个参数：第一个代表正则，第二个代表来替换的字符。<br><code>str.replace(reg,&#39;xx&#39;)</code></p>
<p>exec()和 match 的区别：</p>
<ul>
<li>定义为非全局匹配时，exec 和 match 执行的结果一样</li>
<li>exec 与全局是否定义无关，而 match 则与全局相关</li>
</ul>
<blockquote>
<p>55.undefined 和 null 的区别</p>
</blockquote>
<ul>
<li>null 表示”没有对象”，即该处不应该有值。</li>
</ul>
<p>（1） 作为函数的参数，表示该函数的参数不是对象。</p>
<p>（2） 作为对象原型链的终点。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="comment">// null</span></span><br></pre></td></tr></table></figure>

<ul>
<li>undefined 表示”缺少值”，就是此处应该有一个值，但是还没有定义。</li>
</ul>
<p>（1）变量被声明了，但没有赋值时，就等于 undefined。</p>
<p>（2) 调用函数时，应该提供的参数没有提供，该参数等于 undefined。</p>
<p>（3）对象没有赋值的属性，该属性的值为 undefined。</p>
<p>（4）函数没有返回值时，默认返回 undefined。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i;</span><br><span class="line">i; <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f</span>(); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">o.<span class="property">p</span>; <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="title function_">f</span>();</span><br><span class="line">x; <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>56.垃圾回收机制</p>
</blockquote>
<p>现在各大浏览器通常用采用的垃圾回收有两种方法：标记清除、引用计数。</p>
<p>1、标记清除<br>　　这是 javascript 中最常用的垃圾回收方式。当变量进入执行环境是，就标记这个变量为“进入环境”。从逻辑上讲，永远不能释放进入环境的变量所占用的内存，因为只要执行流进入相应的环境，就可能会用到他们。当变量离开环境时，则将其标记为“离开环境”。<br>　　垃圾收集器在运行的时候会给存储在内存中的所有变量都加上标记。然后，它会去掉环境中的变量以及被环境中的变量引用的标记。而在此之后再被加上标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。最后。垃圾收集器完成内存清除工作，销毁那些带标记的值，并回收他们所占用的内存空间。</p>
<p>2、引用计数<br>　　另一种不太常见的垃圾回收策略是引用计数。引用计数的含义是跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型赋值给该变量时，则这个值的引用次数就是 1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数就减 1。当这个引用次数变成 0 时，则说明没有办法再访问这个值了，因而就可以将其所占的内存空间给收回来。这样，垃圾收集器下次再运行时，它就会释放那些引用次数为 0 的值所占的内存。</p>
<blockquote>
<p>57.js 预解析</p>
</blockquote>
<p>1).</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="title function_">a</span>();</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(x);</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">alert</span>(x);</span><br><span class="line"></span><br><span class="line"><span class="comment">//undefined</span></span><br><span class="line"><span class="comment">// 5</span></span><br></pre></td></tr></table></figure>

<p>2).</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="title function_">a</span>();</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(x);</span><br><span class="line">  x = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">alert</span>(x);</span><br><span class="line"></span><br><span class="line"><span class="comment">//5</span></span><br><span class="line"><span class="comment">//10</span></span><br></pre></td></tr></table></figure>

<p>3).</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">a</span>();</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(x);</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">alert</span>(x);</span><br><span class="line"></span><br><span class="line"><span class="comment">//undefined</span></span><br><span class="line"><span class="comment">// x is not defined</span></span><br></pre></td></tr></table></figure>

<p>4).</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="title function_">alert</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">// function a()&#123;</span></span><br><span class="line"><span class="comment">//     alert(1);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>

<p>5).</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">alert</span>(a);</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="title function_">alert</span>(a);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">alert</span>(a);</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">30</span>;</span><br><span class="line"><span class="title function_">alert</span>(a);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="number">40</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">alert</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">// function a()&#123;</span></span><br><span class="line"><span class="comment">//     alert(40);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 10</span></span><br><span class="line"><span class="comment">// 10</span></span><br><span class="line"><span class="comment">// 30</span></span><br><span class="line"><span class="comment">// 30</span></span><br></pre></td></tr></table></figure>

<p>6).</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="title function_">alert</span>(a);</span><br><span class="line"><span class="title function_">a</span>();</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 10</span></span><br><span class="line"><span class="comment">// a is not a function</span></span><br></pre></td></tr></table></figure>

<p>7).</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">alert</span>(a);</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">a</span>();</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">a</span>();</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="number">3</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">a</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// function a()&#123;</span></span><br><span class="line"><span class="comment">//     alert(2);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<p>8).</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(a);</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="title function_">alert</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"><span class="title function_">alert</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 10</span></span><br></pre></td></tr></table></figure>

<p>9).</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"><span class="title function_">alert</span>(a);</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="title function_">alert</span>(a);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// 10</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>58.js 执行顺序</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1s后输出6个6</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1s后输出123456</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>59.forEach 和 map 的区别</p>
</blockquote>
<h6 id="1-定义"><a href="#1-定义" class="headerlink" title="1).定义"></a>1).定义</h6><p>foreEach()方法:<br>针对每一个元素执行提供的函数。<br>map()方法:<br>创建一个新的数组，其中每一个元素由调用数组中的每一个元素执行提供的函数得来。</p>
<h6 id="2-区别"><a href="#2-区别" class="headerlink" title="2).区别"></a>2).区别</h6><p>forEach()方法不会返回执行结果，而是 undefined。也就是说，forEach()会修改原来的数组。而 map()方法会得到一个新的数组并返回。</p>
<h6 id="3-执行速度对比"><a href="#3-执行速度对比" class="headerlink" title="3).执行速度对比"></a>3).执行速度对比</h6><p>forEach()的执行速度 &lt; map()的执行速度</p>
<h6 id="4-如何使用"><a href="#4-如何使用" class="headerlink" title="4).如何使用"></a>4).如何使用</h6><p>forEach 适合于你并不打算改变数据的时候，而只是想用数据做一些事情 – 比如存入数据库或则打印出来。</p>
<p>map()适用于你要改变数据值的时候。不仅仅在于它更快，而且返回一个新的数组。这样的优点在于你可以使用复合(composition)(map(), filter(), reduce()等组合使用)来玩出更多的花样。</p>
<h6 id="5-总结"><a href="#5-总结" class="headerlink" title="5).总结"></a>5).总结</h6><p>forEach()可以做到的东西，map()也同样可以。反过来也是如此。<br>map()会分配内存空间存储新数组并返回，forEach()不会返回数据。<br>forEach()允许 callback 更改原始数组的元素。map()返回新的数组。</p>
<blockquote>
<p>60.对象中的对象名[ ‘ 属性名 ‘ ] 和 对象名.属性名的区别</p>
</blockquote>
<p><img src="https://img2018.cnblogs.com/i-beta/1860210/201911/1860210-20191112195502635-2055816997.png" alt="pic1"></p>
<p>然后我们用 for in 对他进行遍历，他的区别就出来了。</p>
<p><img src="https://img2018.cnblogs.com/i-beta/1860210/201911/1860210-20191112195724059-405351154.png" alt="pic2"></p>
<p><img src="https://img2018.cnblogs.com/i-beta/1860210/201911/1860210-20191112195848571-969119298.png" alt="pic3"></p>
<p><img src="https://img2018.cnblogs.com/i-beta/1860210/201911/1860210-20191112195954966-1203450424.png" alt="pic4"></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML &amp; CSS</title>
    <url>/2019/12/28/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E3%80%90%E4%B8%93%E9%A2%98%E3%80%911%EF%BC%9AHTML&amp;CSS/</url>
    <content><![CDATA[<h4 id="HTML-知识点"><a href="#HTML-知识点" class="headerlink" title="HTML 知识点"></a>HTML 知识点</h4><h5 id="1-如何理解-HTML-语义化？"><a href="#1-如何理解-HTML-语义化？" class="headerlink" title="1.如何理解 HTML 语义化？"></a>1.如何理解 HTML 语义化？</h5><ul>
<li>让人更容易读懂（增加代码可读性）</li>
<li>让搜索引擎更容易读懂（SEO）</li>
<li>去掉或样式丢失的时候能够让页面呈现清晰的结构</li>
</ul>
<p>&nbsp;</p>
<h5 id="2-默认情况下哪些-HTML-标签是块级元素，哪些是内联元素？"><a href="#2-默认情况下哪些-HTML-标签是块级元素，哪些是内联元素？" class="headerlink" title="2.默认情况下哪些 HTML 标签是块级元素，哪些是内联元素？"></a>2.默认情况下哪些 HTML 标签是块级元素，哪些是内联元素？</h5><ul>
<li>块级元素：display 等于 block 或者 table 的元素；有 div h1 h2 table ul ol p 等；<br>特点：独占一行</li>
<li>内联元素：display 等于 inline&#x2F;inline-block 的元素；有 span img input button 等；<br>特点：不会独占一行，挨个往后排，直到浏览器的边缘换行为止</li>
</ul>
<p>&nbsp;</p>
<h4 id="CSS-知识点"><a href="#CSS-知识点" class="headerlink" title="CSS 知识点"></a>CSS 知识点</h4><h5 id="一、布局"><a href="#一、布局" class="headerlink" title="一、布局"></a>一、布局</h5><h5 id="1-盒子模型的宽度如何计算？【盒模型】"><a href="#1-盒子模型的宽度如何计算？【盒模型】" class="headerlink" title="1.盒子模型的宽度如何计算？【盒模型】"></a>1.盒子模型的宽度如何计算？【盒模型】</h5><p>盒子模型分为两种：</p>
<ul>
<li>第一种：是 W3c 标准的盒子模型（标准盒模型）</li>
</ul>
<p><img src="https://www.daykalif.com/blog_img/biaozhunhemoxing.png" alt="daykalif"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">标准盒模型中width指的是内容区域content的宽度；height指的是内容区域content的高度。</span><br><span class="line"></span><br><span class="line">标准盒模型下盒子的总宽度 = width + margin(左右) + padding(左右) + border(左右)</span><br></pre></td></tr></table></figure>

<ul>
<li>第二种：IE 标准的盒子模型（怪异盒模型）</li>
</ul>
<p><img src="https://www.daykalif.com/blog_img/iehemoxing.png" alt="daykalif"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">怪异盒模型中的width指的是内容、边框、内边距总的宽度（content + border + padding）；height指的是内容、边框、内边距总的高度.</span><br><span class="line"></span><br><span class="line">怪异盒模型下盒子的总宽度 = width + margin(左右)（即width已经包含了padding和border值）</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、如何运用</span><br><span class="line">只要在文档首部加了doctype申明，即使用了标准盒模型，而不加，则会由浏览器自己决定，比如，ie 浏览器中显示“ie盒子模型”，在 ff 浏览器中显示“标准 w3c 盒子模型”。</span><br><span class="line">当用编辑器新建一个html页面的时候最顶上都会有一个DOCTYPE标签，不定义DOCTYPE，会触发怪异模式</span><br><span class="line"></span><br><span class="line">2、怪异盒模型</span><br><span class="line">CSS3的box-sizing</span><br><span class="line"></span><br><span class="line">box-sizing语法：</span><br><span class="line">box-sizing: content-box || border-box || inherit || initial</span><br><span class="line"></span><br><span class="line">当设置为box-sizing:content-box时，将采用标准模式解析计算，也是默认模式；</span><br><span class="line">当设置为box-sizing:border-box时，将采用怪异模式解析计算；</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">盒模型:</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>盒模型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#div1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* box-sizing: border-box; */</span></span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span>this is div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div1&quot;</span>).<span class="property">offsetWidth</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//默认 - 标准盒模型 - box-sizing:content-box：122</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//怪异盒模型 - box-sizing:border-box：100</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// offsetWidth 水平方向 width + 左右padding + 左右border</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// clientWidth 水平方向 width + 左右padding</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>&nbsp;</p>
<h5 id="2-margin-纵向重叠的问题"><a href="#2-margin-纵向重叠的问题" class="headerlink" title="2.margin 纵向重叠的问题"></a>2.margin 纵向重叠的问题</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">相邻元素的margin-top和margin-bottom会发生重叠</span><br><span class="line">空白内容的&lt;p&gt;&lt;/p&gt;也会重叠（即被忽略）</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>margin 纵向重叠<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-bottom</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- AAA与BBB之间的距离：15px --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>&nbsp;</p>
<h5 id="3-margin-负值的问题"><a href="#3-margin-负值的问题" class="headerlink" title="3.margin 负值的问题"></a>3.margin 负值的问题</h5><p>对 margin 的 top，left，right，bottom 设置负值，有何效果？<br>答：margin-top 和 margin-left 负值，元素向上、向左移动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">margin-left负值，自身向左移动10px；</span><br><span class="line">margin-right负值，右侧元素左移，自身不受影响（例如：A和B为左右关系，A的margin-right设置为-10px，则A元素不动，B元素向左移动10px）；</span><br><span class="line"></span><br><span class="line">margin-top负值，自身向上移动10px；</span><br><span class="line">margin-bottom负值，下方元素上移，自身不受影响（例如：A和B为上下关系，A的margin-bottom设置为-10px，则A元素不动，B元素向上移动10px）</span><br></pre></td></tr></table></figure>

<p>&nbsp;</p>
<h5 id="4-BFC-理解和应用"><a href="#4-BFC-理解和应用" class="headerlink" title="4.BFC 理解和应用"></a>4.BFC 理解和应用</h5><blockquote>
<p>什么是 BFC？如何应用？</p>
</blockquote>
<p>答案：Block format context，块级格式化上下文<br>一块独立渲染区域，内部元素的渲染不会影响边界以外的元素（会脱离文档流）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">形成BFC常见的条件：</span><br><span class="line"><span class="built_in">float</span>不是none</span><br><span class="line">position是absolute或fixed</span><br><span class="line">overflow不是visible</span><br><span class="line">display是flex inline-block等</span><br><span class="line"></span><br><span class="line">BFC常见应用：</span><br><span class="line">清除浮动</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#f1f1f1</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.bfc</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">overflow</span>: hidden; <span class="comment">/* 触发元素 BFC */</span></span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container bfc&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://www.xxx.com/static/img/index/logo.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;bfc&quot;</span>&gt;</span>某一段文字……<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>&nbsp;</p>
<h5 id="5-float-布局的问题，以及-clearfix（清除浮动）"><a href="#5-float-布局的问题，以及-clearfix（清除浮动）" class="headerlink" title="5.float 布局的问题，以及 clearfix（清除浮动）"></a>5.float 布局的问题，以及 clearfix（清除浮动）</h5><blockquote>
<p>如何实现圣杯布局和双飞翼布局？</p>
</blockquote>
<p>三栏布局，中间一栏最先加载和渲染（内容最重要）<br>两侧内容固定，中间内容随着宽度自适应<br>一般用于 PC 网页</p>
<blockquote>
<p>圣杯布局:</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>圣杯布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">min-width</span>: <span class="number">550px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#header</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#footer</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* clear:both; */</span> <span class="comment">/*2*/</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding-left</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding-right</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: blueviolet;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#container</span> <span class="selector-class">.floatLeft</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left; <span class="comment">/*1*/</span></span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#center</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#left</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>: -<span class="number">100%</span>; <span class="comment">/*3*/</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative; <span class="comment">/*相对于自身移动*/</span> <span class="comment">/*4*/</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">right</span>: <span class="number">200px</span>; <span class="comment">/*5*/</span></span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#right</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-right</span>: -<span class="number">150px</span>; <span class="comment">/*6*/</span> <span class="comment">/*在有宽度时，它会浮动到下层，margin-right: -150px，在外界看来它没有宽度了，就会被移到上一层的最右侧正好150px处*/</span></span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 手写 clearfix */</span></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*2*/</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: table;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.clearfix</span> &#123;</span></span><br><span class="line"><span class="language-css">        *zoom: <span class="number">1</span>; <span class="comment">/* 兼容IE低版本 */</span></span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;header&quot;</span>&gt;</span>this is header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span> <span class="attr">class</span>=<span class="string">&quot;clearfix&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;center&quot;</span> <span class="attr">class</span>=<span class="string">&quot;floatLeft&quot;</span>&gt;</span>this is center<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;left&quot;</span> <span class="attr">class</span>=<span class="string">&quot;floatLeft&quot;</span>&gt;</span>this is left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;right&quot;</span> <span class="attr">class</span>=<span class="string">&quot;floatLeft&quot;</span>&gt;</span>this is right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>this is footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>双飞翼布局:</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>双飞翼布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">min-width</span>: <span class="number">550px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.col</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left; <span class="comment">/*1*/</span></span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#main</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#main-wrap</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">190px</span> <span class="number">0</span> <span class="number">190px</span>; <span class="comment">/*2*/</span></span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#left</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">190px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#0000ff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>: -<span class="number">100%</span>; <span class="comment">/*3*/</span></span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#right</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">190px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#ff0000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>: -<span class="number">190px</span>; <span class="comment">/*4*/</span></span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main-wrap&quot;</span>&gt;</span>this is main<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;left&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>this is left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;right&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>this is right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>圣杯布局和双飞翼布局的技术总结:</p>
<ul>
<li>使用 float 布局</li>
<li>两侧使用 margin 负值，以便和中间内容横行重叠</li>
<li>防止中间内容被两侧覆盖，一个用 padding 一个用 margin</li>
</ul>
<p>&nbsp;</p>
<h5 id="6-flex-布局的问题（flex-画色子）"><a href="#6-flex-布局的问题（flex-画色子）" class="headerlink" title="6.flex 布局的问题（flex 画色子）"></a>6.flex 布局的问题（flex 画色子）</h5><h6 id="flex-布局常用语法回顾"><a href="#flex-布局常用语法回顾" class="headerlink" title="flex 布局常用语法回顾"></a>flex 布局常用语法回顾</h6><ul>
<li>flex-direction：主轴方向，可以横向，也可以纵向</li>
<li>justify-content：主轴对齐方式（开始对齐，结束对齐，中间对齐，两边对齐）</li>
<li>align-items：交叉轴对齐方式（开始对齐，结束对齐，中间对齐，两边对齐）</li>
<li>flex-wrap：是否换行</li>
<li>align-self：子元素在交叉轴的对齐方式</li>
</ul>
<blockquote>
<p>flex 实现一个三点的色子:</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>flex 画骰子<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex; <span class="comment">/*flex布局*/</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: space-between; <span class="comment">/*两端对齐*/</span></span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 背景色、大小、边框 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#666</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-self</span>: center; <span class="comment">/*第二项交叉轴居中对齐*/</span></span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-self</span>: flex-end; <span class="comment">/*第三项交叉轴尾对齐*/</span></span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>&nbsp;</p>
<h5 id="二、定位"><a href="#二、定位" class="headerlink" title="二、定位"></a>二、定位</h5><h5 id="1-absolute-和-relative-分别依据什么定位？"><a href="#1-absolute-和-relative-分别依据什么定位？" class="headerlink" title="1.absolute 和 relative 分别依据什么定位？"></a>1.absolute 和 relative 分别依据什么定位？</h5><p>relative:依据自身定位<br>absolute 依据最近一层的定位元素定位<br>定位元素：absolute relative fixed，如果没有找到则定位到 body</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>absote relative 定位问题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.relative</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*依据自身，自身向下20px和向右50px*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 如果自身没有设position: relative;则下面两行不生效，元素还原为之前的位置 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.absolute</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 依据往上找第一层定位元素，蓝色的框往下20px往右50px */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 依据往上找第一层定位元素，父级的position: relative;被注释了，则蓝色的框会根据body定位到距离上20px;距离左50px */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>absolute 和 relative 定位问题<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;relative&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;absolute&quot;</span>&gt;</span>this is absolute<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>&nbsp;</p>
<h5 id="2-居中对齐有哪些实现方式？"><a href="#2-居中对齐有哪些实现方式？" class="headerlink" title="2.居中对齐有哪些实现方式？"></a>2.居中对齐有哪些实现方式？</h5><h6 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h6><p>1.inline 元素：text-align:center<br>2.block 元素：margin:auto<br>3.absolute 元素：left:50% + margin-left 负值（必须知道子元素的宽度）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>水平对齐<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.container-1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.container-2</span> <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: auto;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.container-3</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.container-3</span> <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>: -<span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container container-1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>一段文字<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container container-2&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>this is block item<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container container-3&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>this is absolute item<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>&nbsp;</p>
<h6 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h6><p>1.inline 元素：line-height 的值等于 height 值<br>2.absolute 元素：top:50% + margin-top 负值（必须知道子元素的高度）<br>3.absolute 元素：transform(-50%,-50%)（不需要知道子元素的宽高）[CSS3 的属性，低版本浏览器不兼容]<br>4.absolute 元素：top,left,bottom,right &#x3D; 0 + margin:auto（不需要知道子元素的宽高）[低版本浏览器也兼容]</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>垂直对齐<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.container-1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.container-2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.container-2</span> <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>: -<span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-top</span>: -<span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.container-3</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.container-3</span> <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>); <span class="comment">/* CSS3的属性，低版本浏览器不兼容 */</span></span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.container-4</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.container-4</span> <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: auto;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container container-1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>一段文字<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container container-2&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>this is item<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container container-3&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>this is item<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container container-4&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>this is item<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>&nbsp;</p>
<h4 id="三、图文样式"><a href="#三、图文样式" class="headerlink" title="三、图文样式"></a>三、图文样式</h4><h5 id="1-line-height-的继承问题？"><a href="#1-line-height-的继承问题？" class="headerlink" title="1.line-height 的继承问题？"></a>1.line-height 的继承问题？</h5><p>写具体数值，如 50px，则继承该值<br>写比例，如 1.5，则继承该比例<br>写百分比，如 200%，则继承计算出来的值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>line-height 继承问题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 如下代码，p标签的行高将会是多少？*/</span></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* line-height: 50px; */</span> <span class="comment">/* 答案：50px */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* line-height: 1.5; */</span> <span class="comment">/* 答案：16px*1.5 = 24px */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">200%</span>; <span class="comment">/* 答案：20px * 200% = 40px */</span></span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一行文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>&nbsp;</p>
<h4 id="四、响应式"><a href="#四、响应式" class="headerlink" title="四、响应式"></a>四、响应式</h4><h5 id="1-rem-是什么？"><a href="#1-rem-是什么？" class="headerlink" title="1.rem 是什么？"></a>1.rem 是什么？</h5><ul>
<li>px，绝对长度单位，最常用</li>
<li>em，相对长度单位，相对于父元素，不常用</li>
<li>rem，相对长度单位，相对于根元素，常用于响应式布局</li>
</ul>
<p>&nbsp;</p>
<h5 id="2-如何实现响应式？"><a href="#2-如何实现响应式？" class="headerlink" title="2.如何实现响应式？"></a>2.如何实现响应式？</h5><ul>
<li>media-query（CSS3）,根据不同的屏幕宽度设置根元素 font-size</li>
<li>rem，基于根元素的相对单位</li>
</ul>
<p>&nbsp;</p>
<h5 id="3-vw-vh-是什么？"><a href="#3-vw-vh-是什么？" class="headerlink" title="3.vw&#x2F;vh 是什么？"></a>3.vw&#x2F;vh 是什么？</h5><p>rem 的弊端：“阶梯”性</p>
<p>网页视口尺寸：<br>window.screen.height&nbsp;&nbsp;&nbsp;&nbsp;&#x2F;&#x2F;屏幕高度（手机亮的屏幕高度）<br>window.innerHeight&nbsp;&nbsp;&nbsp;&nbsp;&#x2F;&#x2F;网页视口高度（浏览器去掉头，去掉下巴，剩下的中间视图高度）<br>document.body.clientHeight&nbsp;&nbsp;&nbsp;&nbsp;&#x2F;&#x2F;body 高度（网页呈现页面的高度）</p>
<p>vw&#x2F;vh：<br>vh：网页视口高度的 1&#x2F;100<br>vw：网页视图宽度的 1&#x2F;100<br>vmax 取两者最大值，vmin 取两者最小值</p>
<p><img src="https://www.daykalif.com/blog_img/vh.png" alt="daykalif"></p>
<h4 id="五、css3（flex-和动画）"><a href="#五、css3（flex-和动画）" class="headerlink" title="五、css3（flex 和动画）"></a>五、css3（flex 和动画）</h4><p>关于 css3 动画</p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>html &amp; css</tag>
      </tags>
  </entry>
  <entry>
    <title>原型&amp;原型链</title>
    <url>/2020/01/20/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E3%80%90%E4%B8%93%E9%A2%98%E3%80%913%EF%BC%9A%E5%8E%9F%E5%9E%8B&amp;%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
    <content><![CDATA[<h4 id="原型和原型链"><a href="#原型和原型链" class="headerlink" title="原型和原型链"></a>原型和原型链</h4><p>JS 本身是基于原型继承的语言</p>
<h5 id="一、class-和继承"><a href="#一、class-和继承" class="headerlink" title="一、class 和继承"></a>一、class 和继承</h5><h6 id="1-class：【constructor，属性，方法】"><a href="#1-class：【constructor，属性，方法】" class="headerlink" title="1.class：【constructor，属性，方法】"></a>1.class：【constructor，属性，方法】</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, number</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">number</span> = number;</span><br><span class="line">    <span class="comment">// this.gender = &#x27;male&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`姓名 <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> ，学号 <span class="subst">$&#123;<span class="variable language_">this</span>.number&#125;</span>`</span>);</span><br><span class="line">    <span class="comment">// console.log(</span></span><br><span class="line">    <span class="comment">//     &#x27;姓名 &#x27; + this.name + &#x27; ，学号 &#x27; + this.number</span></span><br><span class="line">    <span class="comment">// )</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// study() &#123;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过类 new 对象/实例</span></span><br><span class="line"><span class="keyword">const</span> xialuo = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;夏洛&quot;</span>, <span class="number">100</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xialuo.<span class="property">name</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xialuo.<span class="property">number</span>);</span><br><span class="line">xialuo.<span class="title function_">sayHi</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> madongmei = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;马冬梅&quot;</span>, <span class="number">101</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(madongmei.<span class="property">name</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(madongmei.<span class="property">number</span>);</span><br><span class="line">madongmei.<span class="title function_">sayHi</span>();</span><br></pre></td></tr></table></figure>

<h6 id="2-继承：【extends，super，扩展或重写方法】"><a href="#2-继承：【extends，super，扩展或重写方法】" class="headerlink" title="2.继承：【extends，super，扩展或重写方法】"></a>2.继承：【extends，super，扩展或重写方法】</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">eat</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> eat something`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">People</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, number</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">number</span> = number;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`姓名 <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> 学号 <span class="subst">$&#123;<span class="variable language_">this</span>.number&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_ inherited__">People</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, major</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">major</span> = major;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">teach</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> 教授 <span class="subst">$&#123;<span class="variable language_">this</span>.major&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 学生实例</span></span><br><span class="line"><span class="keyword">const</span> xialuo = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;夏洛&quot;</span>, <span class="number">100</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xialuo.<span class="property">name</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xialuo.<span class="property">number</span>);</span><br><span class="line">xialuo.<span class="title function_">sayHi</span>();</span><br><span class="line">xialuo.<span class="title function_">eat</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 老师实例</span></span><br><span class="line"><span class="keyword">const</span> wanglaoshi = <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;王老师&quot;</span>, <span class="string">&quot;语文&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(wanglaoshi.<span class="property">name</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(wanglaoshi.<span class="property">major</span>);</span><br><span class="line">wanglaoshi.<span class="title function_">teach</span>();</span><br><span class="line">wanglaoshi.<span class="title function_">eat</span>();</span><br><span class="line"></span><br><span class="line">xialuo.<span class="title function_">sayHi</span>(); <span class="comment">//  姓名 夏洛 学号 100 ，里面的this指向的是xialuo这个实例   --&gt;    有点类似于  xialuo.__proto__.sayHi.call(xialuo) 这种方式来执行</span></span><br><span class="line">xialio.<span class="property">__proto__</span>.<span class="title function_">sayHi</span>(); <span class="comment">// 姓名 undefined 学号 undefined ，里面的this指向的是xialio.__proto__</span></span><br></pre></td></tr></table></figure>

<p>类型判断-instanceof:如果 intanceof 前面的变量随着隐式原型一直向上找，能不能对应到 class 的显示原型，如果能找到，就是 ture，如果找不到，则是 false</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xialuo <span class="keyword">instanceof</span> <span class="title class_">Student</span>; <span class="comment">//true  --xialuo是否是由Student类构建出来的？</span></span><br><span class="line">xialuo <span class="keyword">instanceof</span> <span class="title class_">People</span>; <span class="comment">//true  --People类是否是构建xialuo的父类？</span></span><br><span class="line">xialuo <span class="keyword">instanceof</span> <span class="title class_">Object</span>; <span class="comment">//true  --Object是所有class的父类</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>问：如何准确判断一个变量是不是数组？</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[] <span class="keyword">instanceof</span> <span class="title class_">Array</span>     <span class="comment">//true</span></span><br><span class="line">[] <span class="keyword">instanceof</span> <span class="title class_">Object</span>    <span class="comment">//true</span></span><br><span class="line">&#123;&#125; <span class="keyword">instanceof</span> <span class="title class_">Object</span>    <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h5 id="二、原型和原型链"><a href="#二、原型和原型链" class="headerlink" title="二、原型和原型链"></a>二、原型和原型链</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">原型：</span><br><span class="line"><span class="comment">//class 实际上是函数，可见是语法糖</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="title class_">People</span>   <span class="comment">//&#x27;function&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="title class_">Student</span>  <span class="comment">//&#x27;function&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//隐式原型和显示原型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xialuo.<span class="property">__proto__</span>); <span class="comment">//隐式原型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">//显示原型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xialuo.<span class="property">__proto__</span> === <span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">People</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">People</span>.<span class="property"><span class="keyword">prototype</span></span> === <span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">原型关系：</span><br><span class="line">每个class都有显示原型prototype</span><br><span class="line">每个实例都有隐式原型__proto__</span><br><span class="line">实例的__proto__指向对应class的prototype</span><br><span class="line"></span><br><span class="line">基于原型的执行规则：</span><br><span class="line">获取属性xialuo.name或执行方法xialuo.sayhi()时</span><br><span class="line">先在自身属性和方法寻找</span><br><span class="line">如果找不到则自动去__proto__中查找</span><br></pre></td></tr></table></figure>

<p>⚠️ 重要提示：<br>class 是 ES6 语法规范，由 ECMA 委员会发布。<br>ECMA 只规定语法规则，即我们代码的书写规范，不规定如何实现。<br>以上实现方式都是 V8 引擎的实现方式，也是主流的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xialuo.<span class="property">hasOwnProperty</span>：判断是不是自己的属性</span><br><span class="line">xialuo.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;name&#x27;</span>)   <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">xialuo.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;sayHi&#x27;</span>)  <span class="comment">//false</span></span><br><span class="line">xialuo.<span class="title function_">sayHi</span>()  <span class="comment">//可以执行</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>问：手写一个简易的 jQuery，考虑插件和扩展性</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">jQuery</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">selector</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(selector);</span><br><span class="line">    <span class="keyword">const</span> length = result.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">      <span class="variable language_">this</span>[i] = result[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">length</span> = length;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">selector</span> = selector;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params">index</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>[index];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">each</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> elem = <span class="variable language_">this</span>[i];</span><br><span class="line">      <span class="title function_">fn</span>(elem);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">on</span>(<span class="params">type, fn</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">each</span>(<span class="function">(<span class="params">elem</span>) =&gt;</span> &#123;</span><br><span class="line">      elem.<span class="title function_">addEventListener</span>(type, fn, <span class="literal">false</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 扩展很多 DOM API</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插件</span></span><br><span class="line">jQuery.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">dialog</span> = <span class="keyword">function</span> (<span class="params">info</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(info);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// “造轮子”--复写机制</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myJQuery</span> <span class="keyword">extends</span> <span class="title class_ inherited__">jQuery</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">selector</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(selector);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 扩展自己的方法</span></span><br><span class="line">  <span class="title function_">addClass</span>(<span class="params">className</span>) &#123;&#125;</span><br><span class="line">  <span class="title function_">style</span>(<span class="params">data</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const $p = new jQuery(&#x27;p&#x27;)</span></span><br><span class="line"><span class="comment">// $p.get(1)</span></span><br><span class="line"><span class="comment">// $p.each((elem) =&gt; console.log(elem.nodeName))</span></span><br><span class="line"><span class="comment">// $p.on(&#x27;click&#x27;, () =&gt; alert(&#x27;clicked&#x27;))</span></span><br><span class="line"><span class="comment">// $p.dialog(&#x27;abc&#x27;)</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>问：class 的原型本质，怎么理解？</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">原型和原型链的图示</span><br><span class="line">属性和方法的执行规则</span><br><span class="line"></span><br><span class="line">原型关系：</span><br><span class="line">每个class都有显示原型prototype</span><br><span class="line">每个实例都有隐式原型__proto__</span><br><span class="line">实例的__proto__指向对应class的prototype</span><br><span class="line"></span><br><span class="line">基于原型的执行规则：</span><br><span class="line">获取属性xialuo.name或执行方法xialuo.sayhi()时</span><br><span class="line">现在自身属性和方法寻找</span><br><span class="line">如果找不到则自动去__proto__中查找</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>作用域&amp;闭包</title>
    <url>/2020/01/20/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E3%80%90%E4%B8%93%E9%A2%98%E3%80%914%EF%BC%9A%E4%BD%9C%E7%94%A8%E5%9F%9F&amp;%E9%97%AD%E5%8C%85/</url>
    <content><![CDATA[<h4 id="作用域和闭包"><a href="#作用域和闭包" class="headerlink" title="作用域和闭包"></a>作用域和闭包</h4><h5 id="一、作用域和自由变量"><a href="#一、作用域和自由变量" class="headerlink" title="一、作用域和自由变量"></a>一、作用域和自由变量</h5><p>作用域：变量的合法使用范围</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">全局作用域</span><br><span class="line">函数作用域</span><br><span class="line">块级作用域（ES6新增）</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="built_in">let</span> x = 100</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(x)  //会报错</span><br><span class="line"></span><br><span class="line">自由变量：</span><br><span class="line">一个变量在当前作用域没有定义，但被使用了</span><br><span class="line">向上级作用域，一层一层依次寻找，直到找到为止</span><br><span class="line">如果到全局作用域都没有找到，则报错xx is not defined</span><br></pre></td></tr></table></figure>

<h5 id="二、闭包"><a href="#二、闭包" class="headerlink" title="二、闭包"></a>二、闭包</h5><p>作用域应用的特殊情况，有两种情况：</p>
<ul>
<li>函数作为参数被传递</li>
<li>函数作为返回值被返回</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数作为返回值</span></span><br><span class="line"><span class="comment">// function create() &#123;</span></span><br><span class="line"><span class="comment">//     const a = 100</span></span><br><span class="line"><span class="comment">//     return function () &#123;</span></span><br><span class="line"><span class="comment">//         console.log(a)</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const fn = create()</span></span><br><span class="line"><span class="comment">// const a = 200</span></span><br><span class="line"><span class="comment">// fn() // 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数作为参数被传递</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">print</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="number">200</span>;</span><br><span class="line">  <span class="title function_">fn</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">print</span>(fn); <span class="comment">// 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有的自由变量的查找，是在函数定义的地方，向上级作用域查找</span></span><br><span class="line"><span class="comment">// 不是在执行的地方！！！</span></span><br></pre></td></tr></table></figure>

<p>自由变量查找规则：<br>在函数定义的地方往上查找，而不是函数执行的地方往上查找</p>
<h5 id="三、this"><a href="#三、this" class="headerlink" title="三、this"></a>三、this</h5><p>⚠️ 注：this 取什么值，是在函数执行的时候决定的，不是在函数定义的时候决定的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例1:</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn1</span>(); <span class="comment">//window</span></span><br><span class="line"></span><br><span class="line">fn1.<span class="title function_">call</span>(&#123; <span class="attr">x</span>: <span class="number">100</span> &#125;); <span class="comment">//&#123;x:100&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn2 = fn1.<span class="title function_">bind</span>(&#123; <span class="attr">x</span>: <span class="number">200</span> &#125;);</span><br><span class="line"><span class="title function_">fn2</span>(); <span class="comment">//&#123;x:200&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例2：【箭头函数里面this的取值，是取它上级作用域的值】</span></span><br><span class="line"><span class="keyword">const</span> zhangsan = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>，</span><br><span class="line">    <span class="title function_">sayHi</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//this即当前对象</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">wait</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="comment">//this === window</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">waitAgain</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="comment">//this即当前对象</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&nbsp;</p>
<blockquote>
<p>问：this 的不同应用场景，如何取值？</p>
</blockquote>
<ul>
<li>全局的 this-&gt;指向 window</li>
<li>this 通常指向的是我们正在执行的函数本身</li>
<li>函数中的 this-&gt;指向的是函数所在的对象【使用 call，apply，bind（bind 会返回给一个新的函数，需要重新执行这个函数执行，而 call 会立即调用自身）】</li>
<li>对象中的 this-&gt;指向其本身【作为对象方法被调用】</li>
<li>【在 class 方法中调用】-&gt;指向当前实例的本身</li>
<li>【箭头函数】-&gt;上级作用域的 this 的值</li>
</ul>
<p>&nbsp;</p>
<blockquote>
<p>问：手写 bind 函数</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模拟 bind</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bind1</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 将参数拆解为数组</span></span><br><span class="line">  <span class="keyword">const</span> args = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>); <span class="comment">//将列表转化为数组</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取 this（数组第一项）</span></span><br><span class="line">  <span class="keyword">const</span> t = args.<span class="title function_">shift</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// fn1.bind(...) 中的 fn1</span></span><br><span class="line">  <span class="keyword">const</span> self = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回一个函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> self.<span class="title function_">apply</span>(t, args);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;this&quot;</span>, <span class="variable language_">this</span>); <span class="comment">//&#123;x: 100&#125;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c); <span class="comment">//10，20，30</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;this is fn1&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn2 = fn1.<span class="title function_">bind1</span>(&#123; <span class="attr">x</span>: <span class="number">100</span> &#125;, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">const</span> res = <span class="title function_">fn2</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">//&#x27;this is fn1&#x27;</span></span><br></pre></td></tr></table></figure>

<p>&nbsp;</p>
<blockquote>
<p>问：实际开发中闭包的应用场景，举例说明</p>
</blockquote>
<p>隐藏数据<br>如做一个简单的 cache 的工具</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 闭包隐藏数据，只提供 API</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createCache</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> data = &#123;&#125;; <span class="comment">// 闭包中的数据，被隐藏，不被外界访问</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">key, val</span>) &#123;</span><br><span class="line">      data[key] = val;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params">key</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> data[key];</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// data.b = 200    //报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c = <span class="title function_">createCache</span>();</span><br><span class="line">c.<span class="title function_">set</span>(<span class="string">&quot;a&quot;</span>, <span class="number">100</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c.<span class="title function_">get</span>(<span class="string">&quot;a&quot;</span>)); <span class="comment">//100</span></span><br></pre></td></tr></table></figure>

<p>&nbsp;</p>
<blockquote>
<p>问：创建 10 个 a 标签，点击的时候弹出来对应的序号</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// let a</span></span><br><span class="line"><span class="comment">// for (let i = 0; i &lt; 10; i++) &#123;</span></span><br><span class="line"><span class="comment">//     a = document.createElement(&#x27;a&#x27;)</span></span><br><span class="line"><span class="comment">//     a.innerHTML = i + &#x27;&lt;br&gt;&#x27;</span></span><br><span class="line"><span class="comment">//     a.addEventListener(&#x27;click&#x27;, function (e) &#123;</span></span><br><span class="line"><span class="comment">//         e.preventDefault()</span></span><br><span class="line"><span class="comment">//         alert(i)    //弹出对应的序号</span></span><br><span class="line"><span class="comment">//     &#125;)</span></span><br><span class="line"><span class="comment">//     document.body.appendChild(a)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// var i</span></span><br><span class="line"><span class="comment">// for (i = 0; i &lt; 10; i++) &#123;</span></span><br><span class="line"><span class="comment">//     (function (i) &#123;</span></span><br><span class="line"><span class="comment">//         var a = document.createElement(&#x27;a&#x27;)</span></span><br><span class="line"><span class="comment">//         a.innerHTML = i + &#x27;&lt;br&gt;&#x27;</span></span><br><span class="line"><span class="comment">//         a.addEventListener(&#x27;click&#x27;, function (e) &#123;</span></span><br><span class="line"><span class="comment">//             e.preventDefault()</span></span><br><span class="line"><span class="comment">//             alert(i)    //弹出对应的序号</span></span><br><span class="line"><span class="comment">//         &#125;)</span></span><br><span class="line"><span class="comment">//         document.body.appendChild(a)</span></span><br><span class="line"><span class="comment">//     &#125;)(i)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// let i,a</span></span><br><span class="line"><span class="comment">// for(i=0;i&lt;10;i++)&#123;</span></span><br><span class="line"><span class="comment">//     a = document.createElement(&#x27;a&#x27;)</span></span><br><span class="line"><span class="comment">//     a.innerHTML = i + &#x27;&lt;br&gt;&#x27;</span></span><br><span class="line"><span class="comment">//     a.addEventListener(&#x27;click&#x27;, function (e) &#123;</span></span><br><span class="line"><span class="comment">//         e.preventDefault()</span></span><br><span class="line"><span class="comment">//         alert(i)   //全部弹出10</span></span><br><span class="line"><span class="comment">//     &#125;)</span></span><br><span class="line"><span class="comment">//     document.body.appendChild(a)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">  a.<span class="property">innerHTML</span> = i + <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">  a.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">    <span class="title function_">alert</span>(i); <span class="comment">//全部弹出10</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 例2:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// 作用域a</span></span><br><span class="line">  a[i] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 作用域b</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">6</span>](); <span class="comment">// 10</span></span><br><span class="line"><span class="comment">// 因为es5不存在块级作用域，所以迭代变量i泄露了，然后对于a数组内每一个函数内的i都是向上查询作用域a的，所以结果是10。这个没问题。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面的例子是用let来声明迭代变量的</span></span><br><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  a[i] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">6</span>](); <span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 上面代码中，变量i是let声明的，当前的i只在本轮循环有效，所以每一次循环的i其实都是一个新的变量，所以最后输出的是6。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xialuo.<span class="property">__proto__</span>.<span class="title function_">sayHi</span>(); <span class="comment">//姓名 undefined 学号 number --&gt; sayHi当作对象的方法执行，对象是xialuo.__proto__,它没有name和number</span></span><br><span class="line">xialuo.<span class="title function_">sayHi</span>(); <span class="comment">//姓名 夏洛 学号 100 --&gt; sayHi当作对象的方法执行，对象是xialuo  --&gt; 类似于xialuo.__proto__.sayHi.call(xialuo)这样去执行</span></span><br></pre></td></tr></table></figure>

<h5 id="四、使用闭包的注意点"><a href="#四、使用闭包的注意点" class="headerlink" title="四、使用闭包的注意点"></a>四、使用闭包的注意点</h5><p>（1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在 IE 中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>（2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JS基础</title>
    <url>/2020/01/19/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E3%80%90%E4%B8%93%E9%A2%98%E3%80%912%EF%BC%9AJS%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h4 id="JS-基础-变量类型和计算"><a href="#JS-基础-变量类型和计算" class="headerlink" title="JS 基础-变量类型和计算"></a>JS 基础-变量类型和计算</h4><blockquote>
<p>值类型和引用类型</p>
</blockquote>
<h5 id="1-变量类型-值类型-vs-引用类型"><a href="#1-变量类型-值类型-vs-引用类型" class="headerlink" title="1.变量类型[值类型 vs 引用类型]"></a>1.变量类型[值类型 vs 引用类型]</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">js的变量有2中基本类型的值：</span><br><span class="line">1.基本类型值，存放在栈中的一些简单的数据段，Undefined,String,Number,Boolean,Null,Symbol(ES6新增)</span><br><span class="line">2.引用类型值，是引用类型的实例，它是保留在堆内存中的一个对象，引用类型是一种数据结构，最常用的是Object，Array，Function类型，另外还有Date，RegExp，Error.</span><br><span class="line">注：Null基本数据类型,高程中明确是基本数据类型,用typeof 虽然返回的是Object,但instanceof Object 结果是<span class="literal">false</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">常见值类型:</span><br><span class="line"><span class="keyword">let</span> a</span><br><span class="line"><span class="keyword">const</span> s = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="keyword">const</span> n = <span class="number">100</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="literal">true</span></span><br><span class="line"><span class="keyword">const</span> s = <span class="title class_">Symbol</span>(<span class="string">&#x27;s&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> n = <span class="literal">null</span>  <span class="comment">//基本数据类型</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//引用类型</span></span><br><span class="line"><span class="keyword">let</span> a = &#123; <span class="attr">age</span>:<span class="number">20</span> &#125;</span><br><span class="line"><span class="keyword">let</span> b = a</span><br><span class="line">b.<span class="property">age</span> = <span class="number">21</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">age</span>)  <span class="comment">//21</span></span><br><span class="line"></span><br><span class="line">常见引用类型：</span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">x</span>:<span class="number">100</span> &#125;</span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//特殊引用类型，但不用于存储数据，所以没有“拷贝、复制函数”这一说</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-值类型和引用类型的区别？"><a href="#2-值类型和引用类型的区别？" class="headerlink" title="2.值类型和引用类型的区别？"></a>2.值类型和引用类型的区别？</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">js中的基本数据类型（原始数据类型）：</span><br><span class="line">string number null undefined boolean symbol(ES6)</span><br><span class="line">引用类型：</span><br><span class="line">object</span><br><span class="line"></span><br><span class="line">在js中内存分为栈内存和堆内存：</span><br><span class="line">栈内存存放的一般是有固定大小和空间的内容</span><br><span class="line">字符串是个特例，字符串具有不变形，也存在栈内容中</span><br><span class="line">堆内存存放大小不固定的内容</span><br><span class="line">引用数据类型的数据存放在堆内存中</span><br><span class="line"></span><br><span class="line">当我们声明一个引用类型的变量时，会在栈内存中存放一个引用地址，这个地址指向堆内存中的内容</span><br><span class="line"></span><br><span class="line">原始数据类型按值访问</span><br><span class="line">引用数据类型按引用访问</span><br><span class="line"></span><br><span class="line">null是基本数据类型</span><br><span class="line">但是typeof null为object,这是因为在js存储中对象是以000开头的，而null是一个空，相当于全0，所以typeof null也是object</span><br><span class="line"></span><br><span class="line">null instanceof Object —&gt; <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123; <span class="attr">x</span>: <span class="number">100</span>, <span class="attr">y</span>: <span class="number">200</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = obj1;</span><br><span class="line"><span class="keyword">let</span> x1 = obj1.<span class="property">x</span>;</span><br><span class="line">obj2.<span class="property">x</span> = <span class="number">101</span>;</span><br><span class="line">x1 = <span class="number">102</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1); <span class="comment">//&#123; x:101 &#125;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>类型判断</p>
</blockquote>
<h5 id="1-typeof-能判断哪些类型？"><a href="#1-typeof-能判断哪些类型？" class="headerlink" title="1.typeof 能判断哪些类型？"></a>1.typeof 能判断哪些类型？</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>).识别所有值类型</span><br><span class="line"><span class="keyword">let</span> a</span><br><span class="line"><span class="keyword">typeof</span> a    <span class="comment">//&#x27;undefined&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> s = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> s    <span class="comment">//&#x27;string&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> n = <span class="number">100</span></span><br><span class="line"><span class="keyword">typeof</span> n    <span class="comment">//&#x27;number&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = <span class="literal">true</span></span><br><span class="line"><span class="keyword">typeof</span> b    <span class="comment">//&#x27;boolean&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> s = <span class="title class_">Symbol</span>(<span class="string">&#x27;s&#x27;</span>)</span><br><span class="line"><span class="keyword">typeof</span> s    <span class="comment">//&#x27;symbol&#x27;  --ES6</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>).识别函数</span><br><span class="line"><span class="keyword">typeof</span> <span class="variable language_">console</span>.<span class="property">log</span>  <span class="comment">//&#x27;function&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125; <span class="comment">//&#x27;function&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>).判断是否是引用类型（不可再细分）</span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span> <span class="comment">//&#x27;object&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>]    <span class="comment">//&#x27;object&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;<span class="attr">x</span>:<span class="number">100</span>&#125;  <span class="comment">//&#x27;object&#x27;</span></span><br></pre></td></tr></table></figure>

<h5 id="2-变量计算-类型转换"><a href="#2-变量计算-类型转换" class="headerlink" title="2.变量计算-类型转换"></a>2.变量计算-类型转换</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">字符串拼接：</span><br><span class="line"><span class="keyword">const</span> a = <span class="number">100</span> + <span class="number">10</span>  <span class="comment">//110</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="number">100</span> + <span class="string">&#x27;10&#x27;</span>    <span class="comment">//&#x27;10010&#x27;</span></span><br><span class="line"><span class="keyword">const</span> c = <span class="literal">true</span> + <span class="string">&#x27;10&#x27;</span>   <span class="comment">//&#x27;true10&#x27;</span></span><br><span class="line"><span class="number">100</span> + <span class="built_in">parseInt</span>(<span class="string">&#x27;10&#x27;</span>)    <span class="comment">//110</span></span><br><span class="line"></span><br><span class="line">== 运算符：</span><br><span class="line"><span class="number">100</span> == <span class="string">&#x27;100&#x27;</span>    <span class="comment">//true</span></span><br><span class="line"><span class="number">0</span> == <span class="string">&#x27;&#x27;</span>     <span class="comment">//true</span></span><br><span class="line"><span class="number">0</span> == <span class="literal">false</span>  <span class="comment">//true</span></span><br><span class="line"><span class="literal">false</span> == <span class="string">&#x27;&#x27;</span> <span class="comment">//true</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span>   <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>逻辑运算</p>
</blockquote>
<h5 id="1-何时使用-，何时使用-？"><a href="#1-何时使用-，何时使用-？" class="headerlink" title="1.何时使用&#x3D;&#x3D;&#x3D;，何时使用&#x3D;&#x3D;？"></a>1.何时使用&#x3D;&#x3D;&#x3D;，何时使用&#x3D;&#x3D;？</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//除了 == null之外，其他都一律用 ===，例如：</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">x</span>:<span class="number">100</span> &#125;</span><br><span class="line"><span class="keyword">if</span>(obj.<span class="property">a</span> == <span class="literal">null</span>)&#123;&#125;</span><br><span class="line"><span class="comment">//相当于：</span></span><br><span class="line"><span class="comment">//if(obj.a === null || obj.a)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>语句和逻辑运算：</span><br><span class="line">truely变量：!!a === <span class="literal">true</span>的变量</span><br><span class="line">falsely变量：!!a===<span class="literal">false</span>的变量</span><br><span class="line"></span><br><span class="line">以下是falsely变量。除此之外都是truely变量</span><br><span class="line">!!<span class="number">0</span> === <span class="literal">false</span></span><br><span class="line">!!<span class="title class_">NaN</span> === <span class="literal">false</span></span><br><span class="line">!!<span class="string">&#x27;&#x27;</span> === <span class="literal">false</span></span><br><span class="line">!!<span class="literal">null</span> === <span class="literal">false</span></span><br><span class="line">!!<span class="literal">undefined</span> === <span class="literal">false</span></span><br><span class="line">!!<span class="literal">false</span> === <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//truely变量</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="literal">true</span></span><br><span class="line"><span class="keyword">if</span>(a)&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> b=<span class="number">100</span></span><br><span class="line"><span class="keyword">if</span>(b)&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//falsely变量</span></span><br><span class="line"><span class="keyword">const</span> c = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span>(c)&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> d = <span class="literal">null</span></span><br><span class="line"><span class="keyword">if</span>(d)&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> e</span><br><span class="line"><span class="keyword">if</span>(e)&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">逻辑判断：</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> &amp;&amp; <span class="number">0</span>)    <span class="comment">//0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> &amp;&amp; <span class="number">10</span>)    <span class="comment">//0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&#x27;</span> || <span class="string">&#x27;abc&#x27;</span>)    <span class="comment">//&#x27;abc&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!<span class="variable language_">window</span>.<span class="property">abc</span>)    <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h5 id="手写深拷贝"><a href="#手写深拷贝" class="headerlink" title="手写深拷贝"></a>手写深拷贝</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">注意判断值类型和引用类型</span><br><span class="line">注意判断是数组还是对象</span><br><span class="line">递归</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 深拷贝</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">  <span class="attr">address</span>: &#123;</span><br><span class="line">    <span class="attr">city</span>: <span class="string">&quot;beijing&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">arr</span>: [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj2 = <span class="title function_">deepClone</span>(obj1);</span><br><span class="line">obj2.<span class="property">address</span>.<span class="property">city</span> = <span class="string">&quot;shanghai&quot;</span>;</span><br><span class="line">obj2.<span class="property">arr</span>[<span class="number">0</span>] = <span class="string">&quot;a1&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">address</span>.<span class="property">city</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">arr</span>[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 深拷贝函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; obj 要拷贝的对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">obj = &#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&quot;object&quot;</span> || obj == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// obj 是 null ，或者不是对象和数组，直接返回</span></span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化返回结果</span></span><br><span class="line">  <span class="keyword">let</span> result;</span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">    result = [];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    result = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="comment">// 保证 key 不是原型的属性</span></span><br><span class="line">    <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">      <span class="comment">// 递归调用！！！</span></span><br><span class="line">      result[key] = <span class="title function_">deepClone</span>(obj[key]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回结果</span></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 浅拷贝1:</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="number">30</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(obj, &#123; <span class="attr">d</span>: <span class="number">40</span> &#125;); <span class="comment">//追加</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">//&#123;a:10,b:20,c:30,d:40&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj1 = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, obj, &#123; <span class="attr">e</span>: <span class="number">50</span> &#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">//&#123;a:10,b:20,c:30,d:40&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1); <span class="comment">//&#123;a:10,b:20,c:30,d:40,e:50&#125;</span></span><br><span class="line"></span><br><span class="line">obj.<span class="property">a</span> = <span class="number">100</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1); <span class="comment">//&#123;a:10,b:20,c:30,d:40,e:50&#125;    不改变</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 浅拷贝2:</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">b</span>: &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">100</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> obj1 = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, obj, &#123; <span class="attr">c</span>: <span class="number">30</span> &#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">//&#123;a:10,b:&#123;x:100,y:100&#125;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1); <span class="comment">//&#123;a:10,b:&#123;x:100,y:100&#125;,c:30&#125;</span></span><br><span class="line">obj.<span class="property">b</span>.<span class="property">x</span> = <span class="number">101</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">//&#123;a:10,b:&#123;x:101,y:100&#125;,c:30&#125;  会改变</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JS异步</title>
    <url>/2020/01/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E3%80%90%E4%B8%93%E9%A2%98%E3%80%915%EF%BC%9AJS%E5%BC%82%E6%AD%A5/</url>
    <content><![CDATA[<h4 id="JS-基础-异步"><a href="#JS-基础-异步" class="headerlink" title="JS 基础-异步"></a>JS 基础-异步</h4><h5 id="一、单线程和异步"><a href="#一、单线程和异步" class="headerlink" title="一、单线程和异步"></a>一、单线程和异步</h5><ul>
<li>JS 是单线程语言，只能同时做一件事儿，异步的产生是由单线程这个背景而来的。</li>
<li>浏览器和 nodejs 已支持 JS 启动进程，如 Web Worker</li>
<li>JS 和 DOM 渲染公用一个线程，因为 JS 可修改 DOM 结构。所以在 JS 执行过程中，DOM 渲染必须停止；DOM 渲染过程中，JS 执行也必须停止。</li>
</ul>
<p>遇到等待时（如：网络请求，定时任务）不能卡住，因此需要异步【异步是为了解决单线程等待的这个问题】。异步是基于回调 callback 函数形式来调用的。</p>
<blockquote>
<p>问：同步和异步的区别是什么？</p>
</blockquote>
<p>基于 JS 是单线程语言<br>异步不会阻塞后面代码的执行<br>同步会阻塞代码执行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 异步 （callback 回调函数）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">100</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">200</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">300</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">400</span>);</span><br><span class="line"><span class="comment">// 输出顺序：100 300 400 200</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//setTimeout</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>);</span><br><span class="line"><span class="comment">//执行顺序：1，3，5，4，2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 同步</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">100</span>);</span><br><span class="line"><span class="title function_">alert</span>(<span class="number">200</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">300</span>);</span><br></pre></td></tr></table></figure>

<h5 id="二、应用场景"><a href="#二、应用场景" class="headerlink" title="二、应用场景"></a>二、应用场景</h5><blockquote>
<p>问：前端使用异步的场景有哪些？</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">网络请求，如ajax图片加载</span><br><span class="line">定时任务，如setTimeout</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.ajax</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">$.<span class="title function_">get</span>(<span class="string">&quot;./data1.json&quot;</span>, <span class="keyword">function</span> (<span class="params">data1</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data1);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;end&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.图片加载</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;start&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> img = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">img.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;loaded&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">img.<span class="property">src</span> = <span class="string">&quot;/xxx.png&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;end&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.setTimeout</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">100</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">200</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.setInterval</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">100</span>);</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">200</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">300</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>问：手写 Promise 加载一张图片</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">loadImg</span>(<span class="params">src</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> img = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">    img.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(img);</span><br><span class="line">    &#125;;</span><br><span class="line">    img.<span class="property">onerror</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> err = <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`图片加载失败 <span class="subst">$&#123;src&#125;</span>`</span>);</span><br><span class="line">      <span class="title function_">reject</span>(err);</span><br><span class="line">    &#125;;</span><br><span class="line">    img.<span class="property">src</span> = src;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 演示单张图片加载：</span></span><br><span class="line"><span class="comment">// const url = &#x27;https://img.mukewang.com/5a9fc8070001a82402060220-140-140.jpg&#x27;</span></span><br><span class="line"><span class="comment">// loadImg(url).then(img =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     console.log(img.width)</span></span><br><span class="line"><span class="comment">//     return img</span></span><br><span class="line"><span class="comment">// &#125;).then(img =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     console.log(img.height)</span></span><br><span class="line"><span class="comment">// &#125;).catch(ex =&gt; console.error(ex))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 演示多个一起加载：</span></span><br><span class="line"><span class="keyword">const</span> url1 = <span class="string">&quot;https://img.mukewang.com/5a9fc8070001a82402060220-140-140.jpg&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> url2 = <span class="string">&quot;https://img3.mukewang.com/5a9fc8070001a82402060220-100-100.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">loadImg</span>(url1)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">img1</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(img1.<span class="property">width</span>);</span><br><span class="line">    <span class="keyword">return</span> img1; <span class="comment">// return 普通对象</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">img1</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(img1.<span class="property">height</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">loadImg</span>(url2); <span class="comment">// return promise 实例</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">img2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(img2.<span class="property">width</span>);</span><br><span class="line">    <span class="keyword">return</span> img2;</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">img2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(img2.<span class="property">height</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">ex</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(ex));</span><br></pre></td></tr></table></figure>

<h5 id="三、callback-hell-（回调地狱-回调陷阱）和-Promise"><a href="#三、callback-hell-（回调地狱-回调陷阱）和-Promise" class="headerlink" title="三、callback hell （回调地狱&#x2F;回调陷阱）和 Promise"></a>三、callback hell （回调地狱&#x2F;回调陷阱）和 Promise</h5><p>Promise 解决 callback hell 嵌套的问题</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//callback hell(回调地狱) -（嵌套形式）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取第一份数据</span></span><br><span class="line">$.<span class="title function_">get</span>(url1, <span class="function">(<span class="params">data1</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data1);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//获取第二份数据</span></span><br><span class="line">  $.<span class="title function_">get</span>(url2, <span class="function">(<span class="params">data2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取第三份数据</span></span><br><span class="line">    $.<span class="title function_">get</span>(url3, <span class="function">(<span class="params">data3</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(data3);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//还可能获取更多数据</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 【callback hell是产出Promise的核心的问题】</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Promise -（管道形式，串联形式）</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">      url,</span><br><span class="line">      <span class="title function_">success</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(data);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">error</span>(<span class="params">err</span>) &#123;</span><br><span class="line">        <span class="title function_">reject</span>(err);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> url1 = <span class="string">&quot;./data1.json&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> url2 = <span class="string">&quot;./data2.json&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> url3 = <span class="string">&quot;./data3.json&quot;</span>;</span><br><span class="line"><span class="title function_">getData</span>(url1)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">data1</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data1);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">getData</span>(url2);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">data2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data2);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">getData</span>(url3);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">data3</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data3);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>js</tag>
        <tag>异步</tag>
      </tags>
  </entry>
  <entry>
    <title>JS异步进阶</title>
    <url>/2020/01/22/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E3%80%90%E4%B8%93%E9%A2%98%E3%80%916%EF%BC%9AJS%E5%BC%82%E6%AD%A5%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<h4 id="JS-异步进阶"><a href="#JS-异步进阶" class="headerlink" title="JS 异步进阶"></a>JS 异步进阶</h4><h5 id="一、event-loop（事件循环-事件轮询）"><a href="#一、event-loop（事件循环-事件轮询）" class="headerlink" title="一、event loop（事件循环&#x2F;事件轮询）"></a>一、event loop（事件循环&#x2F;事件轮询）</h5><p>JS 是单线程运行的<br>异步要基于回调来实现<br>event loop 就是异步回调的实现原理</p>
<p>JS 如何执行？</p>
<ul>
<li>JS 代码从前到后，一行一行执行</li>
<li>如果某一行执行报错，则停止下面代码的执行</li>
<li>先把同步代码执行完，再执行异步</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">event loop过程1：</span><br><span class="line">同步代码，一行一行放到Call Stack执行</span><br><span class="line">遇到异步，会先“记录”下，等待时机（定时，网络请求等）</span><br><span class="line">时机到了，就移动到Callback Queue</span><br><span class="line"></span><br><span class="line">event loop过程2:</span><br><span class="line">如Call Stack为空（即同步代码执行完）Event Loop开始工作</span><br><span class="line">轮询查找Callback Queue，如有则移动到Call Stack执行</span><br><span class="line">然后继续轮询查找（永动机一样）</span><br></pre></td></tr></table></figure>

<p>JS 是单线程<br>Dom 事件和 event loop：<br>异步（setTimeout，ajax 等）使用回调，基于 event loop.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hi&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> <span class="title function_">cb1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;cb1&quot;</span>); <span class="comment">// cb 即 callback</span></span><br><span class="line">&#125;, <span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Bye&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>DOM 事件也使用回调，基于 event loop.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hi&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  $(<span class="string">&quot;#btn1&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;button clicked&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Bye&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="二、promise-进阶"><a href="#二、promise-进阶" class="headerlink" title="二、promise 进阶"></a>二、promise 进阶</h5><blockquote>
<p>1.Promise 的基本使用</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 加载图片</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loadImg</span>(<span class="params">src</span>) &#123;</span><br><span class="line">  <span class="comment">//pending</span></span><br><span class="line">  <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> img = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">    img.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(img); <span class="comment">//resolved</span></span><br><span class="line">    &#125;;</span><br><span class="line">    img.<span class="property">onerror</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> err = <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`图片加载失败 <span class="subst">$&#123;src&#125;</span>`</span>);</span><br><span class="line">      <span class="title function_">reject</span>(err); <span class="comment">//rejected</span></span><br><span class="line">    &#125;;</span><br><span class="line">    img.<span class="property">src</span> = src;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> url = <span class="string">&quot;https://img.mukewang.com/5a9fc8070001a82402060220-140-140.jpg&quot;</span>;</span><br><span class="line"><span class="title function_">loadImg</span>(url)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">img</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(img.<span class="property">width</span>);</span><br><span class="line">    <span class="keyword">return</span> img;</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">img</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(img.<span class="property">height</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">ex</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(ex));</span><br></pre></td></tr></table></figure>

<blockquote>
<p>2.三种状态，如何变化：</p>
</blockquote>
<p>pending,resolved,rejected<br>pending -&gt; resolved 或 pending -&gt; rejected<br>（画图表示转换关系，以及转换不可逆）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 刚定义时，状态默认为 pending</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;p1&quot;</span>, p1); <span class="comment">//pending</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行 resolve() 后，状态变成 resolved</span></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;p2&quot;</span>, p2); <span class="comment">//pending 一开始打印时</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;p2-setTimeout&quot;</span>, p2);</span><br><span class="line">&#125;); <span class="comment">//resolved</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行 reject() 后，状态变成 rejected</span></span><br><span class="line"><span class="keyword">const</span> p3 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;p3&quot;</span>, p3); <span class="comment">//pending 一开始打印时</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;p3-setTimeout&quot;</span>, p3);</span><br><span class="line">&#125;); <span class="comment">//rejected</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>3.状态的表现和变化：</p>
</blockquote>
<p>pending 状态，不会触发 then 和 catch<br>resolved 状态，会触发后续的 then 回调函数<br>rejected 状态，会触发后续的 catch 回调函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接返回一个 resolved 状态</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">100</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;p1&quot;</span>, p1); <span class="comment">//resolved</span></span><br><span class="line">p1.<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;data&quot;</span>, data); <span class="comment">//100</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">err</span>(<span class="string">&quot;err&quot;</span>, err); <span class="comment">//[不会触发]</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接返回一个 rejected 状态</span></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&quot;some error&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;p2&quot;</span>, p2); <span class="comment">//rejected</span></span><br><span class="line">p2.<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;data&quot;</span>, data); <span class="comment">//[不会触发]</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">err</span>(<span class="string">&quot;err&quot;</span>, err); <span class="comment">//&#x27;some error&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>4.then 和 catch 对状态的影响(状态变化会触发 then catch)</p>
</blockquote>
<p>then 正常返回 resolved,里面有报错则返回 rejected<br>catch 正常返回 resolved,里面有报错则返回 rejected<br>（then 和 catch 的链式调用)</p>
<p>pending 不会触发任何 then catch 回调<br>状态变为 resolved 会触发后续的 then 回调<br>状态变为 rejected 会触发后续的 catch 回调</p>
<p>then catch 会继续返回 Promise ，<strong>此时可能会发生状态变化！！！</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// then正常返回resolved,里面有报错则返回rejected：</span></span><br><span class="line"><span class="comment">// then() 一般正常返回 resolved 状态的 promise</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;p1&quot;</span>, p1); <span class="comment">//返回 resolved 状态的 promise,触发后续then回调</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// then() 里抛出错误，会返回 rejected 状态的 promise</span></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;err&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;p2&quot;</span>, p2); <span class="comment">//返回 rejected 状态的 promise,触发后续catch回调</span></span><br><span class="line">p2.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;456&quot;</span>); <span class="comment">//[不会触发]</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;err100&quot;</span>, err); <span class="comment">//[会触发]</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// catch正常返回resolved,里面有报错则返回rejected：</span></span><br><span class="line"><span class="comment">// catch() 不抛出错误，会返回 resolved 状态的 promise</span></span><br><span class="line"><span class="keyword">const</span> p3 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>().<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;catch some error&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;p3&quot;</span>, p3); <span class="comment">//返回 resolved 状态的 promise,触发后续then回调</span></span><br><span class="line">p3.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;300&quot;</span>); <span class="comment">//[会触发]</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;err300&quot;</span>, err); <span class="comment">//[不会触发]</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// catch() 抛出错误，会返回 rejected 状态的 promise</span></span><br><span class="line"><span class="keyword">const</span> p4 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>().<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;catch some error&quot;</span>);</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;err&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;p4&quot;</span>, p4); <span class="comment">//返回 rejected 状态的 promise,触发后续catch回调</span></span><br><span class="line">p4.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;400&quot;</span>); <span class="comment">//[不会触发]</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;err400&quot;</span>, err); <span class="comment">//[会触发]</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例1:</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 返回 resolved 状态的 promise</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 返回 resolved 状态的 promise</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">//1，3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例2:</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 返回 rejected 状态的 promise</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;erro1&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 返回 resolved 状态的 promise</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">//1，2，3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例3:</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 返回 rejected 状态的 promise</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;erro1&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 返回 resolved 状态的 promise</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 注意这里是catch</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">//1，2</span></span><br></pre></td></tr></table></figure>

<h5 id="三、async-await"><a href="#三、async-await" class="headerlink" title="三、async&#x2F;await"></a>三、async&#x2F;await</h5><p>异步回调 callback hell<br>Promise then catch 链式调用，但也是基于回调函数<br>async&#x2F;await 是同步语法，彻底消灭回调函数</p>
<blockquote>
<p>1.语法介绍</p>
</blockquote>
<p>用同步的方式，编写异步。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">loadImg</span>(<span class="params">src</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> img = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">    img.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(img);</span><br><span class="line">    &#125;;</span><br><span class="line">    img.<span class="property">onerror</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`图片加载失败 <span class="subst">$&#123;src&#125;</span>`</span>));</span><br><span class="line">    &#125;;</span><br><span class="line">    img.<span class="property">src</span> = src;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">loadImg1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> src1 = <span class="string">&quot;http://www.imooc.com/static/img/index/logo_new.png&quot;</span>;</span><br><span class="line">  <span class="keyword">const</span> img1 = <span class="keyword">await</span> <span class="title function_">loadImg</span>(src1); <span class="comment">//await后面可以追加promise对象</span></span><br><span class="line">  <span class="keyword">return</span> img1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">loadImg2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> src2 = <span class="string">&quot;https://www.daykalif.com/blog_img/event_loop.jpeg&quot;</span>;</span><br><span class="line">  <span class="keyword">const</span> img2 = <span class="keyword">await</span> <span class="title function_">loadImg</span>(src2);</span><br><span class="line">  <span class="keyword">return</span> img2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 注意：await 必须放在 async 函数中，否则会报错</span></span><br><span class="line">  <span class="comment">//同步的写法</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 加载第一张图片</span></span><br><span class="line">    <span class="keyword">const</span> img1 = <span class="keyword">await</span> <span class="title function_">loadImg1</span>(); <span class="comment">//await后面也可以追加async函数</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(img1);</span><br><span class="line">    <span class="comment">// 加载第二张图片</span></span><br><span class="line">    <span class="keyword">const</span> img2 = <span class="keyword">await</span> <span class="title function_">loadImg2</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(img2);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(ex);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>2.async&#x2F;await 和 Promise 的关系：</p>
</blockquote>
<ul>
<li>async&#x2F;await 是消灭异步回调的终极武器，但和 Promise 并不互斥；反而，两者相辅相成。</li>
<li>async 函数返回结果都是 Promise 对象（如果函数内没返回 Promise ，则自动封装一下）</li>
<li>await 相当于 Promise 的 then</li>
<li>try…catch 可捕获异常，代替了 Promise 的 catch</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例1:</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">() =&gt;</span> &#123;&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn2</span>()); <span class="comment">//pending状态的Promise</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例2:</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">100</span>; <span class="comment">// 1.相当于 return Promise.resolve(100)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn1</span>()); <span class="comment">// 相当于 Promise.resolve(100)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res1 = <span class="title function_">fn1</span>(); <span class="comment">//执行async函数，返回的是一个Promise对象</span></span><br><span class="line"><span class="comment">//console.log(&#x27;res1&#x27;,res1)  //Promise对象</span></span><br><span class="line">res1.<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;data&quot;</span>, data); <span class="comment">//100</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例3:</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn3</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">300</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> res3 = <span class="title function_">fn3</span>(); <span class="comment">//执行async函数，返回的是一个Promise对象</span></span><br><span class="line">res3.<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;data&quot;</span>, data); <span class="comment">//300</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//示例4:</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line">(<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="title function_">fn</span>(); <span class="comment">//返回的是一个Promise对象</span></span><br><span class="line">  <span class="keyword">const</span> b = <span class="keyword">await</span> <span class="title function_">fn</span>(); <span class="comment">//await后面接一个promise，await相当于promise.then，所以b是100</span></span><br><span class="line">&#125;)()(</span><br><span class="line">  <span class="comment">//示例5:</span></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> a = <span class="keyword">await</span> <span class="number">100</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a&quot;</span>, a);</span><br><span class="line">    <span class="keyword">const</span> b = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">200</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b&quot;</span>, b);</span><br><span class="line">    <span class="keyword">const</span> c = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="number">300</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;c&quot;</span>, c);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">)();</span><br><span class="line"><span class="comment">//执行完毕，打印出：&#x27;start&#x27; 100 200 报错</span></span><br></pre></td></tr></table></figure>

<ul>
<li>await 后面跟 Promise 对象：会阻断后续代码，等待状态变为 resolved ，才获取结果并继续执行</li>
<li>await 后续跟非 Promise 对象：会直接返回</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//示例1:</span></span><br><span class="line">(<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">() =&gt;</span> &#123;&#125;);</span><br><span class="line">  <span class="keyword">await</span> p1;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;p1&quot;</span>); <span class="comment">// 不会执行</span></span><br><span class="line">&#125;)()(</span><br><span class="line">  <span class="comment">//示例2:</span></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> p2; <span class="comment">//2.await 相当于 Promise then</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// 100</span></span><br><span class="line">  &#125;</span><br><span class="line">)()(</span><br><span class="line">  <span class="comment">//示例3:</span></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="number">100</span>; <span class="comment">//3.相当于 await Promise.resolve(100)</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// 100</span></span><br><span class="line">  &#125;</span><br><span class="line">)();</span><br><span class="line"></span><br><span class="line"><span class="comment">//示例4:</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn5</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">500</span>; <span class="comment">// 相当于 return Promise.resolve(500)</span></span><br><span class="line">&#125;</span><br><span class="line">!(<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">fn5</span>(); <span class="comment">//4.await后面跟一个async函数，相当于后面跟了promise函数</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;data&quot;</span>, data); <span class="comment">//500</span></span><br><span class="line">&#125;)()(</span><br><span class="line">  <span class="comment">//示例5:</span></span><br><span class="line">  <span class="comment">//try...catch 捕获 rejected 状态</span></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> p4 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&quot;some err&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> res = <span class="keyword">await</span> p4;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">//不会执行</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(ex); <span class="comment">//执行  //try...catch...相当于promise catch</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)()(</span><br><span class="line">  <span class="comment">//示例6:</span></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> p3 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&quot;some err&quot;</span>); <span class="comment">//reject状态</span></span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> p3; <span class="comment">//await 相当于是 promise的then</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// 不会执行</span></span><br><span class="line">  &#125;</span><br><span class="line">)();</span><br></pre></td></tr></table></figure>

<p>总结来看：</p>
<ul>
<li>async 封装 Promise，返回 Promise</li>
<li>await 处理 Promise 成功</li>
<li>try…catch 处理 Promise 失败</li>
</ul>
<blockquote>
<p>3.异步的本质：</p>
</blockquote>
<p>JS 还是单线程，还得是有异步，还得是基于 event loop<br>async&#x2F;await 是消灭异步回调的终极武器<br>await 是同步写法，但本质还是异步调用。<br>async&#x2F;await 只是一个语法糖，但这颗糖真香！</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例1:</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async1 start&quot;</span>); <span class="comment">//2【重要】</span></span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">async2</span>(); <span class="comment">//先执行async2，再执行await     //undefined</span></span><br><span class="line">  <span class="comment">//await的后面，都可以看作是callback里面的内容，即异步</span></span><br><span class="line">  <span class="comment">//类似，event loop，setTimeout(cb1)</span></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async1 end&quot;</span>); <span class="comment">// 关键在这一步，它相当于放在 callback 中，由异步来去执行，最后执行     //5</span></span><br><span class="line">  <span class="comment">//上面这一句相当于：setTimeout(function()&#123;console.log(&#x27;async1 end&#x27;)&#125;)</span></span><br><span class="line">  <span class="comment">//或者是相当于：Promise.resolve().then(()=&gt;&#123;console.log(&#x27;async1 end&#x27;)&#125;)   //微任务/宏任务</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async2&quot;</span>); <span class="comment">//3【重要】</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;script start&quot;</span>); <span class="comment">//1</span></span><br><span class="line"><span class="title function_">async1</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;script end&quot;</span>); <span class="comment">//4.到此，同步代码已经执行完(开始启动event loop机制)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//示例2:</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async1 start&quot;</span>); <span class="comment">//2</span></span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">async2</span>();</span><br><span class="line">  <span class="comment">//下面3行都是异步回调，callback的内容     //即，只要遇到了 `await` ，后面的代码都相当于放在 callback 里。</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async1 end&quot;</span>); <span class="comment">//5</span></span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">async3</span>();</span><br><span class="line">  <span class="comment">//下面1行都是异步回调的内容</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async1 end 2&quot;</span>); <span class="comment">//7</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async2&quot;</span>); <span class="comment">//3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async3</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async3&quot;</span>); <span class="comment">//6</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;script start&quot;</span>); <span class="comment">//1</span></span><br><span class="line"><span class="title function_">async1</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;script end&quot;</span>); <span class="comment">//4.到此，同步代码已经执行完(event loop)</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>4.for…of:</p>
</blockquote>
<p>for…in（以及 forEach for）是常规的同步遍历<br>for…of 常用于异步的遍历</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定时算乘法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">multi</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(num * num);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for...in（以及forEach，for）是常规的同步遍历</span></span><br><span class="line"><span class="comment">// 使用 forEach或者for...in ，是 1s 之后打印出所有结果，即 3 个值是一起被计算出来的</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">  nums.<span class="title function_">forEach</span>(<span class="keyword">async</span> (x) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">multi</span>(x);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test1</span>();</span><br><span class="line"><span class="comment">// 1s后一次性打印出1，4，9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// for...of 常用于异步的遍历</span></span><br><span class="line"><span class="comment">// 使用 for...of ，可以让计算挨个串行执行</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> x <span class="keyword">of</span> nums) &#123;</span><br><span class="line">    <span class="comment">// 在 for...of 循环体的内部，遇到 await 会挨个串行计算</span></span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">multi</span>(x);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test2</span>();</span><br><span class="line"><span class="comment">// 1s后打印1</span></span><br><span class="line"><span class="comment">// 第二秒，打印4</span></span><br><span class="line"><span class="comment">// 第三秒，打印9</span></span><br></pre></td></tr></table></figure>

<h5 id="四、宏任务-macro-Task-和-微任务-micro-Task"><a href="#四、宏任务-macro-Task-和-微任务-micro-Task" class="headerlink" title="四、宏任务 macro Task 和 微任务 micro Task"></a>四、宏任务 macro Task 和 微任务 micro Task</h5><blockquote>
<p>1.什么是宏任务，什么是微任务？</p>
</blockquote>
<p>【宏任务和微任务包括了所有的异步，所有的回调，依赖于 event loop 机制的 DOM 事件】</p>
<ul>
<li>宏任务：setTimeout,setInterval,Ajax,DOM 事件</li>
<li>微任务：Promise async&#x2F;await（对于前端来说）</li>
<li>微任务比宏任务执行的更早</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">100</span>);</span><br><span class="line"><span class="comment">// 宏任务</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">203</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">200</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">202</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">201</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 微任务</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">300</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">400</span>);</span><br><span class="line"><span class="comment">// 100 400 300 200 202 201 203</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>2.event loop 和 DOM 渲染：</p>
</blockquote>
<p>再次回归一遍 event loop 的过程<br>JS 是单线程的，而且和 DOM 渲染公用一个线程<br>JS 执行的时候，得留一些时机供 DOM 渲染</p>
<p>每次 Call Stack 清空（即每次轮询结束），即同步任务执行完<br>都是 DOM 重新渲染的机会，DOM 结构如有改变则重新渲染（不一定非得渲染，就是给一次 DOM 渲染的机会！！！）<br>然后再去触发下一次 Event Loop</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> $p1 = $(<span class="string">&quot;&lt;p&gt;一段文字&lt;/p&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> $p2 = $(<span class="string">&quot;&lt;p&gt;一段文字&lt;/p&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> $p3 = $(<span class="string">&quot;&lt;p&gt;一段文字&lt;/p&gt;&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;#container&quot;</span>).<span class="title function_">append</span>($p1).<span class="title function_">append</span>($p2).<span class="title function_">append</span>($p3);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;length&quot;</span>, $(<span class="string">&quot;#container&quot;</span>).<span class="title function_">children</span>().<span class="property">length</span>); <span class="comment">//3</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;本次 call stack 结束，DOM 结构已更新，但尚未触发渲染&quot;</span>);</span><br><span class="line"><span class="comment">// （alert 会阻断 js 执行，也会阻断 DOM 渲染，便于查看效果）</span></span><br><span class="line"><span class="comment">// 到此，即本次 call stack 结束后（同步任务都执行完了），浏览器会自动触发渲染，不用代码干预</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 另外，按照 event loop 触发 DOM 渲染时机，setTimeout 时 alert ，就能看到 DOM 渲染后的结果了</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;setTimeout 是在下一次 Call Stack ，就能看到 DOM 渲染出来的结果了&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>3.宏任务和微任务的区别</p>
</blockquote>
<ul>
<li>宏任务：DOM 渲染后再触发</li>
<li>微任务：DOM 渲染前会触发</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改 DOM</span></span><br><span class="line"><span class="keyword">const</span> $p1 = $(<span class="string">&quot;&lt;p&gt;一段文字&lt;/p&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> $p2 = $(<span class="string">&quot;&lt;p&gt;一段文字&lt;/p&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> $p3 = $(<span class="string">&quot;&lt;p&gt;一段文字&lt;/p&gt;&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;#container&quot;</span>).<span class="title function_">append</span>($p1).<span class="title function_">append</span>($p2).<span class="title function_">append</span>($p3);</span><br><span class="line"></span><br><span class="line"><span class="comment">// // 微任务：渲染之前执行（DOM 结构已更新）</span></span><br><span class="line"><span class="comment">// Promise.resolve().then(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     const length = $(&#x27;#container&#x27;).children().length</span></span><br><span class="line"><span class="comment">//     alert(`micro task $&#123;length&#125;`)    //DOM没有渲染</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 宏任务：渲染之后执行（DOM 结构已更新）</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> length = $(<span class="string">&quot;#container&quot;</span>).<span class="title function_">children</span>().<span class="property">length</span>;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">`macro task <span class="subst">$&#123;length&#125;</span>`</span>); <span class="comment">//DOM已经渲染</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>再深入思考一下：为何两者会有以上区别，一个在渲染前，一个在渲染后？</p>
<ul>
<li>微任务：ES 语法标准之内，JS 引擎来统一处理。即，不用浏览器有任何关于，即可一次性处理完，更快更及时。</li>
<li>宏任务：ES 语法没有，JS 引擎不处理，浏览器（或 nodejs）干预处理。</li>
</ul>
<p>从 event loop 解释，为何微任务执行更早<br>微任务是 ES6 语法规定的<br>宏任务是浏览器规定的<br><img src="https://www.daykalif.com/blog_img/event_loop.jpeg" alt="daykalif"></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>js</tag>
        <tag>异步</tag>
      </tags>
  </entry>
  <entry>
    <title>JS-WEB-API-DOM</title>
    <url>/2020/01/23/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E3%80%90%E4%B8%93%E9%A2%98%E3%80%917%EF%BC%9AJS-WEB-API-DOM/</url>
    <content><![CDATA[<p>JS 基础知识，规定语法（ECMA262 标准）<br>JS WEB API，网页操作的 API（W3C 标准）<br>前者是后者的基础，两者结合才能真正实际应用</p>
<h4 id="JS-Web-API-DOM"><a href="#JS-Web-API-DOM" class="headerlink" title="JS Web API - DOM"></a>JS Web API - DOM</h4><h5 id="一、DOM【DOM-操作（文档对象模型）】"><a href="#一、DOM【DOM-操作（文档对象模型）】" class="headerlink" title="一、DOM【DOM 操作（文档对象模型）】"></a>一、DOM【DOM 操作（文档对象模型）】</h5><p>Vue 和 React 框架应用广泛，封装了 DOM 操作<br>但 DOM 操作一直都会前端工程师的基础、必备知识<br>只会 Vue 而不懂 DOM 操作的前端程序员，不会长久</p>
<blockquote>
<p>1.DOM 本质：【html 语言，或者 html 文件解析出来的一棵 DOM 树】</p>
</blockquote>
<p>DOM 是哪种数据结构？—–树（DOM 树）</p>
<blockquote>
<p>2.DOM 操作的常用 API：</p>
</blockquote>
<h6 id="1-DOM-节点操作"><a href="#1-DOM-节点操作" class="headerlink" title="1.DOM 节点操作"></a>1.DOM 节点操作</h6><p>获取 DOM 节点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">attr和property的区别：</span><br><span class="line">attribute:【通过getAttribute，setAttribute这类API去修改html的结构，能真正作用到dom结构里面去的，是修改标签的一个属性】</span><br><span class="line">修改html属性，会改变html结构</span><br><span class="line"></span><br><span class="line">property:【建议使用这种】</span><br><span class="line">property 形式----通过获取js属性的方式，改变页面样式，或者页面结构的一种形式【通过property，去像js属性一样去修改，修改js变量的一个属性】</span><br><span class="line">修改对象属性，不会体现到html结构中</span><br><span class="line">两者都可能引起DOM重新渲染</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> div1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div1&quot;</span>); <span class="comment">//通过id来获取</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;div1&quot;</span>, div1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> divList = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;div&quot;</span>); <span class="comment">// 集合</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;divList.length&quot;</span>, divList.<span class="property">length</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;divList[1]&quot;</span>, divList[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> containerList = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;container&quot;</span>); <span class="comment">// 集合</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;containerList.length&quot;</span>, containerList.<span class="property">length</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;containerList[1]&quot;</span>, containerList[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pList = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;p&quot;</span>); <span class="comment">//css选择器</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;pList&quot;</span>, pList); <span class="comment">//集合</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pList = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;p&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> p1 = pList[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// property 形式----通过获取js属性的方式，改变页面样式，或者页面结构的一种形式【通过property，去像js属性一样去修改，修改js变量的一个属性】</span></span><br><span class="line">p1.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&quot;100px&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">style</span>.<span class="property">width</span>);</span><br><span class="line">p1.<span class="property">className</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">className</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">nodeName</span>); <span class="comment">//p</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">nodeType</span>); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// attribute----【通过getAttribute，setAttribute这类API去修改html的结构，能真正作用到dom结构里面去的，是修改标签的一个属性】</span></span><br><span class="line">p1.<span class="title function_">setAttribute</span>(<span class="string">&quot;data-name&quot;</span>, <span class="string">&quot;imooc&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="title function_">getAttribute</span>(<span class="string">&quot;data-name&quot;</span>));</span><br><span class="line">p1.<span class="title function_">setAttribute</span>(<span class="string">&quot;style&quot;</span>, <span class="string">&quot;font-size: 50px;&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="title function_">getAttribute</span>(<span class="string">&quot;style&quot;</span>));</span><br></pre></td></tr></table></figure>

<h6 id="2-DOM-结构操作"><a href="#2-DOM-结构操作" class="headerlink" title="2.DOM 结构操作"></a>2.DOM 结构操作</h6><p>新增&#x2F;插入节点<br>获取子元素列表，获取父元素<br>删除子元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> div1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div1&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> div2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div2&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新建节点</span></span><br><span class="line"><span class="keyword">const</span> newP = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">newP.<span class="property">innerHTML</span> = <span class="string">&quot;this is newP&quot;</span>;</span><br><span class="line"><span class="comment">// 插入节点</span></span><br><span class="line">div1.<span class="title function_">appendChild</span>(newP);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移动节点</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;p1&quot;</span>);</span><br><span class="line">div2.<span class="title function_">appendChild</span>(p1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取父元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">parentNode</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取子元素列表</span></span><br><span class="line"><span class="keyword">const</span> div1ChildNodes = div1.<span class="property">childNodes</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div1.<span class="property">childNodes</span>);</span><br><span class="line"><span class="comment">// Array.prototype.slice.call() 变成数组</span></span><br><span class="line"><span class="keyword">const</span> div1ChildNodesP = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span></span><br><span class="line">  .<span class="title function_">call</span>(div1.<span class="property">childNodes</span>)</span><br><span class="line">  .<span class="title function_">filter</span>(<span class="function">(<span class="params">child</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (child.<span class="property">nodeType</span> === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="comment">//（获取正常DOM节点，不获取text节点）</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;div1ChildNodesP&quot;</span>, div1ChildNodesP);</span><br><span class="line"><span class="comment">// 删除子元素</span></span><br><span class="line">div1.<span class="title function_">removeChild</span>(div1ChildNodesP[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>

<h6 id="3-DOM-性能"><a href="#3-DOM-性能" class="headerlink" title="3.DOM 性能"></a>3.DOM 性能</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不缓存DOM查询结果</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;p&quot;</span>).<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// 每次循环，都会计算length,频繁进行DOM查询</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓存DOM查询结果</span></span><br><span class="line"><span class="keyword">const</span> pList = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;p&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> length = pList.<span class="property">length</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">  <span class="comment">//缓存length,只进行一次DOM查询</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>DOM 操作非常“昂贵”，避免频繁的 DOM 操作<br>对 DOM 查询做缓存<br>将频繁操作改为一次性操作</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将频繁操作改为一次性操作--（使用文档碎片）</span></span><br><span class="line"><span class="keyword">const</span> list = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;list&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个文档片段，此时还没有插入到 DOM 结构中</span></span><br><span class="line"><span class="keyword">const</span> frag = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">const</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">  li.<span class="property">innerHTML</span> = <span class="string">`List item <span class="subst">$&#123;i&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 先插入文档片段中</span></span><br><span class="line">  frag.<span class="title function_">appendChild</span>(li);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 都完成之后，再统一插入到 DOM 结构中</span></span><br><span class="line">list.<span class="title function_">appendChild</span>(frag);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>DOM 文档加载步骤：</p>
</blockquote>
<p>1.解析 HTML 结构 2.加载外部的脚本和样式文件<br>3，解析并执行脚本代码 4.执行$function(){}内对应代码<br>【$(function() {}) 是$(document).ready(function()的简写。这个函数在 DOM 加载完毕之后执行。】<br>【window.onload：资源全部加载完才能执行，包括图片。DOMContentLoade ：DOM 渲染完成即可，图片可能尚未下载】 5.加载图片等二进制资源 6.页面加载完毕，执行 window.onload</p>
<blockquote>
<p>jQuery 对象和 DOM 对象的相互转换</p>
</blockquote>
<p><em>1. jQuery –&gt; DOM</em><br>jQuery 提供了两种方法：[index]和 get(index)</p>
<p>jQuery 对象是一个类似数组的对象，可以通过[index]方法得到相应的 DOM 对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> $students = $(<span class="string">&quot;#students&quot;</span>); <span class="comment">//jQuery对象</span></span><br><span class="line"><span class="keyword">let</span> student = $students[<span class="number">0</span>]; <span class="comment">//DOM对象</span></span><br></pre></td></tr></table></figure>

<p>另一种方法是 jQuery 本身提供的，通过 get(index)方法得到相应的 DOM 对象</p>
<p><em>2. DOM –&gt; jQuery</em><br>只需用$()把 DOM 对象包起来即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> student = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;student&quot;</span>); <span class="comment">//DOM对象</span></span><br><span class="line"><span class="keyword">let</span> $student = $(student); <span class="comment">//jQuery对象</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>js</tag>
        <tag>DOM</tag>
      </tags>
  </entry>
  <entry>
    <title>JS-WEB-API-BOM</title>
    <url>/2020/01/23/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E3%80%90%E4%B8%93%E9%A2%98%E3%80%918%EF%BC%9AJS-WEB-API-BOM/</url>
    <content><![CDATA[<h4 id="JS-Web-API-BOM"><a href="#JS-Web-API-BOM" class="headerlink" title="JS Web API - BOM"></a>JS Web API - BOM</h4><h5 id="二、BOM-操作（Browser-Object-Model，浏览器对象模型）"><a href="#二、BOM-操作（Browser-Object-Model，浏览器对象模型）" class="headerlink" title="二、BOM 操作（Browser Object Model，浏览器对象模型）"></a>二、BOM 操作（Browser Object Model，浏览器对象模型）</h5><p>知识点：</p>
<blockquote>
<p>1.navigator</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如何识别浏览器的类型</span></span><br><span class="line"><span class="keyword">const</span> ua = navigator.<span class="property">userAgent</span>;</span><br><span class="line"><span class="keyword">const</span> isChrome = ua.<span class="title function_">indexOf</span>(<span class="string">&quot;Chrome&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(isChrome);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>2.screen</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(screen.<span class="property">width</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(screen.<span class="property">height</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>3.location</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分析拆解url各个部分</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">href</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">protocal</span>); <span class="comment">//&#x27;http:&#x27; &#x27;https:&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">pathname</span>); <span class="comment">// &#x27;/learn/199&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">search</span>); <span class="comment">//&#x27;?a=100&amp;b=200&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">hash</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>4.history</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">history.<span class="title function_">back</span>();</span><br><span class="line">history.<span class="title function_">forward</span>();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>js</tag>
        <tag>BOM</tag>
      </tags>
  </entry>
  <entry>
    <title>JS-WEB-API-事件</title>
    <url>/2020/01/24/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E3%80%90%E4%B8%93%E9%A2%98%E3%80%919%EF%BC%9AJS-WEB-API-%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<h4 id="JS-Web-API-事件"><a href="#JS-Web-API-事件" class="headerlink" title="JS Web API - 事件"></a>JS Web API - 事件</h4><h5 id="三、事件"><a href="#三、事件" class="headerlink" title="三、事件"></a>三、事件</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.事件绑定</span><br><span class="line">2.事件冒泡</span><br><span class="line">3.事件代理</span><br><span class="line">    代码简洁</span><br><span class="line">    减少浏览器内存占用</span><br><span class="line">    但是，不要滥用</span><br></pre></td></tr></table></figure>

<blockquote>
<p>问：编写一个通用的事件监听函数</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通用的事件绑定函数</span></span><br><span class="line"><span class="comment">// function bindEvent(elem, type, fn) &#123;</span></span><br><span class="line"><span class="comment">//     elem.addEventListener(type, fn)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bindEvent</span>(<span class="params">elem, type, selector, fn</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (fn == <span class="literal">null</span>) &#123;</span><br><span class="line">    fn = selector;</span><br><span class="line">    selector = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  elem.<span class="title function_">addEventListener</span>(type, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> target = event.<span class="property">target</span>;</span><br><span class="line">    <span class="keyword">if</span> (selector) &#123;</span><br><span class="line">      <span class="comment">// 代理绑定</span></span><br><span class="line">      <span class="keyword">if</span> (target.<span class="title function_">matches</span>(selector)) &#123;</span><br><span class="line">        <span class="comment">//matches用于判断当前元素是否符合css选择器</span></span><br><span class="line">        fn.<span class="title function_">call</span>(target, event);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 普通绑定</span></span><br><span class="line">      fn.<span class="title function_">call</span>(target, event);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通事件绑定</span></span><br><span class="line"><span class="keyword">const</span> btn1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn1&quot;</span>);</span><br><span class="line"><span class="title function_">bindEvent</span>(btn1, <span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="comment">//注意：这里如果使用箭头函数，里面的this会指向window，不是我们当前想要的点击元素，所以改用成function形式</span></span><br><span class="line">  <span class="comment">// console.log(event.target) // 获取触发的元素</span></span><br><span class="line">  event.<span class="title function_">preventDefault</span>(); <span class="comment">// 阻止默认行为</span></span><br><span class="line">  <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">innerHTML</span>); <span class="comment">//如果上面非要用箭头函数，这里就改写成：alert(btn1.innerHTML)</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理绑定</span></span><br><span class="line"><span class="keyword">const</span> div3 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div3&quot;</span>);</span><br><span class="line"><span class="comment">// bindEvent(div3, &#x27;click&#x27;, &#x27;a&#x27;, function (event) &#123;</span></span><br><span class="line"><span class="comment">//     event.preventDefault()</span></span><br><span class="line"><span class="comment">//     const target = event.target</span></span><br><span class="line"><span class="comment">//     if(terget.nodeName === &#x27;A&#x27;)&#123;</span></span><br><span class="line"><span class="comment">//         alert(this.innerHTML)</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">bindEvent</span>(div3, <span class="string">&quot;click&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  event.<span class="title function_">preventDefault</span>();</span><br><span class="line">  <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">innerHTML</span>); <span class="comment">//如果上面非要用箭头函数，这里就改写成：alert(event.target.innerHTML)</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件冒泡演示：</span></span><br><span class="line"><span class="keyword">const</span> body = <span class="variable language_">document</span>.<span class="property">body</span>;</span><br><span class="line"><span class="title function_">bindEvent</span>(body, <span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;取消&quot;</span>);</span><br><span class="line">  <span class="comment">// console.log(event.target)</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> div2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div2&quot;</span>);</span><br><span class="line"><span class="title function_">bindEvent</span>(div2, <span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;div2 clicked&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消事件冒泡：</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;p1&quot;</span>);</span><br><span class="line"><span class="title function_">bindEvent</span>(p1, <span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  event.<span class="title function_">stopPropagation</span>(); <span class="comment">// 阻止冒泡</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;激活&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>问：描述事件冒泡的流程</p>
</blockquote>
<p>基于 DOM 树形结构<br>事件会顺着触发元素往上冒泡<br>应用场景：代理</p>
<blockquote>
<p>问：无限下拉的图片列表，如何监听每个图片的点击？</p>
</blockquote>
<p>事件代理<br>用 e.target 获取触发元素<br>用 matches 来判断是否是触发元素<br>（代码参照问 1）</p>
<blockquote>
<p>冒泡、监听、默认行为</p>
</blockquote>
<p>IE 下取消冒泡：<br><code>event.cancelBubble = true</code></p>
<p>标准下取消冒泡：<br><code>event.stopPropagation()</code></p>
<p>取消浏览器默认行为：<br><code>event.preventDefault()</code>&#x2F;&#x2F;标准浏览器阻止默认事件。DOM 事件使用此方法取消默认事件。非标准浏览器（IE8）不可以取消默认事件。<br><code>event.return value = false</code> &#x2F;&#x2F;非标准浏览器（IE8）阻止默认事件。该方法标准浏览器也可以阻止默认事件<br><code>return false</code> &#x2F;&#x2F;退出执行，所有触发事件和动作都不会被执行</p>
<p>事件监听：<br><code>target.addEventListener(&quot;事件类型&quot;,函数是否捕获（布尔值）)</code>&#x2F;&#x2F;标准浏览器事件监听<br><code>target.attachEvent(&quot;事件类型&quot;,函数)</code>&#x2F;&#x2F;IE 浏览器事件监听</p>
<p>取消事件监听：<br><code>target.removeEventListener()</code>&#x2F;&#x2F;标准浏览器取消事件监听<br><code>target.detachEvent()</code>&#x2F;&#x2F;&#x2F;IE 浏览器取消事件监听</p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>js</tag>
        <tag>事件</tag>
      </tags>
  </entry>
  <entry>
    <title>MarkDown语法篇</title>
    <url>/2019/03/20/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E3%80%90%E5%8E%9F%E5%88%9B%E3%80%91MarkDown%E8%AF%AD%E6%B3%95%E7%AF%87/</url>
    <content><![CDATA[<h1 id="Markdown-语法入门"><a href="#Markdown-语法入门" class="headerlink" title="Markdown 语法入门"></a>Markdown 语法入门</h1><h2 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h2><p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这是一级标题</span></span><br><span class="line"><span class="comment">## 这是二级标题</span></span><br><span class="line"><span class="comment">### 这是三级标题</span></span><br><span class="line"><span class="comment">#### 这是四级标题</span></span><br><span class="line"><span class="comment">##### 这是五级标题</span></span><br><span class="line"><span class="comment">###### 这是六级标题</span></span><br></pre></td></tr></table></figure>

<p>示例：</p>
<h1 id="只能有一个一级标题"><a href="#只能有一个一级标题" class="headerlink" title="只能有一个一级标题"></a>只能有一个一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><h2 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h2><p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">**这是加粗的文字**</span><br><span class="line">*这是倾斜的文字*`</span><br><span class="line">***这是斜体加粗的文字***</span><br><span class="line">~~这是加删除线的文字~~</span><br></pre></td></tr></table></figure>

<p>示例：<br><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em>&#96;<br><strong><em>这是斜体加粗的文字</em></strong><br><del>这是加删除线的文字</del></p>
<h2 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h2><p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;这是引用的内容</span><br><span class="line">&gt;&gt;这是引用的内容</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<blockquote>
<p>作者：Daykalif</p>
<blockquote>
<p>作者：Daykalif</p>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>作者：Daykalif</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<h2 id="四、分割线"><a href="#四、分割线" class="headerlink" title="四、分割线"></a>四、分割线</h2><p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">- - -</span><br><span class="line">***</span><br><span class="line">* * *</span><br><span class="line">****</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<hr>
<hr>
<hr>
<hr>
<hr>
<h2 id="五、图片"><a href="#五、图片" class="headerlink" title="五、图片"></a>五、图片</h2><p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">![图片alt](图片地址 <span class="string">&#x27;&#x27;</span>图片title<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">图片alt就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class="line">图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</span><br></pre></td></tr></table></figure>

<p>示例：<br>![error]](<a href="https://www.daykalif.com/beian.png">https://www.daykalif.com/beian.png</a> “备案图标”)</p>
<h2 id="六、超链接"><a href="#六、超链接" class="headerlink" title="六、超链接"></a>六、超链接</h2><p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[超链接名](超链接地址 <span class="string">&quot;超链接title&quot;</span>)</span><br><span class="line">title可加可不加</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注：Markdown本身语法不支持链接在新页面中打开，貌似简书做了处理，是可以的。别的平台可能就不行了，如果想要在新页面中打开的话可以用html语言的a标签代替。</span><br><span class="line">&lt;a href=<span class="string">&quot;超链接地址&quot;</span> target=<span class="string">&quot;_blank&quot;</span>&gt;超链接名&lt;/a&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;https://www.daykalif.com&quot;</span> target=<span class="string">&quot;_blank&quot;</span>&gt;简书&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p>示例：<br><a href="http://jianshu.com/">简书</a><br><a href="http://baidu.com/">百度</a></p>
<h2 id="七、列表"><a href="#七、列表" class="headerlink" title="七、列表"></a>七、列表</h2><p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">无序列表用 - + * 任何一种都可以</span><br><span class="line"></span><br><span class="line">- 列表内容</span><br><span class="line">+ 列表内容</span><br><span class="line">* 列表内容</span><br><span class="line"></span><br><span class="line">注意：- + * 跟内容之间都要有一个空格</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<ul>
<li>Item 1<ul>
<li>Item 2<ul>
<li>Item 3</li>
</ul>
</li>
<li>Item 4</li>
</ul>
</li>
<li>Item 4<ul>
<li>Item 5</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">数字加点</span><br><span class="line"></span><br><span class="line">1. 列表内容</span><br><span class="line">2. 列表内容</span><br><span class="line">3. 列表内容</span><br><span class="line"></span><br><span class="line">注意：序号跟内容之间要有空格</span><br><span class="line"></span><br><span class="line">列表嵌套</span><br><span class="line">上一级和下一级之间敲三个空格即可</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<ol>
<li><p>列表内容</p>
</li>
<li><p>列表内容</p>
</li>
<li><p>列表内容</p>
</li>
<li><p>列表内容 5. 列表内容</p>
</li>
</ol>
<h2 id="八、表格"><a href="#八、表格" class="headerlink" title="八、表格"></a>八、表格</h2><p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">---|:--:|---:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">- 有一个就行，为了对齐，多加了几个</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br><span class="line">注：原生的语法两边都要用 | 包起来。此处省略</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<table>
<thead>
<tr>
<th>姓名</th>
<th align="center">技能</th>
<th align="right">排行</th>
</tr>
</thead>
<tbody><tr>
<td>刘备</td>
<td align="center">哭</td>
<td align="right">大哥</td>
</tr>
<tr>
<td>关羽</td>
<td align="center">打</td>
<td align="right">二哥</td>
</tr>
<tr>
<td>张飞</td>
<td align="center">骂</td>
<td align="right">三弟</td>
</tr>
</tbody></table>
<h2 id="九、代码"><a href="#九、代码" class="headerlink" title="九、代码"></a>九、代码</h2><p>语法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">单行代码：代码之间分别用一个反引号包起来</span><br><span class="line"><span class="string">`代码内容`</span></span><br><span class="line"></span><br><span class="line">代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</span><br><span class="line">(<span class="string">``</span><span class="string">`)</span></span><br><span class="line"><span class="string">  代码...</span></span><br><span class="line"><span class="string">  代码...</span></span><br><span class="line"><span class="string">  代码...</span></span><br><span class="line"><span class="string">(`</span><span class="string">``</span>)</span><br><span class="line">注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。</span><br></pre></td></tr></table></figure>

<p>示例：<br>单行代码<br><code>create database hero;</code></p>
<p>代码块</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">fun</span></span>()&#123;</span><br><span class="line">     <span class="built_in">echo</span> <span class="string">&quot;这是一句非常牛逼的代码&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">fun();</span><br></pre></td></tr></table></figure>

<p><strong><em>Java 代码</em></strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong><em>Shell 脚本</em></strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">linux下Spring项目启动命令：</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Java -jar blog start</span></span><br></pre></td></tr></table></figure>

<h2 id="十、目录生成"><a href="#十、目录生成" class="headerlink" title="十、目录生成"></a>十、目录生成</h2><p>只要文章是按照 markdown 语法写作的。在需要生成目录的地方写<br><code>[TOC]</code><br>即可。</p>
<h2 id="十一、字体颜色"><a href="#十一、字体颜色" class="headerlink" title="十一、字体颜色"></a>十一、字体颜色</h2><p>使用简书的 markdown 不能改变字体颜色真是一件头疼的事，不过找了很久总算找到一种可以书写不同颜色的字的方法，语法如下：<br><code>$\color&#123;red&#125;&#123;红色字&#125;$</code></p>
<p>$\color{red}{红色字}$</p>
<p>当然表示成 rgb 十六进制或十进制形式都是可以的：<br><code>$\color&#123;&amp;#35;FF0000&#125;&#123;红色字&#125;$</code>或<code>$\color&#123;rgb(255,0,0)&#125;&#123;红色字&#125;$</code><br>因此颜色可以灵活多变，具体颜色表可以参考<a href="http://www.voidcn.com/article/p-firwkkkw-vc.html">链接</a></p>
<h2 id="十二、流程图"><a href="#十二、流程图" class="headerlink" title="十二、流程图"></a>十二、流程图</h2><p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">将流程图代码包含在```folw和```之间即可</span><br><span class="line">st=&gt;start: Start</span><br><span class="line">op=&gt;operation: Your Operation</span><br><span class="line">sub=&gt;subroutine: My Subroutine</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">io=&gt;inputoutput: catch something...</span><br><span class="line">e=&gt;end: End</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;sub(right)-&gt;op</span><br></pre></td></tr></table></figure>

<h2 id="十三、创建目录"><a href="#十三、创建目录" class="headerlink" title="十三、创建目录"></a>十三、创建目录</h2><p><code>[TOC]</code></p>
<p>[TOC]</p>
<p>markdown 语法可以使用[TOC]来自动生成 markdown 文件的标题目录，但是 github 或者 gitee 却不支持[TOC]标签，解决如下： 1.下载 Visual Studio Code 2.打开 VScode，点击扩展，搜索 Markdown All in One 插件，安装 3.在 VScode 中打开 md 文件 4.使用 Ctrl+Shift+P 或者 command+shift+P 快捷键，输入命令 Markdown All in One: Create Table of Contents，回车</p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Git版本控制入门到实战，程序猿看这个就够了</title>
    <url>/2021/03/21/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98%EF%BC%8C%E7%A8%8B%E5%BA%8F%E7%8C%BF%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86/</url>
    <content><![CDATA[<h2 id="Git-操作详细步骤"><a href="#Git-操作详细步骤" class="headerlink" title="Git 操作详细步骤"></a>Git 操作详细步骤</h2><h3 id="1-Git-版本控制引言"><a href="#1-Git-版本控制引言" class="headerlink" title="1.Git 版本控制引言"></a>1.Git 版本控制引言</h3><p>自诞生于 2005 年以来，Git 日臻成熟完善，在高度易用的同时，仍然保留着初期设定的目标。它的速度飞快，极其适合管理大项目 。</p>
<p>主要竞争对手：<br>SVN<br>CVS<br>Mercurial</p>
<p>采用 Git 的云服务：<br>github<br>gitee（oschina）</p>
<h3 id="2-Git-版本控制-集中式与分布式实例分析"><a href="#2-Git-版本控制-集中式与分布式实例分析" class="headerlink" title="2.Git 版本控制-集中式与分布式实例分析"></a>2.Git 版本控制-集中式与分布式实例分析</h3><p>集中式：【如以前去医院的门诊挂号，所有人都在窗口等待办理】<br>分布式：【如现如今可以通过 114 挂号，手机公众号挂号，门诊窗口挂号…】</p>
<p>Svn：集中式<br>Git：分布式</p>
<h3 id="3-Git-版本控制-mac-windows-linux-安装-git-软件"><a href="#3-Git-版本控制-mac-windows-linux-安装-git-软件" class="headerlink" title="3.Git 版本控制-mac-windows-linux 安装 git 软件"></a>3.Git 版本控制-mac-windows-linux 安装 git 软件</h3><p>Git 可以在 windows、Mac、Linux 全平台系统使用。登录 <code>https://git-scm.com/downloads</code> 下载你系统的 Git 软件并进行安装。</p>
<blockquote>
<p>windows 用户我更建议安装 git for windows ，下载地址： <a href="https://gitforwindows.org/">https://gitforwindows.org/</a><br>包信 Git Base 、Git Gui<br>mac 用户，下载地址【git 官网】：<a href="https://git-scm.com/">https://git-scm.com/</a></p>
</blockquote>
<p>安装后通过以下命令查看，如果显示版本号那就是安装成功了</p>
<p><code>git --version</code></p>
<p><strong>Gui</strong>：</p>
<p>Gui 指 Git 的图形界面管理软件，<code>https://git-scm.com/downloads/guis</code> 这个网址列出了多个可供基本上所有平台使用的 Gui 软件。如果要使用 Gui 而非命令行操作，我推荐 sourcetree 这也是我多年使用的软件，功能强大、跨平台、免费。</p>
<blockquote>
<p>新人建议直接使用命令行管理 GIT</p>
</blockquote>
<h3 id="4-Git-版本控制-配置作者信息"><a href="#4-Git-版本控制-配置作者信息" class="headerlink" title="4.Git 版本控制 - 配置作者信息"></a>4.Git 版本控制 - 配置作者信息</h3><p><strong>初始配置</strong>：</p>
<p>配置文件为 ~&#x2F;.gitconfig ，执行任何 Git 配置命令后文件将自动创建。</p>
<p>第一个要配置的是你个人的用户名称和电子邮件地址。这两条配置很重要，每次 Git 提交时都会引用这两条信息，说明是谁提交了更新，所以会随更新内容一起被永久纳入历史记录：</p>
<p><code>git config --global user.email &quot;xxxxx@qq.com&quot;</code><br><code>git config --global user.name &quot;daykalif&quot;</code></p>
<p><code>git config --global color.ui true</code></p>
<p>查看当前用户（global）配置:<br><code>git config --global  --list</code></p>
<blockquote>
<p>tips:<br>快捷键【control+l】：清屏</p>
</blockquote>
<p>进入文件夹，初始化新仓库 <code>git init</code> 【此时运行命令：ls -a 可查看到.git 文件，这就是版本仓库；进入.git 文件，运行命令 ls -la，可看到这个仓库的一些配置信息；如果去修改这个文件中的 config 文件，并修改：<code>git config user.name &quot;wjp&quot;</code>，可看到这个项目的昵称改为了 wjp】</p>
<h3 id="5-Git-版本控制-新建仓库与维护旧仓库"><a href="#5-Git-版本控制-新建仓库与维护旧仓库" class="headerlink" title="5.Git 版本控制 - 新建仓库与维护旧仓库"></a>5.Git 版本控制 - 新建仓库与维护旧仓库</h3><p>新建文件夹：GIT<br>进入 GIT 文件夹，新建文件夹：bbs<br>进入 bbs 文件夹，运行 git 初始化命令：git init<br>回退到 GIT 文件夹，克隆代码：<code>git clone https://gitee.com/houdunwang/hdcms.git</code><br>删除 GIT 文件夹下所有的内容：【千万主要当前的位置】<code>rm -rf *</code></p>
<h3 id="6-Git-版本控制-Git-流水线操作分析"><a href="#6-Git-版本控制-Git-流水线操作分析" class="headerlink" title="6.Git 版本控制 - Git 流水线操作分析"></a>6.Git 版本控制 - Git 流水线操作分析</h3><h4 id="Git-工作区、暂存区和版本库"><a href="#Git-工作区、暂存区和版本库" class="headerlink" title="Git 工作区、暂存区和版本库"></a>Git 工作区、暂存区和版本库</h4><p><strong>基本概念</strong><br>我们先来理解下 Git 工作区、暂存区和版本库概念：</p>
<p>工作区：就是你在电脑里能看到的目录。<br>暂存区：英文叫 stage 或 index。一般存放在 .git 目录下的 index 文件（.git&#x2F;index）中，所以我们把暂存区有时也叫作索引（index）。<br>版本库：工作区有一个隐藏目录 .git，这个不算工作区，而是 Git 的版本库。<br>下面这个图展示了工作区、版本库中的暂存区和版本库之间的关系：</p>
<ul>
<li>建立文件（本地工作文件夹）</li>
<li>追加文件（索引区）</li>
<li>提交文件（本地库）</li>
</ul>
<p><img src="https://www.daykalif.com/blog_img/git1.jpg" alt="git"></p>
<ul>
<li><p>图中左侧为工作区，右侧为版本库。在版本库中标记为 “index” 的区域是暂存区（stage&#x2F;index），标记为 “master” 的是 master 分支所代表的目录树。</p>
</li>
<li><p>图中我们可以看出此时 “HEAD” 实际是指向 master 分支的一个”游标”。所以图示的命令中出现 HEAD 的地方可以用 master 来替换。</p>
</li>
<li><p>图中的 objects 标识的区域为 Git 的对象库，实际位于 “.git&#x2F;objects” 目录下，里面包含了创建的各种对象及内容。</p>
</li>
<li><p>当对工作区修改（或新增）的文件执行 git add 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的 ID 被记录在暂存区的文件索引中。</p>
</li>
<li><p>当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。</p>
</li>
<li><p>当执行 <code>git reset HEAD</code> 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。</p>
</li>
<li><p>当执行 <code>git rm --cached &lt;file&gt;</code>命令时，会直接从暂存区删除文件，工作区则不做出改变。</p>
</li>
<li><p>当执行 <code>git checkout .</code> 或者 <code>git checkout -- &lt;file&gt;</code> 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。</p>
</li>
<li><p>当执行 <code>git checkout HEAD .</code> 或者 <code>git checkout HEAD &lt;file&gt;</code> 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。</p>
</li>
</ul>
<h3 id="7-Git-版本控制-使用命令完成-Git-流水线操作"><a href="#7-Git-版本控制-使用命令完成-Git-流水线操作" class="headerlink" title="7.Git 版本控制 - 使用命令完成 Git 流水线操作"></a>7.Git 版本控制 - 使用命令完成 Git 流水线操作</h3><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><p>1.初始化新仓库 <code>git init</code> 2.克隆代码 <code>git clone https://gitee.com/houdunwang/hdcms.git</code> 3.克隆指定分支 <code>git clone -b dev git@gitee.com:houdunwang/hdcms.git</code> 4.查看未 commit 之前的状态(包括 git add 之前和 git add 之后的状态) <code>git status</code> 5.提交单个文件 <code>git add index.php</code> 6.提交所有文件 <code>git add -A</code> 7.使用通配符提交 <code>git add *.js</code> 8.提交到仓库中 <code>git commit -m &#39;提示信息&#39;</code> 9.提交已经跟踪过的文件，不需要执行<code>add git commit -a -m &#39;提交信息&#39;</code> 10.查看 commit 记录 <code>git log</code></p>
<h3 id="8-Git-版本控制-gitignore-详解控制版本库文件管理"><a href="#8-Git-版本控制-gitignore-详解控制版本库文件管理" class="headerlink" title="8.Git 版本控制 - .gitignore 详解控制版本库文件管理"></a>8.Git 版本控制 - .gitignore 详解控制版本库文件管理</h3><p>.gitignore</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*.txt   //不提交所有的txt后缀文件</span><br><span class="line">!a.txt  //除了a.txt</span><br><span class="line"></span><br><span class="line">/vendor/*.php   //不提交vendor文件夹下所有的php后缀文件</span><br><span class="line">/vendor/**/*.php    //不提交vendor文件夹及其子文件夹下所有的php后缀文件</span><br><span class="line"></span><br><span class="line">node_modules/   //不提交整个node_modules文件夹</span><br></pre></td></tr></table></figure>

<h3 id="9-Git-版本控制-从版本库中删除资源的技巧"><a href="#9-Git-版本控制-从版本库中删除资源的技巧" class="headerlink" title="9.Git 版本控制 - 从版本库中删除资源的技巧"></a>9.Git 版本控制 - 从版本库中删除资源的技巧</h3><p>1.（运行 git add 之后）删除版本库与项目目录中的文件 <code>git rm index.php</code> 2.（运行 git add 之后）只删除版本库中文件但保存项目目录中文件 <code>git rm --cached index.php</code></p>
<h3 id="10-Git-版本控制-版本库中修改资料名称"><a href="#10-Git-版本控制-版本库中修改资料名称" class="headerlink" title="10.Git 版本控制 - 版本库中修改资料名称"></a>10.Git 版本控制 - 版本库中修改资料名称</h3><p>重命名：<code>git mv a.php b.php</code> &#x2F;&#x2F;将 a.php 重命名为 b.php</p>
<p><code>git log --name-only</code> &#x2F;&#x2F;查看 log</p>
<h3 id="11-Git-版本控制-使用-log-日志查看历史-commit-操作行为"><a href="#11-Git-版本控制-使用-log-日志查看历史-commit-操作行为" class="headerlink" title="11.Git 版本控制 - 使用 log 日志查看历史 commit 操作行为"></a>11.Git 版本控制 - 使用 log 日志查看历史 commit 操作行为</h3><p>查看日志：<code>git log</code><br>查看每次提交的文件变动信息【详细显示】<code>git log -p</code><br>查看最近 1 次提交日志并显示文件差异<code>git log -p -1</code><br>查看最近 2 次提交日志并显示文件差异<code>git log -p -2</code><br>一行显示并只显示 SHA-1 的前几个字符【查看简要版文件变动(精简显示)】<code>git log --online</code><br>查看简要版文件修改信息<code>git log --online -2</code><br>查看简要版具体文件变动信息<code>git log --online -p</code><br>显示已修改的文件清单(显示名字)<code>git log --name-only</code><br>显示新增、修改、删除的文件清单【查看文件发生的是什么类型变化(增加，修改…)】<code>git log --name-status</code><br>查看 git log 的帮助 <code>git log --help</code></p>
<h3 id="12-Git-版本控制-使用-amend-修改最新一次提交事件"><a href="#12-Git-版本控制-使用-amend-修改最新一次提交事件" class="headerlink" title="12.Git 版本控制 - 使用 amend 修改最新一次提交事件"></a>12.Git 版本控制 - 使用 amend 修改最新一次提交事件</h3><p>修改最后一次提交信息 <code>git commit --amend</code><br>使用 vim 命令对提交信息进行修改，修改完成之后，运行<code>git log</code>可查看到这次修改的信息是修改的原来的提交</p>
<p>如果在提交之后，又对代码进行了操作，然后还想把这个修改也归类到刚刚那次提交，此时<br><code>git add .</code><br><code>git status</code><br><code>git commit --amend</code> 修改提交信息<br><code>git log --name-only</code> 查看最新一次提交修改的所有文件名</p>
<h3 id="13-Git-版本控制-管理暂存区中的文件"><a href="#13-Git-版本控制-管理暂存区中的文件" class="headerlink" title="13.Git 版本控制 - 管理暂存区中的文件"></a>13.Git 版本控制 - 管理暂存区中的文件</h3><p>第一次的后悔修改方式：<br><code>git add a.php</code><br>如果此时觉得放入到暂存区还为时过早，可以执行撤销<br><code>git rm --cached a.php</code></p>
<h4 id="【运行-git-add-之后的后悔修改方式】"><a href="#【运行-git-add-之后的后悔修改方式】" class="headerlink" title="【运行 git add 之后的后悔修改方式】"></a>【运行 git add 之后的后悔修改方式】</h4><p>第二次及以后的后悔修改方式：<br>修改 a.php<br><code>git add a.php</code><br><code>git status</code><br><code>git reset HEAD a.php</code> – （在使用 git add 之后，可以使用这个命令进行撤销）撤销提交到暂存区，修改的文件内容还在<br><code>git checkout -- a.php</code> – (在未使用 git add 命令之前可以使用这个命令；使用 git add 之后该命令无法进行撤销)撤销提交到暂存区，且修改的文件内容也撤销</p>
<h4 id="比较文件内容："><a href="#比较文件内容：" class="headerlink" title="比较文件内容："></a>比较文件内容：</h4><p>git add 之前对工作文件夹比较，可以比较出文件内容变动 <code>git diff</code>；<br>把修改文件追加到索引区 <code>git add index.html</code>，此时运行<code>git diff</code>无法比较工作文件夹的修改文件；<br>如果此时需要对索引区（暂存区）和原先工作区比较，使用 <code>git diff --cached</code>对文件进行比较；</p>
<h4 id="使用-git-commit-之后，返回过去"><a href="#使用-git-commit-之后，返回过去" class="headerlink" title="使用 git commit 之后，返回过去"></a>使用 git commit 之后，返回过去</h4><p>回到数据库中最新的版本 <code>git reset --hard HEAD</code><br>回到上一个版本 <code>git reset --hard HEAD~</code><br>回到前 2 次提交的版本 <code>git reset --hard HEAD~2</code><br>回到某一次指定的版本 <code>git reset --hard xxxxxx</code><br>提交新的记录之后，又回到过去之前的提交记录，此时新的提交记录只是看不见了，记录其实还是在的，查看命令：<code>git reflog</code>；然后<code>git reset --hard xxxxxx</code>又可以回到最新的记录</p>
<h3 id="14-Git-版本控制-alias-命令提高操作效率（使用别名）"><a href="#14-Git-版本控制-alias-命令提高操作效率（使用别名）" class="headerlink" title="14.Git 版本控制 - alias 命令提高操作效率（使用别名）"></a>14.Git 版本控制 - alias 命令提高操作效率（使用别名）</h3><p>设置命令别名：<br><code>git config --global alias.a add</code> &#x2F;&#x2F;git a . 来替换 git add .<br>或者直接修改~&#x2F;.gitconfig 文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[user]</span><br><span class="line">    emial = xxxxx@qq.<span class="property">com</span></span><br><span class="line">    name = daykalif</span><br><span class="line">[alias]</span><br><span class="line">    a = add .</span><br><span class="line">    c = commit</span><br><span class="line">    l = log</span><br><span class="line">    s = status</span><br></pre></td></tr></table></figure>

<h3 id="15-Git-版本控制-详解-Git-分支-Branch-存在意义"><a href="#15-Git-版本控制-详解-Git-分支-Branch-存在意义" class="headerlink" title="15.Git 版本控制 - 详解 Git 分支 Branch 存在意义"></a>15.Git 版本控制 - 详解 Git 分支 Branch 存在意义</h3><p>大部分情况下不会直接在 master 分支工作，我们应该保护这个分支是最终开发完成代码健康可交付运行的。</p>
<p>所以功能和缺陷(bug)修复都会新建分支完成，除了这个概念外与基本流程使用是一样的。</p>
<h3 id="16-Git-版本控制-实例讲解分支-branch-基本管理操作"><a href="#16-Git-版本控制-实例讲解分支-branch-基本管理操作" class="headerlink" title="16.Git 版本控制 - 实例讲解分支 branch 基本管理操作"></a>16.Git 版本控制 - 实例讲解分支 branch 基本管理操作</h3><p>新建支付功能开发分支<br><code>git branch pay</code></p>
<p>切换到新分支开始开发，这里的工作内容与上面的基础流程是一样的<br><code>git checkout pay</code></p>
<blockquote>
<p>⚠️ 注：以上两句代码可以合并为：git checkout -b pay</p>
</blockquote>
<p>开发完成执行提交<br><code>git commit -m &#39;H5 支付功能&#39;</code></p>
<p>合并分支到 master</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">切换到master分支</span><br><span class="line">git checkout master</span><br><span class="line"></span><br><span class="line">合并pay分支的代码</span><br><span class="line">git merge pay</span><br></pre></td></tr></table></figure>

<p>提交代码到 master 远程分支<br><code>git push</code></p>
<h3 id="17-Git-版本控制-规范的分支操作流程之分支的合并与删除"><a href="#17-Git-版本控制-规范的分支操作流程之分支的合并与删除" class="headerlink" title="17.Git 版本控制 - 规范的分支操作流程之分支的合并与删除"></a>17.Git 版本控制 - 规范的分支操作流程之分支的合并与删除</h3><p><strong>分支管理</strong><br>分支用于为项目增加新功能或修复 Bug 时使用。</p>
<p>创建分支 <code>git branch dev</code></p>
<p>查看分支 <code>git branch</code></p>
<p>切换分支 <code>git checkout dev</code></p>
<p>创建并切换分支 <code>git checkout -b feature/bbs</code></p>
<p>合并 dev 分支到 master</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge dev</span><br></pre></td></tr></table></figure>

<h3 id="18-Git-版本控制-正确处理分支冲突实例讲解"><a href="#18-Git-版本控制-正确处理分支冲突实例讲解" class="headerlink" title="18.Git 版本控制 - 正确处理分支冲突实例讲解"></a>18.Git 版本控制 - 正确处理分支冲突实例讲解</h3><p>不同分支修改同一个文件或不同开发者修改同一个分支文件都可能造成冲突，造成无法提交代码。</p>
<p>使用编辑器修改冲突的文件<br>添加暂存 git add . 表示已经解决冲突<br>git commit 提交完成</p>
<h3 id="19-Git-版本控制-分支管理–merged-与–no-merged-分支强制删除操作"><a href="#19-Git-版本控制-分支管理–merged-与–no-merged-分支强制删除操作" class="headerlink" title="19.Git 版本控制 - 分支管理–merged 与–no-merged 分支强制删除操作"></a>19.Git 版本控制 - 分支管理–merged 与–no-merged 分支强制删除操作</h3><p>如在 master 分支删除已合并的本地 dev 分支 <code>git branch -d dev</code></p>
<p>删除没有合并的分支<code>git branch -D dev</code> &#x2F;&#x2F;-D 表示忽略提醒，强制删除</p>
<p>删除远程分支 <code>git push origin :dev</code></p>
<p>查看未合并的分支(切换到 master) <code>git branch --no-merged</code></p>
<p>查看已经合并的分支(切换到 master) <code>git branch --merged</code></p>
<h3 id="20-Git-版本控制-标准的分支操作工作流"><a href="#20-Git-版本控制-标准的分支操作工作流" class="headerlink" title="20.Git 版本控制 - 标准的分支操作工作流"></a>20.Git 版本控制 - 标准的分支操作工作流</h3><p><strong>Git 工作流是什么</strong><br>其实就是我们使用 git 的时候整个项目的推送克隆修改过程，其实这个过程是随着时间的流动的，每个不同的时间节点发生了不同的事情，所以可以归为流。可能某个时间段弄了新功能弄了分支，然后合并之类其他的。fork 的情况较少也有可能出现。</p>
<p><strong>分支种类</strong> 1.主干分支 master<br>主要负责管理正在运行的生产环境代码。永远保持与正在运行的生产环境完全一致。</p>
<p>2.开发分支 develop<br>主要负责管理正在开发过程中的代码。一般情况下应该是最新的代码。</p>
<p>3.bug 修理分支 hotfix<br>主要负责管理生产环境下出现的紧急修复的代码。 从主干分支分出，修理完毕并测试上线后，并回主干分支。并回后，视情况可以删除该分支。</p>
<p>4.准生产分支（预发布分支） release<br>较大的版本上线前，会从开发分支中分出准生产分支，进行最后阶段的集成测试。该版本上线后，会合并到主干分支。生产环境运行一段阶段较稳定后可以视情况删除。</p>
<p>5.功能分支 feature<br>为了不影响较短周期的开发工作，一般把中长期开发模块，会从开发分支中独立出来。 开发完成后会合并到开发分支。</p>
<p><img src="https://www.daykalif.com/blog_img/git2.png" alt="git"></p>
<h3 id="21-Git-版本控制-stash-临时暂存区"><a href="#21-Git-版本控制-stash-临时暂存区" class="headerlink" title="21.Git 版本控制 - stash 临时暂存区"></a>21.Git 版本控制 - stash 临时暂存区</h3><p><strong>Stashing</strong><br>当你正在进行项目中某一部分的工作，里面的东西处于一个比较杂乱的状态，而你想转到其他分支上进行一些工作。问题是，你不想提交进行了一半的工作，否则以后你无法回到这个工作点。</p>
<p>“暂存” 可以获取你工作目录的中间状态——也就是你修改过的被追踪的文件和暂存的变更——并将它保存到一个未完结变更的堆栈中，随时可以重新应用。</p>
<p><code>git add .</code>，这个时候切换分支会报错；</p>
<p>储藏工作 <code>git stash</code> &#x2F;&#x2F;只有经过 git add&#x2F;commit 之后的文件才可以进行 stash【只能 stash 提交到暂存区中的文件】<br>查看储藏列表 <code>git stash list</code><br>应用【恢复】最近的储藏 <code>git stash apply</code><br>应用更早的储藏 <code>git stash apply stash@&#123;2&#125;</code><br>删除储藏<code>git stash drop stash@&#123;0&#125;</code><br>应用并删除储藏 <code>git stash pop</code></p>
<h3 id="22-Git-版本控制-使用-TAG-标签声明项目阶段版本"><a href="#22-Git-版本控制-使用-TAG-标签声明项目阶段版本" class="headerlink" title="22.Git 版本控制 - 使用 TAG 标签声明项目阶段版本"></a>22.Git 版本控制 - 使用 TAG 标签声明项目阶段版本</h3><p>Git 也可以对某一时间点上的版本打上标签 ，用于发布软件版本如 v1.0<br>【git commit 之后，进行打标签】<br>添加标签 <code>git tag v1.0</code><br>列出标签列表 <code>git tag</code><br>推送标签 <code>git push --tags</code><br>删除标签 <code>git tag -d v1.0.1</code><br>删除远程标签 <code>git push origin :v1.0.1</code><br>查看标签修改内容 <code>git show v1.0.1</code></p>
<h3 id="23-Git-版本控制-生产-zip-代码发布压缩包"><a href="#23-Git-版本控制-生产-zip-代码发布压缩包" class="headerlink" title="23.Git 版本控制 - 生产 zip 代码发布压缩包"></a>23.Git 版本控制 - 生产 zip 代码发布压缩包</h3><p>对 mster 分支代码生成压缩包供使用者下载使用，–prefix 指定目录名</p>
<p><code>git archive master --prefix=&#39;dist/&#39; --format=zip &gt; dist.zip</code><br>master：需要进行压缩的分支名<br>dist：压缩之后的文件夹名称<br>dist.zip：压缩之后的文件压缩包名称</p>
<h3 id="24-Git-版本控制-使用系统别名定义-git-全局指令"><a href="#24-Git-版本控制-使用系统别名定义-git-全局指令" class="headerlink" title="24.Git 版本控制 - 使用系统别名定义 git 全局指令"></a>24.Git 版本控制 - 使用系统别名定义 git 全局指令</h3><p><code>cd ~</code><br><code>ls -la</code><br><code>vim .bash_profile</code></p>
<p>系统配置定义:<br>window 用户可以修改~&#x2F;.bashrc 或 ~&#x2F;.bash_profile 文件。<br>mac&#x2F;linux 修改 ~&#x2F;.zshrc 文件中定义常用的别名指令，需要首先安装 zsh 命令行扩展</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alias gs=&quot;git status&quot;</span><br><span class="line">alias gc=&quot;git commit -m &quot;</span><br><span class="line">alias gl=&quot;git log --graph --pretty=format:&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#x27; --abbrev-commit  &quot;</span><br><span class="line">alias gb=&quot;git branch&quot;</span><br><span class="line">alias ga=&quot;git add .&quot;</span><br><span class="line">alias go=&quot;git checkout&quot;</span><br></pre></td></tr></table></figure>

<p>命令行直接使用 <code>gs</code> 即可以实现 <code>git status</code> 一样的效果了。</p>
<p>设置 alias 的另一种方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 将checkout命令简化co</span><br><span class="line">git config --global alias.co checkout</span><br><span class="line"></span><br><span class="line"># 将branch命令简化为br</span><br><span class="line">git config --global alias.br branch</span><br><span class="line"></span><br><span class="line"># 将commit命令简化为cm</span><br><span class="line">git config --global alias.cm commit</span><br><span class="line"></span><br><span class="line"># 将status命令简化为st</span><br><span class="line">git config --global alias.st status</span><br></pre></td></tr></table></figure>

<p>查看全局变量：<br><code>git config -l</code></p>
<blockquote>
<p>window 系统需要使用 git for window 中的 Git Base 软件</p>
</blockquote>
<h3 id="25-Git-版本控制-合并分支产生的实际问题"><a href="#25-Git-版本控制-合并分支产生的实际问题" class="headerlink" title="25.Git 版本控制 - 合并分支产生的实际问题"></a>25.Git 版本控制 - 合并分支产生的实际问题</h3><p>master 分支–&gt;新建文件–&gt;主分支第一次 commit<br>之后再从 master 拉出子分支–&gt;ask<br>在子分支–&gt;新建文件–&gt;子分支第一次 commit<br>切换到 master 主分支–&gt;新建文件–&gt;主分支第二次 commit<br>此时 merge 子分支，会产生分叉的路线</p>
<h3 id="26-Git-版本控制-rebase-合理优化分支并合并"><a href="#26-Git-版本控制-rebase-合理优化分支并合并" class="headerlink" title="26.Git 版本控制 - rebase 合理优化分支并合并"></a>26.Git 版本控制 - rebase 合理优化分支并合并</h3><p>使用 rebase（可以理解为 replace base）解决合并分支分叉的问题，将子分支的提交记录先存起来，将子分支的提交点移到主分支的最新提交点（改变子分支的基础点）。</p>
<p>在 ask 子分支：<code>git rebase master</code><br>此时切换到 master,<code>git merge ask</code></p>
<h3 id="27-Git-版本控制-国内与国外项目托管平台介绍与在-Github-中创建项目"><a href="#27-Git-版本控制-国内与国外项目托管平台介绍与在-Github-中创建项目" class="headerlink" title="27.Git 版本控制 - 国内与国外项目托管平台介绍与在 Github 中创建项目"></a>27.Git 版本控制 - 国内与国外项目托管平台介绍与在 Github 中创建项目</h3><p>国外的速度较慢<br>有些国内项目托管平台私有库免费</p>
<h3 id="28-Git-版本控制-使用-SSH-与-GITHUB-远程服务器进行无密码连接"><a href="#28-Git-版本控制-使用-SSH-与-GITHUB-远程服务器进行无密码连接" class="headerlink" title="28.Git 版本控制 - 使用 SSH 与 GITHUB 远程服务器进行无密码连接"></a>28.Git 版本控制 - 使用 SSH 与 GITHUB 远程服务器进行无密码连接</h3><h4 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h4><p>生成秘钥</p>
<p>使用 ssh 连接 Github 发送指令更加安全可靠，也可以免掉每次输入密码的困扰。</p>
<p>在命令行中输入以下代码（windows 用户使用 Git Bash）</p>
<p><code>ssh-keygen -t rsa</code><br>一直按回车键直到结束。系统会在~&#x2F;.ssh 目录中生成 id_rsa 和 id_rsa.pub，即密钥 id_rsa 和公钥 id_rsa.pub。</p>
<p>向 GitHub 添加秘钥</p>
<p><img src="https://www.daykalif.com/blog_img/git3.png" alt="git"></p>
<p>如果连接失败：删除~&#x2F;.ssh&#x2F;known_hosts 文件中的内容【这是缓存的内容】</p>
<h3 id="29-Git-版本控制-本地版本库主动使用-remote-与远程-GITHUB-进行关联"><a href="#29-Git-版本控制-本地版本库主动使用-remote-与远程-GITHUB-进行关联" class="headerlink" title="29.Git 版本控制 - 本地版本库主动使用 remote 与远程 GITHUB 进行关联"></a>29.Git 版本控制 - 本地版本库主动使用 remote 与远程 GITHUB 进行关联</h3><p><strong>关联远程</strong> 1.创建本地库并完成初始提交</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;# hd-xj&quot; &gt;&gt; README.md</span><br><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br></pre></td></tr></table></figure>

<p>2.添加远程仓库<br><code>git remote add origin git@github.com:10xxxxxx595/xxxxx.git</code></p>
<blockquote>
<p>通过 clone 克隆的仓库，本地与远程已经自动关联，上面几步都可以省略。</p>
</blockquote>
<h3 id="30-Git-版本控制-本地分支与-GITHBUB-远程分支同步"><a href="#30-Git-版本控制-本地分支与-GITHBUB-远程分支同步" class="headerlink" title="30.Git 版本控制 - 本地分支与 GITHBUB 远程分支同步"></a>30.Git 版本控制 - 本地分支与 GITHBUB 远程分支同步</h3><p>查看本地分支<br><code>git branch</code></p>
<p>查看远程分支<br><code>git branch -a</code></p>
<p>查看远程库<br><code>git remote -v</code></p>
<p>推送数据到远程仓库<br><code>git push -u origin master</code></p>
<h3 id="31-Git-版本控制-新入职员工参与项目开发时分支使用"><a href="#31-Git-版本控制-新入职员工参与项目开发时分支使用" class="headerlink" title="31.Git 版本控制 - 新入职员工参与项目开发时分支使用"></a>31.Git 版本控制 - 新入职员工参与项目开发时分支使用</h3><p><strong>pull</strong><br>拉取远程主机某个分支的更新，再与本地的指定分支合并。</p>
<p>拉取 origin 主机的 ask 分支与本地的 master 分支合并 <code>git pull origin ask:ask</code><br>拉取 origin 主机的 ask 分支与当前分支合并 <code>git pull origin ask</code><br>如果远程分支与当前本地分支同名直接执行 <code>git pull</code></p>
<p><strong>push</strong><br>git push 命令用于将本地分支的更新，推送到远程主机。它的格式与 git pull 命令相似。</p>
<p>1.将当前分支推送到 origin 主机的对应分支(如果当前分支只有一个追踪分支 ，可省略主机名)<br><code>git push origin</code></p>
<p>2.使用-u 选项指定一个默认主机 ,这样以后就可以不加任何参数直播使用 git push。<br><code>$ git push -u origin master</code></p>
<p>3.本地 ask 分支关联远程分支并推送 <code>git push --set-upstream origin ask</code></p>
<h3 id="32-Git-版本控制-Github-远程分支的合并"><a href="#32-Git-版本控制-Github-远程分支的合并" class="headerlink" title="32.Git 版本控制 - Github 远程分支的合并"></a>32.Git 版本控制 - Github 远程分支的合并</h3><p><code>git merge xxx</code></p>
<h3 id="33-Git-版本控制-远程分支删除操作–delete"><a href="#33-Git-版本控制-远程分支删除操作–delete" class="headerlink" title="33.Git 版本控制 - 远程分支删除操作–delete"></a>33.Git 版本控制 - 远程分支删除操作–delete</h3><p>1.删除远程 ask 分支 <code>git push origin --delete ask</code></p>
<p>2.删除远程仓库关联<code>git remote rm origin</code></p>
<h3 id="34-Git-版本控制-自动部署之流程分析与创建-WEB-站点"><a href="#34-Git-版本控制-自动部署之流程分析与创建-WEB-站点" class="headerlink" title="34.Git 版本控制 - 自动部署之流程分析与创建 WEB 站点"></a>34.Git 版本控制 - 自动部署之流程分析与创建 WEB 站点</h3><p>GitHub 项目设置 WebHook</p>
<p><img src="https://www.daykalif.com/blog_img/git4.png" alt="git"></p>
<p>使用<strong>宝塔 linux</strong>创建一个 web 服务器</p>
<h3 id="35-Git-版本控制-自动部署之-GITHUB-代码自动推送事件到-WEB-服务器部署完成"><a href="#35-Git-版本控制-自动部署之-GITHUB-代码自动推送事件到-WEB-服务器部署完成" class="headerlink" title="35.Git 版本控制 - 自动部署之 GITHUB 代码自动推送事件到 WEB 服务器部署完成"></a>35.Git 版本控制 - 自动部署之 GITHUB 代码自动推送事件到 WEB 服务器部署完成</h3><p><strong>同步脚本</strong><br>本地工作区拉取 github 项目，项目中添加处理 webhook 的 webhook.php 文件内容如下，并提交到版本库。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// GitHub Webhook Secret.</span></span><br><span class="line"><span class="comment">// GitHub项目 Settings/Webhooks 中的 Secret</span></span><br><span class="line"><span class="variable">$secret</span> = <span class="string">&quot;houdunren&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Path to your respostory on your server.</span></span><br><span class="line"><span class="comment">// e.g. &quot;/var/www/respostory&quot;</span></span><br><span class="line"><span class="comment">// 项目地址</span></span><br><span class="line"><span class="variable">$path</span> = <span class="string">&quot;/www/wwwroot/xj.houdunren.com&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Headers deliveried from GitHub</span></span><br><span class="line"><span class="variable">$signature</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_HUB_SIGNATURE&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$signature</span>) &#123;</span><br><span class="line">  <span class="variable">$hash</span> = <span class="string">&quot;sha1=&quot;</span>.<span class="title function_ invoke__">hash_hmac</span>(<span class="string">&#x27;sha1&#x27;</span>, <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;php://input&quot;</span>), <span class="variable">$secret</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_ invoke__">strcmp</span>(<span class="variable">$signature</span>, <span class="variable">$hash</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">shell_exec</span>(<span class="string">&quot;cd <span class="subst">&#123;$path&#125;</span> &amp;&amp; /usr/bin/git reset --hard origin/master &amp;&amp; /usr/bin/git clean -f &amp;&amp; /usr/bin/git pull 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">http_response_code</span>(<span class="number">404</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>站点配置</strong><br>创建站点：<br>下面示例我使用的是<strong>宝塔</strong>主机面板。</p>
<p><img src="https://www.daykalif.com/blog_img/git5.png" alt="git"></p>
<p>现在服务器上生成了站点目录 <code>/www/wwwroot/xj.houdunren.com</code> ，因为目录中存在 .user.ini 文件（定义站点可以访问的目录权限），造成不能 clone 代码，将目录随意改名。</p>
<p><strong>shell_exec</strong><br>执行 git pull 指令需要使用 shell_exec 函数，删除 shell_exec 禁用函数后重启 PHP。</p>
<p><img src="https://www.daykalif.com/blog_img/git6.png" alt="git"></p>
<p>clone<br>登录服务器并使用 https 协议 clone 项目代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh root@xj.houdunren.com -p 22</span><br><span class="line">git clone https://github.com/houdunwang/xj.git xj.houdunren.com</span><br></pre></td></tr></table></figure>

<p>修改远程服务器权限，进入&#x2F;www&#x2F;wwwroot&#x2F;xj.houdunren.com 文件夹：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown -R www .</span><br><span class="line">chmod -R g+s .</span><br><span class="line">sudo -u www git pull</span><br></pre></td></tr></table></figure>

<p>现在向 GitHub 推送代码后，服务器将自动执行代码拉取，自动部署功能设置完成了。</p>
<hr>
<p><strong>https 操作</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">复制https地址 例如（https://github.com/xxxxxx/-.git）</span><br><span class="line">命令行  : git clone https://github.com/xxxxxx/-.git //克隆项目文件</span><br><span class="line">git status查看当前文件状态（是否有更改的文件）</span><br><span class="line">git add index.html            从工作区提交新的单独的文件到暂存区</span><br><span class="line">git add .                     提交被修改的和新建的文件，但不包括被删除的文件             </span><br><span class="line">git add -u     --update       update tracked files    更新所有改变的文件，即提交所有变化的文件</span><br><span class="line">git add -A    --all           add changes from all tracked and untracked files   提交已被修改和已                               被删除文件，但是不包括新的文件</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;daykalif最新提交&quot; //将暂存区代码存入本地服务器</span><br><span class="line">git push origin master //提交代码到远程服务器（需要输入用户名和密码）</span><br><span class="line">如果仅仅是文件修改了，一次性到服务器 git commit -a -m &#x27;提交的注释&#x27;</span><br></pre></td></tr></table></figure>

<p><strong>ssh 操作</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.配置用户信息和电子邮箱地址 git config --global user.name &#x27;用户名&#x27;</span><br><span class="line">                           git config --global user.email &#x27;邮箱&#x27;</span><br><span class="line">2.查看你的信息              git config --list</span><br><span class="line">3.ssh-keygen -t rsa -C &#x27;xxxxxx@qq.com&#x27;之后会在你的c盘用户里面出现.ssh文件夹（里面的id——rsa是私钥，id_rsa.pub是公钥）</span><br><span class="line">4.查看 cd ~/.ssh  ls</span><br><span class="line">5.查看公钥文件（会出现一堆乱码文件，复制他们） cat ~/.ssh/id_rsa.pub</span><br><span class="line">6.进入github网站 右上角图标找到settings（设置）后左侧菜单SSH and GPG keys点击进入</span><br><span class="line">7.SSH keys创建newkey 把那一堆乱码放进去（title随你取名字 一般用邮箱就行）确认即可</span><br><span class="line"></span><br><span class="line">------上面这些做好之后才能提交代码和其他操作，下面我们就正式开始-----------</span><br><span class="line">获取远程仓库的名称 git remote</span><br><span class="line">获取远程仓库的地址 git remote -v</span><br><span class="line">复制ssh地址 例如（git@github.com:xxxxxx/-.git）</span><br><span class="line">命令行  : git clone git@github.com:xxxxxx/-.git //克隆项目文件</span><br><span class="line">git status查看当前文件状态（是否有更改的文件）</span><br><span class="line"> git commit -am &#x27;提交注释&#x27;  这个比较简便</span><br><span class="line">git add .       提交被修改的和新建的文件，但不包括被删除的文件</span><br><span class="line">git commit -m &quot;daykalif最新提交&quot; //将暂存区代码存入本地服务器</span><br><span class="line">git push origin master //提交代码到远程服务器（需要输入用户名和密码）</span><br><span class="line">如果仅仅是文件修改了，一次性到服务器 git commit -a -m &#x27;提交的注释&#x27;</span><br><span class="line">查看当前项目提交的记录  git log</span><br><span class="line">项目恢复到哪次提交 git checkout &#x27;提交的id&#x27;（git log后的commit加密字符）</span><br><span class="line">返回主分支  git checkout master</span><br><span class="line"></span><br><span class="line">创建分支 git branch new1</span><br><span class="line">查看分支 git branch</span><br><span class="line">提交创建的分支 git push origin new1</span><br><span class="line"></span><br><span class="line">切换到new1分支  git checkout new1</span><br><span class="line">之后再执行上面的提交操作</span><br><span class="line">（如果git checkout master 代码就是master的代码，就相当于存了两种状态的代码）</span><br><span class="line"></span><br><span class="line">拉取master（主分支下面）的代码（可能会失败）  git pull origin master</span><br><span class="line"></span><br><span class="line">如果失败 git checkout master到主分支下面 git merge new1 这时进行代码合并的操作</span><br><span class="line">你会发现子分支把主分支代码替换了 变成了子分支的代码</span><br><span class="line">此时修改子分支代码提交 修改主分支代码后也提交（master） 在进行合并 git merge new1 你会发现代码的文件出现箭头之类的东西 这就是冲突了 把这些箭头删掉在提交一次</span><br><span class="line">之后去子分支new1 git pull origin master 这时子和主分支的代码就一样了</span><br><span class="line"></span><br><span class="line">项目做好了之后要设置版本</span><br><span class="line">git tag v1.0 (假如是1.0版本)</span><br><span class="line">git push origin v1.0（进行提交就可以了）</span><br></pre></td></tr></table></figure>

<p>参考视频：<br><a href="https://www.bilibili.com/video/BV154411g7Wm?p=34">https://www.bilibili.com/video/BV154411g7Wm?p=34</a></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>打包构建工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Gulp详细步骤</title>
    <url>/2019/04/05/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/Gulp%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/</url>
    <content><![CDATA[<h1 id="Gulp-详细步骤"><a href="#Gulp-详细步骤" class="headerlink" title="Gulp 详细步骤"></a>Gulp 详细步骤</h1><p><strong>gulp 安装</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install -g gulp  安装全局的gulp</span><br><span class="line">npm install --save-dev gulp@<span class="number">3.9</span><span class="number">.1</span> (新建目录---安装到项目目录下)记住千万用<span class="number">3.9</span><span class="number">.1</span></span><br><span class="line"></span><br><span class="line">------------------下面是根据实际应用安装的插件----------------------</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);<span class="comment">//引入gulp插件,返回gulp对象。</span></span><br><span class="line"><span class="keyword">var</span> jshint = <span class="built_in">require</span>(<span class="string">&#x27;gulp-jshint&#x27;</span>);<span class="comment">//js语法检测插件</span></span><br><span class="line"><span class="keyword">var</span> concat = <span class="built_in">require</span>(<span class="string">&#x27;gulp-concat&#x27;</span>);<span class="comment">//js合并插件</span></span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">&#x27;gulp-uglify&#x27;</span>);<span class="comment">//js压缩插件</span></span><br><span class="line"><span class="keyword">var</span> rename = <span class="built_in">require</span>(<span class="string">&#x27;gulp-rename&#x27;</span>);<span class="comment">//js重命名插件</span></span><br><span class="line"><span class="keyword">var</span> html = <span class="built_in">require</span>(<span class="string">&#x27;gulp-minify-html&#x27;</span>);<span class="comment">//html压缩插件</span></span><br><span class="line"><span class="keyword">var</span> mcss = <span class="built_in">require</span>(<span class="string">&#x27;gulp-minify-css&#x27;</span>);<span class="comment">//css压缩插件</span></span><br><span class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">&#x27;gulp-imagemin&#x27;</span>);<span class="comment">//图片压缩插件</span></span><br><span class="line"><span class="keyword">var</span> sass = <span class="built_in">require</span>(<span class="string">&#x27;gulp-sass&#x27;</span>);<span class="comment">//sass编译插件</span></span><br><span class="line"><span class="keyword">var</span> bable = <span class="built_in">require</span>(<span class="string">&#x27;gulp-babel&#x27;</span>);<span class="comment">//sass编译插件</span></span><br><span class="line"><span class="keyword">var</span> spritesmith=<span class="built_in">require</span>(<span class="string">&#x27;gulp.spritesmith&#x27;</span>);</span><br><span class="line"></span><br><span class="line">npm init -y</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//task:gulp的方法，代表新建一个任务，有两个参数</span></span><br><span class="line"><span class="comment">//参1：任务名，默认是default，一般需要自定义任务名</span></span><br><span class="line"><span class="comment">//参2：回调函数，任务的执行过程。</span></span><br><span class="line"><span class="comment">/*gulp.task(&#x27;default&#x27;,function()&#123;</span></span><br><span class="line"><span class="comment">	console.log(&#x27;hello,gulp&#x27;);</span></span><br><span class="line"><span class="comment">&#125;);*/</span></span><br><span class="line"><span class="comment">//任务的执行：dos--进入目录--通过任务名跑任务。(写法：gulp 任务名)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.代码的复制</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;copy&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	gulp.<span class="title function_">src</span>(<span class="string">&#x27;js/*.js&#x27;</span>)</span><br><span class="line">	.<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;script/&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;watchcopy&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	gulp.<span class="title function_">watch</span>(<span class="string">&#x27;js/*.js&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="comment">//监听js下面的所有的js文件</span></span><br><span class="line">		gulp.<span class="title function_">run</span>(<span class="string">&#x27;copy&#x27;</span>);<span class="comment">//执行copy任务。</span></span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.js语法错误报告</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;jshint&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    gulp.<span class="title function_">src</span>(<span class="string">&#x27;js/*.js&#x27;</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">jshint</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>(jshint.<span class="title function_">reporter</span>(<span class="string">&#x27;gulp-jshint-html-reporter&#x27;</span>, &#123; <span class="attr">filename</span>: <span class="string">&#x27;error.html&#x27;</span> &#125;)); <span class="comment">// 输出错误的结果到自定义的html文件</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.js代码的合并：将所有的js代码合并为一个文件</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;alljs&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	gulp.<span class="title function_">src</span>(<span class="string">&#x27;js/*.js&#x27;</span>)</span><br><span class="line">	.<span class="title function_">pipe</span>(<span class="title function_">concat</span>(<span class="string">&#x27;all.js&#x27;</span>))<span class="comment">//执行合并插件并且重新命名合并后的文件</span></span><br><span class="line">	.<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;script/&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.代码的合并压缩</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;uglifyjs&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	gulp.<span class="title function_">src</span>(<span class="string">&#x27;js/*.js&#x27;</span>)<span class="comment">//引入路径</span></span><br><span class="line">	.<span class="title function_">pipe</span>(<span class="title function_">concat</span>(<span class="string">&#x27;all.js&#x27;</span>))<span class="comment">//执行合并插件并且重新命名合并后的文件</span></span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;dist/script/&#x27;</span>));<span class="comment">//合并输出</span></span><br><span class="line">	.<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;script/&#x27;</span>))<span class="comment">//输出</span></span><br><span class="line">	.<span class="title function_">pipe</span>(<span class="title function_">rename</span>(<span class="string">&#x27;all.min.js&#x27;</span>))<span class="comment">//重命名</span></span><br><span class="line">	.<span class="title function_">pipe</span>(<span class="title function_">uglify</span>())<span class="comment">//压缩</span></span><br><span class="line">	.<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;dist/script/&#x27;</span>));<span class="comment">//压缩输出（这个输出两种方便维护）</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;watchjs&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	gulp.<span class="title function_">watch</span>(<span class="string">&#x27;js.js&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">		gulp.<span class="title function_">run</span>(<span class="string">&#x27;uglifyjs&#x27;</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.html文件的压缩</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;runhtml&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	gulp.<span class="title function_">src</span>(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">	.<span class="title function_">pipe</span>(<span class="title function_">html</span>())</span><br><span class="line">	.<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;html/&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//6.压缩css文件</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;runcss&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	gulp.<span class="title function_">src</span>(<span class="string">&#x27;css/index.css&#x27;</span>)</span><br><span class="line">	.<span class="title function_">pipe</span>(<span class="title function_">mcss</span>())</span><br><span class="line">	.<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;style/&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//7.压缩png图片--</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;runimg&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	gulp.<span class="title function_">src</span>(<span class="string">&#x27;img/*&#x27;</span>)</span><br><span class="line">	.<span class="title function_">pipe</span>(<span class="title function_">imagemin</span>())</span><br><span class="line">	.<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;images/&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//8.编译sass</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;runsass&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	gulp.<span class="title function_">src</span>(<span class="string">&#x27;sass/*.scss&#x27;</span>)</span><br><span class="line">	.<span class="title function_">pipe</span>(<span class="title function_">sass</span>())</span><br><span class="line">	.<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;sasscss/&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;watchsass&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	gulp.<span class="title function_">watch</span>(<span class="string">&#x27;sass/*.scss&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">		gulp.<span class="title function_">run</span>(<span class="string">&#x27;runsass&#x27;</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//9.es6转es5</span></span><br><span class="line"><span class="comment">//安装如下插件</span></span><br><span class="line"><span class="comment">//gulp-babel</span></span><br><span class="line"><span class="comment">//gulp-preset-es2015</span></span><br><span class="line"><span class="comment">//babel-core</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&quot;babeljs&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    gulp.<span class="title function_">src</span>(<span class="string">&quot;js/index.js&quot;</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">babel</span>(&#123;</span><br><span class="line">     	<span class="attr">presets</span>:[<span class="string">&#x27;es2015&#x27;</span>]</span><br><span class="line">    &#125;))</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&quot;dist/&quot;</span>));</span><br><span class="line"> &#125;);</span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&quot;watchjs&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    gulp.<span class="title function_">watch</span>(<span class="string">&#x27;js/index.js&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    	gulp.<span class="title function_">run</span>(<span class="string">&#x27;babeljs&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//10.自动刷新</span></span><br><span class="line"><span class="comment">//安装如下插件</span></span><br><span class="line"><span class="comment">//gulp-connect</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;connect&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="comment">//新建一个任务</span></span><br><span class="line">	connect.<span class="title function_">server</span>(&#123;<span class="comment">//配置连接服务器</span></span><br><span class="line">		<span class="attr">port</span>:<span class="number">8888</span>,</span><br><span class="line">		<span class="attr">livereload</span>:<span class="literal">true</span><span class="comment">//自动刷新</span></span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;html&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	gulp.<span class="title function_">src</span>([<span class="string">&#x27;index.html&#x27;</span>,<span class="string">&#x27;css/*.css&#x27;</span>,<span class="string">&#x27;js/new_file.js&#x27;</span>])<span class="comment">//引入的文件路径</span></span><br><span class="line">	.<span class="title function_">pipe</span>(connect.<span class="title function_">reload</span>());<span class="comment">//自动刷新的方法</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;watch&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="comment">//监听</span></span><br><span class="line">	gulp.<span class="title function_">watch</span>([<span class="string">&#x27;index.html&#x27;</span>,<span class="string">&#x27;css/*.css&#x27;</span>,<span class="string">&#x27;js/new_file.js&#x27;</span>],[<span class="string">&#x27;html&#x27;</span>]);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//执行的任务</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;default&#x27;</span>,[<span class="string">&#x27;connect&#x27;</span>,<span class="string">&#x27;watch&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//11.雪碧图制作插件</span></span><br><span class="line"><span class="comment">//安装gulp.spritesmith插件</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;sprite&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    gulp.<span class="title function_">src</span>(<span class="string">&#x27;src/images/*.png&#x27;</span>)</span><br><span class="line">       .<span class="title function_">pipe</span>(<span class="title function_">spritesmith</span>(&#123;</span><br><span class="line">           <span class="attr">imgName</span>:<span class="string">&#x27;sprite.png&#x27;</span>,  <span class="comment">//imgName为生成图的名称</span></span><br><span class="line">           <span class="attr">cssName</span>:<span class="string">&#x27;css/sprite.css&#x27;</span>, <span class="comment">//生成的css文件</span></span><br><span class="line">           <span class="attr">padding</span>:<span class="number">5</span>,  <span class="comment">//表示合成时两个图片的间距</span></span><br><span class="line">           <span class="attr">algorithm</span>:<span class="string">&#x27;binary-tree&#x27;</span> <span class="comment">//algorithm，四个可选值，分别为top-down、left-right、diagonal、alt-diagonal、binary-tree</span></span><br><span class="line">       &#125;))</span><br><span class="line">       .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;dist/&#x27;</span>))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>打包构建工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo错误”expected end of comment, got end of file”</title>
    <url>/2020/11/27/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/Hexo%E9%94%99%E8%AF%AF%E2%80%9Dexpected-end-of-comment-got-end-of-file%E2%80%9D/</url>
    <content><![CDATA[<p>使用 hexo generate 命令时报错：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">FATAL</span> <span class="title class_">Something</span><span class="string">&#x27;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</span></span><br><span class="line"><span class="string">Template render error: Error: expected end of comment, got end of file</span></span><br><span class="line"><span class="string">    at Object._prettifyError (E:\xjt927.github.io\node_modules\nunjucks\src\lib.js:35:11)</span></span><br><span class="line"><span class="string">    at Template.render (E:\xjt927.github.io\node_modules\nunjucks\src\environment.js:526:21)</span></span><br><span class="line"><span class="string">    at Environment.renderString (E:\xjt927.github.io\node_modules\nunjucks\src\environment.js:364:17)</span></span><br><span class="line"><span class="string">    at Promise (E:\xjt927.github.io\node_modules\hexo\lib\extend\tag.js:66:9)</span></span><br><span class="line"><span class="string">    at Promise._execute (E:\xjt927.github.io\node_modules\bluebird\js\release\debuggability.js:303:9)</span></span><br><span class="line"><span class="string">    at Promise._resolveFromExecutor (E:\xjt927.github.io\node_modules\bluebird\js\release\promise.js:483:18)</span></span><br><span class="line"><span class="string">    at new Promise (E:\xjt927.github.io\node_modules\bluebird\js\release\promise.js:79:10)</span></span><br><span class="line"><span class="string">    at Tag.render (E:\xjt927.github.io\node_modules\hexo\lib\extend\tag.js:64:10)</span></span><br><span class="line"><span class="string">    at Object.tagFilter [as onRenderEnd] (E:\xjt927.github.io\node_modules\hexo\lib\hexo\post.js:260:16)</span></span><br><span class="line"><span class="string">    at Promise.then.then.result (E:\xjt927.github.io\node_modules\hexo\lib\hexo\render.js:65:19)</span></span><br><span class="line"><span class="string">    at tryCatcher (E:\xjt927.github.io\node_modules\bluebird\js\release\util.js:16:23)</span></span><br><span class="line"><span class="string">    at Promise._settlePromiseFromHandler (E:\xjt927.github.io\node_modules\bluebird\js\release\promise.js:512:31)</span></span><br><span class="line"><span class="string">    at Promise._settlePromise (E:\xjt927.github.io\node_modules\bluebird\js\release\promise.js:569:18)</span></span><br><span class="line"><span class="string">    at Promise._settlePromise0 (E:\xjt927.github.io\node_modules\bluebird\js\release\promise.js:614:10)</span></span><br><span class="line"><span class="string">    at Promise._settlePromises (E:\xjt927.github.io\node_modules\bluebird\js\release\promise.js:693:18)</span></span><br><span class="line"><span class="string">    at Async._drainQueue (E:\xjt927.github.io\node_modules\bluebird\js\release\async.js:133:16)</span></span><br><span class="line"><span class="string">    at Async._drainQueues (E:\xjt927.github.io\node_modules\bluebird\js\release\async.js:143:10)</span></span><br><span class="line"><span class="string">    at Immediate.Async.drainQueues [as _onImmediate] (E:\xjt927.github.io\node_modules\bluebird\js\release\async.js:17:14)</span></span><br><span class="line"><span class="string">    at runCallback (timers.js:789:20)</span></span><br><span class="line"><span class="string">    at tryOnImmediate (timers.js:751:5)</span></span><br><span class="line"><span class="string">    at processImmediate [as _immediateCallback] (timers.js:722:5)</span></span><br></pre></td></tr></table></figure>

<p>想到刚才文章内容中有 # 字符作为普通字符出现，但并没有做转义处理，包含 # 字符的内容如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$\color&#123;&amp;#<span class="number">35</span>;<span class="title class_">FF0000</span>&#125;&#123;红色字&#125;$</span><br></pre></td></tr></table></figure>

<p>经过实际测试确实是因为 # 导致的。</p>
<p>首先想到用 Markdown 转义字符 \ 进行转义，但问题依旧。</p>
<p>hexo generate 目标是将 .md 文件内容转为 html 文件，html 可以对字符编码。从网上查了下 # 的 html 编码为 &#35; 替换后问题解决。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$\color&#123;#<span class="title class_">FF0000</span>&#125;&#123;红色字&#125;$</span><br></pre></td></tr></table></figure>

<p>参考文档：<br><a href="http://xuejiangtao.com/posts/11a14c34/">http://xuejiangtao.com/posts/11a14c34/</a></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客框架-Hello World</title>
    <url>/2022/02/20/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>可视化视图</title>
    <url>/2021/12/06/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/%E3%80%90%E5%8E%9F%E5%88%9B%E3%80%91%E5%8F%AF%E8%A7%86%E5%8C%96%E8%A7%86%E5%9B%BE/</url>
    <content><![CDATA[<h1 id="D3-vs-G2-vs-eCharts"><a href="#D3-vs-G2-vs-eCharts" class="headerlink" title="D3 vs G2 vs eCharts"></a>D3 vs G2 vs eCharts</h1><p><a href="https://www.jianshu.com/p/7792544e680c">https://www.jianshu.com/p/7792544e680c</a></p>
<p>数据可视化的核心是什么？<br>–数据到图形的映射</p>
<h2 id="G2"><a href="#G2" class="headerlink" title="G2"></a>G2</h2><p>1.快速开发 2.封装复用组件 3.趣味性<br>《The Grammar of Graph》<br>用<strong>面向对象</strong>的语法，来<strong>描述</strong>数据可视化。</p>
<p>用 g2 做 chart 分几步？</p>
<blockquote>
<p>1.处理数据</p>
</blockquote>
<ul>
<li>1).chart.source(data)</li>
<li>2).new DataSet()</li>
</ul>
<blockquote>
<p>2.可视化语法描述</p>
</blockquote>
<ul>
<li>1).Geometry:point&#x2F;line&#x2F;interval…</li>
<li>2).Mapping:position&#x2F;size&#x2F;shape&#x2F;color…</li>
<li>3).Details:label&#x2F;legned&#x2F;tooltip…</li>
</ul>
<h5 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;home&quot;</span> <span class="attr">id</span>=<span class="string">&quot;chart&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> * <span class="keyword">as</span> d3 <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; <span class="title class_">Chart</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@antv/g2&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">async</span> <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> data = <span class="keyword">await</span> d3.<span class="title function_">csv</span>(<span class="string">&#x27;/data/msg.csv&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;data&#x27;</span>, data);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> chart = <span class="keyword">new</span> <span class="title class_">Chart</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">container</span>: <span class="string">&#x27;chart&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">width</span>: <span class="number">600</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">height</span>: <span class="number">300</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    chart.<span class="title function_">data</span>(data);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    chart.<span class="title function_">scale</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">weight</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">type</span>: <span class="string">&#x27;linear&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">height</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">type</span>: <span class="string">&#x27;linear&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">age</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">type</span>: <span class="string">&#x27;linear&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    chart.<span class="title function_">line</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      .<span class="title function_">position</span>(<span class="string">&#x27;name*height&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      .<span class="title function_">color</span>(<span class="string">&#x27;weight&#x27;</span>, <span class="function"><span class="params">val</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> val &gt; <span class="number">65</span> ? <span class="string">&#x27;red&#x27;</span> : <span class="string">&#x27;green&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      .<span class="title function_">size</span>(<span class="string">&#x27;age&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// chart.area()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//   .position(&#x27;name*height&#x27;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//   .color(&#x27;weight&#x27;, val =&gt; &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//     return val &gt; 100 ? &#x27;red&#x27; : &#x27;green&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//   &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//   .size(&#x27;age&#x27;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    chart.<span class="title function_">coordinate</span>(<span class="string">&#x27;polar&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    chart.<span class="title function_">render</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h5 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;data-set&quot;</span> <span class="attr">id</span>=<span class="string">&quot;chart&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> * <span class="keyword">as</span> d3 <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; <span class="title class_">Chart</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@antv/g2&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; <span class="title class_">DataSet</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@antv/data-set&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;DataSet&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">async</span> <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> data = <span class="keyword">await</span> d3.<span class="title function_">csv</span>(<span class="string">&#x27;/data/msg.csv&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;data&#x27;</span>, data);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> chart = <span class="keyword">new</span> <span class="title class_">Chart</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">container</span>: <span class="string">&#x27;chart&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">width</span>: <span class="number">600</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">height</span>: <span class="number">300</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> ds = <span class="keyword">new</span> <span class="title class_">DataSet</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> dv = ds.<span class="title function_">createView</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      .<span class="title function_">source</span>(data)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      .<span class="title function_">transform</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">as</span>: [<span class="string">&#x27;number&#x27;</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">groupBy</span>: [<span class="string">&#x27;sex&#x27;</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">operations</span>: [<span class="string">&#x27;count&#x27;</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">type</span>: <span class="string">&#x27;aggregate&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;data-view&#x27;</span>, dv);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    chart.<span class="title function_">data</span>(dv.<span class="property">rows</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    chart</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      .<span class="title function_">interval</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      .<span class="title function_">adjust</span>(<span class="string">&#x27;stack&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      .<span class="title function_">color</span>(<span class="string">&#x27;sex&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      .<span class="title function_">position</span>(<span class="string">&#x27;number&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    chart.<span class="title function_">coordinate</span>(<span class="string">&#x27;theta&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    chart.<span class="title function_">render</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>3.渲染</p>
</blockquote>
<ul>
<li>1).chart.render()</li>
</ul>
<h2 id="D3"><a href="#D3" class="headerlink" title="D3"></a>D3</h2><p>在 2D 可视化里，无往而不利</p>
<p>Data Drive Document</p>
<p>抽象程度低，上手成本高，自由度好</p>
<p>《如何自学 D3》<br><a href="https://wwww.jianshu.com/p/88eae8fbe94e">https://wwww.jianshu.com/p/88eae8fbe94e</a></p>
<p><a href="https://github.com/d3/d3/blob/master/API.md">https://github.com/d3/d3/blob/master/API.md</a></p>
<p><a href="https://github.com/tianxuzhang/d3.v4-API-Translation">https://github.com/tianxuzhang/d3.v4-API-Translation</a></p>
<h5 id="示例-1-1"><a href="#示例-1-1" class="headerlink" title="示例 1:"></a>示例 1:</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// Q1.MVVM是什么？</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// Model(data) - view(DOM) -vm(Vue)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// Q2.MVVM方便了哪些DOM操作？</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 增删改</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; csv &#125; <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; select &#125; <span class="keyword">from</span> <span class="string">&#x27;d3-selection&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">async</span> <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// Q3.Data Drive Document 比 MVVM 有哪些优势？</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 1.更底层</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 2.回调函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">csv</span>(<span class="string">&#x27;/data/msg.csv&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;data&#x27;</span>, data);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">select</span>(<span class="string">&#x27;#list&#x27;</span>) <span class="comment">// root</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      .<span class="title function_">selectAll</span>(<span class="string">&#x27;li&#x27;</span>) <span class="comment">// view</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      .<span class="title function_">data</span>(data) <span class="comment">//Modal</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      .<span class="title function_">enter</span>() <span class="comment">// 增</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">append</span>(<span class="string">&#x27;li&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    consle.<span class="title function_">log</span>(aLi, <span class="string">&#x27;aLi&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    aLi.<span class="title function_">text</span>(<span class="function">(<span class="params">item, i, nodeList</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;text&#x27;</span>, item, i, nodeList)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> item.<span class="property">name</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    aLi.<span class="title function_">style</span>(<span class="string">&#x27;color&#x27;</span>, <span class="function">(<span class="params">d, i</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> d.<span class="property">weight</span> &gt; <span class="number">65</span> ? <span class="string">&#x27;red&#x27;</span> : <span class="string">&#x27;green&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;).<span class="title function_">style</span>(<span class="string">&#x27;font-size&#x27;</span>, <span class="function"><span class="params">d</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;d.age&#125;</span>px`</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h5 id="示例-2-1"><a href="#示例-2-1" class="headerlink" title="示例 2:"></a>示例 2:</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&#x27;100&#x27;</span> <span class="attr">y</span>=<span class="string">&#x27;100&#x27;</span> <span class="attr">width</span>=<span class="string">&#x27;50&#x27;</span> <span class="attr">height</span>=<span class="string">&#x27;50&#x27;</span> <span class="attr">fill</span>=<span class="string">&#x27;red&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&#x27;200&#x27;</span> <span class="attr">y</span>=<span class="string">&#x27;50&#x27;</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// Q1.MVVM是什么？</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// Model(data) - view(DOM) -vm(Vue)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// Q2.MVVM方便了哪些DOM操作？</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 增删改</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; csv &#125; <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; select &#125; <span class="keyword">from</span> <span class="string">&#x27;d3-selection&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">async</span> <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">csv</span>(<span class="string">&#x27;/data/msg.csv&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;data&#x27;</span>, data);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">select</span>(<span class="string">&#x27;svg&#x27;</span>)<span class="comment">//root</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      .<span class="title function_">selectAll</span>(<span class="string">&#x27;rect&#x27;</span>)<span class="comment">//view</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      .<span class="title function_">data</span>(data)<span class="comment">//modal</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      .<span class="title function_">enter</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      .<span class="title function_">append</span>(<span class="string">&#x27;rect&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      .<span class="title function_">attr</span>(<span class="string">&#x27;y&#x27;</span>, <span class="number">50</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      .<span class="title function_">attr</span>(<span class="string">&#x27;y&#x27;</span>, <span class="number">30</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      .<span class="title function_">attr</span>(<span class="string">&#x27;x&#x27;</span>, (d, i) &gt; <span class="number">100</span> * i)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      .<span class="title function_">attr</span>(<span class="string">&#x27;height&#x27;</span>, <span class="function"><span class="params">d</span> =&gt;</span> d.<span class="property">weight</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      .<span class="title function_">attr</span>(<span class="string">&#x27;fill&#x27;</span>, <span class="function"><span class="params">d</span> =&gt;</span> d.<span class="property">weight</span> &gt; <span class="number">65</span> ? <span class="string">&#x27;red&#x27;</span> : <span class="string">&#x27;green&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h5 id="示例-3"><a href="#示例-3" class="headerlink" title="示例 3:"></a>示例 3:</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&#x27;100&#x27;</span> <span class="attr">y</span>=<span class="string">&#x27;100&#x27;</span> <span class="attr">width</span>=<span class="string">&#x27;50&#x27;</span> <span class="attr">height</span>=<span class="string">&#x27;50&#x27;</span> <span class="attr">fill</span>=<span class="string">&#x27;red&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// d3-hierarchy:树形数据结构</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; csv &#125; <span class="keyword">from</span> <span class="string">&#x27;d3&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; json &#125; <span class="keyword">from</span> <span class="string">&#x27;d3-fetch&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; hirearchy, pack &#125; <span class="keyword">from</span> <span class="string">&#x27;d3-hierarchy&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> aColor = [<span class="string">&#x27;brown&#x27;</span>, <span class="string">&#x27;cyan&#x27;</span>, <span class="string">&#x27;steelblue&#x27;</span>];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">async</span> <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">this</span>.<span class="title function_">_draw</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">_draw</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;canvas&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      ctx.<span class="property">fillStyle</span> = <span class="string">&#x27;red&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      ctx.<span class="title function_">fillRect</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">50</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 画圆</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      ctx.<span class="title function_">arc</span>(<span class="number">200</span>, <span class="number">200</span>, <span class="number">50</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="title class_">Math</span>.<span class="property">PI</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      ctx.<span class="title function_">fill</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">csv</span>(<span class="string">&#x27;/data/msg.csv&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;data&#x27;</span>, data);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> regions = <span class="title function_">hirearchy</span>(regions).<span class="title function_">sum</span>(<span class="function"><span class="params">d</span> =&gt;</span> <span class="number">1</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;regions:&#x27;</span>, regions)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> _pack = <span class="title function_">pack</span>().<span class="title function_">size</span>([<span class="number">800</span>, <span class="number">800</span>])(regions)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;_pack:&#x27;</span>, _pack);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      ctx.<span class="property">globalAlpha</span> = <span class="number">0.3</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="title function_">_drawCircle</span>(ctx, _pack)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">_drawCircle</span>(<span class="params">ctx, node</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> &#123; x, y, r, depth &#125; = node</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      ctx.<span class="title function_">beginPath</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      ctx.<span class="title function_">arc</span>(x, y, r, <span class="number">0.2</span> * <span class="title class_">Math</span>.<span class="property">PI</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      ctx.<span class="property">fillStyle</span> = aColor[depth]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      ctx.<span class="title function_">fill</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">if</span> (node.<span class="property">children</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">for</span> (<span class="keyword">const</span> node <span class="keyword">of</span> node.<span class="property">children</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="title function_">_drawCircle</span>(ctx, node)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="eCharts"><a href="#eCharts" class="headerlink" title="eCharts"></a>eCharts</h2><p>xxCharts</p>
<p>抽象程度高，上手成本低，自由度差</p>
]]></content>
  </entry>
  <entry>
    <title>教你手把手白嫖blob视频</title>
    <url>/2021/12/17/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/%E3%80%90%E5%8E%9F%E5%88%9B%E3%80%91%E6%95%99%E4%BD%A0%E6%89%8B%E6%8A%8A%E6%89%8B%E7%99%BD%E5%AB%96blob%E8%A7%86%E9%A2%91/</url>
    <content><![CDATA[<p>例如源视频：<br><a href="https://ke.segmentfault.com/course/1650000023864436/section/1500000023865295">https://ke.segmentfault.com/course/1650000023864436/section/1500000023865295</a></p>
<p>该播放视频地址为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;video</span><br><span class="line">  <span class="keyword">class</span>=<span class="string">&quot;pv-video&quot;</span></span><br><span class="line">  preload=<span class="string">&quot;preload&quot;</span></span><br><span class="line">  src=<span class="string">&quot;blob:https://ke.segmentfault.com/eba5435c-dcf5-4685-877f-dd68dc5378e0&quot;</span></span><br><span class="line">&gt;&lt;/video&gt;</span><br></pre></td></tr></table></figure>

<p>下载方法： 1.打开如下链接：<br><a href="https://blog.luckly-mjw.cn/tool-show/m3u8-downloader/index.html">https://blog.luckly-mjw.cn/tool-show/m3u8-downloader/index.html</a></p>
<p>2.打开源视频地址：<br><a href="https://ke.segmentfault.com/course/1650000023864436/section/1500000023865295">https://ke.segmentfault.com/course/1650000023864436/section/1500000023865295</a></p>
<p>3.在 network 中过滤找到 .m3u8 的地址，且 response 中有值。<br>如：<br><a href="https://hls.videocc.net/44bcb013f3/9/44bcb013f3f815925d7282e6933c3df9_1.m3u8?pid=1639681204317X1889677&device=desktop">https://hls.videocc.net/44bcb013f3/9/44bcb013f3f815925d7282e6933c3df9_1.m3u8?pid=1639681204317X1889677&amp;device=desktop</a></p>
<p>4.拷贝第 3 步的地址，粘贴到 1 的工具中，点击”源格式下载“。即可在下方看到下载视频进度。并在桌面找到下载好的文件。</p>
]]></content>
  </entry>
  <entry>
    <title>五笔输入法</title>
    <url>/2022/02/14/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/%E3%80%90%E6%90%AC%E3%80%91%E4%BA%94%E7%AC%94%E8%BE%93%E5%85%A5%E6%B3%95/</url>
    <content><![CDATA[<h2 id="五笔输入法"><a href="#五笔输入法" class="headerlink" title="五笔输入法"></a>五笔输入法</h2><h3 id="汉子有五种基本结构："><a href="#汉子有五种基本结构：" class="headerlink" title="汉子有五种基本结构："></a>汉子有五种基本结构：</h3><ul>
<li>一、左右型：羽 汉 独 体 树</li>
<li>二、上下型：泉 字 全 品 复</li>
<li>三、独体字：本 五 子 已 王</li>
<li>四、半包围：这 包 同 区 凶</li>
<li>五、全包围：围 因 困 回 圆</li>
</ul>
<p>五笔中只有三种结构，其中“左右型”和“上下型”同上，<br>而 3，4，5 均属于“杂合型”。</p>
<p>笔画（笔划）：</p>
<ul>
<li>定义：一次不间断连续写成的一个线条称为笔画。</li>
<li>攵 vs 夂</li>
</ul>
<p>汉子有五种基本笔画：</p>
<ul>
<li>横 竖 撇 捺 折</li>
<li>一 丨 丿 丶 乙乚𠃌乛⺄</li>
</ul>
<p>注意：</p>
<ul>
<li>提，属于横；点，属于捺。 （土&#x2F;地 文）</li>
<li>左竖钩，属于竖。 （木&#x2F;条&#x2F;杀）</li>
<li>除左竖钩外任何带拐弯的笔画都属于折。 （已&#x2F;九&#x2F;刀&#x2F;匕&#x2F;己）</li>
<li>有的点的方向是朝左的，不要误认为是撇。（宀&#x2F;刃&#x2F;心）</li>
</ul>
<p>字根：<br>定义：由几个笔画 交叉连接组成的相对不变的结构。</p>
<ul>
<li>字根是组成汉子的基本单元。</li>
<li>多数偏旁部首都属于字根，如：<br>亻（wth），扌（rghg），氵（iyyg），口（kkkk），辶（pyny），艹（aghh），阝（bnh）</li>
<li>但是有些偏旁部首需要两个以上字根组成，如：<br>饣（qnb），犭（qte），衤（pui），礻（pyi），龹（ud），气（rnb），穴（pwu）</li>
</ul>
<p>五笔 拼音<br>灬 oyyy biao1 huo3<br>冫 uyg bing1<br>艹 aghh ao3<br>屮 bhk che4<br>辶 pyny chuo4<br>刂 jhh dao1<br>匚 agn fang1<br>阝 bnh fu3<br>廾 agth gong3<br>勹 qtn bao1<br>丶 yyll zhu3<br>尢 dnv you2<br>饣 qnb shi2<br>囗 lhng wei2<br>钅 qtgn jin1<br>礻 pyi shi4<br>氵 iyyg shui3<br>讠 yyn yan2<br>纟 xxxx jiao3 si1<br>疒 uygg ne4<br>亻 wth ren2<br>彡 ettt shan1 xian3<br>丨 hhll gun3<br>扌 rghg shou3<br>卩 bnh jie2<br>冂 mhn jiong1<br>冖 pyn mi4<br>宀 pyyn mian2<br>肀 vhk yu4<br>丿 ttll pie3 yi4<br>攵 ttgy pu1<br>廴 pny yin3 yin4<br>衤 pui yi1<br>忄 nyhy xin1<br>彐 vngg xue3<br>亠 yyg tou2<br>虍 hav hu1<br>犭 qte quan3<br>凵 bnh qian3 kan3<br>夂 ttny dong1 zhe2 zhi3<br>丬 uygh pan2</p>
<p>86 五笔的字根有 130 个，如果算上某些个字根的变体，（字根图上）约有 200 个，不要惧怕字根的数量，要有“麻烦一时，方便一世”的观念。</p>
<p>1、键名汉子（共 25 个）：<br>金（Q） 人（W） 月（E） 白（R） 禾（T） 言（Y） 立（U） 水（I） 火（O） 之（P）<br>工（A） 木（S） 大（D） 土（F） 王（G） 目（H） 日（J） 口（K） 田（L）<br>纟（X） 又（C） 女（V） 子（B） 已（N） 山（M）</p>
<ul>
<li>他们是字根图上每个键左上角的黑体字；也是每句口诀的第一个字（X 键除外）</li>
<li>打法：连续打四次所在的键位。简便打发：QQ 五笔默认词库也可打一次所在键位，然后选第二项（A&#x2F;W&#x2F;X 键除外）</li>
</ul>
<p>2、一级简码（一简，共 25 个）<br>我（Q） 人（W） 有（E） 的（R） 和（T） 主（Y） 产（U） 不（I） 为（O） 这（P）<br>工（A） 要（S） 在（D） 地（F） 一（G） 上（H） 是（J） 中（K） 国（L）<br>经（X） 以（C） 发（V） 了（B） 民（N） 同（M）</p>
<ul>
<li>他们是使用频率极高的字，必须记住。“经发同和我以为，在人民中国这一主要工地上，有的是产不了”。</li>
<li>打法：打一次所在键位，然后按空格键。</li>
</ul>
<p>3、单笔画（共五个）：</p>
<ul>
<li><p>丿（TTLL），丶（YYLL）</p>
</li>
<li><p>一（GGLL），丨（HHLL）</p>
</li>
<li><p>乙（NNLL）</p>
</li>
<li><p>这五个键很重要，是每个区的第一个键，也称单笔画键，在打成字字根时需要用到。</p>
</li>
<li><p>打法：所在键位*2 + LL，让后按空格键。</p>
<p>4.成字字根（约 90 个）：</p>
</li>
<li><p>有相当一部分字根本身就可以被用来作为常用的简单汉字（或偏旁），他们被称为“成字字根”。</p>
</li>
<li><p>打法：所在键位+第一笔+第二笔（+最后一笔）</p>
</li>
<li><p>例：犬（DGTY） 手（RTGH） 心（NYNY） 五（GGHG） 刀（VNT） 【日（JJJJ）曰（JHNG）、子（BBBB）孑（BNHG）】</p>
</li>
<li><p>特例：力（LTN） 乃（ETN） 戈（AGNT）</p>
<p>5.二级简码、三级简码、全码：<br>为了提高录入速度，有些字的编码可以简化。如果一个字用两个字母键就可以打出（立 UU&#x2F;水 II&#x2F;五 GG），那么它叫做二级简码；</p>
</li>
</ul>
<p>如果一个字用三个字母键就可以打出（斤 RTT&#x2F;竹 TTG&#x2F;皿 LHN），那么它叫做三级简码‘</p>
<p>汉字的全部编码叫做全码，全码最多四码，最少三码。什么样的全码只有三码？</p>
<ul>
<li>只有两个笔画的成字字根如“十（FGH）&#x2F;厂（DGT）&#x2F;九（VTN）&#x2F;二（FGG）”；</li>
<li>只能拆成两部分的字。</li>
<li>只有一个笔画？那叫做单笔画，全码四码！</li>
</ul>
<p>6、重码：即“重复的编码”</p>
<ul>
<li>有的重码需要进行选择：<ul>
<li>FGHY：雨、寸</li>
<li>FCU：云、去、支</li>
</ul>
</li>
<li>有的重码可以被简码分流：<ul>
<li>FKUK：嘉、喜</li>
<li>FKU：喜</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>五笔输入法</title>
    <url>/2023/01/31/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/%E3%80%90%E6%90%AC%E3%80%91%E4%BA%94%E7%AC%94%E8%BE%93%E5%85%A5%E6%B3%95-%E5%85%A8/</url>
    <content><![CDATA[<p>汉子有五种基本结构：</p>
<ul>
<li>一、左右型：羽 汉 独 体 树</li>
<li>二、上下型：泉 字 全 品 复</li>
<li>三、独体字：本 五 子 已 王</li>
<li>四、半包围：这 包 同 区 凶</li>
<li>五、全包围：围 因 困 回 圆</li>
</ul>
<p>五笔中只有三种结构，其中“左右型”和“上下型”同上，<br>而 3，4，5 均属于“杂合型”。</p>
<p>笔画（笔划）：</p>
<ul>
<li>定义：一次不间断连续写成的一个线条称为笔画。</li>
<li>攵 vs 夂</li>
</ul>
<p>汉子有五种基本笔画：</p>
<ul>
<li>横 竖 撇 捺 折</li>
<li>一 丨 丿 丶 乙乚𠃌乛⺄</li>
</ul>
<p>注意：</p>
<ul>
<li>提，属于横；点，属于捺。 （土&#x2F;地 文）</li>
<li>左竖钩，属于竖。 （木&#x2F;条&#x2F;杀）</li>
<li>除左竖钩外任何带拐弯的笔画都属于折。 （已&#x2F;九&#x2F;刀&#x2F;匕&#x2F;己）</li>
<li>有的点的方向是朝左的，不要误认为是撇。（宀&#x2F;刃&#x2F;心）</li>
</ul>
<p>字根：<br>定义：由几个笔画 交叉连接组成的相对不变的结构。</p>
<ul>
<li>字根是组成汉子的基本单元。</li>
<li>多数偏旁部首都属于字根，如：<br>亻（wth），扌（rghg），氵（iyyg），口（kkkk），辶（pyny），艹（aghh），阝（bnh）</li>
<li>但是有些偏旁部首需要两个以上字根组成，如：<br>饣（qnb），犭（qte），衤（pui），礻（pyi），龹（ud），气（rnb），穴（pwu）</li>
</ul>
<p>五笔 拼音<br>灬 oyyy biao1 huo3<br>冫 uyg bing1<br>艹 aghh ao3<br>屮 bhk che4<br>辶 pyny chuo4<br>刂 jhh dao1<br>匚 agn fang1<br>阝 bnh fu3<br>廾 agth gong3<br>勹 qtn bao1<br>丶 yyll zhu3<br>尢 dnv you2<br>饣 qnb shi2<br>囗 lhng wei2<br>钅 qtgn jin1<br>礻 pyi shi4<br>氵 iyyg shui3<br>讠 yyn yan2<br>纟 xxxx jiao3 si1<br>疒 uygg ne4<br>亻 wth ren2<br>彡 ettt shan1 xian3<br>丨 hhll gun3<br>扌 rghg shou3<br>卩 bnh jie2<br>冂 mhn jiong1<br>冖 pyn mi4<br>宀 pyyn mian2<br>肀 vhk yu4<br>丿 ttll pie3 yi4<br>攵 ttgy pu1<br>廴 pny yin3 yin4<br>衤 pui yi1<br>忄 nyhy xin1<br>彐 vngg xue3<br>亠 yyg tou2<br>虍 hav hu1<br>犭 qte quan3<br>凵 bnh qian3 kan3<br>夂 ttny dong1 zhe2 zhi3<br>丬 uygh pan2</p>
<p>86 五笔的字根有 130 个，如果算上某些个字根的变体，（字根图上）约有 200 个，不要惧怕字根的数量，要有“麻烦一时，方便一世”的观念。</p>
<p>1、键名汉子（共 25 个）：<br>金（Q） 人（W） 月（E） 白（R） 禾（T） 言（Y） 立（U） 水（I） 火（O） 之（P）<br>工（A） 木（S） 大（D） 土（F） 王（G） 目（H） 日（J） 口（K） 田（L）<br>纟（X） 又（C） 女（V） 子（B） 已（N） 山（M）</p>
<ul>
<li>他们是字根图上每个键左上角的黑体字；也是每句口诀的第一个字（X 键除外）</li>
<li>打法：连续打四次所在的键位。简便打发：QQ 五笔默认词库也可打一次所在键位，然后选第二项（A&#x2F;W&#x2F;X 键除外）</li>
</ul>
<p>2、一级简码（一简，共 25 个）<br>我（Q） 人（W） 有（E） 的（R） 和（T） 主（Y） 产（U） 不（I） 为（O） 这（P）<br>工（A） 要（S） 在（D） 地（F） 一（G） 上（H） 是（J） 中（K） 国（L）<br>经（X） 以（C） 发（V） 了（B） 民（N） 同（M）</p>
<ul>
<li>他们是使用频率极高的字，必须记住。“经发同和我以为，在人民中国这一主要工地上，有的是产不了”。</li>
<li>打法：打一次所在键位，然后按空格键。</li>
</ul>
<p>3、单笔画（共五个）：</p>
<ul>
<li><p>丿（TTLL），丶（YYLL）</p>
</li>
<li><p>一（GGLL），丨（HHLL）</p>
</li>
<li><p>乙（NNLL）</p>
</li>
<li><p>这五个键很重要，是每个区的第一个键，也称单笔画键，在打成字字根时需要用到。</p>
</li>
<li><p>打法：所在键位*2 + LL，让后按空格键。</p>
<p>4.成字字根（约 90 个）：</p>
</li>
<li><p>有相当一部分字根本身就可以被用来作为常用的简单汉字（或偏旁），他们被称为“成字字根”。</p>
</li>
<li><p>打法：所在键位+第一笔+第二笔（+最后一笔）</p>
</li>
<li><p>例：犬（DGTY） 手（RTGH） 心（NYNY） 五（GGHG） 刀（VNT） 【日（JJJJ）曰（JHNG）、子（BBBB）孑（BNHG）】</p>
</li>
<li><p>特例：力（LTN） 乃（ETN） 戈（AGNT）</p>
<p>5.二级简码、三级简码、全码：<br>为了提高录入速度，有些字的编码可以简化。如果一个字用两个字母键就可以打出（立 UU&#x2F;水 II&#x2F;五 GG），那么它叫做二级简码；</p>
</li>
</ul>
<p>如果一个字用三个字母键就可以打出（斤 RTT&#x2F;竹 TTG&#x2F;皿 LHN），那么它叫做三级简码;</p>
<p>汉字的全部编码叫做全码，全码最多四码，最少三码。</p>
<p>什么样的全码只有三码？</p>
<ul>
<li>只有两个笔画的成字字根如“十（FGH）&#x2F;厂（DGT）&#x2F;九（VTN）&#x2F;二（FGG）”；</li>
<li>只能拆成两部分的字。</li>
<li>只有一个笔画？那叫做单笔画，全码四码！</li>
</ul>
<p>6、重码：即“重复的编码”</p>
<ul>
<li>有的重码需要进行选择：<ul>
<li>FGHY：雨、寸</li>
<li>FCU：云、去、支</li>
</ul>
</li>
<li>有的重码可以被简码分流：<ul>
<li>FKUK：嘉、喜</li>
<li>FKU：喜</li>
</ul>
</li>
</ul>
<h3 id="字根"><a href="#字根" class="headerlink" title="字根"></a>字根</h3><ul>
<li>字根顺序按照 横区&#x2F;竖区&#x2F;撇区&#x2F;捺区&#x2F;折区 的顺序，每个区的键位按位号的顺序来讲解。</li>
<li>撇区 QWERT</li>
<li>捺区 YUIOP</li>
<li>横区 ASDFG</li>
<li>竖区 HJKLM</li>
<li>折区 XCVBN</li>
<li>万能键 Z</li>
</ul>
<h3 id="横区"><a href="#横区" class="headerlink" title="横区"></a>横区</h3><p>11 G 王旁青头戋五一</p>
<ul>
<li>1.王——国 现 理 全 程</li>
<li>2.——表 青 责 麦 毒 【勤】</li>
<li>3.戋——线 钱 残 践 盏</li>
<li>4.五——伍 吾（语 悟 捂）</li>
<li>5.一——不 来 到 于 旦</li>
</ul>
<p>12 F 土士二干十寸雨</p>
<ul>
<li>1.土——地 里 等 场 社</li>
<li>2.士——结 志 喜 款 壮</li>
<li>3.二——些 无 元 毛 击</li>
<li>4.干——赶 刊 汗 岸 竿</li>
<li>5.十——科 计 德 南 卖</li>
<li>6.寸——时 对 过 得 导</li>
<li>7.雨——需 露 雷 雪 零</li>
<li>8.革（革字旁，键盘打不出来）——革（勒 鞋 鞭 靶）【注意 ⚠️：勤 不是这个偏旁】</li>
</ul>
<p>13 D 大犬三羊古石厂</p>
<ul>
<li>1.大——美 太 达 类 天【夫】</li>
<li>2.犬——然 突 壮 哭 厌</li>
<li>3.三——丰 害 非 承 拜<br>-4.羊字底——羊（样 洋 鲜 详 痒）【善】【注意 ⚠️：美 不是这个偏旁】</li>
<li>5.古——克 故 苦 居 固</li>
<li>6.石——破 磨 拓 岩 泵</li>
<li>7.厂——成 原 历 压 顾</li>
<li>8.镸——套 肆 髟 biao （鬓 bin 髻 ji）</li>
<li>9.丆——万【方】面 百 夏 页</li>
<li>10.在字头（键盘打不出来）——在 有 友 左 丈【尴尬】（上下结构）</li>
<li>11.尤字边（键盘打不出来）——龙（崇 龚）尤（优 扰）</li>
<li>12.——着 差 羞 养 羌【注意 ⚠️：看 不是这个偏旁】</li>
</ul>
<p>14 S 木丁西</p>
<ul>
<li>1.木——末【注意 ⚠️：末 不是这个偏旁】本【注意 ⚠️：夲 不是这个偏旁】条 机 果 术</li>
<li>2.丁——可 打 奇 停 宁 【注意 ⚠️：行 不是这个偏旁】</li>
<li>3.西覀——要 配 酒 洒 尊</li>
</ul>
<p>15 A 工戈草头右框七</p>
<ul>
<li>1.工——经 式 空 功 红 【注意 ⚠️：候 不是这个偏旁】</li>
<li>2.戈——战 找 划 戏 戛</li>
<li>3.艹——英 花 节 满 药（扁 垂）</li>
<li>4.匸（右框）——区 医 巨 汇 匹（牙 既 舛 瞬 舞）</li>
<li>5.七——东 切 练 托 皂 （尧 晓 翘）</li>
<li>6.弋——代 袋 贷 岱 鸢 yuan</li>
<li>7.共字头（键盘打不出来）——展 共 错 黄 港【曲 典 曹】</li>
<li>8.廾——开 并 升 异 戒</li>
<li>9.廿 nian——度 世 席 燕 遮</li>
</ul>
<h3 id="竖区"><a href="#竖区" class="headerlink" title="竖区"></a>竖区</h3><p>21 H 目具上止卜虎皮</p>
<ul>
<li>1.目——自（首道）看 着 相 算</li>
<li>2.具字头——具（俱 惧 真 ） 直【注意 ⚠️：且 不是这个偏旁】</li>
<li>3.上——让 卡 寂 叔 忐</li>
<li>4.止——正 步 扯 歧 卸 疏【延】</li>
<li>5.卜——下 外 占 卢 丐</li>
<li>6.虎子头——虑 虚 虎 虐 彪</li>
<li>7.皮字头——皮（被 波 破 疲）</li>
<li>8.足字底——走 足 疋 pi（楚 蛋 凝）</li>
<li>9.｜——旧 引 巾 中 申</li>
</ul>
<p>22 J 日早两竖与虫依</p>
<ul>
<li>1.日曰——是 时 得 单 里 【冒 冕】</li>
<li>2.早——章 草 覃 （潭）卓（掉 罩）</li>
<li>3.临字旁——临 紧 坚 览 竖</li>
<li>4.虫——虽 独 虹 蛮 蛇</li>
<li>5.师字旁——师 归 帅 狮 筛【 注意 ⚠️：班 辨 不是这个偏旁】</li>
<li>6.临字底——临 象 （像 橡 蟓）【注意 ⚠️：免 不是这个偏旁】</li>
<li>7.刂——到 前 制 利 别</li>
<li>8.井字底——井 界 养 弗 肃【注意 ⚠️：渊 不是这个偏旁】</li>
</ul>
<p>23 k 口与川，字根稀</p>
<ul>
<li>1.口——中 说 后 如 事</li>
<li>2.川——训 圳 驯 钏 chuan 卅 sa</li>
<li>3.三竖——带 滞</li>
</ul>
<p>24 L 田甲方框四车力</p>
<ul>
<li>1.田——思 男 备 留 细 【界】</li>
<li>2.甲——鸭 押 闸 钾 匣</li>
<li>3.口——国 因 回 图 烟【面】</li>
<li>4.四——泗 德 罗 置 曼</li>
<li>5.车——军 转 连 载 库</li>
<li>6.力——为 动 加 务 厉</li>
<li>7.皿——血 益 温 盘 盖</li>
<li>8.曾字头——黑 默 熏 曾 增【柬】</li>
<li>9.四竖——舞</li>
</ul>
<p>25 M 山由贝，下框几</p>
<ul>
<li>1.山——岁 密 端 岛 峰</li>
<li>2.由——油 演 迪 届 邮【黄 笛】</li>
<li>3.贝——则 资 员 页 质</li>
<li>4.下框——同 高 内 制 央 【再 丹 刺 市 沛】</li>
<li>5.几——机 风 微 沉 凡</li>
<li>6.骨字头——滑 猾 髓 骷 髅</li>
</ul>
<h3 id="撇区"><a href="#撇区" class="headerlink" title="撇区"></a>撇区</h3><p>31 T 禾竹一撇双人立，反文条头共三一</p>
<ul>
<li>1.禾——和 科 香 乘 秦【注意 ⚠️：秉 不是这个偏旁】</li>
<li>2.竹字头——第 管 算 答 笔</li>
<li>3.丿——长 么 丢 千 升</li>
<li>4.双人旁——得 行 很 德 往</li>
<li>5.反文旁——教 做 政 数 收</li>
<li>6.条头——各 处 条 复 图 【夜】</li>
<li>7.每字头——每 旅 游 吃览</li>
</ul>
<p>32 R 白手看头三二斤</p>
<ul>
<li>1.白——的 原 激 怕 皆 【卑（牌 啤）】</li>
<li>2.手——拿 掰 摩 拳 掌</li>
<li>3.看头——看 拜 湃 掰 搿 【注意 ⚠️：着 不是这个偏旁】</li>
<li>4.斤——所 新 近 兵 丘</li>
<li>5.提手旁——把 提 抱 接 指 【牛】【注意 ⚠️：牛字旁 不是这个偏旁】</li>
<li>6.年字头——年 牛 气 制 舞</li>
<li>7.两撇——勿 匆 忽 杨 汤</li>
<li>8.后字头——后 派 殷 爪 瓜</li>
</ul>
<p>33 E 月彡乃用家衣底，爱头豹脚舟底部</p>
<ul>
<li>1.月——明 期 服 脑 望</li>
<li>2.曰——有 且 青 能 甫</li>
<li>3.彡——形 影 参 须 修</li>
<li>4.乃——及 仍 秀 孕 盈</li>
<li>5.用——通 拥 痛 勇 涌</li>
<li>6.家字底——家 啄 蒙 缘 遂 【象】【注意 ⚠️ 聚 不是这个偏旁】</li>
<li>7.衣字底——衣 农 裁 袭 袅</li>
<li>8.辰字底——展 良 辰 派 旅</li>
<li>9.爱字头——爱 受 摇 缓 浮</li>
<li>10.豹脚——貌 豹 霾 豺</li>
<li>11.舟底部——舟 搬 航 盘 船【注意 ⚠️ 丹 不是这个偏旁】</li>
</ul>
<p>34 W 人和八，祭登头</p>
<ul>
<li>1.人——会 内 论 欠 该</li>
<li>2.单人旁——他 们 作 体【段 追 舆 】【注意 ⚠️ 币 不是这个偏旁】</li>
<li>3.八——分 共 办 赛 商</li>
<li>4.登字头——登 瞪 凳 橙 癸【注意 ⚠️ 僚 不是这个偏旁】</li>
<li>5.祭字头——祭 察 蔡 擦 嚓</li>
</ul>
<p>35 Q 金勺缺点无尾鱼，犬旁留叉儿一点夕，氏无七</p>
<ul>
<li>1.金——鉴 鑫 鏖 銮 淦【注意 ⚠️ 釜 不是这个偏旁】</li>
<li>2.金字旁——销 钱 错 钟 针</li>
<li>3.勺字头——勺 包 勾 黎 【敖】【注意 ⚠️ 万 不是这个偏旁】</li>
<li>4.鱼字头——鱼 鲁 鲜 酥 蓟</li>
<li>5.犬旁——独 获 犯 狂 狱</li>
<li>6.叉缺点——义 更 史 区 交 【爽】</li>
<li>7.特殊一级简码：我</li>
<li>8.儿——无 元 见 说 先</li>
<li>9.夕——多 外 名 罗 梦</li>
<li>10.氏无七——氏 留 印 低 仰 【乐 卵 孵】</li>
<li>11.欠字头——久 欠 色 急 傲</li>
<li>12.炙字头——然 燃 炙【注意 ⚠️ 蔡 不是这个偏旁】</li>
<li>13.荒字底——荒 慌 流 硫 侃 【注意 ⚠️ 川 不是这个偏旁】</li>
</ul>
<h3 id="捺区"><a href="#捺区" class="headerlink" title="捺区"></a>捺区</h3><p>41 Y 言文方广在四一，高头一捺谁人去</p>
<ul>
<li>1.言——信 警 誉 誓 詹</li>
<li>2.言字旁——说 话 读 记 让</li>
<li>3.文——这 刘 齐 纹 斌</li>
<li>4.方——游 放 旅 防 房</li>
<li>5.广——度 底 府 店 扩</li>
<li>6.亡字头——夜 卒 玄 亡（亥 该 刻）</li>
<li>7.高头——高 就 京 熟 享</li>
<li>8.一点——主 良 匆 斥 啄</li>
<li>9.一捺——久 及 极 入 尺</li>
<li>10.谁人去——难 集 维 鹤 截 【注意 ⚠️ 主 圭 不是这个偏旁】</li>
</ul>
<p>42 U 立辛两点六门疒</p>
<ul>
<li>1.立——产 音 站 部 位</li>
<li>2.立字头——旁 榜 帝 商 滴</li>
<li>3.辛——辞 辨 辩 宰 辜</li>
<li>4.两点——习 匀 决 弱 尽</li>
<li>5.六——交（效 郊 胶 咬）滚 冥</li>
<li>6.门——们 间 问 闻 闹</li>
<li>7.疒——疾 病 痛 痒 疗</li>
<li>8.两点——着 弟 羊 尊 丫</li>
<li>9.将字旁——北（乘 乖） 将 状</li>
<li>10.普字头——平 普 丧 墙 善 半</li>
</ul>
<p>43 I 水旁兴头小倒立</p>
<ul>
<li>1.水——泉 冰 踏 浆 淼</li>
<li>2.三点水——没 法 活 海 深</li>
<li>3.永字旁——永 承 兆 求 拯</li>
<li>4.录字底——录 泰 隶 康 聚</li>
<li>5.学字头——学 觉 常 党 尝</li>
<li>6.兴字头——兴 举 应 光 晃</li>
<li>7.小——不 就 你 系 东 【步】</li>
</ul>
<p>44 O 火业头，四点米</p>
<ul>
<li>1.火——炎 灵 烟 伙 灰</li>
<li>2.业头——业 显 亚 壶 凿</li>
<li>3.亦字底——亦 变 弯 兼 嫌</li>
<li>4.四点底——然 点 照 热 杰</li>
<li>5.米——来 精 断 奥 粤<br>特殊一简：为</li>
</ul>
<p>45 P 之字军盖建道底，摘礻衤</p>
<ul>
<li>1.之——乏 泛 芝 贬 眨</li>
<li>2.宝盖头——家 实 定 它 安</li>
<li>3.军盖——学 军 写 农 劳</li>
<li>4.建字底——建 庭 延 键 挺</li>
<li>5.辶——这 过 还 道 进</li>
<li>6.摘礻衤——被 初 补 裤 裙 社 神 福 祝 礼</li>
</ul>
<h3 id="折区"><a href="#折区" class="headerlink" title="折区"></a>折区</h3><p>51 N 已半巳满不出己，左框折尸心和羽</p>
<ul>
<li>1.已——唯一一个不能组字的字根</li>
<li>2.巳——导 包 异 港 撰 【注意 ⚠️ 犯 仓 不是这个偏旁】</li>
<li>3.己——起 记 改 纪 凯</li>
<li>4.左框——巨 追 所 候 决 快 【鹿】</li>
<li>5.乙——甩 书 与 瓦 片 乜（nie）</li>
<li>6.尸——民 展 尺 尽 户</li>
<li>7.眉字头——声 馨 眉 媚 嵋</li>
<li>8.心——想 意 感 思 必</li>
<li>9.竖心旁——性 情 快 恭 添</li>
<li>10.羽——翻 翼 耀 翰 廖</li>
</ul>
<p>52 B 子耳了也框向上</p>
<ul>
<li>1.子——学 好 教 存 孙 【孑 孓】</li>
<li>2.耳——最 取 闻 敢 聂</li>
<li>3.却字旁——卫 报 却 节 迎</li>
<li>4.耳朵旁——都 那 部 郑 邮（在右）院 队 随 陈 阳（在左）</li>
<li>5.了——疗 辽 亨 哼【予 矛】</li>
<li>6.也——他 地 她 施 拖</li>
<li>7.下框——凶 出 函 离</li>
<li>8.卷子底——创 范 顾 卷 危</li>
<li>9.粼字旁——粼</li>
</ul>
<p>53 V 女刀九臼山朝西</p>
<ul>
<li>1.女——好 如 她 数 安</li>
<li>2.刀——分 解 照 切 超 【那】</li>
<li>3.九——丸 究 热 杂 仇</li>
<li>4.臼——搜 插 陷 毁 鼠</li>
<li>5.山朝西——雪 尹 庚 兼 肃</li>
<li>6.巢字头——巡 巢 瑙 缁 邋<br>特殊一级简码：发</li>
</ul>
<p>54 C 又巴马，丢矢矣</p>
<ul>
<li>1.又——对 度 报 受 变</li>
<li>2.巴——把 色 肥 爬 绝</li>
<li>3.马——吗 验 骂 冯 闯</li>
<li>4.矣字头——能 么 公 治 即 【离】【注意 ⚠️ 偶 不是这个偏旁】</li>
<li>5.勇字头——通 勇 涌 疑 凝【注意 ⚠️ 专 不是这个偏旁】</li>
<li>6.经字头——经 轻 劲 茎 氢<br>特殊一级简码：以</li>
</ul>
<p>55 X 慈母无心弓和比，幼无力【一级简码：经】</p>
<ul>
<li>1.母框——母（每 毒 敏 繁）贯（惯）毋</li>
<li>2.弓——第 强 张 弱 弗</li>
<li>3.匕——能 比 老 它 死 【曳】【注意 ⚠️ 戊 不是这个偏旁】</li>
<li>4.幻字旁——系 素 率 幻 玄</li>
<li>5.绞丝旁——经 给 线 丝 乡</li>
<li>6.缘字头——互 缘 蠡（li）</li>
</ul>
<p>五笔汉子的拆分原则</p>
<ul>
<li>我们先讲讲书写顺序.</li>
<li>在书写汉字时,讲究“先左后右,先上后下,先横后竖,先撇后捺,先内后外,先中间后两边,先进门后关门”等.</li>
</ul>
<p>书写顺序</p>
<p>例如:<br>“新”字取码的顺序应该是“立、木、斤”,不能取“木、立、斤”,也不能是“立、斤、木”.<br>“和”字取码的顺序应该是“禾、口”,不能取“口、禾”.</p>
<p>取大优先<br>取大优先指的是在各种可能的拆法中,保证按书写顺序拆出尽可能大的字根,以保证拆分出的字根数最少.</p>
<p>例如:<br>“适”可以拆分为“丿、古、辶”,还可以拆成“丿、十、古、辶”.哪一种是正确的呢?</p>
<p>根据取大优先原则,拆出的字根要尽可能大,而第二种拆法中的“十”,“口”两个字根可以合成为一个字根“古”,所以第一种拆法是正确的.</p>
<p>再比如除法中的“除”,可以拆分成“阝、八、禾”,或拆成“阝、八、丿、木”.</p>
<p>这时我们可以判断第一种是正确的,把“丿、木”合成为一个字根“禾”.</p>
<p>“世”字可以取为“一、凵、乙”,也可以取“甘、乙”.</p>
<p>兼顾直观<br>就是说在拆字时,尽量照顾字的直观性,一个笔划不能分割在两个字根中.</p>
<p>兼顾直观,在确认字根时,为了使字根的特征明显易辨,有时就要牺牲书写顺序禾取大优先原则.</p>
<p>例如:<br>“国”,如按书写顺序,其字根应是“冂、王、丶、一”,但这样编码不断有违该字的字源,也不能使字根“口”直观易辨.</p>
<p>为了直观,国字的正确拆分应该是“口、王、丶”.</p>
<p>能散不连<br>如果一个结构可以视作几个基础字根的散的关系,就不要认为是连的关系.</p>
<p>例如:<br>“主”字按取大优先,应该取“亠、土”,但根据此规则,只能取“丶、王”.</p>
<p>总之,拆分应兼顾几个方面的要求.一般来说,应当保证每次拆出最大的基本字根,在拆出字根的数目相同时,“散”比“连”优先,“连”比“交”优先.</p>
<p>能连不交<br>当一个字可以视作相连的几个字根,也可视作相交的几个字根时,我们认为,相连的情况是可取的.</p>
<p>天: 一 大 (两者是相连的) (正确)<br>天: 二 人 (两者是相交的) (错误)</p>
<p>五笔汉字的取码规则</p>
<p>1.键名汉字:王 目 禾 言 已<br>规则:所在键位<em>4 2.成字字根:五 戈 皿 小 九<br>规则:所在键位+第一笔+第二笔+(末笔) 3.单笔划:一 丨 丿 丶 乙<br>规则:所在键位</em>2+LL</p>
<p>4.一级简码（一简，共 25 个）<br>我（Q） 人（W） 有（E） 的（R） 和（T） 主（Y） 产（U） 不（I） 为（O） 这（P）<br>工（A） 要（S） 在（D） 地（F） 一（G） 上（H） 是（J） 中（K） 国（L）<br>经（X） 以（C） 发（V） 了（B） 民（N） 同（M）</p>
<ul>
<li><p>他们是使用频率极高的字，必须记住。“经发同和我以为，在人民中国这一主要工地上，有的是产不了”。</p>
</li>
<li><p>打法：打一次所在键位，然后按空格键。</p>
<p>5.二级简码、三级简码、全码：<br>为了提高录入速度，有些字的编码可以简化。如果一个字用两个字母键就可以打出（立 UU&#x2F;水 II&#x2F;五 GG），那么它叫做二级简码；</p>
</li>
</ul>
<p>如果一个字用三个字母键就可以打出（斤 RTT&#x2F;竹 TTG&#x2F;皿 LHN），那么它叫做三级简码;</p>
<p>汉字的全部编码叫做全码，全码最多四码，最少三码。</p>
<p>什么样的全码只有三码？</p>
<ul>
<li><p>只有两个笔画的成字字根如“十（FGH）&#x2F;厂（DGT）&#x2F;九（VTN）&#x2F;二（FGG）”；</p>
</li>
<li><p>只能拆成两部分的字。</p>
</li>
<li><p>只有一个笔画？那叫做单笔画，全码四码！</p>
<p>6.可拆分汉字</p>
</li>
<li><p>可拆成两个字根:改 京 仅<br>规则:字根 1+字根 2+识别码(全码 3 码)</p>
</li>
<li><p>可拆成三个字根:等 漏 仰<br>规则:字根 1+字根 2+字根 3+识别码</p>
</li>
<li><p>可拆成四个字根:毁 两 拿<br>规则:字根 1+字根 2+字根 3+字根 4<br>可拆成四个字根以上:幕 器 慧<br>规则:字根 1+字根 2+字根 3+最后一个字根</p>
</li>
</ul>
<p>末笔交叉识别码</p>
<p>Q:为什么设置识别码?<br>A:由于字根在组成汉字时,即使所使用的字根完全相同,如果排序的方式不同也会得到不同的汉字;</p>
<p>因此,五笔字型提出了末笔交叉识别码,它是有助于区别字根组合相同而字根排列位置相异的不同汉字的一种补充编码.</p>
<p>如果一个汉字可以拆成两个字根或三个字根,输入完他们所在的键位之后,如果汉字没有出现在候选窗当中,那么就需要加一个识别码.</p>
<p>比如:她&#x3D;女+也&#x3D;vb<br>但是:vb&#x3D;好,“她”识别码为 n<br>所以:vbn&#x3D;她</p>
<p>又如:票&#x3D;西+二+小&#x3D;sfi<br>但是 sfi&#x3D;标,“票”识别码为 u<br>所以:sfiu&#x3D;票</p>
<p>⚠️ 注意:下方的蓝色字为示例</p>
<p>前 300 常用字拆分</p>
<p>Q:为什么要练前 300 常用字?<br>A:因为它们很常用,这些字可以占到 65%的使用频率,打熟前 300 常用字,以后再练习打文章的时候也会更快.无论你的水平处于哪个层次,前 300 常用字一定要不断练习的.</p>
<p>识别码用浅蓝色表示(前 300 中有 20 个字需要打识别码)<br>对照字根图理解每个字的编码.</p>
<p>横区<br>G(20 个)</p>
<ul>
<li>一(g) –一级简码</li>
<li>开(ga)</li>
<li>形(gae)</li>
<li>到(gc) – 二级简码</li>
<li>天(gd)</li>
<li>表(ge)</li>
<li>于(gf)</li>
<li>五(gg) – 成字字根</li>
<li>下(gh)</li>
<li>正(ghd)–识别码 d</li>
<li>政(ght)</li>
<li>还(gip)</li>
<li>理(gj)</li>
<li>更(gjq)</li>
<li>事(gk)– 二级简码</li>
<li>现(gm)</li>
<li>两(gmww)</li>
<li>与(gn)– 二级简码</li>
<li>来(go)</li>
<li>平(gu,guh)</li>
</ul>
<p>F(20 个)</p>
<ul>
<li>地(f) –一级简码</li>
<li>支(fc)</li>
<li>动(fcl)</li>
<li>运(fcp)</li>
<li>去(fcu)–识别码 u</li>
<li>土(ffff)–键名汉子</li>
<li>二(fg)– 成字字根</li>
<li>干(fggh)– 成字字根</li>
<li>十(fgh)– 成字字根</li>
<li>直(fh)</li>
<li>起(fhn)</li>
<li>进(fj,fjp)– 二级简码</li>
<li>志(fn)</li>
<li>过(fp)</li>
<li>无(fq)</li>
<li>教(ftbt)</li>
<li>者(ftj)</li>
<li>都(ftjb)</li>
<li>老(ftx)</li>
</ul>
<p>D(11 个)</p>
<ul>
<li>在(d)–一级简码</li>
<li>大(dd)– 二级简码</li>
<li>压(dfy)</li>
<li>三(dg)– 成字字根</li>
<li>石(dgtg)– 成字字根</li>
<li>百(dj)</li>
<li>面(dm)</li>
<li>而(dmj)</li>
<li>成(dn)</li>
<li>克(dq)</li>
<li>原(dr)</li>
</ul>
<p>S(11 个)</p>
<ul>
<li>要(s)</li>
<li>极(se)</li>
<li>本(sg)</li>
<li>西(sghg)</li>
<li>相(sh)</li>
<li>想(shn)</li>
<li>可(sk)</li>
<li>机(sm)</li>
<li>林(ss)</li>
<li>样(su)</li>
<li>根(sve)</li>
</ul>
<p>A(11 个)</p>
<ul>
<li>工(a)</li>
<li>式(aa)</li>
<li>基(ad)</li>
<li>其(adw)</li>
<li>期(adwe)</li>
<li>革(af)</li>
<li>七(ag)</li>
<li>或(ak)</li>
<li>区(aq)</li>
<li>切(av)</li>
<li>共(aw)</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>优秀的博客或者简历</title>
    <url>/2019/03/20/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/%E4%BC%98%E7%A7%80%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%88%96%E8%80%85%E7%AE%80%E5%8E%86/</url>
    <content><![CDATA[<p>搜集了一些网上一些自己觉得优秀的web前端工程师的博客或者简历。</p>
<p><a href="http://www.flqin.com/">http://www.flqin.com</a><br><a href="https://congm.in/">https://congm.in</a></p>
<p><a href="https://lin-xin.gitee.io/">https://lin-xin.gitee.io/</a><br><a href="https://overreacted.io/">https://overreacted.io/</a><br><a href="http://jspang.com/">http://jspang.com/</a><br><a href="https://q.shanyue.tech/">https://q.shanyue.tech/</a></p>
]]></content>
  </entry>
  <entry>
    <title>前后端分离和接口规范</title>
    <url>/2021/01/03/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%92%8C%E6%8E%A5%E5%8F%A3%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h4 id="一、【前端经典面试题】前后端分离（说一说你理解的前后端分离？）"><a href="#一、【前端经典面试题】前后端分离（说一说你理解的前后端分离？）" class="headerlink" title="一、【前端经典面试题】前后端分离（说一说你理解的前后端分离？）"></a>一、【前端经典面试题】前后端分离（说一说你理解的前后端分离？）</h4><h5 id="1-对前后端分离的误解"><a href="#1-对前后端分离的误解" class="headerlink" title="1.对前后端分离的误解"></a>1.对前后端分离的误解</h5><p>在回答这个问题的时候不要钻到某个具体的技术 ，或者某个具体的框架上面 → 比如 ajax 异步请求、vue 或 react 等组件化的开发框架、再或者 rest 接口规范、API 接口数据约定等。<br>从某个具体的技术切入来回答对前后端分离的理解本身就是一种局限的看法，所以在回答这个问题的时候应该从以下几个方面展开。</p>
<h5 id="2-为什么要分离？"><a href="#2-为什么要分离？" class="headerlink" title="2.为什么要分离？"></a>2.为什么要分离？</h5><p>在以往的很长一段时间里，后端开发才是开发团队里的核心，前端开发往往仅由一小撮人甚至交给后端人员兼任。比如 JSP 开发，大部分是前后端高耦合的，前后端代码放在一起写，各种繁琐的套模板。这种开发方式在以前互联网服务不那么繁荣，web 化趋势还不那么明显的年代发挥着巨大作用。随着各种社会服务的信息化程度加深，前端需要展示的内容越来越复杂（比如淘宝页面），JSP 这种套模板的技术（仅仅依靠 html、css、js、jq 等技术的堆积来完成一个复杂的页面展示也变得非常繁杂）再也无法高效的开发。究其本质原因：<strong>前端开发没有像后端开发那样实现工程化、模块化、可复用化的思想。</strong><br>所以就会出现前后端开发不协调、效率低、扯皮的问题，这很不利于项目开发。因此项目管理者就想办法来解决这种问题，如何解决？→<strong>解耦</strong>。在软件领域，任何复杂的问题面前，高内聚、低耦合这种原则几乎总是能见效。所以前后端分离开发出现了，把前端开发的责任从后端开发人员身上拿掉，给前端开发工程师一个单独的岗位和责任领域，将前端也工程化、模块化、项目化。这才是前后端分离开发最开始的来源。这些与 vue、react 框架没有什么关系，<strong>它们充其量只是一种具体实现方式而已。从本质上来看，前后端分离并不是一个技术问题，而是一个工程化考量和项目管理的问题。</strong></p>
<h5 id="3-什么是前后端分离？"><a href="#3-什么是前后端分离？" class="headerlink" title="3.什么是前后端分离？"></a>3.什么是前后端分离？</h5><p>在学习前端开发的时候，会发现前端开发的知识非常琐碎，前端往往是靠东平西凑（面向复制粘贴变成）来试图完成页面效果，开发过程没有 java 后端开发有逻辑，代码也很难管理。后端开发有各种各样的工具类、jar 包、maven 依赖、spring 框架等，具有工程化模块化思维，可以满足长期演进和迭代的目标。而前端那时候并没有，所以 vue.js 和 react.js 等这些前端框架的出现，它们从本质上打破了以前前端开发的游戏规则，这就是前端开发组件化框架（也叫前端开发工程化框架）。这些框架出现后，前端开发也开始像后端一样，遵循一套体系来进行约束性的开发，越来越工程化、组件化、迭代化，变得有章可循。<strong>前后端分离核心思想是前端 HTML 页面通过 AJAX 调用后端的 RESTFUL API 接口并使用 JSON 数据进行交互。</strong></p>
<h5 id="4-如何做到前后端分离？"><a href="#4-如何做到前后端分离？" class="headerlink" title="4.如何做到前后端分离？"></a>4.如何做到前后端分离？</h5><p>从软件开发的四大步说起：设计、开发、测试、部署，真正的前后端分离需要渗透到以上的每一步中。<br><strong>第一阶段：设计阶段。</strong> 设计阶段的第一个层面是系统设计，后端系统设计包括后端架构：数据库、中间件、缓存等架构的设计，主要是考虑性能、容量、扩展性、可维护性。前端也应该如此，尤其是当一个网站页面多、复杂的时候，前端架构就也需要做好充分的规划和准备，以满足长期可演进、可迭代的目标。设计阶段的第二个层面是接口设计，前后端交互是通过接口来实现的，所以 model 层面上的接口约定也就极其重要，包括：接口的请求方式、数据类型、返回数据格式等。接口设计一定要评审到位，避免前后端开发人员因为某个没有约定好的接口扯来扯去。<br><strong>第二阶段：开发阶段。</strong> 前后端开发人员按照先前约定好的接口独立开发，互相透明（一旦出现扯皮现象，那就不算是严格独立的前后端开发，因为必定会有一方需要被迫妥协，去修改代码，这就算是还未完全实现解耦）。前端开发用来测试的数据都是从 mock 中模拟出来的，并不是从后端拿的；而后端开发仅提供一套接口，按照先前提供的评审好的接口约定来提供数据，这一套接口可以提供给很多的前端使用，比如 web 网页、h5 页面、app、微信小程序等。<br><strong>第三阶段：测试阶段。</strong> 要保证前后端独立可测试，前端测试包括：页面、跳转、展示、输入、传参、响应等；后端则包括：数据接口的提供、数据格式、校验、异常、数据一致性、权限问题等。<br><strong>第四阶段：部署阶段。</strong> 要保证前后端独立可部署。（JSP 时代前端 html 页面、css 样式、js 效果等都是由后台驱动，即前端都是塞到后端中，然后项目部署。当前端人员需要修改、发版本的时候就需要去求着后端人员帮忙）。前后端分离之后，就不再这样了，前后端发布上线可以完全独立，互相透明。</p>
<h5 id="5-不要盲目使用该技术"><a href="#5-不要盲目使用该技术" class="headerlink" title="5.不要盲目使用该技术"></a>5.不要盲目使用该技术</h5><p>前后端分离确实是很合适复杂项目。但是不能为了做前后端分离而做前后端分离。一个完全的前后端分离需要相当的人力成本、开发成本、工具成本、部署成本等。所以小项目小团队就不合适这种前后端开发，一旦某一点做的不彻底，它就会带来很多负担，所以并不是所有的项目都适合前后端分离。</p>
<h4 id="二、面试官：你们前后端分离的接口规范是什么？"><a href="#二、面试官：你们前后端分离的接口规范是什么？" class="headerlink" title="二、面试官：你们前后端分离的接口规范是什么？"></a>二、面试官：你们前后端分离的接口规范是什么？</h4><h5 id="一、为何要分离"><a href="#一、为何要分离" class="headerlink" title="一、为何要分离"></a>一、为何要分离</h5><p><img src="https://www.daykalif.com/blog_img/struts_mvc.png" alt="struts_mvc"></p>
<p>1、前端开发重度依赖开发环境，开发效率低。<br>这种架构下，前后端协作有两种模式:</p>
<ul>
<li>一种是前端写 demo，写好后，让后端去套模板 。</li>
<li>另一种协作模式是前端负责浏览器端的所有开发和服务器端的 View 层模板开发，支付宝是这种模式。</li>
</ul>
<p>2、前后端职责依旧纠缠不清。<br>还有一个很大的灰色地带是 Controller，页面路由等功能本应该是前端最关注的，但却是由后端来实现。</p>
<p>3、对前端发挥的局限。</p>
<blockquote>
<p>代码重构的方向：</p>
</blockquote>
<p>关注点分离<br>职责分离<br>对的人做对的事<br>更好的共建模式<br>快速的反应变化</p>
<h5 id="二、开发流程"><a href="#二、开发流程" class="headerlink" title="二、开发流程"></a>二、开发流程</h5><p>1、后端编写和维护接口文档，在 API 变化时更新接口文档<br>2、后端根据接口文档进行接口开发<br>3、前端根据接口文档进行开发 + Mock 平台<br>4、开发完成后联调和提交测试<br>5、Mock 服务器根据接口文档自动生成 Mock 数据，实现了接口文档即 API：</p>
<p><img src="https://www.daykalif.com/blog_img/api.png" alt="api"></p>
<h5 id="三、接口规范-V1-0-0"><a href="#三、接口规范-V1-0-0" class="headerlink" title="三、接口规范 V1.0.0"></a>三、接口规范 V1.0.0</h5><h6 id="1-规范原则"><a href="#1-规范原则" class="headerlink" title="1.规范原则"></a>1.规范原则</h6><p>接口返回数据即显示：前端仅做渲染逻辑处理；<br>渲染逻辑禁止跨多个接口调用；<br>前端关注交互、渲染逻辑，尽量避免业务逻辑处理的出现；<br>请求响应传输数据格式：JSON，JSON 数据尽量简单轻量，避免多级 JSON 的出现；</p>
<h6 id="2-基本格式"><a href="#2-基本格式" class="headerlink" title="2.基本格式"></a>2.基本格式</h6><blockquote>
<p>1.请求基本格式</p>
</blockquote>
<p>GET 请求、POST 请求必须包含 key 为 body 的入参，所有请求数据包装为 JSON 格式，并存放到入参 body 中，示例如下：</p>
<p>1).GET 请求：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xxx/login?body=&#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;password&quot;</span>:<span class="string">&quot;123456&quot;</span>,<span class="string">&quot;captcha&quot;</span>:<span class="string">&quot;scfd&quot;</span>,<span class="string">&quot;rememberMe&quot;</span>:<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure>

<p>2).POST 请求：<br><img src="https://www.daykalif.com/blog_img/post.png" alt="post"></p>
<blockquote>
<p>2.响应基本格式</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">code</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&quot;success&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>1).code : 请求处理状态</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">200</span>: 请求处理成功</span><br><span class="line"><span class="number">500</span>: 请求处理失败</span><br><span class="line"><span class="number">401</span>: 请求未认证，跳转登录页</span><br><span class="line"><span class="number">406</span>: 请求未授权，跳转未授权提示页</span><br></pre></td></tr></table></figure>

<p>2).data.message: 请求处理消息</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">code=<span class="number">200</span> 且 data.<span class="property">message</span>=“success”: 请求处理成功</span><br><span class="line">code=<span class="number">200</span> 且 data.<span class="property">message</span>!=“success”: 请求处理成功, 普通消息提示：message内容</span><br><span class="line">code=<span class="number">500</span>: 请求处理失败，警告消息提示：message内容</span><br></pre></td></tr></table></figure>

<blockquote>
<p>3.响应实体格式</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">code</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">        <span class="attr">entity</span>: &#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;XXX&quot;</span>,</span><br><span class="line">            <span class="attr">code</span>: <span class="string">&quot;XXX&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// data.entity: 响应返回的实体数据</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>4.响应列表格式</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">code</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">        <span class="attr">list</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&quot;XXX&quot;</span>,</span><br><span class="line">                <span class="attr">code</span>: <span class="string">&quot;XXX&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&quot;XXX&quot;</span>,</span><br><span class="line">                <span class="attr">code</span>: <span class="string">&quot;XXX&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// data.list: 响应返回的列表数据</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>5.响应分页格式</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">code</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">recordCount</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">        <span class="attr">totalCount</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">pageNo</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">pageSize</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="attr">list</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&quot;XXX&quot;</span>,</span><br><span class="line">                <span class="attr">code</span>: <span class="string">&quot;H001&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&quot;XXX&quot;</span>,</span><br><span class="line">                <span class="attr">code</span>: <span class="string">&quot;H001&quot;</span></span><br><span class="line">            &#125; ],</span><br><span class="line">        <span class="attr">totalPage</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// data.recordCount: 当前页记录数</span></span><br><span class="line"><span class="comment">// data.totalCount: 总记录数</span></span><br><span class="line"><span class="comment">// data.pageNo: 当前页码</span></span><br><span class="line"><span class="comment">// data.pageSize: 每页大小</span></span><br><span class="line"><span class="comment">// data.totalPage: 总页数</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>6.特殊内容规范</p>
</blockquote>
<p>1).下拉框、复选框、单选框</p>
<p>由后端接口统一逻辑判定是否选中，通过 isSelect 标示是否选中，示例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">code</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">        <span class="attr">list</span>: [&#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;XXX&quot;</span>,</span><br><span class="line">            <span class="attr">code</span>: <span class="string">&quot;XXX&quot;</span>,</span><br><span class="line">            <span class="attr">isSelect</span>: <span class="number">1</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;XXX&quot;</span>,</span><br><span class="line">            <span class="attr">code</span>: <span class="string">&quot;XXX&quot;</span>,</span><br><span class="line">            <span class="attr">isSelect</span>: <span class="number">0</span></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 禁止下拉框、复选框、单选框判定选中逻辑由前端来处理，统一由后端逻辑判定选中返回给前端展示；</span></span><br></pre></td></tr></table></figure>

<p>2).Boolean 类型</p>
<p>关于 Boolean 类型，JSON 数据传输中一律使用 1&#x2F;0 来标示，1 为是&#x2F;True，0 为否&#x2F;False；</p>
<p>3).日期类型</p>
<p>关于日期类型，JSON 数据传输中一律使用字符串，具体日期格式因业务而定；</p>
<p>参考文档：<br><a href="https://www.cnblogs.com/shijianblog/p/12579410.html">https://www.cnblogs.com/shijianblog/p/12579410.html</a><br><a href="https://blog.csdn.net/aixuexidemomo/article/details/103207688">https://blog.csdn.net/aixuexidemomo/article/details/103207688</a></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>English英语语法</title>
    <url>/2021/03/28/%E8%8B%B1%E8%AF%AD/English%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h2 id="第一讲：语序和五种基本句式"><a href="#第一讲：语序和五种基本句式" class="headerlink" title="第一讲：语序和五种基本句式"></a>第一讲：语序和五种基本句式</h2><p>He learns English every day.<br>他每天学习英语。</p>
<p>Nothing is impossible to a willing heart.<br>有志者事竟成。</p>
<h3 id="英语五种基本句式"><a href="#英语五种基本句式" class="headerlink" title="英语五种基本句式"></a>英语五种基本句式</h3><p>主语：动作的主体<br>谓语：主体执行的动作<br>系动词：起到联系作用的动词（连接前面的主语和表语）<br>表语：描述主语的性质、特点、位置的词<br>宾语：动作执行的对象<br>间宾：通常是人<br>直宾：通常是物<br>宾补：当宾语不能完全说明谓语执行的对象，执行的对象结果是什么呢？需要用宾补来进行补充说明宾语</p>
<h4 id="基本句式一：Subject（主语）-Verb（谓语）"><a href="#基本句式一：Subject（主语）-Verb（谓语）" class="headerlink" title="基本句式一：Subject（主语）+ Verb（谓语）"></a>基本句式一：Subject（主语）+ Verb（谓语）</h4><p>1.The universe remains.<br>宇宙长存。</p>
<h4 id="基本句式二：S（主语）-L-V（系动词）-P（表）"><a href="#基本句式二：S（主语）-L-V（系动词）-P（表）" class="headerlink" title="基本句式二：S（主语）+ L.V（系动词）+ P（表）"></a>基本句式二：S（主语）+ L.V（系动词）+ P（表）</h4><p>1.The food is delicious.<br>这个食物很好吃。</p>
<h4 id="基本句式三：Subject（主语）-Verb（谓语）-Object（宾语）"><a href="#基本句式三：Subject（主语）-Verb（谓语）-Object（宾语）" class="headerlink" title="基本句式三：Subject（主语）+ Verb（谓语）+ Object（宾语）"></a>基本句式三：Subject（主语）+ Verb（谓语）+ Object（宾语）</h4><p>1.He took his bag and left.<br>他拿着书包离开了。</p>
<h4 id="基本句式四：Subject（主语）-Verb（谓语）-I-o（间接宾语）-D-o（直接宾语）"><a href="#基本句式四：Subject（主语）-Verb（谓语）-I-o（间接宾语）-D-o（直接宾语）" class="headerlink" title="基本句式四：Subject（主语）+ Verb（谓语）+ I.o（间接宾语）+ D.o（直接宾语）"></a>基本句式四：Subject（主语）+ Verb（谓语）+ I.o（间接宾语）+ D.o（直接宾语）</h4><p>1.Her father bought her a dictionary.<br>她爸爸给她买了一本词典。</p>
<h4 id="基本句式五：Subject（主语）-Verb（谓语）-Object（宾语）-C（宾补）"><a href="#基本句式五：Subject（主语）-Verb（谓语）-Object（宾语）-C（宾补）" class="headerlink" title="基本句式五：Subject（主语）+ Verb（谓语）+ Object（宾语）+ C（宾补）"></a>基本句式五：Subject（主语）+ Verb（谓语）+ Object（宾语）+ C（宾补）</h4><p>1.We made him our monitor.<br>我们选他当班长。</p>
<h2 id="第二讲：be动词的形式和用法"><a href="#第二讲：be动词的形式和用法" class="headerlink" title="第二讲：be动词的形式和用法"></a>第二讲：be动词的形式和用法</h2><h3 id="Be动词的形式：（共8种）"><a href="#Be动词的形式：（共8种）" class="headerlink" title="Be动词的形式：（共8种）"></a>Be动词的形式：（共8种）</h3><p>【动词原型】：be<br>【一般现在时时态的be动词】：am，is（使用在单数主语的后面），are（使用在复数主语的后面）<br>【过去时态的be动词】：was（使用在单数主语的后面），were（使用在复数主语的后面）<br>【be动词的现在分词】：being<br>【be动词的过去分词】：been</p>
<p>1.The man is back.<br>那个男人回来了。</p>
<p>2.They are back.<br>他们回来了。</p>
<p>3.He was back.<br>他过去回来了。</p>
<p>4.They were back.<br>他们过去回来了。</p>
<p>5.They have been back.<br>他们已经回来了。</p>
<h3 id="be动词的用法：【起到联系的作用，联系前面的主语和后面的补足语成分（名词、形容词、地点副词或短语）】"><a href="#be动词的用法：【起到联系的作用，联系前面的主语和后面的补足语成分（名词、形容词、地点副词或短语）】" class="headerlink" title="be动词的用法：【起到联系的作用，联系前面的主语和后面的补足语成分（名词、形容词、地点副词或短语）】"></a>be动词的用法：【起到联系的作用，联系前面的主语和后面的补足语成分（名词、形容词、地点副词或短语）】</h3><p>后面接名词、形容词、地点副词或短语作补足语。</p>
<p>1.The man is a teacher.</p>
<p>2.Mary’s new dresses are colorful.</p>
<p>3.My mother was in the kitchen.</p>
<h3 id="Be动词的练习："><a href="#Be动词的练习：" class="headerlink" title="Be动词的练习："></a>Be动词的练习：</h3><p>1.他们是老师。（they,teachers）【现在时】<br>They are teachers.</p>
<p>2.他以前是一名老师。（he,a teacher,before）【过去时】<br>He was a teacher before.</p>
<p>3.他已经当了3年的老师。（for 3 years）【完成时】<br>He has been a teacher for 3 years.</p>
<h2 id="第三讲：Be动词的否定-提问-回答："><a href="#第三讲：Be动词的否定-提问-回答：" class="headerlink" title="第三讲：Be动词的否定&#x2F;提问&#x2F;回答："></a>第三讲：Be动词的否定&#x2F;提问&#x2F;回答：</h2><h3 id="Be动词的否定"><a href="#Be动词的否定" class="headerlink" title="Be动词的否定"></a>Be动词的否定</h3><p>在am，is，are，was，were后面加not.<br>缩略式 am not，isn’t，aren’t，wasn’t，weren’t</p>
<p>【现在时】：<br>1.The man isn’t back.<br>2.I am not back.<br>3.They aren’t back.</p>
<p>【过去时】：<br>4.He wasn’t back.<br>5.They weren’t back.</p>
<p>【使用be动词提问和回答】</p>
<ul>
<li><p>Is he a teacher?</p>
</li>
<li><p>Yes,he is.&#x2F;No,he isn’t.</p>
</li>
<li><p>Are you a teacher?</p>
</li>
<li><p>Yes,I am.&#x2F;No,I am not.</p>
</li>
<li><p>Were they teachers?</p>
</li>
<li><p>Yes,they were.&#x2F;No,they weren’t.</p>
</li>
</ul>
<h3 id="Be动词的练习：-1"><a href="#Be动词的练习：-1" class="headerlink" title="Be动词的练习："></a>Be动词的练习：</h3><p>1.他是医生吗？（doctor）<br>Is he a doctor?<br>不，他不是。<br>No,he isn’t.</p>
<p>2.他们昨天在教室吗？（yesterday,classroom）<br>Were they in the classroom yesterday?<br>是的，他们在。<br>Yes,they were.<br>不，他们不在。<br>no,they weren’t.</p>
<p>3.他们昨天不在教室。<br>They weren’t in the classroom yesterday.</p>
]]></content>
  </entry>
  <entry>
    <title>【原创】桌面端应用开发之ELECTRON</title>
    <url>/2022/02/19/%E6%A1%8C%E9%9D%A2%E7%AB%AF/%E3%80%90%E5%8E%9F%E5%88%9B%E3%80%91%E6%A1%8C%E9%9D%A2%E7%AB%AF%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E4%B9%8BELECTRON/</url>
    <content><![CDATA[<p>视频教程：<br><a href="https://www.bilibili.com/video/BV1Wo4y1X7cg">https://www.bilibili.com/video/BV1Wo4y1X7cg</a></p>
<p>#1. 简介</p>
<ul>
<li><a href="https://www.electronjs.org/">官网</a></li>
<li>Electron 是由 GitHub 众多开发者开发的一个开源项目，能够使用 JavaScript，HTML 和 CSS 构建跨平台的桌面应用程序</li>
</ul>
<h2 id="electron-基本简介"><a href="#electron-基本简介" class="headerlink" title="electron 基本简介"></a>electron 基本简介</h2><p>使用 JavaScript，HTML 和 CSS 构建跨平台的桌面应用程序</p>
<h3 id="比你想象的更简单："><a href="#比你想象的更简单：" class="headerlink" title="比你想象的更简单："></a>比你想象的更简单：</h3><p>如果你可以建一个网站，你就可以建一个桌面应用程序。Electron 是一个使用 JavaScript，Html 和 CSS 等 web 技术创建原生程序的框架，它负责比较难搞的部分，你只需把精力放在你的应用的核心上即可。</p>
<h3 id="Web-技术："><a href="#Web-技术：" class="headerlink" title="Web 技术："></a>Web 技术：</h3><p>Electron 基于 Chromium 和 Nodejs，让你可以使用 HTML，CSS 和 JavaScript 构建应用。</p>
<h3 id="开源："><a href="#开源：" class="headerlink" title="开源："></a>开源：</h3><p>Electron 是一个由 github 及众多贡献者组成的活跃社区共同维护的开源项目。</p>
<h3 id="跨平台："><a href="#跨平台：" class="headerlink" title="跨平台："></a>跨平台：</h3><p>Electron 兼容 Mac、Windows、Liunx，可以构建出三个平台的应用程序。</p>
<h2 id="为什么选择-electron？"><a href="#为什么选择-electron？" class="headerlink" title="为什么选择 electron？"></a>为什么选择 electron？</h2><ul>
<li><p>Electron 可以让你使用纯 JavaScript 调用丰富的原生 APIs 来创建桌面应用。你可以把它看作是专注于桌面应用。</p>
</li>
<li><p>在 PC 端桌面应用开发中，nwjs 和 electron 都是可选的方案，他们都是基于 chromium 和 Node 的结合体，而 electron 相对而言是更好的选择方案，它的社区相对比较活跃，bug 比较少，文档相对利索简洁。</p>
</li>
<li><p>electron 相对来说比 nwjs 靠谱。有一堆成功的案例：Atom 编辑器，Visual Studio Code， WordPress 等等…</p>
</li>
<li><p>Node.js 的所以内置模块都在 Electron 中可用</p>
</li>
</ul>
<h1 id="2-五分钟快速上手"><a href="#2-五分钟快速上手" class="headerlink" title="2. 五分钟快速上手"></a>2. 五分钟快速上手</h1><p>官网快速上手：<br><a href="https://www.electronjs.org/zh/docs/latest/tutorial/quick-start">https://www.electronjs.org/zh/docs/latest/tutorial/quick-start</a></p>
<h2 id="2-1-安装-electron"><a href="#2-1-安装-electron" class="headerlink" title="2.1 安装 electron"></a>2.1 安装 electron</h2><p>初始化 package.json 文件</p>
<ul>
<li>npm init</li>
</ul>
<p>安装 electron</p>
<ul>
<li>cnpm I electron –S</li>
</ul>
<h2 id="2-2-配置为入口文件"><a href="#2-2-配置为入口文件" class="headerlink" title="2.2 配置为入口文件"></a>2.2 配置为入口文件</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;electron-demo&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;main&quot;</span>: <span class="string">&quot;main.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;start&quot;</span>: <span class="string">&quot;electron .&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>,</span><br><span class="line">  <span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;electron&quot;</span>: <span class="string">&quot;^8.3.0&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-3-创建-main-js-文件"><a href="#2-3-创建-main-js-文件" class="headerlink" title="2.3 创建 main.js 文件"></a>2.3 创建 main.js 文件</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> electron = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);</span><br><span class="line"><span class="comment">// 控制应用程序的事件生命周期。</span></span><br><span class="line"><span class="keyword">const</span> app = electron.<span class="property">app</span>;</span><br><span class="line"><span class="comment">// 当 Electron 完成初始化时，触发一次</span></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&quot;ready&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">new</span> electron.<span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">300</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="2-4-创建窗口"><a href="#2-4-创建窗口" class="headerlink" title="2.4 创建窗口"></a>2.4 创建窗口</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">on</span>(<span class="string">&quot;ready&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> mainWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">500</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  mainWindow.<span class="title function_">loadFile</span>(<span class="string">&quot;./index.html&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="3-自动刷新页面"><a href="#3-自动刷新页面" class="headerlink" title="3. 自动刷新页面"></a>3. 自动刷新页面</h1><ul>
<li><p>安装插件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cnpm install --save-dev electron-reloader</span><br></pre></td></tr></table></figure>
</li>
<li><p>在入口引入插件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> reloader = <span class="built_in">require</span>(<span class="string">&quot;electron-reloader&quot;</span>);</span><br><span class="line"><span class="title function_">reloader</span>(<span class="variable language_">module</span>);</span><br></pre></td></tr></table></figure>

<p><strong>注意 ⚠️：</strong> 12 版本之后会报 Uncaught TypeError: Cannot read properties of undefined (reading ‘BrowserWindow’),因为 12 版本更新的时候废弃了 remote。</p>
<p>网上评论解决方式：【未尝试成功】</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">main.<span class="property">js</span> 加两行代码</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;@electron/remote/main&#x27;</span>).<span class="title function_">initialize</span>()</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;@electron/remote/main&#x27;</span>).<span class="title function_">enable</span>(mainWindow.<span class="property">webContents</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">index.<span class="property">js</span> 改第一行代码</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">BrowserWindow</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@electron/remote&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="4-主进程和渲染进程"><a href="#4-主进程和渲染进程" class="headerlink" title="4. 主进程和渲染进程"></a>4. 主进程和渲染进程</h1><p>Electron 运行 <code>package.json</code> 的 <code>main</code> 脚本的进程被称为<strong>主进程</strong>。 在主进程中运行的脚本通过创建 web 页面来展示用户界面。 一个 Electron 应用总是有且只有一个主进程。</p>
<p>由于 Electron 使用了 Chromium 来展示 web 页面，所以 Chromium 的多进程架构也被使用到。 每个 Electron 中的 web 页面运行在它的叫<strong>渲染进程</strong>的进程中。</p>
<p>在普通的浏览器中，web 页面无法访问操作系统的原生资源。 然而 Electron 的用户在 Node.js 的 API 支持下可以在页面中和操作系统进行一些底层交互。</p>
<p>ctrl+shift+i 打开渲染进程调试</p>
<p>默认打开调试</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">on</span>(<span class="string">&quot;ready&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> mainWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">500</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  mainWindow.<span class="title function_">loadFile</span>(<span class="string">&quot;./index.html&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> mainWindow2 = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">500</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  mainWindow.<span class="property">webContents</span>.<span class="title function_">openDevTools</span>();</span><br><span class="line"></span><br><span class="line">  mainWindow2.<span class="title function_">loadFile</span>(<span class="string">&quot;./index2.html&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="5-自定义原生菜单"><a href="#5-自定义原生菜单" class="headerlink" title="5. 自定义原生菜单"></a>5. 自定义原生菜单</h1><h2 id="5-1-自定义菜单"><a href="#5-1-自定义菜单" class="headerlink" title="5.1 自定义菜单"></a>5.1 自定义菜单</h2><p>详细文档：<a href="https://www.electronjs.org/docs/api/menu">https://www.electronjs.org/docs/api/menu</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> electron = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; app, <span class="title class_">Menu</span> &#125; = electron;</span><br><span class="line"><span class="keyword">const</span> template = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">label</span>: <span class="string">&quot;文件&quot;</span>,</span><br><span class="line">    <span class="attr">submenu</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">label</span>: <span class="string">&quot;新建窗口&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">label</span>: <span class="string">&quot;编辑&quot;</span>,</span><br><span class="line">    <span class="attr">submenu</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">label</span>: <span class="string">&quot;新建窗口&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> menu = <span class="title class_">Menu</span>.<span class="title function_">buildFromTemplate</span>(template);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Menu</span>.<span class="title function_">setApplicationMenu</span>(menu);</span><br></pre></td></tr></table></figure>

<h2 id="5-2-给菜单定义点击事件"><a href="#5-2-给菜单定义点击事件" class="headerlink" title="5.2 给菜单定义点击事件"></a>5.2 给菜单定义点击事件</h2><p>1、点击打开新窗口</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">submenu</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">label</span>: <span class="string">&quot;新建窗口&quot;</span>,</span><br><span class="line">    <span class="attr">click</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> newMainWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">        <span class="attr">width</span>: <span class="number">300</span>,</span><br><span class="line">        <span class="attr">height</span>: <span class="number">300</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      newMainWindow.<span class="title function_">loadFile</span>(<span class="string">&quot;./new.html&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<p>2、点击打开浏览器</p>
<p><code>shell</code> 模块提供了集成其他桌面客户端的关联功能.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">BrowserWindow</span>, <span class="title class_">Menu</span>, shell &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> template = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">label</span>: <span class="string">&quot;文件&quot;</span>,</span><br><span class="line">    <span class="attr">submenu</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">label</span>: <span class="string">&quot;文件1&quot;</span>,</span><br><span class="line">        <span class="title function_">click</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="comment">// 点击打开新窗口</span></span><br><span class="line">          <span class="keyword">const</span> mainWindow2 = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">            <span class="attr">width</span>: <span class="number">600</span>,</span><br><span class="line">            <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">          &#125;);</span><br><span class="line"></span><br><span class="line">          mainWindow2.<span class="title function_">loadFile</span>(<span class="string">&quot;./index.html&quot;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">label</span>: <span class="string">&quot;csdn&quot;</span>,</span><br><span class="line">    <span class="title function_">click</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 点击打开浏览器</span></span><br><span class="line">      shell.<span class="title function_">openExternal</span>(<span class="string">&quot;https://www.csdn.net/&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<h2 id="5-3-抽离菜单定义"><a href="#5-3-抽离菜单定义" class="headerlink" title="5.3 抽离菜单定义"></a>5.3 抽离菜单定义</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">BrowserWindow</span>, <span class="title class_">Menu</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> template = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">label</span>: <span class="string">&quot;文件&quot;</span>,</span><br><span class="line">    <span class="attr">submenu</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">label</span>: <span class="string">&quot;新建窗口&quot;</span>,</span><br><span class="line">        <span class="attr">click</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> newMainWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">            <span class="attr">width</span>: <span class="number">300</span>,</span><br><span class="line">            <span class="attr">height</span>: <span class="number">300</span>,</span><br><span class="line">          &#125;);</span><br><span class="line">          newMainWindow.<span class="title function_">loadFile</span>(<span class="string">&quot;./new.html&quot;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">label</span>: <span class="string">&quot;编辑&quot;</span>,</span><br><span class="line">    <span class="attr">submenu</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">label</span>: <span class="string">&quot;新建窗口&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> menu = <span class="title class_">Menu</span>.<span class="title function_">buildFromTemplate</span>(template);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Menu</span>.<span class="title function_">setApplicationMenu</span>(menu);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&quot;./menu&quot;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="打开调式"><a href="#打开调式" class="headerlink" title="打开调式"></a>打开调式</h4><p>mainWindow.webContents.openDevTools()</p>
<h2 id="5-4-自定义顶部菜单"><a href="#5-4-自定义顶部菜单" class="headerlink" title="5.4 自定义顶部菜单"></a>5.4 自定义顶部菜单</h2><ul>
<li><p>通过 frame 创建无边框窗口</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mainWindow = <span class="keyword">new</span> electron.<span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">  <span class="attr">frame</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>自定义窗口</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;custom-menu&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>新建窗口<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>关于我们<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.custom-menu</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.custom-menu</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.custom-menu</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加-webkit-app-region: drag;实现拖拽</p>
</li>
</ul>
<h2 id="5-5-点击创建新窗口"><a href="#5-5-点击创建新窗口" class="headerlink" title="5.5 点击创建新窗口"></a>5.5 点击创建新窗口</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// html</span></span><br><span class="line">&lt;li <span class="keyword">class</span>=<span class="string">&quot;new-window&quot;</span>&gt;新建窗口&lt;/li&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// js</span></span><br><span class="line"><span class="comment">// remote 通过remote使用主进程的方法</span></span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  <span class="attr">remote</span>: &#123; <span class="title class_">BrowserWindow</span> &#125;,</span><br><span class="line">&#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> newWindow = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.new-window&quot;</span>);</span><br><span class="line">newWindow.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">300</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>能够在 html 中使用 node 方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mainWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">  <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">500</span>,</span><br><span class="line">  <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">    <span class="comment">// 开启node模块</span></span><br><span class="line">    <span class="attr">nodeIntegration</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 开启remote模块</span></span><br><span class="line">    <span class="attr">enableRemoteModule</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="5-6-点页面打开浏览器"><a href="#5-6-点页面打开浏览器" class="headerlink" title="5.6 点页面打开浏览器"></a>5.6 点页面打开浏览器</h2><ul>
<li><p>html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;a1&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://www.itheima.com&quot;</span>&gt;</span>打开浏览器<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; shell &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> allA = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"></span><br><span class="line">allA.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  item.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">    shell.<span class="title function_">openExternal</span>(item.<span class="property">href</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="6-打开对话框读取文件"><a href="#6-打开对话框读取文件" class="headerlink" title="6. 打开对话框读取文件"></a>6. 打开对话框读取文件</h1><h2 id="6-1-读取文件"><a href="#6-1-读取文件" class="headerlink" title="6.1 读取文件"></a>6.1 读取文件</h2><ul>
<li><p>定义点击事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;button onclick=<span class="string">&quot;openFile()&quot;</span>&gt;打开&lt;/button&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>定义事件函数</p>
<p>打开对话框文档：<a href="https://www.electronjs.org/docs/api/dialog">https://www.electronjs.org/docs/api/dialog</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 打开对话框</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">openFile</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = dialog.<span class="title function_">showOpenDialogSync</span>(&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;选择文件&quot;</span>,</span><br><span class="line">    <span class="attr">buttonLabel</span>: <span class="string">&quot;哈哈&quot;</span>,</span><br><span class="line">    <span class="attr">filters</span>: [&#123; <span class="attr">name</span>: <span class="string">&quot;Custom File Type&quot;</span>, <span class="attr">extensions</span>: [<span class="string">&quot;js&quot;</span>] &#125;],</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> fileContent = fs.<span class="title function_">readFileSync</span>(res[<span class="number">0</span>]);</span><br><span class="line">  dropEl.<span class="property">innerText</span> = fileContent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="6-2-保存文件"><a href="#6-2-保存文件" class="headerlink" title="6.2 保存文件"></a>6.2 保存文件</h2><ul>
<li><p>定义点击事件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;saveFile()&quot;</span>&gt;</span>保存<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>事件函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 保存对话框</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">saveFile</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = remote.<span class="property">dialog</span>.<span class="title function_">showSaveDialogSync</span>(&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;保存文件&quot;</span>,</span><br><span class="line">    <span class="attr">buttonLabel</span>: <span class="string">&quot;保存文件&quot;</span>,</span><br><span class="line">    <span class="attr">filters</span>: [&#123; <span class="attr">name</span>: <span class="string">&quot;index&quot;</span>, <span class="attr">extensions</span>: [<span class="string">&quot;js&quot;</span>] &#125;],</span><br><span class="line">  &#125;);</span><br><span class="line">  fs.<span class="title function_">writeFileSync</span>(res, dropEl.<span class="property">value</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="7-定义快捷键"><a href="#7-定义快捷键" class="headerlink" title="7. 定义快捷键"></a>7. 定义快捷键</h1><h2 id="7-1-主线程定义"><a href="#7-1-主线程定义" class="headerlink" title="7.1 主线程定义"></a>7.1 主线程定义</h2><ul>
<li><p>引入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span>, globalShortcut &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 ready 中注册快捷键</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ret = globalShortcut.<span class="title function_">register</span>(<span class="string">&quot;CommandOrControl+X&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;CommandOrControl+X is pressed + 打印结果在命令行&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>定义快捷键最大、最小、关闭窗口</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">globalShortcut.<span class="title function_">register</span>(<span class="string">&quot;CommandOrControl+T&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  mainWindow.<span class="title function_">unmaximize</span>();</span><br><span class="line">&#125;);</span><br><span class="line">globalShortcut.<span class="title function_">register</span>(<span class="string">&quot;CommandOrControl+H&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  mainWindow.<span class="title function_">close</span>();</span><br><span class="line">&#125;);</span><br><span class="line">globalShortcut.<span class="title function_">register</span>(<span class="string">&quot;CommandOrControl+M&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  mainWindow.<span class="title function_">maximize</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="7-2-渲染进程定义"><a href="#7-2-渲染进程定义" class="headerlink" title="7.2 渲染进程定义"></a>7.2 渲染进程定义</h2><ul>
<li><p>通过 remote 注册</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义快捷键</span></span><br><span class="line">remote.<span class="property">globalShortcut</span>.<span class="title function_">register</span>(<span class="string">&quot;Ctrl+O&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ctrl+o&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="8-渲染进程和主线程通讯"><a href="#8-渲染进程和主线程通讯" class="headerlink" title="8. 渲染进程和主线程通讯"></a>8. 渲染进程和主线程通讯</h1><ul>
<li><p>定义按钮</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;maxWindow no-drag&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;maxWindow()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>事件函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">maxWindow</span>(<span class="params"></span>) &#123;</span><br><span class="line">  ipcRenderer.<span class="title function_">send</span>(<span class="string">&quot;max-window&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>主线程定义事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ipcMain.<span class="title function_">on</span>(<span class="string">&quot;max-window&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  mainWindow.<span class="title function_">maximize</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>传参</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> windowSize = <span class="string">&quot;unmax-window&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">maxWindow</span>(<span class="params"></span>) &#123;</span><br><span class="line">  windowSize = windowSize === <span class="string">&quot;max-window&quot;</span> ? <span class="string">&quot;unmax-window&quot;</span> : <span class="string">&quot;max-window&quot;</span>;</span><br><span class="line">  ipcRenderer.<span class="title function_">send</span>(<span class="string">&quot;max-window&quot;</span>, windowSize);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>接收参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ipcMain.<span class="title function_">on</span>(<span class="string">&quot;max-window&quot;</span>, <span class="function">(<span class="params">event, arg</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg);</span><br><span class="line">  <span class="keyword">if</span> (arg === <span class="string">&quot;unmax-window&quot;</span>) <span class="keyword">return</span> mainWindow.<span class="title function_">maximize</span>();</span><br><span class="line">  mainWindow.<span class="title function_">unmaximize</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="09-electron-打包"><a href="#09-electron-打包" class="headerlink" title="09. electron 打包"></a>09. electron 打包</h1><ul>
<li><p>安装 electron-packager</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cnpm i electron-packager -D</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加打包任务</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;build&quot;</span>: <span class="string">&quot;electron-packager ./ HelloWorld --platform=win32 --arch=x64 --out ./outApp --overwrite --icon=./favicon.ico&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="10-electron-结合框架开发"><a href="#10-electron-结合框架开发" class="headerlink" title="10 .electron 结合框架开发"></a>10 .electron 结合框架开发</h1><ul>
<li><p>利用 vue 脚手架初始化项目</p>
<p><code>vue create electron-vue</code></p>
</li>
<li><p>在项目中安装 electron</p>
<p><code>cnpm i electron -S</code></p>
</li>
<li><p>添加 electron 启动配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;main&quot;</span>: <span class="string">&quot;main.js&quot;</span>,</span><br><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">   <span class="string">&quot;start&quot;</span>: <span class="string">&quot;react-scripts start&quot;</span>,</span><br><span class="line">   <span class="string">&quot;build&quot;</span>: <span class="string">&quot;react-scripts build&quot;</span>,</span><br><span class="line">   <span class="string">&quot;test&quot;</span>: <span class="string">&quot;react-scripts test&quot;</span>,</span><br><span class="line">   <span class="string">&quot;eject&quot;</span>: <span class="string">&quot;react-scripts eject&quot;</span>,</span><br><span class="line">   <span class="string">&quot;electron&quot;</span>: <span class="string">&quot;electron .&quot;</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
</li>
<li><p>项目中配置 main.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createWindow</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// Create the browser window.</span></span><br><span class="line">  <span class="keyword">const</span> mainWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// Open the DevTools.</span></span><br><span class="line">  <span class="comment">// mainWindow.webContents.openDevTools()</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&quot;ready&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">createWindow</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>加载 vue 项目</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mainWindow.<span class="title function_">loadURL</span>(<span class="string">&quot;http://localhost:8080/&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
  </entry>
  <entry>
    <title>【搬】Electron</title>
    <url>/2022/02/28/%E6%A1%8C%E9%9D%A2%E7%AB%AF/%E3%80%90%E6%90%AC%E3%80%91Electron/</url>
    <content><![CDATA[<h2 id="Electron-介绍"><a href="#Electron-介绍" class="headerlink" title="Electron 介绍"></a>Electron 介绍</h2><ul>
<li>Electron 是由 Github 开发，用 HTML，CSS 和 JavaScript 来构建跨平台桌面应用程序的一个开源库。Electron 通过将 Chromium 和 Node.js 合并到同一个运行时环境中，并将其打包为 Mac，Windows 和 Linux 系统下的应用来实现这一目的。</li>
<li>网站：<a href="https://www.electronjs.org/">https://www.electronjs.org/</a></li>
<li>使用 electron 的项目：<a href="https://www.electronjs.org/apps">https://www.electronjs.org/apps</a></li>
<li>特点：<ul>
<li>上手简单：只要会前端的知识就可以做桌面应用</li>
<li>跨平台：Mac，Linux，Windows</li>
<li>自动更新</li>
</ul>
</li>
</ul>
<p>Hello World</p>
<p>1.克隆实例项目的仓库<br>git clone <a href="https://github.com/electron/electron-quick-start">https://github.com/electron/electron-quick-start</a></p>
<p>2.进入这个仓库<br>cd electron-quick-start</p>
<p>3.安装依赖<br>npm install</p>
<p>4.运行<br>npm start</p>
<p>如果下载比较慢的话，推荐使用淘宝镜像。<br>npm config set ELECTRON_MIRROR <a href="https://npm.taobao.org/mirrors/electron/">https://npm.taobao.org/mirrors/electron/</a></p>
<h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><h3 id="react-和-electron-配合使用"><a href="#react-和-electron-配合使用" class="headerlink" title="react 和 electron 配合使用"></a>react 和 electron 配合使用</h3><ul>
<li><p>安装 react 依赖：<br>tnpm i react<br>tnpm i react-dom</p>
</li>
<li><p>项目中无法使用 import，需要安装以下依赖：<br>tnpm i @babel&#x2F;core @babel&#x2F;preset-env @babel&#x2F;preset-react css-loader style-loader sass-loader sass webpack webpack-cli babel-loader</p>
</li>
<li><p>启动项目：<br>tnpm run watch<br>tnpm start</p>
</li>
</ul>
<p>package.json:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;electron-quick-start&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;A minimal Electron application&quot;</span>,</span><br><span class="line">  <span class="string">&quot;main&quot;</span>: <span class="string">&quot;main.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;watch&quot;</span>: <span class="string">&quot;webpack --config webpack.common.js --watch&quot;</span>,</span><br><span class="line">    <span class="string">&quot;start&quot;</span>: <span class="string">&quot;electron .&quot;</span>	<span class="comment">// 此处的点其实就是启动的&quot;main&quot;: &quot;main.js&quot;,</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;repository&quot;</span>: <span class="string">&quot;https://github.com/electron/electron-quick-start&quot;</span>,</span><br><span class="line">  <span class="string">&quot;keywords&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;Electron&quot;</span>,</span><br><span class="line">    <span class="string">&quot;quick&quot;</span>,</span><br><span class="line">    <span class="string">&quot;start&quot;</span>,</span><br><span class="line">    <span class="string">&quot;tutorial&quot;</span>,</span><br><span class="line">    <span class="string">&quot;demo&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;GitHub&quot;</span>,</span><br><span class="line">  <span class="string">&quot;license&quot;</span>: <span class="string">&quot;CC0-1.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;electron&quot;</span>: <span class="string">&quot;^17.0.1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;@babel/core&quot;</span>: <span class="string">&quot;^7.17.5&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@babel/preset-env&quot;</span>: <span class="string">&quot;^7.16.11&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@babel/preset-react&quot;</span>: <span class="string">&quot;^7.16.7&quot;</span>,</span><br><span class="line">    <span class="string">&quot;babel-loader&quot;</span>: <span class="string">&quot;^8.2.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;css-loader&quot;</span>: <span class="string">&quot;^6.6.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;react&quot;</span>: <span class="string">&quot;^17.0.2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;react-dom&quot;</span>: <span class="string">&quot;^17.0.2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sass&quot;</span>: <span class="string">&quot;^1.49.8&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sass-loader&quot;</span>: <span class="string">&quot;^12.6.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;style-loader&quot;</span>: <span class="string">&quot;^3.3.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;webpack&quot;</span>: <span class="string">&quot;^5.69.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;webpack-cli&quot;</span>: <span class="string">&quot;^4.9.2&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="进行介绍"><a href="#进行介绍" class="headerlink" title="进行介绍"></a>进行介绍</h2><p>Electron 分为渲染进程和主进程。</p>
<ul>
<li>渲染进程：用户所看到的 web 界面就是由渲染进程描绘出来的。包括 html，css 和 js。</li>
<li>主进程：Electron 运行 package.json 的 main 脚本进程被称为主进程。在主进程中运行的脚本通过创建 web 页面来展示用户界面。一个 Electron 应用总是有且只有一个主进程。</li>
</ul>
<h2 id="渲染进程调试"><a href="#渲染进程调试" class="headerlink" title="渲染进程调试"></a>渲染进程调试</h2><p>渲染进程的调试就是我们熟悉的网页的调试。<br>（Command+shift+i，打开控制台）</p>
<h2 id="主进程调试"><a href="#主进程调试" class="headerlink" title="主进程调试"></a>主进程调试</h2><p>命令行开关：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">--inspect=[port]</span><br><span class="line"></span><br><span class="line">例如：electron --inspect=<span class="number">6868</span> your/app</span><br><span class="line"></span><br><span class="line">打开浏览器输入：<span class="title class_">Chrome</span>:<span class="comment">//inspect</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>示例：</p>
</blockquote>
<p>修改 package.json</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;start&quot;</span>: <span class="string">&quot;electron . --inspect=6868&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>打开浏览器输入：Chrome:&#x2F;&#x2F;inspect，进行如下设置</p>
<p><img src="/source/_posts/img/electron1.png" alt="Electron1"></p>
<p>重新启动项目</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">tnpm start</span><br></pre></td></tr></table></figure>

<ul>
<li><p>1、使用浏览器做 Debug：<br>打开 inspect，按 Command+p，搜索 main.js 即可看到 electron 项目的 main.js 文件</p>
<p><img src="/source/_posts/img/electron2.png" alt="Electron2"></p>
</li>
<li><p>2、使用 vscode 调试<br>点击 vscode 左侧第四个图标（Debug），新增 launch.json 文件，粘贴如下代码，点击运行 Debug Main Process</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;configurations&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Debug Main Process&quot;</span>,</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;node&quot;</span>,</span><br><span class="line">      <span class="string">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">      <span class="string">&quot;cwd&quot;</span>: <span class="string">&quot;$&#123;workspaceRoot&#125;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;runtimeExecutable&quot;</span>: <span class="string">&quot;$&#123;workspaceRoot&#125;/node_modules/.bin/electron&quot;</span>,</span><br><span class="line">      <span class="string">&quot;windows&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;runtimeExecutable&quot;</span>: <span class="string">&quot;$&#123;workspaceRoot&#125;/node_modules/.bin/electron.cmd&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;args&quot;</span>: [<span class="string">&quot;.&quot;</span>],</span><br><span class="line">      <span class="string">&quot;outputCapture&quot;</span>: <span class="string">&quot;std&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/source/_posts/img/electron3.png" alt="Electron3"></p>
<p>此时可以进行断点调试：</p>
<p><img src="/source/_posts/img/electron4.png" alt="Electron4"></p>
<h3 id="app-常用事件"><a href="#app-常用事件" class="headerlink" title="app 常用事件"></a>app 常用事件</h3><p>文档地址：<a href="https://www.electronjs.org/docs/latest/api/app#event-before-quit">https://www.electronjs.org/docs/latest/api/app#event-before-quit</a><br>中文文档：<a href="https://www.electronjs.org/zh/docs/latest/api/app#event-before-quit">https://www.electronjs.org/zh/docs/latest/api/app#event-before-quit</a></p>
<ul>
<li>ready：当 Electron 完成初始化时被触发。</li>
<li>window-all-closed：所有窗口被关闭。</li>
<li>before-quit：在应用程序开始关闭窗口之前触发。</li>
<li>will-quit：当所有窗口都已关闭并且应用程序将退出时发出。</li>
<li>quit：在应用程序退出时发出。</li>
</ul>
<h3 id="webContents-常用事件"><a href="#webContents-常用事件" class="headerlink" title="webContents 常用事件"></a>webContents 常用事件</h3><p>文档地址：<a href="https://www.electronjs.org/docs/latest/api/webview-tag/#event-did-finish-load">https://www.electronjs.org/docs/latest/api/webview-tag/#event-did-finish-load</a><br>中文文档：<a href="https://www.electronjs.org/zh/docs/latest/api/web-contents#event-did-finish-load">https://www.electronjs.org/zh/docs/latest/api/web-contents#event-did-finish-load</a></p>
<ul>
<li>did-finish-load：导航完成式触发，即选项卡的旋转器将停止旋转，并指派 onload 事件后。</li>
<li>dom-ready：一个框架中的文本加载完成后触发该事件。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createWindow</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> mainWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">    <span class="attr">webPreferences</span>: &#123; <span class="attr">preload</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;preload.js&quot;</span>) &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 本地的react文件内容</span></span><br><span class="line">  mainWindow.<span class="title function_">loadFile</span>(<span class="string">&quot;index.html&quot;</span>);</span><br><span class="line"></span><br><span class="line">  mainWindow.<span class="property">webContents</span>.<span class="title function_">openDevTools</span>();</span><br><span class="line">  mainWindow.<span class="property">webContents</span>.<span class="title function_">on</span>(<span class="string">&quot;did-finish-load&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;did-finish-load...&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  mainWindow.<span class="property">webContents</span>.<span class="title function_">on</span>(<span class="string">&quot;dom-ready&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;dom-ready...&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ready...&quot;</span>);</span><br><span class="line">  <span class="title function_">createWindow</span>();</span><br><span class="line"></span><br><span class="line">  app.<span class="title function_">on</span>(<span class="string">&quot;activate&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">BrowserWindow</span>.<span class="title function_">getAllWindows</span>().<span class="property">length</span> === <span class="number">0</span>) <span class="title function_">createWindow</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&quot;window-all-closed&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (process.<span class="property">platform</span> !== <span class="string">&quot;darwin&quot;</span>) app.<span class="title function_">quit</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="api-进程对象"><a href="#api-进程对象" class="headerlink" title="api-进程对象"></a>api-进程对象</h2><p><a href="https://www.electronjs.org/zh/docs/latest/api/process#sandbox">https://www.electronjs.org/zh/docs/latest/api/process#sandbox</a><br>示例：<br>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">      <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">content</span>=<span class="string">&quot;default-src &#x27;self&#x27;; script-src &#x27;self&#x27;; style-src &#x27;self&#x27; &#x27;unsafe-inline&#x27;&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;./styles.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Process<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 渲染进程的方法：getProcessInfo，不能在主进程mian.js中编写，在渲染进程renderer.js中编写 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;getProcessInfo()&quot;</span>&gt;</span>查看process信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- You can also require other files to run in this process --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./renderer.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./build/js/app.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>renderer.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// This file is required by the index.html file and will</span></span><br><span class="line"><span class="comment">// be executed in the renderer process for that window.</span></span><br><span class="line"><span class="comment">// No Node.js APIs are available in this process because</span></span><br><span class="line"><span class="comment">// `nodeIntegration` is turned off. Use `preload.js` to</span></span><br><span class="line"><span class="comment">// selectively enable features needed in the rendering</span></span><br><span class="line"><span class="comment">// process.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getProcessInfo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;getCCPUUsage:&quot;</span>, <span class="title function_">getCCPUUsage</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重新启动项目</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">tnpm start</span><br></pre></td></tr></table></figure>

<p>点击按钮，这时候出现了以下错误：<br>error1：Refused to execute inline event handler because it violates the following Content Security Policy directive: “script-src ‘self’”. Either the ‘unsafe-inline’ keyword, a hash (‘sha256-…’), or a nonce (‘nonce-…’) is required to enable inline execution.<br>这时候查阅资料，在 <a href="https://stackoverflow.com/questions/36324333/refused-to-execute-inline-event-handler-because-it-violates-csp-sandbox">https://stackoverflow.com/questions/36324333/refused-to-execute-inline-event-handler-because-it-violates-csp-sandbox</a> 中找到答案。</p>
<p>解决方法：<br>首先修改 index.html 文件: 把 <button onclick="getProcessInfo()">查看 preocess 信息</button> 改成 <button id="btn">查看 preocess 信息</button><br>其次修改 renderer.js 文件: 在 function getProcessInfo() 这一句上面添加上 ： document.getElementById(“btn”).addEventListener(“click”, getProcessInfo);<br>修改好后，再次编译运行就没有以上错误了。</p>
<p>但是当按下 “查看 preocess 信息” 的按钮时，又出现了以下错误：<br>error2 ：renderer.js:10 Uncaught ReferenceError: process is not defined<br>查阅资料，找到了答案 <a href="https://stackoverflow.com/questions/30239060/uncaught-referenceerror-process-is-not-defined">https://stackoverflow.com/questions/30239060/uncaught-referenceerror-process-is-not-defined</a></p>
<p>解决方法：<br>打开 main.js 文件，在 function createWindow() 里面加上一行： nodeIntegration: true ，如下图所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createWindow</span> () &#123;</span><br><span class="line">  <span class="comment">// Create the browser window.</span></span><br><span class="line">  <span class="keyword">const</span> mainWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">    <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">      <span class="attr">nodeIntegration</span>: <span class="literal">true</span>, <span class="comment">// 这个属性非常重要，用户的require和process等变量的使用需要事先设定上这个属性</span></span><br><span class="line">      <span class="attr">contextIsolation</span>: <span class="literal">false</span>, <span class="comment">// 另外还需要设置这个属性，详细介绍：https://www.electronjs.org/docs/latest/tutorial/context-isolation</span></span><br><span class="line">      <span class="attr">preload</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;preload.js&quot;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>注意，这个 nodeIntegration: true 的添加非常重要，只有添加了它，才能使 require 和 process 等变量有效。<br>把这两个 bug 都去除后，在 vscode 上按下 F5 运行代码，再按下 “查看 preocess 信息” 的按钮时就可以正常看到输出结果了：</p>
<p><img src="/source/_posts/img/electron5.png" alt="Electron5"></p>
<h2 id="File-对象"><a href="#File-对象" class="headerlink" title="File 对象"></a>File 对象</h2><p>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;for_file_drag&quot;</span> <span class="attr">id</span>=<span class="string">&quot;drag_test&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>拖动文件到此处，打印路径<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>renderer.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 拖动文件到区域，展示路径</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> dragWraper = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;drag_test&quot;</span>);</span><br><span class="line">dragWraper.<span class="title function_">addEventListener</span>(<span class="string">&quot;drop&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  e.<span class="title function_">preventDefault</span>();</span><br><span class="line">  <span class="keyword">const</span> files = e.<span class="property">dataTransfer</span>.<span class="property">files</span>;</span><br><span class="line">  <span class="keyword">if</span> (files &amp;&amp; files.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> path = files[<span class="number">0</span>].<span class="property">path</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;path:&quot;</span>, path);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取本地文件</span></span><br><span class="line">    <span class="keyword">const</span> content = fs.<span class="title function_">readFileSync</span>(path);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;content:&quot;</span>, content.<span class="title function_">toString</span>());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">dragWraper.<span class="title function_">addEventListener</span>(<span class="string">&quot;dragover&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  e.<span class="title function_">preventDefault</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="标签"><a href="#标签" class="headerlink" title="&lt;webview&gt;标签"></a><code>&lt;webview&gt;</code>标签</h2><p>官方文档：<a href="https://www.electronjs.org/docs/latest/api/webview-tag">https://www.electronjs.org/docs/latest/api/webview-tag</a><br>main.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mainWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">  <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">  <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">    <span class="attr">nodeIntegration</span>: <span class="literal">true</span>, <span class="comment">// 是否开启nodejs功能。 这个属性非常重要，用户的require和process等变量的使用需要事先设定上这个属性</span></span><br><span class="line">    <span class="attr">contextIsolation</span>: <span class="literal">false</span>, <span class="comment">// 另外还需要设置这个属性，详细介绍：https://www.electronjs.org/docs/latest/tutorial/context-isolation</span></span><br><span class="line">    <span class="attr">preload</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;preload.js&quot;</span>),</span><br><span class="line">    <span class="attr">webviewTag</span>: <span class="literal">true</span>, <span class="comment">// 支持webview</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>webview_test&#x2F;preload.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 读取百度logo图片的src路径</span></span><br><span class="line">  <span class="title function_">alert</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.index-logo-src&quot;</span>).<span class="property">src</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 向dom注入自己的事件</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#su&quot;</span>).<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;您点击了搜索按钮&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure>

<p>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- webview --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>webview<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;loading&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">webview</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">&quot;wb&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">&quot;https://www.baidu.com&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">&quot;height: 400px&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">preload</span>=<span class="string">&quot;./webview_test/preload.js&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">webview</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>renderer.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webview</span></span><br><span class="line"><span class="keyword">const</span> wb = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#wb&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> loading = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#loading&quot;</span>);</span><br><span class="line">wb.<span class="title function_">addEventListener</span>(<span class="string">&quot;did-start-loading&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  loading.<span class="property">innerHTML</span> = <span class="string">&quot;loading...&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line">wb.<span class="title function_">addEventListener</span>(<span class="string">&quot;did-stop-loading&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  loading.<span class="property">innerHTML</span> = <span class="string">&quot;ok.&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 修改百度搜索按钮为红色</span></span><br><span class="line">  wb.<span class="title function_">insertCSS</span>(<span class="string">`</span></span><br><span class="line"><span class="string">		#su&#123;</span></span><br><span class="line"><span class="string">			background:red !important</span></span><br><span class="line"><span class="string">		&#125;</span></span><br><span class="line"><span class="string">	`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 执行脚本</span></span><br><span class="line">  wb.<span class="title function_">executeJavaScript</span>(<span class="string">`</span></span><br><span class="line"><span class="string">		setTimeout(()=&gt;&#123;</span></span><br><span class="line"><span class="string">			alert(document.getElementById(&quot;su&quot;).value)</span></span><br><span class="line"><span class="string">		&#125;,1000)</span></span><br><span class="line"><span class="string">	`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 打开控制台脚本</span></span><br><span class="line">  wb.<span class="title function_">openDevTools</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="window-open-副窗口和主窗口通信"><a href="#window-open-副窗口和主窗口通信" class="headerlink" title="window.open 副窗口和主窗口通信"></a>window.open 副窗口和主窗口通信</h2><p>官方文档：<a href="https://www.electronjs.org/docs/latest/api/window-open/#windowopenurl-framename-features">https://www.electronjs.org/docs/latest/api/window-open/#windowopenurl-framename-features</a></p>
<p>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 弹出子窗口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;openNewWindow()&quot;</span>&gt;</span>弹出<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 关闭子窗口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;closeWindow()&quot;</span>&gt;</span>关闭子窗口<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>renderer.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> subwin; <span class="comment">// BrowserWindowProxy</span></span><br><span class="line"><span class="comment">// 弹出子窗口</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">openNewWindow</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// window.open(&quot;https://www.youtube.com&quot;, &quot;_blank&quot;, &quot;nodeIntegration=no&quot;)</span></span><br><span class="line">  subwin = <span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&quot;popup_page.html&quot;</span>, <span class="string">&quot;popup&quot;</span>); <span class="comment">// 第一个参数：打开的页面；第二个参数：别名</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接收子窗口信息</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;message&quot;</span>, <span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;父窗口接收到的消息：&quot;</span>, msg);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 关闭子窗口</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">closeWindow</span>(<span class="params"></span>) &#123;</span><br><span class="line">  subwin.<span class="title function_">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>popup_page.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是弹出的子窗口<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;sendMsgToParrent()&quot;</span>&gt;</span>向父窗口传递信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">sendMsgToParrent</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 向父窗口传递信息,可以接收字符串，也可以接收对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="property">opener</span>.<span class="title function_">postMessage</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">type</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">message</span>: <span class="string">&quot;这是来自于子窗口的问候&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果点击按钮报错：<br><img src="/source/_posts/img/electron6.png" alt="Electron6"></p>
<p>则删除 index.html 下面部分：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">  <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">content</span>=<span class="string">&quot;default-src &#x27;self&#x27;; script-src &#x27;self&#x27;; style-src &#x27;self&#x27; &#x27;unsafe-inline&#x27;&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="BrowserWindow-主-子窗口"><a href="#BrowserWindow-主-子窗口" class="headerlink" title="BrowserWindow 主&#x2F;子窗口"></a>BrowserWindow 主&#x2F;子窗口</h2><p>属性 frame: false</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mainWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">  <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">  <span class="attr">frame</span>: <span class="literal">false</span>, <span class="comment">// 窗口去除边框</span></span><br><span class="line">  <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">    <span class="attr">nodeIntegration</span>: <span class="literal">true</span>, <span class="comment">// 这个属性非常重要，用户的require和process等变量的使用需要事先设定上这个属性</span></span><br><span class="line">    <span class="attr">contextIsolation</span>: <span class="literal">false</span>, <span class="comment">// 另外还需要设置这个属性，详细介绍：https://www.electronjs.org/docs/latest/tutorial/context-isolation</span></span><br><span class="line">    <span class="attr">preload</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;preload.js&quot;</span>),</span><br><span class="line">    <span class="attr">webviewTag</span>: <span class="literal">true</span>, <span class="comment">// 支持webview</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mainWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">  <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">  <span class="comment">// frame: false, // 窗口去除边框</span></span><br><span class="line">  <span class="attr">show</span>: <span class="literal">false</span>, <span class="comment">// 是否展示窗口</span></span><br><span class="line">  <span class="attr">backgroundColor</span>: <span class="string">&quot;#ff0000&quot;</span>,</span><br><span class="line">  <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">    <span class="attr">nodeIntegration</span>: <span class="literal">true</span>, <span class="comment">// 这个属性非常重要，用户的require和process等变量的使用需要事先设定上这个属性</span></span><br><span class="line">    <span class="attr">contextIsolation</span>: <span class="literal">false</span>, <span class="comment">// 另外还需要设置这个属性，详细介绍：https://www.electronjs.org/docs/latest/tutorial/context-isolation</span></span><br><span class="line">    <span class="attr">preload</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;preload.js&quot;</span>),</span><br><span class="line">    <span class="attr">webviewTag</span>: <span class="literal">true</span>, <span class="comment">// 支持webview</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只执行一次ready-to-show</span></span><br><span class="line">mainWindow.<span class="title function_">once</span>(<span class="string">&quot;ready-to-show&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  mainWindow.<span class="title function_">show</span>();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 父子窗口</span></span><br><span class="line">childWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">  <span class="attr">parent</span>: mainWindow,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>模态窗口：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="comment">// 父子窗口</span></span><br><span class="line">  childWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">    <span class="attr">parent</span>: mainWindow,</span><br><span class="line">    <span class="comment">// 模态窗口是禁用父窗口的子窗口，创建模态窗口必须设置parent和modal选项</span></span><br><span class="line">    <span class="attr">modal</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 控制子窗口弹出的坐标</span></span><br><span class="line">    <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="BrowserView"><a href="#BrowserView" class="headerlink" title="BrowserView"></a>BrowserView</h2><p>BrowserView 被用来让 BrowserWindow 嵌入更多的 web 内容。它就像一个子窗口，除了它的未知相对于父窗口。这意味着可以替代 webview 标签。<br>官方文档：<a href="https://www.electronjs.org/docs/latest/api/browser-view#class-browserview">https://www.electronjs.org/docs/latest/api/browser-view#class-browserview</a><br>main.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span>, <span class="title class_">BrowserView</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mainWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">  <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">  <span class="comment">// frame: false, // 窗口去除边框</span></span><br><span class="line">  <span class="attr">show</span>: <span class="literal">false</span>, <span class="comment">// 是否展示窗口</span></span><br><span class="line">  <span class="attr">backgroundColor</span>: <span class="string">&quot;#ff0000&quot;</span>,</span><br><span class="line">  <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">    <span class="attr">nodeIntegration</span>: <span class="literal">true</span>, <span class="comment">// 这个属性非常重要，用户的require和process等变量的使用需要事先设定上这个属性</span></span><br><span class="line">    <span class="attr">contextIsolation</span>: <span class="literal">false</span>, <span class="comment">// 另外还需要设置这个属性，详细介绍：https://www.electronjs.org/docs/latest/tutorial/context-isolation</span></span><br><span class="line">    <span class="attr">preload</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;preload.js&quot;</span>),</span><br><span class="line">    <span class="attr">webviewTag</span>: <span class="literal">true</span>, <span class="comment">// 支持webview</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">mainWindow.<span class="title function_">loadFile</span>(<span class="string">&quot;index.html&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> view = <span class="keyword">new</span> <span class="title class_">BrowserView</span>();</span><br><span class="line">view.<span class="title function_">setBounds</span>(&#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">y</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">width</span>: <span class="number">300</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">200</span>,</span><br><span class="line">&#125;);</span><br><span class="line">view.<span class="property">webContents</span>.<span class="title function_">loadURL</span>(<span class="string">&quot;https://www.baidu.com&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// BrowserWindow中设置BrowserView</span></span><br><span class="line">mainWindow.<span class="title function_">setBrowserView</span>(view);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5秒后销毁BrowserView</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// https://www.electronjs.org/zh/docs/latest/breaking-changes</span></span><br><span class="line">  <span class="comment">// ⚠️经查阅，下面的方法已经废弃</span></span><br><span class="line">  <span class="comment">// view.destroy()</span></span><br><span class="line">&#125;, <span class="number">5000</span>);</span><br></pre></td></tr></table></figure>

<h2 id="Dialog-对话框"><a href="#Dialog-对话框" class="headerlink" title="Dialog 对话框"></a>Dialog 对话框</h2><blockquote>
<p>显示用于打开和保存文件、警报等的本机系统对话框</p>
</blockquote>
<p>官方文档：<a href="https://www.electronjs.org/docs/latest/api/dialog">https://www.electronjs.org/docs/latest/api/dialog</a></p>
<p>显示用于选择多个文件和目录的对话框的示例：【这个对话框是从 Electron 主线程上打开的】</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; dialog &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">  dialog.<span class="title function_">showOpenDialog</span>(&#123; <span class="attr">properties</span>: [<span class="string">&quot;openFile&quot;</span>, <span class="string">&quot;multiSelections&quot;</span>] &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>如果要使用渲染进程中的对话框对象，可以使用 remote 来获得。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; dialog &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>).<span class="property">remote</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dialog);</span><br></pre></td></tr></table></figure>

<p>示例：<br>index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- dialog --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>打开文件选择框<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;openDialog()&quot;</span>&gt;</span>打开<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;saveDialog()&quot;</span>&gt;</span>保存<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;showMessageDialog()&quot;</span>&gt;</span>弹出消息提示<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>renderer.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; dialog &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>).<span class="property">remote</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开文件选择框</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">openDialog</span>(<span class="params"></span>) &#123;</span><br><span class="line">  dialog.<span class="title function_">showOpenDialog</span>(</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;请选择您喜欢的文件&quot;</span>,</span><br><span class="line">      <span class="attr">buttonLabel</span>: <span class="string">&quot;走你&quot;</span>,</span><br><span class="line">      <span class="attr">filters</span>: [</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&quot;Custom File Type&quot;</span>, <span class="attr">extensions</span>: [<span class="string">&quot;js&quot;</span>, <span class="string">&quot;html&quot;</span>, <span class="string">&quot;json&quot;</span>] &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result:&quot;</span>, result);</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存文件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">saveDialog</span>(<span class="params"></span>) &#123;</span><br><span class="line">  dialog.<span class="title function_">showSaveDialog</span>(</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;请选择要保存的文件名&quot;</span>,</span><br><span class="line">      <span class="attr">buttonLabel</span>: <span class="string">&quot;保存&quot;</span>,</span><br><span class="line">      <span class="attr">filters</span>: [</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&quot;Custom File Type&quot;</span>, <span class="attr">extensions</span>: [<span class="string">&quot;js&quot;</span>, <span class="string">&quot;html&quot;</span>, <span class="string">&quot;json&quot;</span>] &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result:&quot;</span>, result);</span><br><span class="line">      fs.<span class="title function_">writeFileSync</span>(result, <span class="string">&quot;会向第一个参数的路径保存这行内容&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消息弹框</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showMessageDialog</span>(<span class="params"></span>) &#123;</span><br><span class="line">  dialog.<span class="title function_">showMessageBox</span>(</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;warning&quot;</span>,</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;您确定吗？&quot;</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&quot;您的真的想要删除这条信息吗？&quot;</span>,</span><br><span class="line">      <span class="attr">buttons</span>: [<span class="string">&quot;ok&quot;</span>, <span class="string">&quot;cancel&quot;</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;您的选择是：&quot;</span>, result);</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="系统快捷键"><a href="#系统快捷键" class="headerlink" title="系统快捷键"></a>系统快捷键</h2><blockquote>
<p>应用程序没有键盘焦点时，监听键盘事件。</p>
</blockquote>
<p>globalShortcut 模块可以在操作系统中注册&#x2F;注销全局快捷键，一边可以为操作定制各种快捷键。<br>注意：快捷键方式是全局的，即使应用程序没有键盘焦点，它也仍然在持续监听键盘事件。在应用程序模块发出 ready 事件之前，不应使用此模块。</p>
<p>主进程注册快捷键：<br>main.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span>, globalShortcut &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">createWindow</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 主进程注册快捷键</span></span><br><span class="line">  globalShortcut.<span class="title function_">register</span>(<span class="string">&quot;CommandOrControl+I&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;您按下了command+i&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断快捷键是否被注册上</span></span><br><span class="line">  <span class="keyword">const</span> isRegistered = globalShortcut.<span class="title function_">isRegistered</span>(<span class="string">&quot;CommandOrControl+I&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(isRegistered);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&quot;window-all-closed&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 注销所有快捷键</span></span><br><span class="line">  globalShortcut.<span class="title function_">unregisterAll</span>();</span><br><span class="line">  <span class="keyword">if</span> (process.<span class="property">platform</span> !== <span class="string">&quot;darwin&quot;</span>) app.<span class="title function_">quit</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>渲染进程注册快捷键：<br>renderer.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 渲染进程注册快捷键</span></span><br><span class="line"><span class="keyword">const</span> &#123; remote &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);</span><br><span class="line">remote.<span class="property">globalShortcut</span>.<span class="title function_">register</span>(<span class="string">&quot;CommandOrControl+G&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;您按下了command+g&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="主进程与渲染进程之间通信（推荐使用异步）"><a href="#主进程与渲染进程之间通信（推荐使用异步）" class="headerlink" title="主进程与渲染进程之间通信（推荐使用异步）"></a>主进程与渲染进程之间通信（推荐使用异步）</h2><h3 id="ipcMain"><a href="#ipcMain" class="headerlink" title="ipcMain"></a>ipcMain</h3><p>从主进程到渲染进程的异步通信。<br>ipcMain 模块是 EventEmitter 类的一个实例。当在主进程中使用时，它处理从渲染器进程（网页）发出来的异步和同步信息。从渲染器进程发送的消息将被发送到该模块。<br>main.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ipcMain &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步</span></span><br><span class="line">ipcMain.<span class="title function_">on</span>(<span class="string">&#x27;asynchronous-message&#x27;</span>,(event,arg)=&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg) <span class="comment">// print &quot;ping&quot;</span></span><br><span class="line">  event.<span class="title function_">reply</span>(<span class="string">&#x27;asynchronous-reply&#x27;</span>,<span class="string">&#x27;pong&#x27;</span>）</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同步</span></span><br><span class="line">ipcMain.<span class="title function_">on</span>(<span class="string">&#x27;synchronous-message&#x27;</span>,(event,arg)=&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg) <span class="comment">// print &quot;ping&quot;</span></span><br><span class="line">  event.<span class="property">returnValue</span> = <span class="string">&#x27;pong&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="ipcRenderer"><a href="#ipcRenderer" class="headerlink" title="ipcRenderer"></a>ipcRenderer</h3><blockquote>
<p>从渲染器进程到主进程的异步通信。</p>
</blockquote>
<p>ipcRenderer 是一个 EventEmitter 的实例。你可以使用它提供的一些方法从渲染进程（web 页面）发送同步或异步的消息到主进程。也可以接收主进程回复的消息。<br>renderer.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ipcRenderer &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步</span></span><br><span class="line">ipcRenderer.<span class="title function_">send</span>(<span class="string">&#x27;asynchronous-message&#x27;</span>,<span class="string">&#x27;ping&#x27;</span>)</span><br><span class="line">ipcRenderer.<span class="title function_">on</span>(<span class="string">&#x27;asynchronous-reply&#x27;</span>,(event,arg)=&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg) <span class="comment">// print &quot;pong&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同步</span></span><br><span class="line"><span class="keyword">const</span> response = ipcRenderer.<span class="title function_">sendSync</span>(<span class="string">&#x27;synchronous-message&#x27;</span>,<span class="string">&#x27;ping&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(response) <span class="comment">// prints &quot;pong&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="主进程主动和渲染进程通信"><a href="#主进程主动和渲染进程通信" class="headerlink" title="主进程主动和渲染进程通信"></a>主进程主动和渲染进程通信</h3><p>main.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  mainWindow.<span class="property">webContents</span>.<span class="title function_">send</span>(</span><br><span class="line">    <span class="string">&quot;send-message-to-renderer&quot;</span>,</span><br><span class="line">    <span class="string">&quot;我是主进程，主动和渲染进程搭讪&quot;</span></span><br><span class="line">  );</span><br><span class="line">&#125;, <span class="number">5000</span>);</span><br></pre></td></tr></table></figure>

<p>renderer.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ipcRenderer &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ipcRenderer.<span class="title function_">on</span>(<span class="string">&#x27;send-message-to-renderer&#x27;</span>,(event,arg)=&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg) <span class="comment">// print &quot;我是主进程，主动和渲染进程搭讪&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="菜单"><a href="#菜单" class="headerlink" title="菜单"></a>菜单</h2><blockquote>
<p>创建原生应用菜单和上下文菜单</p>
</blockquote>
<p>main.js 【注意 ⚠️：主进程很少有需求需要弹出菜单】</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span>, <span class="title class_">Menu</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主进程很少有需求需要弹出菜单</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> template = [</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">&quot;第一个菜单项&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">&quot;第二个菜单项&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">role</span>: <span class="string">&quot;undo&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">type</span>: <span class="string">&quot;separator&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">&quot;第三个菜单项&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">&quot;第四个菜单项&quot;</span> &#125;,</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">const</span> menu = <span class="title class_">Menu</span>.<span class="title function_">buildFromTemplate</span>(template);</span><br><span class="line">  <span class="title class_">Menu</span>.<span class="title function_">setApplicationMenu</span>(menu);</span><br><span class="line">  menu.<span class="title function_">popup</span>();</span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure>

<p>渲染进程自定义菜单：</p>
<p>renderer.js 【该方式已失效】</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; remote &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Menu</span>, <span class="title class_">MenuItem</span> &#125; = remote;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">openMenu</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> template = [</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">&quot;第一个菜单项&quot;</span> &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">label</span>: <span class="string">&quot;点击测试&quot;</span>,</span><br><span class="line">      <span class="attr">click</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;点击事件ok&quot;</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; <span class="attr">role</span>: <span class="string">&quot;undo&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">&quot;旅游&quot;</span>, <span class="attr">type</span>: <span class="string">&quot;checkbox&quot;</span>, <span class="attr">checked</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">&quot;吃&quot;</span>, <span class="attr">type</span>: <span class="string">&quot;checkbox&quot;</span>, <span class="attr">checked</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">&quot;逛街&quot;</span>, <span class="attr">type</span>: <span class="string">&quot;checkbox&quot;</span>, <span class="attr">checked</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">MenuItem</span>(&#123;</span><br><span class="line">      <span class="attr">label</span>: <span class="string">&quot;这是MenuItem生成的菜单&quot;</span>,</span><br><span class="line">      <span class="attr">click</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;您点击的MenuItem的菜单&quot;</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">label</span>: <span class="string">&quot;子菜单测试&quot;</span>,</span><br><span class="line">      <span class="attr">submenu</span>: [</span><br><span class="line">        &#123; <span class="attr">label</span>: <span class="string">&quot;子菜单-1&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">label</span>: <span class="string">&quot;子菜单-2&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">label</span>: <span class="string">&quot;子菜单-3&quot;</span> &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">const</span> menu = <span class="title class_">Menu</span>.<span class="title function_">buildFromTemplate</span>(template);</span><br><span class="line">  <span class="comment">// 改变横向菜单</span></span><br><span class="line">  <span class="comment">// Menu.setApplicationMenu(menu)</span></span><br><span class="line">  menu.<span class="title function_">popup</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>要创建由渲染器启动的菜单，请通过 IPC 发送所需的信息到主过程，并让主过程代替渲染器显示菜单。<br>详细见文档地址：<a href="https://www.electronjs.org/zh/docs/latest/api/menu#%E6%B8%B2%E6%9F%93%E8%BF%9B%E7%A8%8B">https://www.electronjs.org/zh/docs/latest/api/menu#%E6%B8%B2%E6%9F%93%E8%BF%9B%E7%A8%8B</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// renderer</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;contextmenu&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  e.<span class="title function_">preventDefault</span>();</span><br><span class="line">  ipcRenderer.<span class="title function_">send</span>(<span class="string">&quot;show-context-menu&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ipcRenderer.<span class="title function_">on</span>(<span class="string">&quot;context-menu-command&quot;</span>, <span class="function">(<span class="params">e, command</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// main</span></span><br><span class="line">ipcMain.<span class="title function_">on</span>(<span class="string">&quot;show-context-menu&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> template = [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">label</span>: <span class="string">&quot;Menu Item 1&quot;</span>,</span><br><span class="line">      <span class="attr">click</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        event.<span class="property">sender</span>.<span class="title function_">send</span>(<span class="string">&quot;context-menu-command&quot;</span>, <span class="string">&quot;menu-item-1&quot;</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; <span class="attr">type</span>: <span class="string">&quot;separator&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">&quot;Menu Item 2&quot;</span>, <span class="attr">type</span>: <span class="string">&quot;checkbox&quot;</span>, <span class="attr">checked</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">const</span> menu = <span class="title class_">Menu</span>.<span class="title function_">buildFromTemplate</span>(template);</span><br><span class="line">  menu.<span class="title function_">popup</span>(<span class="title class_">BrowserWindow</span>.<span class="title function_">fromWebContents</span>(event.<span class="property">sender</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="net"><a href="#net" class="headerlink" title="net"></a>net</h2><p>官方文档：<a href="https://www.electronjs.org/zh/docs/latest/api/net">https://www.electronjs.org/zh/docs/latest/api/net</a><br>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- net --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;accessBaidu()&quot;</span>&gt;</span>访问百度<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>renderer.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// net</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">accessBaidu</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; net &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>).<span class="property">remote</span>;</span><br><span class="line">  <span class="comment">// 网络访问的情况下，这里的request并没有做封装，可以使用npm.js.org上面公开的库如axios</span></span><br><span class="line">  <span class="comment">// 如果想使用系统代理的时候，推荐使用net.request</span></span><br><span class="line">  <span class="keyword">const</span> request = net.<span class="title function_">request</span>(<span class="string">&quot;https://www.baidu.com&quot;</span>);</span><br><span class="line">  request.<span class="title function_">on</span>(<span class="string">&quot;response&quot;</span>, <span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`**statusCode:<span class="subst">$&#123;response.statusCode&#125;</span>`</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`**header:<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(response.headers)&#125;</span>`</span>);</span><br><span class="line">    response.<span class="title function_">on</span>(<span class="string">&quot;data&quot;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;接收到的数据：&quot;</span>, chunk.<span class="title function_">toString</span>());</span><br><span class="line">    &#125;);</span><br><span class="line">    response.<span class="title function_">on</span>(<span class="string">&quot;end&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;数据接收完成&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  request.<span class="title function_">end</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="与-react-结合以及打包"><a href="#与-react-结合以及打包" class="headerlink" title="与 react 结合以及打包"></a>与 react 结合以及打包</h2><ul>
<li><p>下载示例工程</p>
<ul>
<li>git clone –depth 1 –single-branch –branch master <a href="https://github.com/electron-react-boilerplate/electron-react-boilerplate.git">https://github.com/electron-react-boilerplate/electron-react-boilerplate.git</a> electron-react-start</li>
</ul>
</li>
<li><p>进入工程安装依赖</p>
<ul>
<li>cd electron-react-start</li>
<li>yarn</li>
</ul>
</li>
<li><p>启动开发模式</p>
<ul>
<li>yarn dev</li>
</ul>
</li>
<li><p>可能出现的问题：网速太慢，yarn 总是不成功</p>
<ul>
<li>安装 yrm 并切换镜像<br>■ npm install yrm -g</li>
<li>查看所有镜像<br>■ yrm ls</li>
<li>切换镜像<br>■ yrm use taobao</li>
</ul>
</li>
<li><p>打包命令</p>
<ul>
<li>yarn package</li>
</ul>
</li>
<li><p>升级</p>
<ul>
<li>yarn add electron-updater@latest</li>
<li>yarn add electron-builder@latest</li>
</ul>
</li>
</ul>
<p>resources:<br>icon.icns–&gt;mac 下的图标<br>icon.ico–&gt;windows 下的图标</p>
<h2 id="与-Vue-结合以及打包"><a href="#与-Vue-结合以及打包" class="headerlink" title="与 Vue 结合以及打包"></a>与 Vue 结合以及打包</h2><ul>
<li>安装 vue 脚手架<ul>
<li>npm install -g vue-cli</li>
</ul>
</li>
<li>创建工程<ul>
<li>vue init simulatedgreg&#x2F;electron-vue electron-vue-start</li>
</ul>
</li>
<li>进入工程安装依赖<ul>
<li>cd electron-vue-start</li>
<li>yarn</li>
</ul>
</li>
<li>启动开发模式<ul>
<li>yarn dev</li>
</ul>
</li>
<li>常见问题<ul>
<li>windows 无法编辑 node-sass</li>
</ul>
</li>
<li>解决方案<ul>
<li>npm install -g node-gyp</li>
<li>npm install –global –production windows-build-tools</li>
</ul>
</li>
<li>可以自动安装跨平台的编译器：gym</li>
<li>打包命令<ul>
<li>yarn build</li>
</ul>
</li>
</ul>
<p>给命令行设置科学上网代理<br>如：”<a href="https://127.0.0.1:1080"本地代理服务器地址和端口号">https://127.0.0.1:1080&quot;本地代理服务器地址和端口号</a><br>set http_proxy&#x3D;<a href="https://127.0.0.1:1080/">https://127.0.0.1:1080</a><br>set https_proxy&#x3D;<a href="https://127.0.0.1:1080/">https://127.0.0.1:1080</a></p>
<p>参考视频：<br><a href="https://www.bilibili.com/video/BV1nE41117t3?p=1">千锋教育 Electron-HTML+CSS+JS 构建跨平台桌面应用程序教程</a></p>
<p>参考文档：<br><a href="https://blog.csdn.net/qq_39448719/article/details/123081213">https://blog.csdn.net/qq_39448719/article/details/123081213</a><br><a href="https://www.cnblogs.com/makalochen/p/14363333.html">https://www.cnblogs.com/makalochen/p/14363333.html</a></p>
]]></content>
  </entry>
  <entry>
    <title>Electron ipc——主进程与渲染进程的两情相悦</title>
    <url>/2022/03/20/%E6%A1%8C%E9%9D%A2%E7%AB%AF/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91Electron-ipc%E2%80%94%E2%80%94%E4%B8%BB%E8%BF%9B%E7%A8%8B%E4%B8%8E%E6%B8%B2%E6%9F%93%E8%BF%9B%E7%A8%8B%E7%9A%84%E4%B8%A4%E6%83%85%E7%9B%B8%E6%82%A6/</url>
    <content><![CDATA[<h2 id="「主进程与渲染进程的两情相悦」"><a href="#「主进程与渲染进程的两情相悦」" class="headerlink" title="「主进程与渲染进程的两情相悦」"></a>「主进程与渲染进程的两情相悦」</h2><p>案例版本信息：</p>
<p>electron: v13.6.7</p>
<p>Nodejs: v16.13.2</p>
<h3 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h3><p>谈到 electron 中进程的通信，就不得不谈到官方提供的 ipc 模块。这种方式的通信主要是依赖 electron 提供的 ipcMain 和 ipcRenderer 两个模块。</p>
<h4 id="关于通信分为以下几部分："><a href="#关于通信分为以下几部分：" class="headerlink" title="关于通信分为以下几部分："></a>关于通信分为以下几部分：</h4><ul>
<li><p>渲染进程发送同步&#x2F;异步消息给主进程</p>
</li>
<li><p>主进程发送同步&#x2F;异步消息给渲染进程</p>
</li>
</ul>
<h3 id="1-渲染进程发送同步-异步消息给主进程"><a href="#1-渲染进程发送同步-异步消息给主进程" class="headerlink" title="1. 渲染进程发送同步&#x2F;异步消息给主进程"></a>1. 渲染进程发送同步&#x2F;异步消息给主进程</h3><p>渲染进程依赖 ipcRenderer 模块给主进程发送消息，官方提供了三个方法：</p>
<ul>
<li><p>「ipcRenderer.send(channel, …args)」</p>
</li>
<li><p>「ipcRenderer.invoke(channel, …args)」</p>
</li>
<li><p>「ipcRenderer.sendSync(channel, …args)」</p>
</li>
</ul>
<p>channel 表示的就是事件名(消息名称)， args 好理解，也就是参数。<br>这三种方法都可以给主进程发送消息，同时还可以等待主进程的答应，真所谓是 两情相悦，互相来电 ，只是答应的方式不同。</p>
<h4 id="1-1-「ipcRender-send-案例」"><a href="#1-1-「ipcRender-send-案例」" class="headerlink" title="1.1 「ipcRender.send 案例」"></a>1.1 「ipcRender.send 案例」</h4><p>渲染进程 render.js：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// render.js</span></span><br><span class="line"><span class="comment">// render.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; ipcRenderer &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// send 方法发送，并绑定另一个事件接收返回值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sendMessageToMain</span>(<span class="params"></span>) &#123;</span><br><span class="line">  ipcRenderer.<span class="title function_">send</span>(<span class="string">&quot;render-send-to-main&quot;</span>, <span class="string">&quot;我是渲染进程通过 send 发送的消息&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">ipcRenderer.<span class="title function_">on</span>(<span class="string">&quot;main-reply-to-render&quot;</span>, <span class="function">(<span class="params">event, message</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;replyMessage&quot;</span>, message); <span class="comment">// &#x27;replyMessage 主进程通过 reply 回复给渲染进程的消息&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>主进程 main.js：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; ipcMain &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);</span><br><span class="line"></span><br><span class="line">ipcMain.<span class="title function_">on</span>(<span class="string">&quot;render-send-to-main&quot;</span>, <span class="function">(<span class="params">event, message</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`receive message from render: <span class="subst">$&#123;message&#125;</span>`</span>);</span><br><span class="line">  event.<span class="title function_">reply</span>(<span class="string">&quot;main-reply-to-render&quot;</span>, <span class="string">&quot;主进程通过 reply 回复给渲染进程的消息&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>1、主进程通过 ipcMain.on 来监听渲染进程的消息；<br>2、主进程接收到消息后，可以回复消息，也可以不回复。如果回复的话，通过 event.reply 发送另一个事件，渲染进程监听这个事件得到回复结果。如果不回复消息的话，渲染进程将接着执行 ipcRenderer.send 之后的代码。</p>
<h4 id="1-2-「ipcRender-invoke-案例」"><a href="#1-2-「ipcRender-invoke-案例」" class="headerlink" title="1.2 「ipcRender.invoke 案例」"></a>1.2 「ipcRender.invoke 案例」</h4><p>渲染进程 render.js：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// render.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; ipcRenderer &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">invokeMessageToMain</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> replyMessage = <span class="keyword">await</span> ipcRenderer.<span class="title function_">invoke</span>(</span><br><span class="line">    <span class="string">&quot;render-invoke-to-main&quot;</span>,</span><br><span class="line">    <span class="string">&quot;我是渲染进程通过 invoke 发送的消息&quot;</span></span><br><span class="line">  );</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;replyMessage&quot;</span>, replyMessage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主进程 main.js：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; ipcMain &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);</span><br><span class="line"></span><br><span class="line">ipcMain.<span class="title function_">handle</span>(<span class="string">&quot;render-invoke-to-main&quot;</span>, <span class="keyword">async</span> (event, message) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`receive message from render: <span class="subst">$&#123;message&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">asyncWork</span>();</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">asyncWork</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&quot;延迟 2 秒获取到主进程的返回结果&quot;</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>1、主进程通过 ipcMain.handle 来处理渲染进程发送的消息；<br>2、主进程接收到消息后，可以回复消息，也可以不回复。如果回复消息的话，可以通过 return 给渲染进程回复消息；如果不回复消息的话，渲染进程将接着执行 ipcRenderer.invoke 之后的代码。<br>3、渲染进程异步等待主进程的回应， invoke 的返回值是一个 Promise<code>&lt;pending&gt;</code> 。</p>
<p>为了验证第三点，我们可以不使用 await 来接收 invoke 的返回结果，看看会是什么样：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// render.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; ipcRenderer &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">invokeMessageToMain</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> replyMessage = ipcRenderer.<span class="title function_">invoke</span>(</span><br><span class="line">    <span class="string">&quot;render-invoke-to-main&quot;</span>,</span><br><span class="line">    <span class="string">&quot;我是渲染进程通过 invoke 发送的消息&quot;</span></span><br><span class="line">  );</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;replyMessage&quot;</span>, replyMessage); <span class="comment">// 打印的结果符合我们的预期，是一个 Promise&lt;pending&gt;。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里有小伙伴可能会有疑问了，会不会是因为 ipc.Main 那边是一个异步执行函数才会造成这种情况呢？好的，我们将 main.js 也来改造一下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// render.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; ipcRenderer &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">invokeMessageToMain</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> replyMessage = ipcRenderer.<span class="title function_">invoke</span>(</span><br><span class="line">    <span class="string">&quot;render-invoke-to-main&quot;</span>,</span><br><span class="line">    <span class="string">&quot;我是渲染进程通过 invoke 发送的消息&quot;</span></span><br><span class="line">  );</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;replyMessage&quot;</span>, replyMessage); <span class="comment">// 我们把 ipcMain.handle 的返回值变为了一个普通的字符串，发现 ipcRender.invoke 那边返回的还是一个 Promise&lt;pending&gt;。这也就验证了我们上面的结论。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line">ipcMain.<span class="title function_">handle</span>(<span class="string">&quot;render-invoke-to-main&quot;</span>, <span class="function">(<span class="params">event, message</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`receive message from render: <span class="subst">$&#123;message&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">const</span> result = <span class="string">&quot;我是主进程同步的返回结果&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="1-3-「ipcRender-sendSync-案例」"><a href="#1-3-「ipcRender-sendSync-案例」" class="headerlink" title="1.3 「ipcRender.sendSync 案例」"></a>1.3 「ipcRender.sendSync 案例」</h4><p>渲染进程 render.js：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// render.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; ipcRenderer &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sendSyncMessageToMain</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> replyMessage = ipcRenderer.<span class="title function_">sendSync</span>(</span><br><span class="line">    <span class="string">&quot;render-send-sync-to-main&quot;</span>,</span><br><span class="line">    <span class="string">&quot;我是渲染进程通过 syncSend 发送给主进程的消息&quot;</span></span><br><span class="line">  );</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;replyMessage&quot;</span>, replyMessage); <span class="comment">// &#x27;主进程回复的消息&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主进程 main.js：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; ipcMain &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);</span><br><span class="line"></span><br><span class="line">ipcMain.<span class="title function_">on</span>(<span class="string">&quot;render-send-sync-to-main&quot;</span>, <span class="function">(<span class="params">event, message</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`receive message from render: <span class="subst">$&#123;message&#125;</span>`</span>);</span><br><span class="line">  event.<span class="property">returnValue</span> = <span class="string">&quot;主进程回复的消息&quot;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>1、主进程通过 ipcMain.on 来处理渲染进程发送的消息；<br>2、主进程通过 event.returnValue 回复渲染进程消息；<br>3、如果 event.returnValue 不为 undefined 的话，渲染进程会等待 sendSync 的返回值才执行后面的代码；<br>4、请保证 event.returnValue 是有值的，否则会造成非预期的影响。</p>
<h5 id="前面两点都好理解，关于第三点，会有点绕，这边我们来再写两个例子帮助你理解。"><a href="#前面两点都好理解，关于第三点，会有点绕，这边我们来再写两个例子帮助你理解。" class="headerlink" title="前面两点都好理解，关于第三点，会有点绕，这边我们来再写两个例子帮助你理解。"></a>前面两点都好理解，关于第三点，会有点绕，这边我们来再写两个例子帮助你理解。</h5><p>上面的案例，主进程绑定的处理函数是一个同步的，我们将它换为异步的来看看：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; ipcMain &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);</span><br><span class="line"></span><br><span class="line">ipcMain.<span class="title function_">on</span>(<span class="string">&quot;render-send-sync-to-main&quot;</span>, <span class="keyword">async</span> (event, message) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`receive message from render: <span class="subst">$&#123;message&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">asyncWork</span>();</span><br><span class="line">  event.<span class="property">returnValue</span> = result;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">asyncWork</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&quot;延迟 2 秒获取到主进程的返回结果&quot;</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>次我们在执行完一个异步函数 asyncWork 之后再给 event.returnValue 赋值。</p>
<p>结果发现渲染进程那边会在 2 秒之后才打印：</p>
<blockquote>
<p>“replyMessage 延迟 2 秒获取到主进程的返回结果”</p>
</blockquote>
<p>而且对于渲染进程，以下两种写法，结果都是一样的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// render.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; ipcRenderer &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sendSyncMessageToMain</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> replyMessage = ipcRenderer.<span class="title function_">sendSync</span>(</span><br><span class="line">    <span class="string">&quot;render-send-sync-to-main&quot;</span>,</span><br><span class="line">    <span class="string">&quot;我是渲染进程通过 syncSend 发送给主进程的消息&quot;</span></span><br><span class="line">  );</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;replyMessage&quot;</span>, replyMessage); <span class="comment">// &#x27;replyMessage 延迟 2 秒获取到主进程的返回结果&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者改用 async 函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">sendSyncMessageToMain</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> replyMessage = <span class="keyword">await</span> ipcRenderer.<span class="title function_">sendSync</span>(</span><br><span class="line">    <span class="string">&quot;render-send-sync-to-main&quot;</span>,</span><br><span class="line">    <span class="string">&quot;我是渲染进程发送给主进程的同步消息&quot;</span></span><br><span class="line">  );</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;replyMessage&quot;</span>, replyMessage); <span class="comment">// &#x27;replyMessage 延迟 2 秒获取到主进程的返回结果&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也就是说，不论渲染进程在接收 sendSync 结果的时候，是不是用 await 等待，都会等待结果返回后才向下执行。但如果你已经确定你的请求是一个异步的话，建议还是使用 invoke 去发送消息，这里出于两点原因考虑：</p>
<p>1、方法名 sendSync 就很符合语义，发送同步消息；</p>
<p>2、请求执行的明明是异步代码，但是如果你用 const replyMessage &#x3D; ipcRenderer.sendSync(‘xxx’) 方式来获取响应信息，会很奇怪。</p>
<p>OK，上面的第四点谈到了，请保证 event.returnValue 是有值的，否则会造成非预期的影响。让我们也来写个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// render.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; ipcRenderer &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sendSyncMessageToMain</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> replyMessage = ipcRenderer.<span class="title function_">sendSync</span>(</span><br><span class="line">    <span class="string">&quot;render-send-sync-to-main&quot;</span>,</span><br><span class="line">    <span class="string">&quot;我是渲染进程通过 syncSend 发送给主进程的消息&quot;</span></span><br><span class="line">  );</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;replyMessage&quot;</span>, replyMessage); <span class="comment">// replyMessage &#123;error: &quot;reply was never sent&quot;&#125;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;next&quot;</span>); <span class="comment">// 这里也会执行</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line">ipcMain.<span class="title function_">on</span>(<span class="string">&quot;render-send-sync-to-main&quot;</span>, <span class="keyword">async</span> (event, message) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`receive message from render: <span class="subst">$&#123;message&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>在上面的例子中，主进程那边不对 event.returnValue 做处理，在渲染进程这边将会得到一个错误：</p>
<blockquote>
<p>{error: “reply was never sent”}</p>
</blockquote>
<p>虽然 next 也会打印，但是如果你再想去发送一次 render-send-sync-to-main 你会发现页面已经卡了…</p>
<h3 id="2-主进程发送同步-异步消息给渲染进程"><a href="#2-主进程发送同步-异步消息给渲染进程" class="headerlink" title="2. 主进程发送同步&#x2F;异步消息给渲染进程"></a>2. 主进程发送同步&#x2F;异步消息给渲染进程</h3><p>与 ipcRenderer 模块对应的就是 ipcMain 了。主进程依赖 ipcMain 模块给渲染进程发送消息，主要有以下几种方式：</p>
<ul>
<li>event.reply：主进程通过 on 监听消息，如果渲染进程用 send 发送消息时，可以在 on 的回调函数里获取到事件对象并通过 event.reply 发送另一个事件；</li>
<li>return ：主进程通过 handle 监听处理消息，如果渲染进程用 invoke 发送消息时，可以在 on 的回调函数里通过 return 回复消息；</li>
<li>event.returnValue ：主进程通过 on 监听消息，如果渲染进程用 sendSync 发送消息时，可以在 on 的回调函数里通过设置 event.returnValue 回复消息；</li>
<li>window.webContents.send ：主进程通过窗口实例的 webContents 给本窗口内的渲染进程发送消息。</li>
</ul>
<p>前面三种在渲染进程发送消息那一部分已经介绍过了，接下来让我们来看一下 window.webContents 这种方式吧。</p>
<h4 id="2-1-「window-webContents-send-案例-」"><a href="#2-1-「window-webContents-send-案例-」" class="headerlink" title="2.1 「window.webContents.send 案例 :」"></a>2.1 「window.webContents.send 案例 :」</h4><p>这种方式依赖于 webContents 对象，它是我们在项目中新建窗口时，产生的窗口对象上的一个属性。</p>
<p>例如我们在一个窗口完成加载时，发送消息：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createWindow</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable language_">window</span> = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">    <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">      <span class="attr">nodeIntegration</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">contextIsolation</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">loadFile</span>(<span class="string">&quot;src/index.html&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 窗口在完成加载时，通过 webContents.send 给渲染进程发送消息</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">webContents</span>.<span class="title function_">on</span>(<span class="string">&quot;did-finish-load&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">webContents</span>.<span class="title function_">send</span>(<span class="string">&quot;main-send-to-render&quot;</span>, <span class="string">&quot;启动完成了&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(createWindow);</span><br></pre></td></tr></table></figure>

<p>渲染进程 render.js ：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// render.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; ipcRenderer &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);</span><br><span class="line"></span><br><span class="line">ipcRenderer.<span class="title function_">on</span>(<span class="string">&quot;main-send-to-render&quot;</span>, <span class="function">(<span class="params">event, message</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`receive message from main: <span class="subst">$&#123;message&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>通过以上操作，也可以达到主进程主动给渲染进程发送消息的效果(*￣︶￣)。</p>
<h3 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h3><p>OK，介绍完了功能，分析完了案例，让我们来加以总结一下吧。</p>
<p>如果通过 ipcMain 和 ipcRenderer ，渲染进程有三种方式给主进程发送消息，即:</p>
<p>「ipcRenderer.send(channel, …args)」</p>
<p>「ipcRenderer.invoke(channel, …args)」</p>
<p>「ipcRenderer.sendSync(channel, …args)」</p>
<p>通过上面三种方式，主进程都可以有相应的方法给予渲染进程答应，只是答应的方法不同；</p>
<p>同步请求建议用 sendSync，异步请求建议用 invoke；</p>
<p>主进程中还可以获取到某个渲染进程的 window.webContents ，然后通过 window.webContents.send 给这个渲染进程发送消息；</p>
<p>转载链接：<br><a href="https://blog.csdn.net/qq_39448719/article/details/123081213">https://blog.csdn.net/qq_39448719/article/details/123081213</a></p>
]]></content>
  </entry>
  <entry>
    <title>面试真题10：字节跳动</title>
    <url>/2022/01/09/%E9%9D%A2%E8%AF%95%E9%A2%98/%E9%9D%A2%E8%AF%95%E7%9C%9F%E9%A2%9810%EF%BC%9A%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8/</url>
    <content><![CDATA[<h3 id="1-node-模块机制是怎样的"><a href="#1-node-模块机制是怎样的" class="headerlink" title="1.node 模块机制是怎样的"></a>1.node 模块机制是怎样的</h3><h3 id="2-node-require-具体实现是什么"><a href="#2-node-require-具体实现是什么" class="headerlink" title="2.node require 具体实现是什么"></a>2.node require 具体实现是什么</h3><h3 id="3-node-事件循环与浏览器的哪些不一样"><a href="#3-node-事件循环与浏览器的哪些不一样" class="headerlink" title="3.node 事件循环与浏览器的哪些不一样"></a>3.node 事件循环与浏览器的哪些不一样</h3><h3 id="4-cluster-原理是怎样的"><a href="#4-cluster-原理是怎样的" class="headerlink" title="4.cluster 原理是怎样的"></a>4.cluster 原理是怎样的</h3><h3 id="5-pipe-原理是怎样的"><a href="#5-pipe-原理是怎样的" class="headerlink" title="5.pipe 原理是怎样的"></a>5.pipe 原理是怎样的</h3><h3 id="6-node-的异常处理方式"><a href="#6-node-的异常处理方式" class="headerlink" title="6.node 的异常处理方式"></a>6.node 的异常处理方式</h3><h3 id="7-适配器和外观模式的区别"><a href="#7-适配器和外观模式的区别" class="headerlink" title="7.适配器和外观模式的区别"></a>7.适配器和外观模式的区别</h3><h3 id="8-重构的手段有哪些"><a href="#8-重构的手段有哪些" class="headerlink" title="8.重构的手段有哪些"></a>8.重构的手段有哪些</h3><h3 id="9-数组去重"><a href="#9-数组去重" class="headerlink" title="9.数组去重"></a>9.数组去重</h3><h3 id="10-你比较擅长哪一块，不足的地方在哪里"><a href="#10-你比较擅长哪一块，不足的地方在哪里" class="headerlink" title="10.你比较擅长哪一块，不足的地方在哪里"></a>10.你比较擅长哪一块，不足的地方在哪里</h3>]]></content>
  </entry>
  <entry>
    <title>面试真题1：字节跳动</title>
    <url>/2022/01/09/%E9%9D%A2%E8%AF%95%E9%A2%98/%E9%9D%A2%E8%AF%95%E7%9C%9F%E9%A2%981%EF%BC%9A%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8/</url>
    <content><![CDATA[<h3 id="1-react-setState-是同步还是异步"><a href="#1-react-setState-是同步还是异步" class="headerlink" title="1.react setState 是同步还是异步"></a>1.react setState 是同步还是异步</h3><h3 id="2-什么是高阶组件，请举例说明"><a href="#2-什么是高阶组件，请举例说明" class="headerlink" title="2.什么是高阶组件，请举例说明"></a>2.什么是高阶组件，请举例说明</h3><h3 id="3-解释一下原型链"><a href="#3-解释一下原型链" class="headerlink" title="3.解释一下原型链"></a>3.解释一下原型链</h3><h3 id="4-instanceof-原理"><a href="#4-instanceof-原理" class="headerlink" title="4.instanceof 原理"></a>4.instanceof 原理</h3><h3 id="5-apply-和-call-的作用及区别"><a href="#5-apply-和-call-的作用及区别" class="headerlink" title="5.apply 和 call 的作用及区别"></a>5.apply 和 call 的作用及区别</h3><h3 id="6-position-有哪些值，作用分别是什么"><a href="#6-position-有哪些值，作用分别是什么" class="headerlink" title="6.position 有哪些值，作用分别是什么"></a>6.position 有哪些值，作用分别是什么</h3><h3 id="7-说下你对-DOM-树的理解"><a href="#7-说下你对-DOM-树的理解" class="headerlink" title="7.说下你对 DOM 树的理解"></a>7.说下你对 DOM 树的理解</h3><h3 id="8-重排和重绘是什么，有什么区别"><a href="#8-重排和重绘是什么，有什么区别" class="headerlink" title="8.重排和重绘是什么，有什么区别"></a>8.重排和重绘是什么，有什么区别</h3><h3 id="9-https-加密过程是怎样的"><a href="#9-https-加密过程是怎样的" class="headerlink" title="9.https 加密过程是怎样的"></a>9.https 加密过程是怎样的</h3><h3 id="10-实现-add-1-2-3"><a href="#10-实现-add-1-2-3" class="headerlink" title="10.实现 add(1)(2)(3)"></a>10.实现 add(1)(2)(3)</h3>]]></content>
  </entry>
  <entry>
    <title>面试真题2：字节跳动</title>
    <url>/2022/01/09/%E9%9D%A2%E8%AF%95%E9%A2%98/%E9%9D%A2%E8%AF%95%E7%9C%9F%E9%A2%982%EF%BC%9A%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8/</url>
    <content><![CDATA[<h3 id="1-react-为什么需要合成事件"><a href="#1-react-为什么需要合成事件" class="headerlink" title="1.react 为什么需要合成事件"></a>1.react 为什么需要合成事件</h3><h3 id="2-为什么有时-react-两次-setState，只执行一次"><a href="#2-为什么有时-react-两次-setState，只执行一次" class="headerlink" title="2.为什么有时 react 两次 setState，只执行一次"></a>2.为什么有时 react 两次 setState，只执行一次</h3><h3 id="3-redux-有哪些原则"><a href="#3-redux-有哪些原则" class="headerlink" title="3.redux 有哪些原则"></a>3.redux 有哪些原则</h3><h3 id="4-es5-实现继承"><a href="#4-es5-实现继承" class="headerlink" title="4.es5 实现继承"></a>4.es5 实现继承</h3><h3 id="5-实现一个-promise"><a href="#5-实现一个-promise" class="headerlink" title="5.实现一个 promise"></a>5.实现一个 promise</h3><h3 id="6-CSS-选择器有哪些"><a href="#6-CSS-选择器有哪些" class="headerlink" title="6.CSS 选择器有哪些"></a>6.CSS 选择器有哪些</h3><h3 id="7-说下事件模型"><a href="#7-说下事件模型" class="headerlink" title="7.说下事件模型"></a>7.说下事件模型</h3><h3 id="8-如何减少白屏的时间"><a href="#8-如何减少白屏的时间" class="headerlink" title="8.如何减少白屏的时间"></a>8.如何减少白屏的时间</h3><h3 id="9-3-次握手过程"><a href="#9-3-次握手过程" class="headerlink" title="9.3 次握手过程"></a>9.3 次握手过程</h3><h3 id="10-判断链表是否有环"><a href="#10-判断链表是否有环" class="headerlink" title="10.判断链表是否有环"></a>10.判断链表是否有环</h3>]]></content>
  </entry>
  <entry>
    <title>面试真题3：字节跳动</title>
    <url>/2022/01/09/%E9%9D%A2%E8%AF%95%E9%A2%98/%E9%9D%A2%E8%AF%95%E7%9C%9F%E9%A2%983%EF%BC%9A%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8/</url>
    <content><![CDATA[<h3 id="1-react-合成事件是什么，和原生事件的区别"><a href="#1-react-合成事件是什么，和原生事件的区别" class="headerlink" title="1.react 合成事件是什么，和原生事件的区别"></a>1.react 合成事件是什么，和原生事件的区别</h3><h3 id="2-react-如何处理异常"><a href="#2-react-如何处理异常" class="headerlink" title="2.react 如何处理异常"></a>2.react 如何处理异常</h3><h3 id="3-闭包的作用和原理"><a href="#3-闭包的作用和原理" class="headerlink" title="3.闭包的作用和原理"></a>3.闭包的作用和原理</h3><h3 id="4-0-1-0-2-为什么不等于-0-3"><a href="#4-0-1-0-2-为什么不等于-0-3" class="headerlink" title="4.0.1+0.2 为什么不等于 0.3"></a>4.0.1+0.2 为什么不等于 0.3</h3><h3 id="5-什么是-BFC，BFC-有什么作用，如何形成-BFC"><a href="#5-什么是-BFC，BFC-有什么作用，如何形成-BFC" class="headerlink" title="5.什么是 BFC，BFC 有什么作用，如何形成 BFC"></a>5.什么是 BFC，BFC 有什么作用，如何形成 BFC</h3><h3 id="6-浏览器缓存策略是怎样的"><a href="#6-浏览器缓存策略是怎样的" class="headerlink" title="6.浏览器缓存策略是怎样的"></a>6.浏览器缓存策略是怎样的</h3><h3 id="7-你知道的前端性能优化手段有哪些"><a href="#7-你知道的前端性能优化手段有哪些" class="headerlink" title="7.你知道的前端性能优化手段有哪些"></a>7.你知道的前端性能优化手段有哪些</h3><h3 id="8-前端模块化机制有哪些"><a href="#8-前端模块化机制有哪些" class="headerlink" title="8.前端模块化机制有哪些"></a>8.前端模块化机制有哪些</h3><h3 id="9-http2-0-做了哪些改进"><a href="#9-http2-0-做了哪些改进" class="headerlink" title="9.http2.0 做了哪些改进"></a>9.http2.0 做了哪些改进</h3><h3 id="10-求解平方根"><a href="#10-求解平方根" class="headerlink" title="10.求解平方根"></a>10.求解平方根</h3>]]></content>
  </entry>
  <entry>
    <title>面试真题4：字节跳动</title>
    <url>/2022/01/09/%E9%9D%A2%E8%AF%95%E9%A2%98/%E9%9D%A2%E8%AF%95%E7%9C%9F%E9%A2%984%EF%BC%9A%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8/</url>
    <content><![CDATA[<h3 id="1-react-为什么需要-fiber"><a href="#1-react-为什么需要-fiber" class="headerlink" title="1.react 为什么需要 fiber"></a>1.react 为什么需要 fiber</h3><h3 id="2-redux-中间件机制"><a href="#2-redux-中间件机制" class="headerlink" title="2.redux 中间件机制"></a>2.redux 中间件机制</h3><h3 id="3-bind-的实现"><a href="#3-bind-的实现" class="headerlink" title="3.bind 的实现"></a>3.bind 的实现</h3><h3 id="4-说下-generator-原理"><a href="#4-说下-generator-原理" class="headerlink" title="4.说下 generator 原理"></a>4.说下 generator 原理</h3><h3 id="5-flex-布局有什么好处"><a href="#5-flex-布局有什么好处" class="headerlink" title="5.flex 布局有什么好处"></a>5.flex 布局有什么好处</h3><h3 id="6-如何定位内存泄露"><a href="#6-如何定位内存泄露" class="headerlink" title="6.如何定位内存泄露"></a>6.如何定位内存泄露</h3><h3 id="7-渲染合成层是什么"><a href="#7-渲染合成层是什么" class="headerlink" title="7.渲染合成层是什么"></a>7.渲染合成层是什么</h3><h3 id="8-babel-是什么，怎么做到的"><a href="#8-babel-是什么，怎么做到的" class="headerlink" title="8.babel 是什么，怎么做到的"></a>8.babel 是什么，怎么做到的</h3><h3 id="9-http2-0-有哪些不足，http3-0-是什么"><a href="#9-http2-0-有哪些不足，http3-0-是什么" class="headerlink" title="9.http2.0 有哪些不足，http3.0 是什么"></a>9.http2.0 有哪些不足，http3.0 是什么</h3><h3 id="10-实现一个发布订阅模式"><a href="#10-实现一个发布订阅模式" class="headerlink" title="10.实现一个发布订阅模式"></a>10.实现一个发布订阅模式</h3>]]></content>
  </entry>
  <entry>
    <title>面试真题5：字节跳动</title>
    <url>/2022/01/09/%E9%9D%A2%E8%AF%95%E9%A2%98/%E9%9D%A2%E8%AF%95%E7%9C%9F%E9%A2%985%EF%BC%9A%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8/</url>
    <content><![CDATA[<h3 id="1-vue-的数据绑定机制是如何实现的"><a href="#1-vue-的数据绑定机制是如何实现的" class="headerlink" title="1.vue 的数据绑定机制是如何实现的"></a>1.vue 的数据绑定机制是如何实现的</h3><h3 id="2-vue-next-tick-实现原理"><a href="#2-vue-next-tick-实现原理" class="headerlink" title="2.vue next tick 实现原理"></a>2.vue next tick 实现原理</h3><h3 id="3-谈谈变量提升"><a href="#3-谈谈变量提升" class="headerlink" title="3.谈谈变量提升"></a>3.谈谈变量提升</h3><h3 id="4-new-操作符具体做了什么"><a href="#4-new-操作符具体做了什么" class="headerlink" title="4.new 操作符具体做了什么"></a>4.new 操作符具体做了什么</h3><h3 id="5-介绍下盒子模型"><a href="#5-介绍下盒子模型" class="headerlink" title="5.介绍下盒子模型"></a>5.介绍下盒子模型</h3><h3 id="6-有哪些方式可以使-div-居中"><a href="#6-有哪些方式可以使-div-居中" class="headerlink" title="6.有哪些方式可以使 div 居中"></a>6.有哪些方式可以使 div 居中</h3><h3 id="7-有听过前端性能优化指标-RAIL-吗"><a href="#7-有听过前端性能优化指标-RAIL-吗" class="headerlink" title="7.有听过前端性能优化指标 RAIL 吗"></a>7.有听过前端性能优化指标 RAIL 吗</h3><h3 id="8-进程和线程的区别"><a href="#8-进程和线程的区别" class="headerlink" title="8.进程和线程的区别"></a>8.进程和线程的区别</h3><h3 id="9-tcp-滑动窗口是什么"><a href="#9-tcp-滑动窗口是什么" class="headerlink" title="9.tcp 滑动窗口是什么"></a>9.tcp 滑动窗口是什么</h3><h3 id="10-实现一个斐波那契数列"><a href="#10-实现一个斐波那契数列" class="headerlink" title="10.实现一个斐波那契数列"></a>10.实现一个斐波那契数列</h3>]]></content>
  </entry>
  <entry>
    <title>面试真题6：字节跳动</title>
    <url>/2022/01/09/%E9%9D%A2%E8%AF%95%E9%A2%98/%E9%9D%A2%E8%AF%95%E7%9C%9F%E9%A2%986%EF%BC%9A%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8/</url>
    <content><![CDATA[<h3 id="1-vue-的-computed-和-watch-的区别"><a href="#1-vue-的-computed-和-watch-的区别" class="headerlink" title="1.vue 的 computed 和 watch 的区别"></a>1.vue 的 computed 和 watch 的区别</h3><h3 id="2-说下-vue-的-keep-alive"><a href="#2-说下-vue-的-keep-alive" class="headerlink" title="2.说下 vue 的 keep alive"></a>2.说下 vue 的 keep alive</h3><h3 id="3-什么是立即执行函数"><a href="#3-什么是立即执行函数" class="headerlink" title="3.什么是立即执行函数"></a>3.什么是立即执行函数</h3><h3 id="4-谈下事件循环机制"><a href="#4-谈下事件循环机制" class="headerlink" title="4.谈下事件循环机制"></a>4.谈下事件循环机制</h3><h3 id="5-css-优先级是怎么计算的"><a href="#5-css-优先级是怎么计算的" class="headerlink" title="5.css 优先级是怎么计算的"></a>5.css 优先级是怎么计算的</h3><h3 id="6-CSS-相关的性能优化"><a href="#6-CSS-相关的性能优化" class="headerlink" title="6.CSS 相关的性能优化"></a>6.CSS 相关的性能优化</h3><h3 id="7-谈下-webpack-loader-机制"><a href="#7-谈下-webpack-loader-机制" class="headerlink" title="7.谈下 webpack loader 机制"></a>7.谈下 webpack loader 机制</h3><h3 id="8-进程通信方式有哪些"><a href="#8-进程通信方式有哪些" class="headerlink" title="8.进程通信方式有哪些"></a>8.进程通信方式有哪些</h3><h3 id="9-爬楼梯问题"><a href="#9-爬楼梯问题" class="headerlink" title="9.爬楼梯问题"></a>9.爬楼梯问题</h3><h3 id="10-实现一个-trim-方法"><a href="#10-实现一个-trim-方法" class="headerlink" title="10.实现一个 trim 方法"></a>10.实现一个 trim 方法</h3>]]></content>
  </entry>
  <entry>
    <title>面试真题7：字节跳动</title>
    <url>/2022/01/09/%E9%9D%A2%E8%AF%95%E9%A2%98/%E9%9D%A2%E8%AF%95%E7%9C%9F%E9%A2%987%EF%BC%9A%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8/</url>
    <content><![CDATA[<h3 id="1-react-fiber-有哪些优点，怎样做到的"><a href="#1-react-fiber-有哪些优点，怎样做到的" class="headerlink" title="1.react fiber 有哪些优点，怎样做到的"></a>1.react fiber 有哪些优点，怎样做到的</h3><h3 id="2-谈谈你对作用域的理解"><a href="#2-谈谈你对作用域的理解" class="headerlink" title="2.谈谈你对作用域的理解"></a>2.谈谈你对作用域的理解</h3><h3 id="3-双飞冀-圣杯布局"><a href="#3-双飞冀-圣杯布局" class="headerlink" title="3.双飞冀&#x2F;圣杯布局"></a>3.双飞冀&#x2F;圣杯布局</h3><h3 id="4-浮动元素会造成什么影响，如何清除浮动"><a href="#4-浮动元素会造成什么影响，如何清除浮动" class="headerlink" title="4.浮动元素会造成什么影响，如何清除浮动"></a>4.浮动元素会造成什么影响，如何清除浮动</h3><h3 id="5-网站首页有大量的图片，加载很慢，如何去优化呢？"><a href="#5-网站首页有大量的图片，加载很慢，如何去优化呢？" class="headerlink" title="5.网站首页有大量的图片，加载很慢，如何去优化呢？"></a>5.网站首页有大量的图片，加载很慢，如何去优化呢？</h3><h3 id="6-描述下浏览器从输入网址到页面展现的整个过程"><a href="#6-描述下浏览器从输入网址到页面展现的整个过程" class="headerlink" title="6.描述下浏览器从输入网址到页面展现的整个过程"></a>6.描述下浏览器从输入网址到页面展现的整个过程</h3><h3 id="7-uglify-原理的是什么"><a href="#7-uglify-原理的是什么" class="headerlink" title="7.uglify 原理的是什么"></a>7.uglify 原理的是什么</h3><h3 id="8-tcp-重试机制"><a href="#8-tcp-重试机制" class="headerlink" title="8.tcp 重试机制"></a>8.tcp 重试机制</h3><h3 id="9-层次遍历二叉树"><a href="#9-层次遍历二叉树" class="headerlink" title="9.层次遍历二叉树"></a>9.层次遍历二叉树</h3><h3 id="10-实现节流函数"><a href="#10-实现节流函数" class="headerlink" title="10.实现节流函数"></a>10.实现节流函数</h3>]]></content>
  </entry>
  <entry>
    <title>面试真题9：字节跳动</title>
    <url>/2022/01/09/%E9%9D%A2%E8%AF%95%E9%A2%98/%E9%9D%A2%E8%AF%95%E7%9C%9F%E9%A2%989%EF%BC%9A%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8/</url>
    <content><![CDATA[<h3 id="1-CSS3-有哪些新特性"><a href="#1-CSS3-有哪些新特性" class="headerlink" title="1.CSS3 有哪些新特性"></a>1.CSS3 有哪些新特性</h3><h3 id="2-层叠上下文是什么"><a href="#2-层叠上下文是什么" class="headerlink" title="2.层叠上下文是什么"></a>2.层叠上下文是什么</h3><h3 id="3-history-和-hash-两种路由方式的最大区别是什么？"><a href="#3-history-和-hash-两种路由方式的最大区别是什么？" class="headerlink" title="3.history 和 hash 两种路由方式的最大区别是什么？"></a>3.history 和 hash 两种路由方式的最大区别是什么？</h3><h3 id="4-动画性能如何优化"><a href="#4-动画性能如何优化" class="headerlink" title="4.动画性能如何优化"></a>4.动画性能如何优化</h3><h3 id="5-tree-shaking-是什么，有什么作用，原理是什么"><a href="#5-tree-shaking-是什么，有什么作用，原理是什么" class="headerlink" title="5.tree shaking 是什么，有什么作用，原理是什么"></a>5.tree shaking 是什么，有什么作用，原理是什么</h3><h3 id="6-webpack-工作流程是怎样的"><a href="#6-webpack-工作流程是怎样的" class="headerlink" title="6.webpack 工作流程是怎样的"></a>6.webpack 工作流程是怎样的</h3><h3 id="7-什么场景下会用策略模式"><a href="#7-什么场景下会用策略模式" class="headerlink" title="7.什么场景下会用策略模式"></a>7.什么场景下会用策略模式</h3><h3 id="8-找出数组中和为-sum-的-n-个数"><a href="#8-找出数组中和为-sum-的-n-个数" class="headerlink" title="8.找出数组中和为 sum 的 n 个数"></a>8.找出数组中和为 sum 的 n 个数</h3><h3 id="9-判断括号字符串是否有效"><a href="#9-判断括号字符串是否有效" class="headerlink" title="9.判断括号字符串是否有效"></a>9.判断括号字符串是否有效</h3><h3 id="10-平常的学习途径"><a href="#10-平常的学习途径" class="headerlink" title="10.平常的学习途径"></a>10.平常的学习途径</h3>]]></content>
  </entry>
  <entry>
    <title>面试真题8：字节跳动</title>
    <url>/2022/01/09/%E9%9D%A2%E8%AF%95%E9%A2%98/%E9%9D%A2%E8%AF%95%E7%9C%9F%E9%A2%988%EF%BC%9A%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8/</url>
    <content><![CDATA[<h3 id="1-react-有哪些性能优化的点"><a href="#1-react-有哪些性能优化的点" class="headerlink" title="1.react 有哪些性能优化的点"></a>1.react 有哪些性能优化的点</h3><h3 id="2-v8-垃圾回收机制"><a href="#2-v8-垃圾回收机制" class="headerlink" title="2.v8 垃圾回收机制"></a>2.v8 垃圾回收机制</h3><h3 id="3-CSS-样式隔离手段"><a href="#3-CSS-样式隔离手段" class="headerlink" title="3.CSS 样式隔离手段"></a>3.CSS 样式隔离手段</h3><h3 id="4-行内元素、块级元素有哪些，区别是什么"><a href="#4-行内元素、块级元素有哪些，区别是什么" class="headerlink" title="4.行内元素、块级元素有哪些，区别是什么"></a>4.行内元素、块级元素有哪些，区别是什么</h3><h3 id="5-聊下你知道的浏览器架构"><a href="#5-聊下你知道的浏览器架构" class="headerlink" title="5.聊下你知道的浏览器架构"></a>5.聊下你知道的浏览器架构</h3><h3 id="6-是否有写过-webpack-插件"><a href="#6-是否有写过-webpack-插件" class="headerlink" title="6.是否有写过 webpack 插件"></a>6.是否有写过 webpack 插件</h3><h3 id="7-websocket-建立过程"><a href="#7-websocket-建立过程" class="headerlink" title="7.websocket 建立过程"></a>7.websocket 建立过程</h3><h3 id="8-合并二维有序数组成一维有序数组"><a href="#8-合并二维有序数组成一维有序数组" class="headerlink" title="8.合并二维有序数组成一维有序数组"></a>8.合并二维有序数组成一维有序数组</h3><h3 id="9-实现防抖函数"><a href="#9-实现防抖函数" class="headerlink" title="9.实现防抖函数"></a>9.实现防抖函数</h3><h3 id="10-最近看了什么书，有什么心得"><a href="#10-最近看了什么书，有什么心得" class="headerlink" title="10.最近看了什么书，有什么心得"></a>10.最近看了什么书，有什么心得</h3>]]></content>
  </entry>
  <entry>
    <title>面试真题</title>
    <url>/2019/04/03/%E9%9D%A2%E8%AF%95%E9%A2%98/%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h6 id="什么是纯函数"><a href="#什么是纯函数" class="headerlink" title="什么是纯函数"></a>什么是纯函数</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">简单来说，一个函数的返回结果只依赖于它的参数，并且在执行过程里面没有副作用，我们就把这个函数叫做纯函数。这么说肯定比较抽象，我们把它掰开来看：</span><br><span class="line"></span><br><span class="line">函数的返回结果只依赖于它的参数。</span><br><span class="line">函数执行过程里面没有副作用。</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">foo</span> = (<span class="params">b</span>) =&gt; a + b</span><br><span class="line"><span class="title function_">foo</span>(<span class="number">2</span>) <span class="comment">// =&gt; 3</span></span><br><span class="line"></span><br><span class="line">foo 函数不是一个纯函数，因为它返回的结果依赖于外部变量 a</span><br><span class="line"></span><br><span class="line">为什么要煞费苦心地构建纯函数？因为纯函数非常“靠谱”，执行一个纯函数你不用担心它会干什么坏事，它不会产生不可预料的行为，也不会对外部产生影响。不管何时何地，你给它什么它就会乖乖地吐出什么。如果你的应用程序大多数函数都是由纯函数组成，那么你的程序测试、调试起来会非常方便</span><br></pre></td></tr></table></figure>

<h6 id="什么是-ajax"><a href="#什么是-ajax" class="headerlink" title="什么是 ajax"></a>什么是 ajax</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">首先，speak with me, 诶债克斯，别读成阿贾克斯了哦~。</span><br><span class="line"></span><br><span class="line">AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。</span><br><span class="line"></span><br><span class="line">AJAX 不是新的编程语言，而是一种使用现有标准的新方法。</span><br><span class="line"></span><br><span class="line">AJAX 最大的优点是在不重新加载整个页面的情况下，可以与服务器交换数据并更新部分网页内容。</span><br><span class="line"></span><br><span class="line">AJAX 不需要任何浏览器插件，但需要用户允许JavaScript在浏览器上执行。</span><br><span class="line"></span><br><span class="line">Ajax就是用 JS 发起一个请求，并得到服务器返回的内容。这跟以前的技术最大的不同点在于「页面没有刷新」，改善了用户体验，仅此而已。</span><br><span class="line"></span><br><span class="line">1. 创建一个对象 XMLHttpRequest</span><br><span class="line">var xhr = new XMLHttpRequest();为了支持ie6以及更早的版本，要 var xhr=new ActiveXObject()</span><br><span class="line">2.监听请求成功后的状态变化</span><br><span class="line">3.设置请求参数</span><br><span class="line">4.发起请求</span><br><span class="line">5.操作DOM，实现动态局部刷新</span><br><span class="line"></span><br><span class="line">一个完整的请求由四部分组成</span><br><span class="line"></span><br><span class="line">onreadystatechange：用来监听readyState的变化的</span><br><span class="line"></span><br><span class="line">readyState：表示当前请求的后台的状态</span><br><span class="line"></span><br><span class="line">status：表示处理的结果</span><br><span class="line"></span><br><span class="line">其中readyState：表示当前请求的后台的状态</span><br><span class="line"></span><br><span class="line">0：请求未初始化(还没有调用open())</span><br><span class="line"></span><br><span class="line">1：请求已经建立，但是还没有发送(还没有调用send())</span><br><span class="line"></span><br><span class="line">2：请求已经发送，正在处理中</span><br><span class="line"></span><br><span class="line">3：请求正在处理中，通常响应中已经有部分数据可以用了</span><br><span class="line"></span><br><span class="line">4：响应已经完成，可以获取并使用服务器的响应了</span><br><span class="line"></span><br><span class="line">而status：表示处理的结果(状态码)</span><br><span class="line"></span><br><span class="line">1XX，表示收到请求正在处理中</span><br><span class="line"></span><br><span class="line">status == 200 是表示处理的结果是OK的</span><br><span class="line"></span><br><span class="line">状态码:200到300是指服务端正常返回</span><br><span class="line"></span><br><span class="line">304:如果网页自请求者上次请求后再也没有更改过，应将服务器配置为返回此响应，进而节省带宽和开销</span><br><span class="line"></span><br><span class="line">404:找不到对象（404 not found)</span><br><span class="line"></span><br><span class="line">503:服务器超时</span><br><span class="line"></span><br><span class="line">设置请求参数</span><br><span class="line"></span><br><span class="line">Get和post方法的区别：</span><br><span class="line"></span><br><span class="line">get是获取数据，get的send方法的参数可以是null或者空，对发送信息有限制，一般在2000个字符，一般是用来查询（幂等） </span><br><span class="line">post可以发送数据，但是在使用post方法发送数据，需要使用setRequestHeader()来添加HTTP头，同时，post的send()方法需要写入要发送的数据的值, 一般用于修改服务器上的资源，对信息数量无限制，也更安全</span><br><span class="line"></span><br><span class="line">ajax.open(&quot;post&quot;, &quot;/carrots-admin-ajax/a/login&quot;,true);</span><br><span class="line">ajax.setRequestHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;);</span><br><span class="line">ajax.send(&quot;name=&quot; + name + &quot;&amp;pwd=&quot; + code);</span><br><span class="line">Content-type要作为请求头放在open和send之间</span><br></pre></td></tr></table></figure>

<h6 id="ajax-的优缺点"><a href="#ajax-的优缺点" class="headerlink" title="ajax 的优缺点"></a>ajax 的优缺点</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">总结——AJAX的优点与缺点：</span><br><span class="line">优点：</span><br><span class="line">1、实现了异步交互，提高了用户体验。</span><br><span class="line">2、无需重新加载整个网页，只需要与服务器进行少量的数据交换，就能够实现对网页中的某一部分进行更新，从而减少了带宽的占用。</span><br><span class="line">3、AJAX是在客户端运行的，它承载了一部分本来由服务器承担的工作，减少了大用户量下的服务器负载。</span><br><span class="line">缺点：</span><br><span class="line">1、安全性问题，大量的使用AJAX暴露了服务器交互的细节。</span><br><span class="line">2、不容易调试。</span><br><span class="line">3、对搜索引擎的支持比较弱。</span><br></pre></td></tr></table></figure>

<h6 id="web-前端页面加载及性能优化"><a href="#web-前端页面加载及性能优化" class="headerlink" title="web 前端页面加载及性能优化"></a>web 前端页面加载及性能优化</h6><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">一、减少HTTP请求</span><br><span class="line">上面说到80%~90%时间花在了下载页面中的所有组件进行的HTTP请求上。因此，改善响应时间最简单的途径就是减</span><br><span class="line">少HTTP请求的数量。</span><br><span class="line">假设导航栏上有五幅图片，点击每张图片都会进入一个链接，这样五张导航的图片在加载时会产生5个HTTP请求。</span><br><span class="line">然而，使用一个图片地图可以提高效率，这样就只需要一个HTTP请求。 CSS</span><br><span class="line">Sprites直译过来就是CSS精灵，但是这种翻译显然是不够的，其实就是通过将多个图片融合到一副图里面，</span><br><span class="line">然后通过CSS的一些技术布局到网页上。特别是图片特别多的网站，如果能用css</span><br><span class="line">sprites降低图片数量，带来的 将是速度的提升。 字体图标</span><br><span class="line">在可以大量使用字体图标的地方我们可以尽可能使用字体图标，字体图标可以减少很多图片的使用，从而减少http</span><br><span class="line">请求，字体图标还可以通过CSS来设置颜色、大小等样式，何乐而不为。 合并脚本</span><br><span class="line">和样式表</span><br><span class="line">将多个样式表或者脚本文件合并到一个文件中，可以减少HTTP请求的数量从而缩短效应时间。</span><br><span class="line">然而合并所有文件对许多人尤其是编写模块化代码的人来说是不能忍的，而且合并所有的样式文件或者脚本文件可</span><br><span class="line">能会导致在一个页面加载时加载了多于自己所需要的样式或者脚本，对于只访问该网站一个（或几个）页面的人来</span><br><span class="line">说反而增加了下载量，所以大家应该自己权衡利弊。 二、使用CDN</span><br><span class="line">如果应用程序web服务器离用户更近，那么一个HTTP请求的响应时间将缩短。另一方面，如果组件web服务器</span><br><span class="line">离用户更近，则多个HTTP请求的响应时间将缩短。</span><br><span class="line">CDN（内容发布网络）是一组分布在多个不同地理位置的Web服务器，用于更加有效地向用户发布内容。在优化性</span><br><span class="line">能时，向特定用户发布内容的服务器的选择基于对网络慕课拥堵的测量。例如，CDN可能选择网络阶跃数最小的服务</span><br><span class="line">器，或者具有最短响应时间的服务器。</span><br><span class="line">CDN还可以进行数据备份、扩展存储能力，进行缓存，同时有助于缓和Web流量峰值压力。</span><br><span class="line">CDN的缺点：</span><br><span class="line">1、响应时间可能会受到其他网站流量的影响。CDN服务提供商在其所有客户之间共享Web服务器组。</span><br><span class="line">2、如果CDN服务质量下降了，那么你的工作质量也将下降 3、无法直接控制组件服务器</span><br><span class="line">三、添加Expires头</span><br><span class="line">页面的初次访问者会进行很多HTTP请求，但是通过使用一个长久的Expires头，可以使这些组件被缓存，下次访问</span><br><span class="line">的时候，就可以减少不必要的HTPP请求，从而提高加载速度。</span><br><span class="line">Web服务器通过Expires头告诉客户端可以使用一个组件的当前副本，直到指定的时间为止。例如：</span><br><span class="line">Expires: Fri, 18 Mar 2016 07:41:53 GMT Expires缺点：</span><br><span class="line">它要求服务器和客户端时钟严格同步；过期日期需要经常检查</span><br><span class="line">HTTP1.1中引入Cache-Control来克服Expires头的限制，使用max-age指定组件被缓存多久。</span><br><span class="line">Cache-Control： max-age=12345600</span><br><span class="line">若同时制定Cache-Control和Expires，则max-age将覆盖Expires头 四、压缩组件</span><br><span class="line">从HTTP1.1开始，Web客户端可以通过HTTP请求中的Accept-Encoding头来表示对压缩的支持</span><br><span class="line">Accept-Encoding: gzip,deflate</span><br><span class="line">如果Web服务器看到请求中有这个头，就会使用客户端列出来的方法中的一种来进行压缩。Web服务器通过响应中的</span><br><span class="line">Content-Encoding来通知 Web客户端。 Content-Encoding: gzip 代理缓存</span><br><span class="line">当浏览器通过代理来发送请求时，情况会不一样。假设针对某个URL发送到代理的第一个请求来自于一个不支持</span><br><span class="line">gzip的浏览器。这是代理的第一个请求，缓存为空。代理将请求转发给服务器。此时响应是未压缩的，代理缓存同</span><br><span class="line">时发送给浏览器。现在，假设到达代理的请求是同一个url，来自于一个支持gzip的浏览器。代理会使用缓存中未</span><br><span class="line">压缩的内容进行响应，从而失去了压缩的机会。相反，如果第一个浏览器支持gzip，第二个不支持，你们代理缓存</span><br><span class="line">中的压缩版本将会提供给后续的浏览器，而不管它们是否支持gzip。</span><br><span class="line">解决办法：在web服务器的响应中添加vary头Web服务器可以告诉代理根据一个或多个请求头来改变缓存的响应。因</span><br><span class="line">为压缩的决定是基于Accept-Encoding请求头的，因此需要在vary响应头中包含Accept-Encoding。</span><br><span class="line">vary: Accept-Encoding 五、将样式表放在头部</span><br><span class="line">首先说明一下，将样式表放在头部对于实际页面加载的时间并不能造成太大影响，但是这会减少页面首屏出现的时</span><br><span class="line">间，使页面内容逐步呈现，改善用户体验，防止“白屏”。</span><br><span class="line">我们总是希望页面能够尽快显示内容，为用户提供可视化的回馈，这对网速慢的用户来说是很重要的。</span><br><span class="line">将样式表放在文档底部会阻止浏览器中的内容逐步出现。为了避免当样式变化时重绘页面元素，浏览器会阻塞内容</span><br><span class="line">逐步呈现，造成“白屏”。这源自浏览器的行为：如果样式表仍在加载，构建呈现树就是一种浪费，因为所有样式表</span><br><span class="line">加载解析完毕之前务虚会之任何东西 六、将脚本放在底部</span><br><span class="line">更样式表相同，脚本放在底部对于实际页面加载的时间并不能造成太大影响，但是这会减少页面首屏出现的时间，</span><br><span class="line">使页面内容逐步呈现</span><br><span class="line">js的下载和执行会阻塞Dom树的构建（严谨地说是中断了Dom树的更新），所以script标签放在首屏范围内的HTML</span><br><span class="line">代码段里会截断首屏的内容。</span><br><span class="line">下载脚本时并行下载是被禁用的——即使使用了不同的主机名，也不会启用其他的下载。因为脚本可能修改页面内</span><br><span class="line">容，因此浏览器会等待；另外，也是为了保证脚本能够按照正确的顺序执行，因为后面的脚本可能与前面的脚本存</span><br><span class="line">在依赖关系，不按照顺序执行可能会产生错误。 七、避免CSS表达式</span><br><span class="line">CSS表达式是动态设置CSS属性的一种强大并且危险的方式，它受到了IE5以及之后版本、IE8之前版本的支持。</span><br><span class="line">p &#123; width: expression(func(),document.body.clientWidth &gt; 400 ? &quot;400px&quot; :</span><br><span class="line">&quot;auto&quot;); height: 80px; border: 1px solid #f00; &#125;</span><br><span class="line">鼠标移动了几次，函数的运行次数轻而易举的达到了几千次，危险性显而易见。</span><br><span class="line">八、使用外部的JavaScript和CSS</span><br><span class="line">内联脚本或者样式可以减少HTTP请求，按理来说可以提高页面加载的速度。然而在实际情况中，当脚本或者样式是</span><br><span class="line">从外部引入的文件，浏览器就有可能缓存它们，从而在以后加载的时候能够直接使用缓存，而HTML文档的大小减</span><br><span class="line">小，从而提高加载速度。 影响因素：</span><br><span class="line">1、每个用户产生的页面浏览量越少，内联脚本和样式的论据越强势。譬如一个用户每个月只访问你的网站一两次，</span><br><span class="line">那么这种情况下内联将会更好。而如果该用户能够产生很多页面浏览量，那么缓存的样式和脚本将会极大减少下</span><br><span class="line">载的时间，提交页面加载速度。</span><br><span class="line">2、如果你的网站不同的页面之间使用的组件大致相同，那么使用外部文件可以提高这些组件的重用率。</span><br><span class="line">加载后下载</span><br><span class="line">有时候我们希望内联样式和脚本，但又可以为接下来的页面提供外部文件。那么我们可以在页面加载完成止呕动态</span><br><span class="line">加载外部组件，以便用户接下来的访问。 九、减少DNS查找</span><br><span class="line">当我们在浏览器的地址栏输入网址（譬如： www.linux178.com）</span><br><span class="line">，然后回车，回车这一瞬间到看到页面到底发 生了什么呢？ 域名解析 --&gt;</span><br><span class="line">发起TCP的3次握手 --&gt; 建立TCP连接后发起http请求 --&gt;</span><br><span class="line">服务器响应http请求，浏览器得到 html代码 --&gt;</span><br><span class="line">浏览器解析html代码，并请求html代码中的资源（如js、css、图片等） --&gt;</span><br><span class="line">浏览器对页面进行 渲染呈现给用户</span><br><span class="line">DNS也是开销，通常浏览器查找一个给定域名的IP地址要花费20~120毫秒，在完成域名解析之前，浏览器不能从服</span><br><span class="line">务器加载到任何东西。那么如何减少域名解析时间，加快页面加载速度呢？</span><br><span class="line">当客户端DNS缓存（浏览器和操作系统）缓存为空时，DNS查找的数量与要加载的Web页面中唯一主机名的数量相</span><br><span class="line">同，包括页面URL、脚本、样式表、图片、Flash对象等的主机名。减少主机名的</span><br><span class="line">数量就可以减少DNS查找的数量。</span><br><span class="line">减少唯一主机名的数量会潜在减少页面中并行下载的数量（HTTP</span><br><span class="line">1.1规范建议从每个主机名并行下载两个组件，但</span><br><span class="line">实际上可以多个），这样减少主机名和并行下载的方案会产生矛盾，需要大家自己权衡。建议将组件放到至少两</span><br><span class="line">个但不多于4个主机名下，减少DNS查找的同时也允许高度并行下载。 十、精简JavaScript</span><br><span class="line">精简</span><br><span class="line">精简就是从代码中移除不必要的字符以减少文件大小，降低加载的时间。代码精简的时候会移除不必要的空白字符</span><br><span class="line">（空格，换行、制表符），这样整个文件的大小就变小了。 混淆</span><br><span class="line">混淆是应用在源代码上的另外一种方式，它会移除注释和空白符，同时它还会改写代码。在混淆的时候，函数和变</span><br><span class="line">量名将会被转换成更短的字符串，这时代码会更加精炼同时难以阅读。通常这样做是为了增加对代码进行反向工程</span><br><span class="line">的难度，这也同时提高了性能。 缺点： 混淆本身比较复杂，可能会引入错误。</span><br><span class="line">需要对不能改变的符号做标记，防止JavaScript符号（譬如关键字、保留字）被修改。</span><br><span class="line">混淆会使代码难以阅读，这使得在产品环境中调试问题更加困难。</span><br><span class="line">在以上提到了关于用gzip之类的压缩方式来压缩文件，这边说明一下，就算使用gzip等方式来压缩文件，精简代码</span><br><span class="line">依然是有必要的。一般来说，压缩产生的节省是高于精简的，在生产环境中，精简和压缩同时使用能够最大限度的</span><br><span class="line">获得更多的节省。 十一、避免重定向 什么是重定向？</span><br><span class="line">重定向用于将用户从一个URL重新路由到另一个URL。 常用重定向的类型</span><br><span class="line">301：永久重定向，主要用于当网站的域名发生变更之后，告诉搜索引擎域名已经变更了，应该把旧域名的的数据和</span><br><span class="line">链接数转移到新域名下，从而不会让网站的排名因域名变更而受到影响。</span><br><span class="line">302：临时重定向，主要实现post请求后告知浏览器转移到新的URL。 304：Not</span><br><span class="line">Modified，主要用于当浏览器在其缓存中保留了组件的一个副本，同时组件已经过期了，这是浏览器就</span><br><span class="line">会生成一个条件GET请求，如果服务器的组件并没有修改过，则会返回304状态码，同时不携带主体，告知浏览器可</span><br><span class="line">以重用这个副本，减少响应大小。 十二、删除重复脚本</span><br><span class="line">在团队开发一个项目时，由于不同开发者之间都可能会向页面中添加页面或组件，因此可能相同的脚本会被添加多</span><br><span class="line">次。</span><br><span class="line">重复的脚本会造成不必要的HTTP请求（如果没有缓存该脚本的话），并且执行多余的JavaScript浪费时间，还有</span><br><span class="line">可能造成错误。 如何避免重复脚本呢？ 1.</span><br><span class="line">形成良好的脚本组织。重复脚本有可能出现在不同的脚本包含同一段脚本的情况，有些是必要的，但有些却不是</span><br><span class="line">必要的，所以需要对脚本进行一个良好的组织。 2. 实现脚本管理器模块。</span><br><span class="line">十三、配置ETag 以前浏览器缓存的就会失效。 什么是ETag？</span><br><span class="line">实体标签(EntityTag)是唯一标识了一个组件的一个特定版本的字符串，是web服务器用于确认缓存组件的有效性</span><br><span class="line">的一种机制，通常可以使用组件的某些属性来构造它。 条件GET请求</span><br><span class="line">如果组件过期了，浏览器在重用它之前必须首先检查它是否有效。浏览器将发送一个条件GET请求到服务器，服务器</span><br><span class="line">判断缓存还有效，则发送一个304响应，告诉浏览器可以重用缓存组件。</span><br><span class="line">那么服务器是根据什么判断缓存是否还有效呢?有两种方式： ETag（实体标签）；</span><br><span class="line">最新修改日期； 最新修改日期</span><br><span class="line">原始服务器通过Last-Modified响应头来返回组件的最新修改日期 十四、使Ajax可缓存</span><br><span class="line">异步与即时</span><br><span class="line">Ajax的一个明显的有点就是向用户提供了即时反馈，因为它异步的从后端web服务器请求信息。</span><br><span class="line">用户是否需要等待的关键因素在于Ajax请求是被动的还是主动的。被动请求是为了将来来使用而预先发起的，主动</span><br><span class="line">请求是基于用户当前的操作而发起的 什么样的AJAX请求可以被缓存？</span><br><span class="line">POST的请求，是不可以在客户端缓存的，每次请求都需要发送给服务器进行处理，每次都会返回状态码200。（可</span><br><span class="line">以在服务器端对数据进行缓存，以便提高处理速度）</span><br><span class="line">GET的请求，是可以（而且默认）在客户端进行缓存的，除非指定了不同的地址，否则同一个地址的AJAX请求，不</span><br><span class="line">会重复在服务器执行，而是返回304。 Ajax请求使用缓存</span><br><span class="line">在进行Ajax请求的时候，可以选择尽量使用get方法，这样可以使用客户端的缓存，提高请求速度</span><br><span class="line">参考文献：https://www.cnblogs.com/MarcoHan/p/5295398.html</span><br></pre></td></tr></table></figure>

<h6 id="get-和-post-的请求区别"><a href="#get-和-post-的请求区别" class="headerlink" title="get 和 post 的请求区别"></a>get 和 post 的请求区别</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">request获取请求参数</span><br><span class="line">最为常见的客户端传递参数方式有两种：</span><br><span class="line"></span><br><span class="line">浏览器地址栏直接输入：一定是GET请求；</span><br><span class="line"></span><br><span class="line">超链接：一定是GET请求；</span><br><span class="line"></span><br><span class="line">表单：可以是GET，也可以是POST，这取决与&lt;form&gt;的method属性值；</span><br><span class="line"></span><br><span class="line">GET请求和POST请求的区别：</span><br><span class="line"></span><br><span class="line">1.效率</span><br><span class="line">GET的意思是『得』，从服务器获取数据（也可以上传数据，参数就是），效率较高</span><br><span class="line">POST的意思是『给』，但可以向服务器发送数据和下载数据，效率不如GET</span><br><span class="line">2.缓存</span><br><span class="line">GET 请求能够被缓存，默认的请求方式也是有缓存的</span><br><span class="line">POST请求默认不会缓存</span><br><span class="line">缓存是针对URL来进行缓存的，GET请求由于其参数是直接加在URL上-的，一种参数组合就有一种URL的缓存，可以根据参数来进行一一对应，重复请求是幂等的（不论请求多少次，结果都一样）;</span><br><span class="line">而POST请求的URL没有参数,每次请求的URL都相同，数据体（HTTPBody）可能不同，无法一一对应，所以缓存没有意义</span><br><span class="line">3.安全性</span><br><span class="line">GET的所有参数全部包装在URL中，明文显示，且服务器的访问日志会记录，非常不安全</span><br><span class="line">POST的URL中只有资源路径，不包含参数，参数封装在二进制的数据体中，服务器也不会记录参数，相对安全。所有涉及用户隐私的数据都要用POST传输</span><br><span class="line">POST的安全是相对的，对于普通用户来说他们看不到明文，数据封装对他们来说就是屏障。但是对于专业人士，它们会抓包会分析，没有加密的数据包对他们来说也是小case。所以POST仅仅是相对安全，唯有对数据进行加密才会更安全。当然加密也有被破解的可能性，理论上所有的加密方式都可以破解，只是时间长短的问题。而加密算法要做的就是使得破解需要的时间尽量长，越长越安全。由于我们也需要解密，加密算法太过复杂也并非好事，这就要结合使用情况进行折中或者足够实际使用即可。绕的有点远，具体的话，我将在后续的文章之中介提及，并介绍一些常用的加密算法。</span><br><span class="line"></span><br><span class="line">4.数据量</span><br><span class="line">HTTP协议中均没有对GET和POST请求的数据大小进行限制，但是实际应用中它们通常受限于软硬件平台的设计和性能。</span><br><span class="line"></span><br><span class="line">GET：不同的浏览器和服务器不同，一般限制在2~8K之间，更加常见的是1k以内</span><br><span class="line">POST方法提交的数据比较大，大小靠服务器的设定值限制，PHP默认是2M（具体的话大家以后看后端给的开发文档就行了）</span><br><span class="line"></span><br><span class="line">post传送变化的数据显示，变动性访问；</span><br><span class="line">get通过url地址传送数据，数据量不能超过1024byte；</span><br><span class="line">post作为http消息的实体内容传送到服务器中，传送数据量可以很大；</span><br><span class="line">get传送数据要经过encodeURIComponent编码，防止乱码。</span><br><span class="line">get方式，服务器端用Request.QueryString获取变量的值；</span><br><span class="line">post方式，服务器端用Request.Form获取提交的数据</span><br></pre></td></tr></table></figure>

<h6 id="get-和-post-的使用场景"><a href="#get-和-post-的使用场景" class="headerlink" title="get 和 post 的使用场景"></a>get 和 post 的使用场景</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET和POST两种方法都是将数据送到服务器。HTTP标准包含这两种方法是为了达到不同的目的。</span><br><span class="line"></span><br><span class="line">POST用于创建资源，资源的内容会被编入HTTP请示的内容中。例如，处理订货表单、在数据库中加入新数据行等。</span><br><span class="line"></span><br><span class="line">当请求无副作用时（如进行搜索），便可使用GET方法；当请求有副作用时（如添加数据行），则用POST方法。一个比较实际的问题是：GET方法可能会产生很长的URL，或许会超过某些浏览器与服务器对URL长度的限制。</span><br><span class="line"></span><br><span class="line">若符合下列任一情况，则用POST方法：</span><br><span class="line"></span><br><span class="line">* 请求的结果有持续性的副作用，例如，数据库内添加新的数据行。</span><br><span class="line">* 若使用GET方法，则表单上收集的数据可能让URL过长。</span><br><span class="line">* 要传送的数据不是采用7位的ASCII编码。</span><br><span class="line"></span><br><span class="line">若符合下列任一情况，则用GET方法：</span><br><span class="line"></span><br><span class="line">* 请求是为了查找资源，HTML表单数据仅用来帮助搜索。</span><br><span class="line">* 请求结果无持续性的副作用。</span><br><span class="line">* 收集的数据及HTML表单内的输入字段名称的总长不超过1024个字符。</span><br></pre></td></tr></table></figure>

<h6 id="前端优化调试工具"><a href="#前端优化调试工具" class="headerlink" title="前端优化调试工具"></a>前端优化调试工具</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.jianshu.com/p/b63e6b7df8bf 自己看</span><br></pre></td></tr></table></figure>

<h6 id="什么是-sql-注入，xss-攻击"><a href="#什么是-sql-注入，xss-攻击" class="headerlink" title="什么是 sql 注入，xss 攻击"></a>什么是 sql 注入，xss 攻击</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">所谓SQL注入，就是通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。具体来说，它是利用现有应用程序，将（恶意的）SQL命令注入到后台数据库引擎执行的能力，它可以通过在Web表单中输入（恶意）SQL语句得到一个存在安全漏洞的网站上的数据库，而不是按照设计者意图去执行SQL语句。比如先前的很多影视网站泄露VIP会员密码大多就是通过WEB表单递交查询字符暴出的，这类表单特别容易受到SQL注入式攻击．</span><br><span class="line"></span><br><span class="line">https://blog.csdn.net/ideality_hunter/article/details/80623526</span><br><span class="line"></span><br><span class="line">XSS攻击全称跨站脚本攻击，是为不和层叠样式表(Cascading Style Sheets, CSS)的缩写混淆，故将跨站脚本攻击缩写为XSS，XSS是一种在web应用中的计算机安全漏洞，它允许恶意web用户将代码植入到提供给其它用户使用的页面中。</span><br><span class="line"></span><br><span class="line">预防xss</span><br><span class="line">1、编码，就是转义用户的输入，把用户的输入解读为数据而不是代码</span><br><span class="line">2、校验，对用户的输入及请求都进行过滤检查，如对特殊字符进行过滤，设置输入域的匹配规则等</span><br></pre></td></tr></table></figure>

<h6 id="判断-js-变量是不是数组"><a href="#判断-js-变量是不是数组" class="headerlink" title="判断 js 变量是不是数组"></a>判断 js 变量是不是数组</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">方法一： 使用instanceof方法</span><br><span class="line">console.log(arr instanceof Array) //返回true</span><br><span class="line"></span><br><span class="line">方法二： 使用constructor方法</span><br><span class="line">console.log([].constructor == Array);  //true</span><br><span class="line"></span><br><span class="line">方法三： 使用Object.prototype.toString.call(arr) === &#x27;[object Array]&#x27;方法</span><br><span class="line"></span><br><span class="line">方法四：ES5定义了Array.isArray:</span><br><span class="line">Array.isArray([]) //true</span><br></pre></td></tr></table></figure>

<h6 id="HTTP-状态消息-200-302-304-403-404-500-分别表示什么"><a href="#HTTP-状态消息-200-302-304-403-404-500-分别表示什么" class="headerlink" title="HTTP 状态消息 200 302 304 403 404 500 分别表示什么"></a>HTTP 状态消息 200 302 304 403 404 500 分别表示什么</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">200：请求已成功，请求所希望的响应头或数据体将随此响应返回。</span><br><span class="line"></span><br><span class="line">302：请求的资源临时从不同的 URI响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的</span><br><span class="line"></span><br><span class="line">304：如果客户端发送了一个带条件的 GET 请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个状态码。304响应禁止包含消息体，因此始终以消息头后的第一个空行结尾。</span><br><span class="line"></span><br><span class="line">403：服务器已经理解请求，但是拒绝执行它。</span><br><span class="line"></span><br><span class="line">404：请求失败，请求所希望得到的资源未被在服务器上发现。</span><br><span class="line"></span><br><span class="line">500：服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。一般来说，这个问题都会在服务器端的源代码出现错误时出现。</span><br></pre></td></tr></table></figure>

<h6 id="HTTP-协议中，header-信息里面，怎么控制页面失效时间（last-modified-cache-control-Expires-分别代表什么）"><a href="#HTTP-协议中，header-信息里面，怎么控制页面失效时间（last-modified-cache-control-Expires-分别代表什么）" class="headerlink" title="HTTP 协议中，header 信息里面，怎么控制页面失效时间（last-modified,cache-control,Expires 分别代表什么）"></a>HTTP 协议中，header 信息里面，怎么控制页面失效时间（last-modified,cache-control,Expires 分别代表什么）</h6><table>
<thead>
<tr>
<th>Last-Modified</th>
<th>文 档的最后改动时间。客户可以通过 If-Modified-Since 请求头提供一个日期，该请求将被视为一个条件 GET，只有改动时间迟于指定时间的文档 才会返回，否则返回一个 304（Not Modified）状态。Last-Modified 也可用 setDateHeader 方法来设置。</th>
</tr>
</thead>
<tbody><tr>
<td>Expires</td>
<td>应该在什么时候认为文档已经过期，从而不再缓存它？</td>
</tr>
</tbody></table>
<h6 id="列举常用的-js-框架以及分别适用的领域"><a href="#列举常用的-js-框架以及分别适用的领域" class="headerlink" title="列举常用的 js 框架以及分别适用的领域"></a>列举常用的 js 框架以及分别适用的领域</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jquery：简化了js的一些操作，并且提供了一些非常好用的API</span><br><span class="line"></span><br><span class="line">jquery ui、jquery-easyui：在jqeury的基础上提供了一些常用的组件 日期，下拉框，表格这些组件</span><br><span class="line"></span><br><span class="line">require.js、sea.js（阿里的玉帛）+》模块化开发使用的</span><br><span class="line"></span><br><span class="line">jquery mobile：是jquery自己出的支持移动端网页开发，不过非常笨重，但是功能非常强大</span><br><span class="line"></span><br><span class="line">zepto：精简版的jquery，常用于手机web前端开发 提供了一些手机页面实用功能,touch</span><br><span class="line"></span><br><span class="line">ext.js：跟jquery差不多，但是不开源，也没有jquery轻量</span><br><span class="line"></span><br><span class="line">angular、knockoutjs、avalon(去哪儿前端总监，作者：司徒正美)：MV*框架，适合用于单页应用开发(SPA)</span><br><span class="line"></span><br><span class="line">Vue.js（读音 /vjuː/, 类似于view）是一套构建用户界面的渐进式框架。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。Vue 的核心库只关注视图层，并且非常容易学习，非常容易与其它库或已有项目整合。另一方面，Vue 完全有能力驱动采用单文件组件和Vue生态系统支持的库开发的复杂单页应用。简单小巧的核心，渐进式技术栈，足以应付任何规模的应用。</span><br><span class="line"></span><br><span class="line">react 是一个用于构建用户界面的 JAVASCRIPT 库。</span><br><span class="line">React主要用于构建UI，很多人认为 React 是 MVC 中的 V（视图）。</span><br><span class="line">React 起源于 Facebook 的内部项目，用来架设 Instagram 的网站，并于 2013 年 5 月开源。</span><br><span class="line">React 拥有较高的性能，代码逻辑非常简单，越来越多的人已开始关注和使用它。</span><br><span class="line">React 特点</span><br><span class="line">1.声明式设计 −React采用声明范式，可以轻松描述应用。</span><br><span class="line">2.高效 −React通过对DOM的模拟，最大限度地减少与DOM的交互。</span><br><span class="line">3.灵活 −React可以与已知的库或框架很好地配合。</span><br><span class="line">4.JSX − JSX 是 JavaScript 语法的扩展。React 开发不一定使用 JSX ，但我们建议使用它。</span><br><span class="line">5.组件 − 通过 React 构建组件，使得代码更加容易得到复用，能够很好的应用在大项目的开发中。</span><br><span class="line">6.单向响应的数据流 − React 实现了单向响应的数据流，从而减少了重复代码，这也是它为什么比传统数据绑定更简单。</span><br><span class="line">JSX就是Javascript和XML结合的一种格式。React发明了JSX，利用HTML语法来创建虚拟DOM。当遇到&lt;，JSX就当HTML解析，遇到&#123;就当JavaScript解析。</span><br></pre></td></tr></table></figure>

<h6 id="有-1-到-10w-这个-10w-个数，去除-2-个并打乱次序，如何找出那两个数"><a href="#有-1-到-10w-这个-10w-个数，去除-2-个并打乱次序，如何找出那两个数" class="headerlink" title="有 1 到 10w 这个 10w 个数，去除 2 个并打乱次序，如何找出那两个数"></a>有 1 到 10w 这个 10w 个数，去除 2 个并打乱次序，如何找出那两个数</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arrA = [];</span><br><span class="line"><span class="keyword">var</span> arrB = [];</span><br><span class="line"><span class="keyword">var</span> arrC = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">//求出A数组的值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">  arrA.<span class="title function_">push</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//A排序</span></span><br><span class="line">arrA.<span class="title function_">sort</span>(<span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">random</span>() - <span class="number">0.5</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrA);</span><br><span class="line"><span class="comment">//求出B数组的值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arrA.<span class="property">length</span> - <span class="number">2</span>; i++) &#123;</span><br><span class="line">  arrB[arrA[i]] = arrA[i];</span><br><span class="line">  <span class="comment">//console.log(arrB);</span></span><br><span class="line">&#125; <span class="comment">//如果B数组里的第i项为undefind，打印出i放在arrC</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arrA.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arrB[i] == <span class="literal">undefined</span>) &#123;</span><br><span class="line">    arrC.<span class="title function_">push</span>(i);</span><br><span class="line">    <span class="keyword">if</span> (arrC.<span class="property">length</span> == <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrC);</span><br></pre></td></tr></table></figure>

<h6 id="JS-继承的六种方式"><a href="#JS-继承的六种方式" class="headerlink" title="JS 继承的六种方式"></a>JS 继承的六种方式</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 父类</span><br><span class="line">function Super()&#123;</span><br><span class="line">  this.property = &#x27;Super Property&#x27;</span><br><span class="line">&#125;</span><br><span class="line">Super.prototype.getProperty = function()&#123;</span><br><span class="line">  return this.property</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">一.构造继承</span><br><span class="line">function Sub()&#123;</span><br><span class="line">  Super.call(this)</span><br><span class="line">  this.property = &#x27;Sub Property&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">二.原型链继承</span><br><span class="line">// 子类</span><br><span class="line">function Sub()&#123;</span><br><span class="line">  this.property = &#x27;Sub Property&#x27;</span><br><span class="line">&#125;</span><br><span class="line">Sub.prototype = new Super()</span><br><span class="line">// 注意这里new Super()生成的超类对象并没有constructor属性,故需添加上</span><br><span class="line">Sub.prototype.constructor = Sub</span><br><span class="line"></span><br><span class="line">三.组合继承</span><br><span class="line">// 子类</span><br><span class="line">function Sub()&#123;</span><br><span class="line">  Super.call(this)</span><br><span class="line">  this.property = &#x27;Sub Property&#x27;</span><br><span class="line">&#125;</span><br><span class="line">Sub.prototype = new Super()</span><br><span class="line">// 注意这里new Super()生成的超类对象并没有constructor属性,故需添加上</span><br><span class="line">Sub.prototype.constructor = Sub</span><br><span class="line"></span><br><span class="line">四.原型式继承</span><br><span class="line">function objectCreate(obj)&#123;</span><br><span class="line">  function F()&#123;&#125;</span><br><span class="line">  F.prototype = obj</span><br><span class="line">  return new F()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">五.寄生式继承</span><br><span class="line">function objectCreate(obj)&#123;</span><br><span class="line">  function F()&#123;&#125;</span><br><span class="line">  F.prototype = obj</span><br><span class="line">  return new F()</span><br><span class="line">&#125;</span><br><span class="line">function createSubObj(superInstance)&#123;</span><br><span class="line">  var clone = objectCreate(superInstance)</span><br><span class="line">  clone.property = &#x27;Sub Property&#x27;</span><br><span class="line">  return clone</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">六.寄生组合式继承</span><br><span class="line">function inheritPrototype(Super,Sub)&#123;</span><br><span class="line">  var superProtoClone = Object.Create(Super.prototype)</span><br><span class="line">  superProtoClone.constructor = Sub</span><br><span class="line">  Sub.prototype = Super</span><br><span class="line">&#125;</span><br><span class="line">function Sub()&#123;</span><br><span class="line">  Super.call()</span><br><span class="line">  Sub.property = &#x27;Sub Property&#x27;</span><br><span class="line">&#125;</span><br><span class="line">inheritPrototype(Super,Sub)</span><br></pre></td></tr></table></figure>

<h6 id="实现-html-的-bfc"><a href="#实现-html-的-bfc" class="headerlink" title="实现 html 的 bfc"></a>实现 html 的 bfc</h6><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.column</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.column</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">overflow</span>: hidden; <span class="comment">/*创建bfc */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: purple;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;script src=&quot;./js/require.js&quot; type=&quot;text/javascript&quot; defer async=&#x27;true&#x27; data-main=&#x27;../dist/main-build.js&#x27;&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="http-请求的几种方式"><a href="#http-请求的几种方式" class="headerlink" title="http 请求的几种方式"></a>http 请求的几种方式</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.1协议中共定义了八种方法（也叫“动作”）来以不同方式操作指定的资源：</span><br><span class="line">OPTIONS：</span><br><span class="line">这个方法可使服务器传回该资源所支持的所有HTTP请求方法。用&#x27;*&#x27;来代替资源名称，向Web服务器发送OPTIONS请求，可以测试服务器功能是否正常运作。</span><br><span class="line"></span><br><span class="line">HEAD：</span><br><span class="line">与GET方法一样，都是向服务器发出指定资源的请求。只不过服务器将不传回资源的本文部分。它的好处在于，使用这个方法可以在不必传输全部内容的情况下，就可以获取其中“关于该资源的信息”（元信息或称元数据）。</span><br><span class="line"></span><br><span class="line">GET：</span><br><span class="line">向指定的资源发出“显示”请求。使用GET方法应该只用在读取数据，而不应当被用于产生“副作用”的操作中，例如在Web Application中。其中一个原因是GET可能会被网络蜘蛛等随意访问。参见安全方法</span><br><span class="line"></span><br><span class="line">POST：</span><br><span class="line">向指定资源提交数据，请求服务器进行处理（例如提交表单或者上传文件）。数据被包含在请求本文中。这个请求可能会创建新的资源或修改现有资源，或二者皆有。</span><br><span class="line"></span><br><span class="line">PUT：</span><br><span class="line">向指定资源位置上传其最新内容。</span><br><span class="line"></span><br><span class="line">DELETE：</span><br><span class="line">请求服务器删除Request-URI所标识的资源。</span><br><span class="line"></span><br><span class="line">TRACE：</span><br><span class="line">回显服务器收到的请求，主要用于测试或诊断。</span><br><span class="line"></span><br><span class="line">CONNECT：</span><br><span class="line">HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。通常用于SSL加密服务器的链接（经由非加密的HTTP代理服务器）。</span><br><span class="line">方法名称是区分大小写的。当某个请求所针对的资源不支持对应的请求方法的时候，服务器应当返回状态码405（Method Not Allowed），当服务器不认识或者不支持对应的请求方法的时候，应当返回状态码501（Not Implemented）。</span><br><span class="line">通常我们用的也都是 GET 和 POST 方法，如果要实现其他的方法，需要在服务器做相应的配置。</span><br><span class="line">但是我们应该清楚，有这些个动作的存在。</span><br><span class="line">而且，其他请求方式也都可以通过这两种方式间接的来实现。</span><br><span class="line"></span><br><span class="line">链接：https://www.jianshu.com/p/562aa3baa9b8</span><br></pre></td></tr></table></figure>

<h6 id="面向对象的三大基本特征"><a href="#面向对象的三大基本特征" class="headerlink" title="面向对象的三大基本特征"></a>面向对象的三大基本特征</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.封装</span><br><span class="line"></span><br><span class="line">封装最好理解了。封装是面向对象的特征之一，是对象和类概念的主要特性。</span><br><span class="line">封装，也就是把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏。</span><br><span class="line"></span><br><span class="line">2.继承</span><br><span class="line"></span><br><span class="line">面向对象编程 (OOP) 语言的一个主要功能就是“继承”。继承是指这样一种能力：它可以使用现有类的所有功能，并在无需重新编写原来的类的情况下对这些功能进行扩展。</span><br><span class="line">通过继承创建的新类称为“子类”或“派生类”。</span><br><span class="line">被继承的类称为“基类”、“父类”或“超类”。</span><br><span class="line">继承的过程，就是从一般到特殊的过程。</span><br><span class="line">要实现继承，可以通过“继承”（Inheritance）和“组合”（Composition）来实现。</span><br><span class="line">在某些 OOP 语言中，一个子类可以继承多个基类。但是一般情况下，一个子类只能有一个基类，要实现多重继承，可以通过多级继承来实现。</span><br><span class="line"></span><br><span class="line">继承概念的实现方式有三类：实现继承、接口继承和可视继承。</span><br><span class="line">Ø         实现继承是指使用基类的属性和方法而无需额外编码的能力；</span><br><span class="line">Ø         接口继承是指仅使用属性和方法的名称、但是子类必须提供实现的能力；</span><br><span class="line">Ø         可视继承是指子窗体（类）使用基窗体（类）的外观和实现代码的能力。</span><br><span class="line">在考虑使用继承时，有一点需要注意，那就是两个类之间的关系应该是“属于”关系。例如，Employee 是一个人，Manager 也是一个人，因此这两个类都可以继承 Person 类。但是 Leg 类却不能继承 Person 类，因为腿并不是一个人。</span><br><span class="line">抽象类仅定义将由子类创建的一般属性和方法，创建抽象类时，请使用关键字 Interface 而不是 Class。</span><br><span class="line">OO开发范式大致为：划分对象→抽象类→将类组织成为层次化结构(继承和合成) →用类与实例进行设计和实现几个阶段。</span><br><span class="line"></span><br><span class="line">3.多态</span><br><span class="line"></span><br><span class="line">多态性（polymorphisn）是允许你将父对象设置成为和一个或更多的他的子对象相等的技术，赋值之后，父对象就可以根据当前赋值给它的子对象的特性以不同的方式运作。简单的说，就是一句话：允许将子类类型的指针赋值给父类类型的指针。</span><br><span class="line">实现多态，有二种方式，覆盖，重载。</span><br><span class="line">覆盖，是指子类重新定义父类的虚函数的做法。</span><br><span class="line">重载，是指允许存在多个同名函数，而这些函数的参数表不同（或许参数个数不同，或许参数类型不同，或许两者都不同）。</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">面向对象的基本特征</span><br><span class="line"></span><br><span class="line">      1.封装</span><br><span class="line"></span><br><span class="line">　　　　简单来讲: 将现实世界的事物抽象成计算机领域中的对象,对象同时具有属性和行为,这种抽象就是封装.</span><br><span class="line"></span><br><span class="line">　　　　封装的一个重要特性: 数据隐藏. 对象只对外提供与其它对象交互的必要接口,而将自身的某些属性和实现细节对外隐藏,</span><br><span class="line"></span><br><span class="line">　　　　通过这种方式，对象对内部数据提供了不同级别的保护，以防止程序中无关的部分意外的改变或错误的使用了对象的私有部分。</span><br><span class="line"></span><br><span class="line">　　　　这样就在确保正常交互的前提下,保证了安全性.</span><br><span class="line"></span><br><span class="line">      2.继承</span><br><span class="line"></span><br><span class="line">　　　　面向对象的一个重要特性是复用性.继承是实现复用性的一个重要手段.</span><br><span class="line"></span><br><span class="line">　　　　可以在不重复编写以实现的功能的前提下,对功能进行复用和拓展.</span><br><span class="line"></span><br><span class="line">　　　　继承概念的实现方式有二类：实现继承与接口继承。</span><br><span class="line"></span><br><span class="line">　　　　　　*实现继承是指直接使用基类的属性和方法而无需额外编码的能力</span><br><span class="line"></span><br><span class="line">　　　　　　*接口继承是指仅使用属性和方法的名称、但是子类必须提供实现的能力</span><br><span class="line"></span><br><span class="line">      3.多态</span><br><span class="line"></span><br><span class="line">　　　　当存在继承关系时,允许将父类对象看成为和它的一个或多个子类对象等同.</span><br><span class="line"></span><br><span class="line">　　　　这样,可以根据当前赋给父类对象的子对象的具体特性以不同的方式进行运行.</span><br><span class="line"></span><br><span class="line"> 　　　　多态的几个前提</span><br><span class="line"></span><br><span class="line">　　　　　　* a:要有继承关系。</span><br><span class="line"></span><br><span class="line">　　　　　　* b:要有方法重写。</span><br><span class="line"></span><br><span class="line">　　　　　　* c:要有父类引用指向子类对象。</span><br><span class="line"></span><br><span class="line">        　　多态的好处</span><br><span class="line"></span><br><span class="line">　　　　　　* a:提高了代码的维护性(继承保证)</span><br><span class="line"></span><br><span class="line">　　　　　　* b:提高了代码的扩展性(由多态保证)</span><br><span class="line"></span><br><span class="line">　　　　多态的限制</span><br><span class="line"></span><br><span class="line">          　　  * 不能使用子类的特有属性和行为。</span><br><span class="line"></span><br><span class="line">五大基本原则</span><br><span class="line">单一职责原则SRP(Single Responsibility Principle)</span><br><span class="line">　　是指一个类的功能要单一，不能包罗万象。</span><br><span class="line"></span><br><span class="line">开放封闭原则OCP(Open－Close Principle)</span><br><span class="line">　　一个模块在扩展性方面应该是开放的,而在更改性方面应该是封闭的。</span><br><span class="line"></span><br><span class="line">　　比如：一个网络模块，原来只服务端功能，而现在要加入客户端功能，那么应当在不用修改服务端功能代码的前提下，就能够增加客户端功能的实现代码</span><br><span class="line"></span><br><span class="line">　　这要求在设计之初，就应当将服务端和客户端分开，公共部分抽象出来。</span><br><span class="line"></span><br><span class="line">替换原则(the Liskov Substitution Principle LSP)</span><br><span class="line">　　子类应当可以替换父类并出现在父类能够出现的任何地方。</span><br><span class="line"></span><br><span class="line">　　比如：公司搞年度晚会，所有员工可以参加抽奖，那么不管是老员工还是新员工，也不管是总部员工还是外派员工，都应当可以参加抽奖，否则这公司就不和谐了。</span><br><span class="line"></span><br><span class="line">依赖原则(the Dependency Inversion Principle DIP)</span><br><span class="line"></span><br><span class="line">　　具体依赖抽象，上层依赖下层。</span><br><span class="line"></span><br><span class="line">　　假设B是较A低的模块，但B需要使用到A的功能，这个时候，B不应当直接使用A中的具体类： 而应当由B定义一抽象接口，并由A来实现这个抽象接口，B只使用这个抽象接口：　　这样就达到了依赖倒置的目的，B也解除了对A的依赖，反过来是A依赖于B定义的抽象接口。</span><br><span class="line"></span><br><span class="line">　　通过上层模块难以避免依赖下层模块，假如B也直接依赖A的实现，那么就可能造成循环依赖。　　</span><br><span class="line"></span><br><span class="line">接口分离原则(the Interface Segregation Principle ISP)</span><br><span class="line">　　模块间要通过抽象接口隔离开，而不是通过具体的类强耦合起来</span><br></pre></td></tr></table></figure>

<h6 id="什么是面向对象"><a href="#什么是面向对象" class="headerlink" title="什么是面向对象"></a>什么是面向对象</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">面向对象是一种思想，是基于面向过程而言的，就是说面向对象是将功能等通过对象来实现，将功能封装进对象之中，让对象去实现具体的细节；这种思想是将数据作为第一位，而方法或者说是算法作为其次，这是对数据一种优化，操作起来更加的方便，简化了过程。面向对象有三大特征：封装性、继承性、多态性，其中封装性指的是隐藏了对象的属性和实现细节，仅对外提供公共的访问方式，这样就隔离了具体的变化，便于使用，提高了复用性和安全性。对于继承性，就是两种事物间存在着一定的所属关系，那么继承的类就可以从被继承的类中获得一些属性和方法；这就提高了代码的复用性。继承是作为多态的前提的。多态是说父类或接口的引用指向了子类对象，这就提高了程序的扩展性，也就是说只要实现或继承了同一个接口或类，那么就可以使用父类中相应的方法，提高程序扩展性，但是多态有一点不好之处在于：父类引用不能访问子类中的成员。</span><br><span class="line"></span><br><span class="line">举例来说：就是：比如说你要去饭店吃饭，你只需要饭店，找到饭店的服务员，跟她说你要吃什么，然后就会给你做出来让你吃，你并不需要知道这个饭是怎么错做的，你只需要面向这个服务员，告诉他你要吃什么，然后他也只需要面向你吃完收到钱就好，不需要知道你怎么对这个饭进行吃。</span><br><span class="line"></span><br><span class="line">1、特点：</span><br><span class="line"></span><br><span class="line">1：将复杂的事情简单化。</span><br><span class="line"></span><br><span class="line">2：面向对象将以前的过程中的执行者，变成了指挥者。</span><br><span class="line"></span><br><span class="line">3：面向对象这种思想是符合现在人们思考习惯的一种思想。</span><br><span class="line"></span><br><span class="line">2、面向对象的三大特征：封装，继承、多态</span><br><span class="line"></span><br><span class="line">1.封装：只隐藏对象的属性和实现细节，仅对外提供公共访问方式</span><br><span class="line"></span><br><span class="line">好处：将变化隔离、便于使用、提高复用性、提高安全性</span><br><span class="line"></span><br><span class="line">原则：将不需要对外提供的内容隐藏起来；把属性隐藏，提供公共方法对其访问</span><br><span class="line"></span><br><span class="line">2.继承：提高代码复用性；继承是多态的前提</span><br><span class="line"></span><br><span class="line">注：</span><br><span class="line"></span><br><span class="line">①子类中所有的构造函数都会默认访问父类中的空参数的构造函数，默认第一行有super()；若无空参数构造函数，子类中需指定；另外，子类构造函数中可自己用this指定自身的其他构造函数。</span><br><span class="line"></span><br><span class="line">3.多态</span><br><span class="line"></span><br><span class="line">是父类或接口定义的引用变量可以指向子类或具体实现类的实例对象</span><br><span class="line"></span><br><span class="line">好处：提高了程序的扩展性</span><br><span class="line"></span><br><span class="line">弊端：当父类引用指向子类对象时，虽提高了扩展性，但只能访问父类中具备的方法，不可访问子类中的方法；即访问的局限性。</span><br><span class="line"></span><br><span class="line">前提：实现或继承关系；覆写父类方法。</span><br><span class="line">---------------------</span><br><span class="line">作者：史努比程序媛</span><br><span class="line">来源：CSDN</span><br><span class="line">原文：https://blog.csdn.net/chenqiuping_ls/article/details/53609807</span><br><span class="line">版权声明：本文为博主原创文章，转载请附上博文链接！</span><br></pre></td></tr></table></figure>

<h6 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3、闭包的概念</span><br><span class="line"></span><br><span class="line">上面代码中的f2函数，就是闭包。</span><br><span class="line"></span><br><span class="line">各种专业文献的闭包定义都非常抽象，我的理解是: 闭包就是能够读取其他函数内部变量的函数。</span><br><span class="line"></span><br><span class="line">由于在javascript中，只有函数内部的子函数才能读取局部变量，所以说，闭包可以简单理解成“定义在一个函数内部的函数“。</span><br><span class="line"></span><br><span class="line">所以，在本质上，闭包是将函数内部和函数外部连接起来的桥梁。</span><br><span class="line"></span><br><span class="line"> 4、闭包的用途</span><br><span class="line"></span><br><span class="line">闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中，不会在f1调用后被自动清除。</span><br><span class="line"></span><br><span class="line">为什么会这样呢？原因就在于f1是f2的父函数，而f2被赋给了一个全局变量，这导致f2始终在内存中，而f2的存在依赖于f1，因此f1也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。</span><br><span class="line"></span><br><span class="line">这段代码中另一个值得注意的地方，就是&quot;nAdd=function()&#123;n+=1&#125;&quot;这一行，首先在nAdd前面没有使用var关键字，因此nAdd是一个全局变量，而不是局部变量。其次，nAdd的值是一个匿名函数（anonymous function），而这个匿名函数本身也是一个闭包，所以nAdd相当于是一个setter，可以在函数外部对函数内部的局部变量进行操作。</span><br><span class="line"></span><br><span class="line">5、使用闭包的注意点</span><br><span class="line"></span><br><span class="line">（1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</span><br><span class="line"></span><br><span class="line">（2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</span><br></pre></td></tr></table></figure>

<h6 id="Promise-介绍"><a href="#Promise-介绍" class="headerlink" title="Promise 介绍"></a>Promise 介绍</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">promise是es6的语法</span><br><span class="line"><span class="title class_">Promise</span> 对象代表了未来将要发生的事件，用来传递异步操作的消息。</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span> 对象有以下两个特点:</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、对象的状态不受外界影响。<span class="title class_">Promise</span> 对象代表一个异步操作，有三种状态：</span><br><span class="line"></span><br><span class="line"><span class="attr">pending</span>: 初始状态，不是成功或失败状态。</span><br><span class="line"><span class="attr">fulfilled</span>: 意味着操作成功完成。</span><br><span class="line"><span class="attr">rejected</span>: 意味着操作失败。</span><br><span class="line"></span><br><span class="line">只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是 <span class="title class_">Promise</span> 这个名字的由来，它的英语意思就是「承诺」，表示其他手段无法改变。</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、一旦状态改变，就不会再变，任何时候都可以得到这个结果。<span class="title class_">Promise</span> 对象的状态改变，只有两种可能：从 <span class="title class_">Pending</span> 变为 <span class="title class_">Resolved</span> 和从 <span class="title class_">Pending</span> 变为 <span class="title class_">Rejected</span>。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对 <span class="title class_">Promise</span> 对象添加回调函数，也会立即得到这个结果。这与事件（<span class="title class_">Event</span>）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">get</span>(<span class="params">src</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">res,err</span>)=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">let</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>()</span><br><span class="line">                img.<span class="property">src</span>=src</span><br><span class="line">                img.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">                    <span class="title function_">res</span>(img)</span><br><span class="line">                &#125;;</span><br><span class="line">                img.<span class="property">onerr</span> = <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">                    <span class="title function_">err</span>(<span class="string">&#x27;错误&#x27;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// get(&#x27;img.jpg&#x27;).then(function(img)&#123;</span></span><br><span class="line">        <span class="comment">//     console.log(img)</span></span><br><span class="line">        <span class="comment">// &#125;,function(err)&#123;</span></span><br><span class="line">        <span class="comment">//     console.log(err)</span></span><br><span class="line">        <span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">        <span class="title function_">get</span>(<span class="string">&#x27;img.jpg&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">img</span>)&#123;<span class="comment">//链式加载</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(img)</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">get</span>(<span class="string">&#x27;img1.jpg&#x27;</span>)</span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">img</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(img)</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">get</span>(<span class="string">&#x27;img2.jpg&#x27;</span>)</span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">img</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(img)</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">get</span>(<span class="string">&#x27;img3.jpg&#x27;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Promise</span>.<span class="title function_">all</span>([<span class="title function_">get</span>(<span class="string">&#x27;img.jgp&#x27;</span>),<span class="title function_">get</span>(<span class="string">&#x27;img1.jgp&#x27;</span>),<span class="title function_">get</span>(<span class="string">&#x27;img2.jgp&#x27;</span>)]).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">list</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(list) <span class="comment">//all方法将所有执行完的一起返回回来数组</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Promise</span>.<span class="title function_">race</span>([<span class="title function_">get</span>(<span class="string">&#x27;img.jgp&#x27;</span>),<span class="title function_">get</span>(<span class="string">&#x27;img1.jgp&#x27;</span>),<span class="title function_">get</span>(<span class="string">&#x27;img2.jgp&#x27;</span>)]).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">list</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(list) <span class="comment">//race方法是返回先执行完的那个</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="title class_">Promise</span> 优缺点</span><br><span class="line"></span><br><span class="line">        有了 <span class="title class_">Promise</span> 对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，           <span class="title class_">Promise</span> 对象提供统一的接口，使得控制异步操作更加容易。</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Promise</span> 也有一些缺点。首先，无法取消 <span class="title class_">Promise</span>，一旦新建它就会立即执行，无法中途取消。其次，如果		   不设置回调函数，<span class="title class_">Promise</span> 内部抛出的错误，不会反应到外部。第三，当处于 <span class="title class_">Pending</span> 状态时，无法得知目         前进展到哪一个阶段（刚刚开始还是即将完成）。</span><br></pre></td></tr></table></figure>

<h6 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">callback,time</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> a = <span class="literal">null</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="built_in">clearInterval</span>(a);</span><br><span class="line">                a = <span class="built_in">setTimeout</span>(callback,time)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">onscroll</span> = <span class="title function_">fn</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;执行了&#x27;</span>)</span><br><span class="line">        &#125;,<span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">------------------------------上面是防抖，下面是节流--------------------------------------</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">callback,time</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> lasttime = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>()</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> newtime = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>()</span><br><span class="line">                <span class="keyword">if</span>(newtime-lasttime&gt;<span class="number">500</span>)&#123;</span><br><span class="line">                    <span class="title function_">callback</span>();</span><br><span class="line">                    lasttime = newtime</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">onscroll</span> = <span class="title function_">fn</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;执行了&#x27;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h6 id="Es6-Set-方法数组去重"><a href="#Es6-Set-方法数组去重" class="headerlink" title="Es6 Set 方法数组去重"></a>Es6 Set 方法数组去重</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[...<span class="keyword">new</span> <span class="title class_">Set</span>(array)]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例一</span></span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>]);</span><br><span class="line">[...set]</span><br><span class="line"><span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例二</span></span><br><span class="line"><span class="keyword">const</span> items = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>]);</span><br><span class="line">items.<span class="property">size</span> <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例三</span></span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>(<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>));</span><br><span class="line">set.<span class="property">size</span> <span class="comment">// 56</span></span><br><span class="line"></span><br><span class="line">set实例属性和方法</span><br><span class="line"></span><br><span class="line">        <span class="attr">size</span>: 返回<span class="title class_">Set</span>实例的成员总数。</span><br><span class="line">        <span class="title function_">add</span>(value)：添加某个值，返回 <span class="title class_">Set</span> 结构本身。</span><br><span class="line">        <span class="title function_">delete</span>(value)：删除某个值，返回一个布尔值，表示删除是否成功。</span><br><span class="line">        <span class="title function_">has</span>(value)：返回一个布尔值，表示该值是否为<span class="title class_">Set</span>的成员。</span><br><span class="line">        <span class="title function_">clear</span>()：清除所有成员，没有返回值。</span><br><span class="line">---------------------</span><br><span class="line">作者：xuxu_qkz</span><br><span class="line">来源：<span class="variable constant_">CSDN</span></span><br><span class="line">原文：<span class="attr">https</span>:<span class="comment">//blog.csdn.net/xuxu_qkz/article/details/80998141</span></span><br><span class="line">版权声明：本文为博主原创文章，转载请附上博文链接！</span><br></pre></td></tr></table></figure>

<h6 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oldobj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">d</span>: &#123;</span><br><span class="line">    <span class="attr">d1</span>: <span class="string">&quot;d1&quot;</span>,</span><br><span class="line">    <span class="attr">d2</span>: <span class="string">&quot;d2&quot;</span>,</span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">f</span>(<span class="params">value</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">a</span> = value;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">f</span>() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">a</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">arr</span>: [, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(oldobj, <span class="string">&quot;h&quot;</span>, &#123; <span class="attr">value</span>: <span class="number">10</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newobj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">cloneObj</span>(newobj, oldobj);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">cloneObj</span>(<span class="params">target, source</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> names = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(source); <span class="comment">//是oldobj的最外层的每一项的属性名 [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;arr&quot;, &quot;h&quot;]</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; names.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> desc = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(source, names[i]);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(desc);</span><br><span class="line">    <span class="comment">// configurable : desc.configurable,</span></span><br><span class="line">    <span class="comment">// enumerable : desc.enumerable,</span></span><br><span class="line">    <span class="comment">// value : obj,</span></span><br><span class="line">    <span class="comment">// writable : desc.writable</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> desc.<span class="property">value</span> === <span class="string">&quot;object&quot;</span> &amp;&amp; desc.<span class="property">value</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> obj;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(desc.<span class="property">value</span>)) &#123;</span><br><span class="line">        obj = [];</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        obj = &#123;&#125;;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(target, names[i], &#123;</span><br><span class="line">        <span class="attr">configurable</span>: desc.<span class="property">configurable</span>, <span class="comment">//不可删除</span></span><br><span class="line">        <span class="attr">enumerable</span>: desc.<span class="property">enumerable</span>, <span class="comment">//是否可遍历</span></span><br><span class="line">        <span class="attr">value</span>: obj, <span class="comment">//值</span></span><br><span class="line">        <span class="attr">writable</span>: desc.<span class="property">writable</span>, <span class="comment">//是否可修改</span></span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="title function_">cloneObj</span>(obj, desc.<span class="property">value</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(target, names[i], desc);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="Proxy（代理）"><a href="#Proxy（代理）" class="headerlink" title="Proxy（代理）"></a>Proxy（代理）</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">target, key, value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;这里设置了属性&quot;</span>);</span><br><span class="line">    target[key] = value;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params">target, key</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;这里获取了属性&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> target[key];</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">has</span>: <span class="keyword">function</span> (<span class="params">target, key</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;这里判断了属性&quot;</span>); <span class="comment">//true 或 false</span></span><br><span class="line">    <span class="keyword">return</span> key <span class="keyword">in</span> target;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, handler);</span><br><span class="line">(p.<span class="property">c</span> = <span class="number">20</span>), <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b&quot;</span> <span class="keyword">in</span> p); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123; ...p &#125;);</span><br></pre></td></tr></table></figure>

<h6 id="window-onload-与-window-ready-区别"><a href="#window-onload-与-window-ready-区别" class="headerlink" title="window.onload 与$(window).ready 区别"></a>window.onload 与$(window).ready 区别</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">两者都是加载后执行</span><br><span class="line">html加载顺序:</span><br><span class="line">	html结构</span><br><span class="line">	加载外部样式表和执行文件</span><br><span class="line">	解析执行脚本代码</span><br><span class="line">	构造<span class="title class_">Dom</span>模型（样式应用）<span class="comment">//这里ready就开始执行</span></span><br><span class="line">	加载图片文件等</span><br><span class="line">	页面加载完毕</span><br></pre></td></tr></table></figure>

<h6 id="事件循环-EventLoop"><a href="#事件循环-EventLoop" class="headerlink" title="事件循环 EventLoop"></a>事件循环 EventLoop</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">代码的执行顺序</span><br><span class="line">	<span class="comment">//js是事件驱动，因此最底层都是以事件驱动完成函数的毁掉执行，例如当有触发某个事件的启动因素时，就会抛出事件，调用回调函数，但这个过程并不是函数可以自己去回调，而是抛出事件后，将在任务列中等待下一个执行时间立即调用函数</span></span><br><span class="line"><span class="comment">//即使在同一个任务队列中俄又先后顺序，主要分宏观任务和微观任务</span></span><br><span class="line"></span><br><span class="line">宏观任务 : <span class="built_in">setTimeout</span> ， <span class="built_in">setInterval</span></span><br><span class="line">微观任务 : process,nextTick,<span class="title class_">Promise</span></span><br><span class="line"></span><br><span class="line">微观任务一般是在当前任务的尾部，下一次任务执行时间之前执行</span><br><span class="line"></span><br><span class="line">宏观任务一般是在当前任务的尾部抛出事件，等待下一次任务队列执行时间开始的时候执行</span><br><span class="line"></span><br><span class="line">这样任务队列就在一个个时间段内不停的循环执行下去</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>一文帮你搞定90%的JS手写题</title>
    <url>/2022/01/05/%E9%9D%A2%E8%AF%95%E9%A2%98/%E9%9D%A2%E8%AF%95%E9%A2%981%EF%BC%9A%E4%B8%80%E6%96%87%E5%B8%AE%E4%BD%A0%E6%90%9E%E5%AE%9A90-%E7%9A%84JS%E6%89%8B%E5%86%99%E9%A2%98/</url>
    <content><![CDATA[<blockquote>
<p>还在害怕手写题吗，本文可以帮你扩展并巩固自己的 JS 基础，顺便搞定 90%的手写题。在工作中还可以对常用的需求进行手写实现，比如深拷贝、防抖节流等可以直接用于往后的项目中，提高项目开发效率。不说废话了，下面就直接上代码吧。</p>
</blockquote>
<h3 id="1-call-的实现"><a href="#1-call-的实现" class="headerlink" title="1.call 的实现"></a>1.call 的实现</h3><ul>
<li><p>第一个参数为 null 或者 undefined 时，this 指向全局对象 window，值为原始值的指向该原始值的自动包装对象，如 String、Number、Boolean</p>
</li>
<li><p>为了避免函数名与上下文(context)的属性发生冲突，使用 Symbol 类型作为唯一值</p>
</li>
<li><p>将函数作为传入的上下文(context)属性执行</p>
</li>
<li><p>函数执行完成后删除该属性</p>
</li>
<li><p>返回执行结果</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myCall</span> = <span class="keyword">function</span> (<span class="params">context, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> cxt = context || <span class="variable language_">window</span>;</span><br><span class="line">  <span class="comment">//将当前被调用的方法定义在cxt.func上.(为了能以对象调用形式绑定this)</span></span><br><span class="line">  <span class="comment">//新建一个唯一的Symbol变量避免重复</span></span><br><span class="line">  <span class="keyword">let</span> func = <span class="title class_">Symbol</span>();</span><br><span class="line">  cxt[func] = <span class="variable language_">this</span>;</span><br><span class="line">  args = args ? args : [];</span><br><span class="line">  <span class="comment">//以对象调用形式调用func,此时this指向cxt 也就是传入的需要绑定的this指向</span></span><br><span class="line">  <span class="keyword">const</span> res = args.<span class="property">length</span> &gt; <span class="number">0</span> ? cxt[func](...args) : cxt[func]();</span><br><span class="line">  <span class="comment">//删除该方法，不然会对传入对象造成污染（添加该方法）</span></span><br><span class="line">  <span class="keyword">delete</span> cxt[func];</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="2-apply-的实现"><a href="#2-apply-的实现" class="headerlink" title="2.apply 的实现"></a>2.apply 的实现</h3><ul>
<li><p>前部分与 call 一样</p>
</li>
<li><p>第二个参数可以不传，但类型必须为数组或者类数组</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span> = <span class="keyword">function</span> (<span class="params">context, args = []</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> cxt = context || <span class="variable language_">window</span>;</span><br><span class="line">  <span class="comment">//将当前被调用的方法定义在cxt.func上.(为了能以对象调用形式绑定this)</span></span><br><span class="line">  <span class="comment">//新建一个唯一的Symbol变量避免重复</span></span><br><span class="line">  <span class="keyword">let</span> func = <span class="title class_">Symbol</span>();</span><br><span class="line">  cxt[func] = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="comment">//以对象调用形式调用func,此时this指向cxt 也就是传入的需要绑定的this指向</span></span><br><span class="line">  <span class="keyword">const</span> res = args.<span class="property">length</span> &gt; <span class="number">0</span> ? cxt[func](...args) : cxt[func]();</span><br><span class="line">  <span class="keyword">delete</span> cxt[func];</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="3-bind-的实现"><a href="#3-bind-的实现" class="headerlink" title="3.bind 的实现"></a>3.bind 的实现</h3><h5 id="需要考虑："><a href="#需要考虑：" class="headerlink" title="需要考虑："></a>需要考虑：</h5><ul>
<li><p>bind() 除了 this 外，还可传入多个参数；</p>
</li>
<li><p>bind 创建的新函数可能传入多个参数；</p>
</li>
<li><p>新函数可能被当做构造函数调用；</p>
</li>
<li><p>函数可能有返回值；</p>
</li>
</ul>
<h5 id="实现方法："><a href="#实现方法：" class="headerlink" title="实现方法："></a>实现方法：</h5><ul>
<li>bind 方法不会立即执行，需要返回一个待执行的函数；（闭包）</li>
<li>实现作用域绑定（apply）</li>
<li>参数传递（apply 的数组传参）</li>
<li>当作为构造函数的时候，进行原型继承</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myBind</span> = <span class="keyword">function</span> (<span class="params">context, ...args</span>) &#123;</span><br><span class="line">  <span class="comment">//新建一个变量赋值为this，表示当前函数</span></span><br><span class="line">  <span class="keyword">const</span> fn = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="comment">//判断有没有传参进来，若为空则赋值[]</span></span><br><span class="line">  args = args ? args : [];</span><br><span class="line">  <span class="comment">//返回一个newFn函数，在里面调用fn</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">newFn</span>(<span class="params">...newFnArgs</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span> <span class="keyword">instanceof</span> newFn) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">fn</span>(...args, ...newFnArgs);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fn.<span class="title function_">apply</span>(context, [...args, ...newFnArgs]);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;小王&quot;</span>,</span><br><span class="line">  age = <span class="number">17</span>;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;小张&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="variable language_">this</span>.<span class="property">age</span>,</span><br><span class="line">  <span class="attr">myFun</span>: <span class="keyword">function</span> (<span class="params"><span class="keyword">from</span>, to</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot; 年龄 &quot;</span> + <span class="variable language_">this</span>.<span class="property">age</span> + <span class="string">&quot;来自 &quot;</span> + <span class="keyword">from</span> + <span class="string">&quot;去往&quot;</span> + to);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> db = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;德玛&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">99</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line">obj.<span class="property">myFun</span>.<span class="title function_">myCall</span>(db, <span class="string">&quot;成都&quot;</span>, <span class="string">&quot;上海&quot;</span>); <span class="comment">// 德玛 年龄 99  来自 成都去往上海</span></span><br><span class="line">obj.<span class="property">myFun</span>.<span class="title function_">myApply</span>(db, [<span class="string">&quot;成都&quot;</span>, <span class="string">&quot;上海&quot;</span>]); <span class="comment">// 德玛 年龄 99  来自 成都去往上海</span></span><br><span class="line">obj.<span class="property">myFun</span>.<span class="title function_">myBind</span>(db, <span class="string">&quot;成都&quot;</span>, <span class="string">&quot;上海&quot;</span>)(); <span class="comment">// 德玛 年龄 99  来自 成都去往上海</span></span><br><span class="line">obj.<span class="property">myFun</span>.<span class="title function_">myBind</span>(db, [<span class="string">&quot;成都&quot;</span>, <span class="string">&quot;上海&quot;</span>])(); <span class="comment">// 德玛 年龄 99  来自 成都, 上海去往 undefined</span></span><br></pre></td></tr></table></figure>

<h3 id="4-寄生式组合继承"><a href="#4-寄生式组合继承" class="headerlink" title="4.寄生式组合继承"></a>4.寄生式组合继承</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = obj.<span class="property">name</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = obj.<span class="property">age</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">add</span> = <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;番茄&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person1</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, obj);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sex</span> = obj.<span class="property">sex</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这一步是继承的关键</span></span><br><span class="line"><span class="title class_">Person1</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="title class_">Person1</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Person1</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person1</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">play</span> = <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="title class_">Person1</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;鸡蛋&quot;</span>, <span class="attr">age</span>: <span class="number">118</span>, <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span> &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="5-ES6-继承"><a href="#5-ES6-继承" class="headerlink" title="5.ES6 继承"></a>5.ES6 继承</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//class 相当于es5中构造函数</span></span><br><span class="line"><span class="comment">//class中定义方法时，前后不能加function，全部定义在class的protopyte属性中</span></span><br><span class="line"><span class="comment">//class中定义的所有方法是不可枚举的</span></span><br><span class="line"><span class="comment">//class中只能定义方法，不能定义对象，变量等</span></span><br><span class="line"><span class="comment">//class和方法内默认都是严格模式</span></span><br><span class="line"><span class="comment">//es5中constructor为隐式属性</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name = <span class="string">&quot;wang&quot;</span>, age = <span class="string">&quot;27&quot;</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">eat</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> <span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span> eat food`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//继承父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Woman</span> <span class="keyword">extends</span> <span class="title class_ inherited__">People</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name = <span class="string">&quot;ren&quot;</span>, age = <span class="string">&quot;27&quot;</span></span>) &#123;</span><br><span class="line">    <span class="comment">//继承父类属性</span></span><br><span class="line">    <span class="variable language_">super</span>(name, age);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">eat</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//继承父类方法</span></span><br><span class="line">    <span class="variable language_">super</span>.<span class="title function_">eat</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> wonmanObj = <span class="keyword">new</span> <span class="title class_">Woman</span>(<span class="string">&quot;xiaoxiami&quot;</span>);</span><br><span class="line">wonmanObj.<span class="title function_">eat</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//es5继承先创建子类的实例对象，然后再将父类的方法添加到this上（Parent.apply(this)）。</span></span><br><span class="line"><span class="comment">//es6继承是使用关键字super先创建父类的实例对象this，最后在子类class中修改this。</span></span><br></pre></td></tr></table></figure>

<h3 id="6-new-的实现"><a href="#6-new-的实现" class="headerlink" title="6.new 的实现"></a>6.new 的实现</h3><ul>
<li><p>一个继承自 Foo.prototype 的新对象被创建。</p>
</li>
<li><p>使用指定的参数调用构造函数 Foo，并将 this 绑定到新创建的对象。new Foo 等同于 new Foo()，也就是没有指定参数列表，Foo 不带任何参数调用的情况。</p>
</li>
<li><p>由构造函数返回的对象就是 new 表达式的结果。如果构造函数没有显式返回一个对象，则使用步骤 1 创建的对象。</p>
</li>
<li><p>一般情况下，构造函数不返回值，但是用户可以选择主动返回对象，来覆盖正常的对象创建步骤</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Ctor</span>(<span class="params"></span>)&#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myNew</span>(<span class="params">ctor,...args</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> ctor !== <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="string">&#x27;myNew function the first param must be a function&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> newObj = <span class="title class_">Object</span>.<span class="title function_">create</span>(ctor.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">//创建一个继承自ctor.prototype的新对象</span></span><br><span class="line">    <span class="keyword">var</span> ctorReturnResult = ctor.<span class="title function_">apply</span>(newObj, args); <span class="comment">//将构造函数ctor的this绑定到newObj中</span></span><br><span class="line">    <span class="keyword">var</span> isObject = <span class="keyword">typeof</span> ctorReturnResult === <span class="string">&#x27;object&#x27;</span> &amp;&amp; ctorReturnResult !== <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> isFunction = <span class="keyword">typeof</span> ctorReturnResult === <span class="string">&#x27;function&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(isObject || isFunction)&#123;</span><br><span class="line">        <span class="keyword">return</span> ctorReturnResult;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = <span class="title function_">myNew</span>(<span class="title class_">Ctor</span>);</span><br></pre></td></tr></table></figure>

<h3 id="7-instanceof-的实现"><a href="#7-instanceof-的实现" class="headerlink" title="7.instanceof 的实现"></a>7.instanceof 的实现</h3><ul>
<li><p>instanceof 是用来判断 A 是否为 B 的实例，表达式为：A instanceof B，如果 A 是 B 的实例，则返回 true,否则返回 false。</p>
</li>
<li><p>instanceof 运算符用来测试一个对象在其原型链中是否存在一个构造函数的 prototype 属性。</p>
</li>
<li><p>不能检测基本数据类型，在原型链上的结果未必准确，不能检测 null,undefined</p>
</li>
<li><p>实现：遍历左边变量的原型链，直到找到右边变量的 prototype，如果没有找到，返回 false</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myInstanceOf</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> left = a.<span class="property">__proto__</span>;</span><br><span class="line">  <span class="keyword">let</span> right = b.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (left == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    left = left.<span class="property">__proto__</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//instanceof 运算符用于判断构造函数的 prototype 属性是否出现在对象的原型链中的任何位置。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myInstanceof</span>(<span class="params">left, right</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> proto = <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(left), <span class="comment">// 获取对象的原型</span></span><br><span class="line">    prototype = right.<span class="property"><span class="keyword">prototype</span></span>; <span class="comment">// 获取构造函数的 prototype 对象</span></span><br><span class="line">  <span class="comment">// 判断构造函数的 prototype 对象是否在对象的原型链上</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!proto) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (proto === prototype) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    proto = <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(proto);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-Object-create-的实现"><a href="#8-Object-create-的实现" class="headerlink" title="8.Object.create()的实现"></a>8.Object.create()的实现</h3><ul>
<li><p>MDN 文档</p>
</li>
<li><p>Object.create()会将参数对象作为一个新创建的空对象的原型, 并返回这个空对象</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//简略版</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myCreate</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="comment">// 新声明一个函数</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">C</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="comment">// 将函数的原型指向obj</span></span><br><span class="line">  C.<span class="property"><span class="keyword">prototype</span></span> = obj;</span><br><span class="line">  <span class="comment">// 返回这个函数的实力化对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">C</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//官方版Polyfill</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">Object</span>.<span class="property">create</span> !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="property">create</span> = <span class="keyword">function</span> (<span class="params">proto, propertiesObject</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> proto !== <span class="string">&quot;object&quot;</span> &amp;&amp; <span class="keyword">typeof</span> proto !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;Object prototype may only be an Object: &quot;</span> + proto);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (proto === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(</span><br><span class="line">        <span class="string">&quot;This browser&#x27;s implementation of Object.create is a shim and doesn&#x27;t support &#x27;null&#x27; as the first argument.&quot;</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> propertiesObject !== <span class="string">&quot;undefined&quot;</span>)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(</span><br><span class="line">        <span class="string">&quot;This browser&#x27;s implementation of Object.create is a shim and doesn&#x27;t support a second argument.&quot;</span></span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">    F.<span class="property"><span class="keyword">prototype</span></span> = proto;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">F</span>();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="9-实现-Object-assign"><a href="#9-实现-Object-assign" class="headerlink" title="9.实现 Object.assign"></a>9.实现 Object.assign</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property">assign2</span> = <span class="keyword">function</span> (<span class="params">target, ...source</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (target == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;Cannot convert undefined or null to object&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> ret = <span class="title class_">Object</span>(target);</span><br><span class="line">  source.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">          ret[key] = obj[key];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="10-Promise-的实现"><a href="#10-Promise-的实现" class="headerlink" title="10.Promise 的实现"></a>10.Promise 的实现</h3><p>实现 Promise 需要完全读懂 Promise A+ 规范，不过从总体的实现上看，有如下几个点需要考虑到：</p>
<ul>
<li><p>Promise 本质是一个状态机，且状态只能为以下三种：Pending（等待态）、Fulfilled（执行态）、Rejected（拒绝态），状态的变更是单向的，只能从 Pending -&gt; Fulfilled 或 Pending -&gt; Rejected，状态变更不可逆</p>
</li>
<li><p>then 需要支持链式调用</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Promise</span> &#123;</span><br><span class="line">  callbacks = [];</span><br><span class="line">  state = <span class="string">&quot;pending&quot;</span>; <span class="comment">//增加状态</span></span><br><span class="line">  value = <span class="literal">null</span>; <span class="comment">//保存结果</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="title function_">fn</span>(<span class="variable language_">this</span>.<span class="property">_resolve</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="variable language_">this</span>.<span class="property">_reject</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">_handle</span>(&#123;</span><br><span class="line">        <span class="attr">onFulfilled</span>: onFulfilled || <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">onRejected</span>: onRejected || <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">resolve</span>: resolve,</span><br><span class="line">        <span class="attr">reject</span>: reject,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">_handle</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="string">&quot;pending&quot;</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">callbacks</span>.<span class="title function_">push</span>(callback);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> cb =</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">state</span> === <span class="string">&quot;fulfilled&quot;</span> ? callback.<span class="property">onFulfilled</span> : callback.<span class="property">onRejected</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!cb) &#123;</span><br><span class="line">      <span class="comment">//如果then中没有传递任何东西</span></span><br><span class="line">      cb = <span class="variable language_">this</span>.<span class="property">state</span> === <span class="string">&quot;fulfilled&quot;</span> ? callback.<span class="property">resolve</span> : callback.<span class="property">reject</span>;</span><br><span class="line">      <span class="title function_">cb</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> ret = <span class="title function_">cb</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">    cb = <span class="variable language_">this</span>.<span class="property">state</span> === <span class="string">&quot;fulfilled&quot;</span> ? callback.<span class="property">resolve</span> : callback.<span class="property">reject</span>;</span><br><span class="line">    <span class="title function_">cb</span>(ret);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">_resolve</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value &amp;&amp; (<span class="keyword">typeof</span> value === <span class="string">&quot;object&quot;</span> || <span class="keyword">typeof</span> value === <span class="string">&quot;function&quot;</span>)) &#123;</span><br><span class="line">      <span class="keyword">var</span> then = value.<span class="property">then</span>;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> then === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">        then.<span class="title function_">call</span>(value, <span class="variable language_">this</span>.<span class="property">_resolve</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="variable language_">this</span>.<span class="property">_reject</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">&quot;fulfilled&quot;</span>; <span class="comment">//改变状态</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = value; <span class="comment">//保存结果</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callbacks</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">callback</span>) =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">_handle</span>(callback));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">_reject</span>(<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">&quot;rejected&quot;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = error;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callbacks</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">callback</span>) =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">_handle</span>(callback));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Promise-resolve"><a href="#Promise-resolve" class="headerlink" title="Promise.resolve"></a>Promise.resolve</h3><ul>
<li>Promsie.resolve(value) 可以将任何值转成值为 value 状态是 fulfilled 的 Promise，但如果传入的值本身是 Promise 则会原样返回它。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (value &amp;&amp; value <span class="keyword">instanceof</span> <span class="title class_">Promise</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value &amp;&amp; <span class="keyword">typeof</span> value === <span class="string">&#x27;object&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> value.<span class="property">then</span> === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> then = value.<span class="property">then</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">then</span>(resolve);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="title function_">resolve</span>(value));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="title function_">resolve</span>());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Promise-reject"><a href="#Promise-reject" class="headerlink" title="Promise.reject"></a>Promise.reject</h3><ul>
<li>和 Promise.resolve() 类似，Promise.reject() 会实例化一个 rejected 状态的 Promise。但与 Promise.resolve() 不同的是，如果给 Promise.reject() 传递一个 Promise 对象，则这个对象会成为新 Promise 的值。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="property">reject</span> = <span class="keyword">function</span> (<span class="params">reason</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="title function_">reject</span>(reason));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h3><ul>
<li><p>传入的所有 Promsie 都是 fulfilled，则返回由他们的值组成的，状态为 fulfilled 的新 Promise；</p>
</li>
<li><p>只要有一个 Promise 是 rejected，则返回 rejected 状态的新 Promsie，且它的值是第一个 rejected 的 Promise 的值；</p>
</li>
<li><p>只要有一个 Promise 是 pending，则返回一个 pending 状态的新 Promise；</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="property">all</span> = <span class="keyword">function</span> (<span class="params">promiseArr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span>,</span><br><span class="line">    result = [];</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    promiseArr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">p, i</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(p).<span class="title function_">then</span>(</span><br><span class="line">        <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">          index++;</span><br><span class="line">          result[i] = val;</span><br><span class="line">          <span class="keyword">if</span> (index === promiseArr.<span class="property">length</span>) &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(result);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">reject</span>(err);</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race"></a>Promise.race</h3><ul>
<li>Promise.race 会返回一个由所有可迭代实例中第一个 fulfilled 或 rejected 的实例包装后的新实例。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="property">race</span> = <span class="keyword">function</span> (<span class="params">promiseArr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    promiseArr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">p</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(p).<span class="title function_">then</span>(</span><br><span class="line">        <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(val);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">rejecte</span>(err);</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="11-Ajax-的实现"><a href="#11-Ajax-的实现" class="headerlink" title="11.Ajax 的实现"></a>11.Ajax 的实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ajax</span>(<span class="params">url, method, body, headers</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> req = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    req.<span class="title function_">open</span>(methods, url);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> headers) &#123;</span><br><span class="line">      req.<span class="title function_">setRequestHeader</span>(key, headers[key]);</span><br><span class="line">    &#125;</span><br><span class="line">    req.<span class="title function_">onreadystatechange</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (req.<span class="property">readystate</span> == <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (req.<span class="property">status</span> &gt;= <span class="string">&quot;200&quot;</span> &amp;&amp; req.<span class="property">status</span> &lt;= <span class="number">300</span>) &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(req.<span class="property">responeText</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">reject</span>(req);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    req.<span class="title function_">send</span>(body);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="12-实现防抖函数（debounce）"><a href="#12-实现防抖函数（debounce）" class="headerlink" title="12.实现防抖函数（debounce）"></a>12.实现防抖函数（debounce）</h3><ul>
<li>连续触发在最后一次执行方法，场景：输入框匹配</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">debounce</span> = (<span class="params">fn, time = <span class="number">1000</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> timeLock = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timeLock);</span><br><span class="line">    timeLock = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">fn</span>(...args);</span><br><span class="line">    &#125;, time);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="13-实现节流函数（throttle）"><a href="#13-实现节流函数（throttle）" class="headerlink" title="13.实现节流函数（throttle）"></a>13.实现节流函数（throttle）</h3><ul>
<li>在一定时间内只触发一次，场景：长列表滚动节流</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">throttle</span> = (<span class="params">fn, time = <span class="number">1000</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> flag = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">      flag = <span class="literal">false</span>;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="title function_">fn</span>(...args);</span><br><span class="line">      &#125;, time);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="14-深拷贝（deepclone）"><a href="#14-深拷贝（deepclone）" class="headerlink" title="14.深拷贝（deepclone）"></a>14.深拷贝（deepclone）</h3><ul>
<li><p>判断类型，正则和日期直接返回新对象</p>
</li>
<li><p>空或者非对象类型，直接返回原值</p>
</li>
<li><p>考虑循环引用，判断如果 hash 中含有直接返回 hash 中的值</p>
</li>
<li><p>新建一个相应的 new obj.constructor 加入 hash</p>
</li>
<li><p>遍历对象递归（普通 key 和 key 是 symbol 情况）</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">obj, hash = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">RegExp</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RegExp</span>(obj);</span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">Date</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(obj);</span><br><span class="line">  <span class="keyword">if</span> (obj === <span class="literal">null</span> || <span class="keyword">typeof</span> obj !== <span class="string">&quot;object&quot;</span>) <span class="keyword">return</span> obj;</span><br><span class="line">  <span class="comment">//循环引用的情况</span></span><br><span class="line">  <span class="keyword">if</span> (hash.<span class="title function_">has</span>(obj)) &#123;</span><br><span class="line">    <span class="keyword">return</span> hash.<span class="title function_">get</span>(obj);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//new 一个相应的对象</span></span><br><span class="line">  <span class="comment">//obj为Array，相当于new Array()</span></span><br><span class="line">  <span class="comment">//obj为Object，相当于new Object()</span></span><br><span class="line">  <span class="keyword">let</span> constr = <span class="keyword">new</span> obj.<span class="title function_">constructor</span>(<span class="params"></span>);</span><br><span class="line">  hash.<span class="title function_">set</span>(obj, constr);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">      constr[key] = <span class="title function_">deepClone</span>(obj[key], hash);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//考虑symbol的情况</span></span><br><span class="line">  <span class="keyword">let</span> symbolObj = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(obj);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; symbolObj.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(symbolObj[i])) &#123;</span><br><span class="line">      constr[symbolObj[i]] = <span class="title function_">deepClone</span>(obj[symbolObj[i]], hash);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> constr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="15-数组扁平化的实现-flat"><a href="#15-数组扁平化的实现-flat" class="headerlink" title="15.数组扁平化的实现(flat)"></a>15.数组扁平化的实现(flat)</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, [<span class="number">6</span>]]]];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">flat</span>(<span class="title class_">Infinity</span>)); <span class="comment">//flat参数为指定要提取嵌套数组的结构深度，默认值为 1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用reduce实现</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, cur</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> prev.<span class="title function_">concat</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(cur) ? <span class="title function_">fn</span>(cur) : cur);</span><br><span class="line">  &#125;, []);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="16-函数柯里化"><a href="#16-函数柯里化" class="headerlink" title="16.函数柯里化"></a>16.函数柯里化</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sumFn</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> sum = <span class="title function_">curry</span>(sumFn);</span><br><span class="line"><span class="title function_">sum</span>(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">5</span>); <span class="comment">//10</span></span><br><span class="line"><span class="title function_">sum</span>(<span class="number">2</span>, <span class="number">3</span>)(<span class="number">5</span>); <span class="comment">//10</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">curry</span>(<span class="params">fn, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> fnLen = fn.<span class="property">length</span>,</span><br><span class="line">    argsLen = args.<span class="property">length</span>;</span><br><span class="line">  <span class="comment">//对比函数的参数和当前传入参数</span></span><br><span class="line">  <span class="comment">//若参数不够就继续递归返回curry</span></span><br><span class="line">  <span class="comment">//若参数够就调用函数返回相应的值</span></span><br><span class="line">  <span class="keyword">if</span> (fnLen &gt; argsLen) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...arg2s</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">curry</span>(fn, ...args, ...arg2s);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fn</span>(...args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="17-使用闭包实现每隔一秒打印-1-2-3-4"><a href="#17-使用闭包实现每隔一秒打印-1-2-3-4" class="headerlink" title="17.使用闭包实现每隔一秒打印 1,2,3,4"></a>17.使用闭包实现每隔一秒打印 1,2,3,4</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  (<span class="keyword">function</span> (<span class="params">i</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(i), <span class="number">1000</span> * i);</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="18-手写一个-jsonp"><a href="#18-手写一个-jsonp" class="headerlink" title="18.手写一个 jsonp"></a>18.手写一个 jsonp</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> jsonp = <span class="keyword">function</span> (<span class="params">url, data</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 初始化url</span></span><br><span class="line">    <span class="keyword">let</span> dataString = url.<span class="title function_">indexOf</span>(<span class="string">&quot;?&quot;</span>) === -<span class="number">1</span> ? <span class="string">&quot;?&quot;</span> : <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> callbackName = <span class="string">`jsonpCB_<span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span>`</span>;</span><br><span class="line">    url += <span class="string">`<span class="subst">$&#123;dataString&#125;</span>callback=<span class="subst">$&#123;callbackName&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">if</span> (data) &#123;</span><br><span class="line">      <span class="comment">// 有请求参数，依次添加到url</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> data) &#123;</span><br><span class="line">        url += <span class="string">`<span class="subst">$&#123;k&#125;</span>=<span class="subst">$&#123;data[k]&#125;</span>`</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> jsNode = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;script&quot;</span>);</span><br><span class="line">    jsNode.<span class="property">src</span> = url;</span><br><span class="line">    <span class="comment">// 触发callback，触发后删除js标签和绑定在window上的callback</span></span><br><span class="line">    <span class="variable language_">window</span>[callbackName] = <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">delete</span> <span class="variable language_">window</span>[callbackName];</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(jsNode);</span><br><span class="line">      <span class="keyword">if</span> (result) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(result);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(<span class="string">&quot;没有返回数据&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// js加载异常的情况</span></span><br><span class="line">    jsNode.<span class="title function_">addEventListener</span>(</span><br><span class="line">      <span class="string">&quot;error&quot;</span>,</span><br><span class="line">      <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">delete</span> <span class="variable language_">window</span>[callbackName];</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(jsNode);</span><br><span class="line">        <span class="title function_">reject</span>(<span class="string">&quot;JavaScript资源加载失败&quot;</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="literal">false</span></span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 添加js节点到document上时，开始请求</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(jsNode);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">jsonp</span>(<span class="string">&quot;http://192.168.0.103:8081/jsonp&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="string">&quot;heiheihei&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="19-手写一个观察者模式"><a href="#19-手写一个观察者模式" class="headerlink" title="19.手写一个观察者模式"></a>19.手写一个观察者模式</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">observers</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">&quot;XXXX&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 被观察者要提供一个接受观察者的方法</span></span><br><span class="line">  <span class="title function_">attach</span>(<span class="params">observer</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">observers</span>.<span class="title function_">push</span>(observer);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 改变被观察着的状态</span></span><br><span class="line">  <span class="title function_">setState</span>(<span class="params">newState</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = newState;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">observers</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">o</span>) =&gt;</span> &#123;</span><br><span class="line">      o.<span class="title function_">update</span>(newState);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">update</span>(<span class="params">newState</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>say:<span class="subst">$&#123;newState&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 被观察者 灯</span></span><br><span class="line"><span class="keyword">let</span> sub = <span class="keyword">new</span> <span class="title class_">Subject</span>(<span class="string">&quot;灯&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> mm = <span class="keyword">new</span> <span class="title class_">Observer</span>(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> jj = <span class="keyword">new</span> <span class="title class_">Observer</span>(<span class="string">&quot;小健&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅 观察者</span></span><br><span class="line">sub.<span class="title function_">attach</span>(mm);</span><br><span class="line">sub.<span class="title function_">attach</span>(jj);</span><br><span class="line"></span><br><span class="line">sub.<span class="title function_">setState</span>(<span class="string">&quot;灯亮了来电了&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="20-EventEmitter-实现"><a href="#20-EventEmitter-实现" class="headerlink" title="20.EventEmitter 实现"></a>20.EventEmitter 实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EventEmitter</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">events</span> = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">on</span>(<span class="params">event, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> callbacks = <span class="variable language_">this</span>.<span class="property">events</span>[event] || [];</span><br><span class="line">    callbacks.<span class="title function_">push</span>(callback);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">events</span>[event] = callbacks;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">off</span>(<span class="params">event, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> callbacks = <span class="variable language_">this</span>.<span class="property">events</span>[event];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">events</span>[event] = callbacks &amp;&amp; callbacks.<span class="title function_">filter</span>(<span class="function">(<span class="params">fn</span>) =&gt;</span> fn !== callback);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">emit</span>(<span class="params">event, ...args</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> callbacks = <span class="variable language_">this</span>.<span class="property">events</span>[event];</span><br><span class="line">    callbacks.<span class="title function_">forEach</span>(<span class="function">(<span class="params">fn</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">fn</span>(...args);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">once</span>(<span class="params">event, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> wrapFun = <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">      <span class="title function_">callback</span>(...args);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">off</span>(event, wrapFun);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">on</span>(event, wrapFun);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="21-生成随机数的各种方法？"><a href="#21-生成随机数的各种方法？" class="headerlink" title="21.生成随机数的各种方法？"></a>21.生成随机数的各种方法？</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getRandom</span>(<span class="params">min, max</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (max - min)) + min;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="22-如何实现数组的随机排序？"><a href="#22-如何实现数组的随机排序？" class="headerlink" title="22.如何实现数组的随机排序？"></a>22.如何实现数组的随机排序？</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">454</span>, <span class="number">34</span>, <span class="number">324</span>, <span class="number">32</span>];</span><br><span class="line">arr.<span class="title function_">sort</span>(randomSort);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">randomSort</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">random</span>() &gt; <span class="number">0.5</span> ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="23-写一个通用的事件侦听器函数。"><a href="#23-写一个通用的事件侦听器函数。" class="headerlink" title="23.写一个通用的事件侦听器函数。"></a>23.写一个通用的事件侦听器函数。</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">EventUtils</span> = &#123;</span><br><span class="line">  <span class="comment">// 视能力分别使用dom0||dom2||IE方式 来绑定事件</span></span><br><span class="line">  <span class="comment">// 添加事件</span></span><br><span class="line">  <span class="attr">addEvent</span>: <span class="keyword">function</span> (<span class="params">element, type, handler</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (element.<span class="property">addEventListener</span>) &#123;</span><br><span class="line">      element.<span class="title function_">addEventListener</span>(type, handler, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.<span class="property">attachEvent</span>) &#123;</span><br><span class="line">      element.<span class="title function_">attachEvent</span>(<span class="string">&quot;on&quot;</span> + type, handler);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      element[<span class="string">&quot;on&quot;</span> + type] = handler;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 移除事件</span></span><br><span class="line">  <span class="attr">removeEvent</span>: <span class="keyword">function</span> (<span class="params">element, type, handler</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (element.<span class="property">removeEventListener</span>) &#123;</span><br><span class="line">      element.<span class="title function_">removeEventListener</span>(type, handler, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.<span class="property">detachEvent</span>) &#123;</span><br><span class="line">      element.<span class="title function_">detachEvent</span>(<span class="string">&quot;on&quot;</span> + type, handler);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      element[<span class="string">&quot;on&quot;</span> + type] = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 获取事件目标</span></span><br><span class="line">  <span class="attr">getTarget</span>: <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> event.<span class="property">target</span> || event.<span class="property">srcElement</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 获取 event 对象的引用，取到事件的所有信息，确保随时能使用 event</span></span><br><span class="line">  <span class="attr">getEvent</span>: <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> event || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 阻止事件（主要是事件冒泡，因为 IE 不支持事件捕获）</span></span><br><span class="line">  <span class="attr">stopPropagation</span>: <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (event.<span class="property">stopPropagation</span>) &#123;</span><br><span class="line">      event.<span class="title function_">stopPropagation</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      event.<span class="property">cancelBubble</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 取消事件的默认行为</span></span><br><span class="line">  <span class="attr">preventDefault</span>: <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (event.<span class="property">preventDefault</span>) &#123;</span><br><span class="line">      event.<span class="title function_">preventDefault</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      event.<span class="property">returnValue</span> = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="24-使用迭代的方式实现-flatten-函数。"><a href="#24-使用迭代的方式实现-flatten-函数。" class="headerlink" title="24.使用迭代的方式实现 flatten 函数。"></a>24.使用迭代的方式实现 flatten 函数。</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>], [<span class="number">6</span>, [<span class="number">7</span>, [<span class="number">8</span>]]]];</span><br><span class="line"><span class="comment">/** * 使用递归的方式处理 * wrap 内保</span></span><br><span class="line"><span class="comment">存结果 ret * 返回一个递归函数 **/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">wrap</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> ret = [];</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">flat</span>(<span class="params">a</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> item <span class="keyword">of</span> a) &#123;</span><br><span class="line">      <span class="keyword">if</span> (item.<span class="property">constructor</span> === <span class="title class_">Array</span>) &#123;</span><br><span class="line">        ret.<span class="title function_">concat</span>(<span class="title function_">flat</span>(item));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ret.<span class="title function_">push</span>(item);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">wrap</span>()(arr));</span><br></pre></td></tr></table></figure>

<h3 id="25-怎么实现一个-sleep"><a href="#25-怎么实现一个-sleep" class="headerlink" title="25.怎么实现一个 sleep"></a>25.怎么实现一个 sleep</h3><ul>
<li>sleep 函数作用是让线程休眠，等到指定时间在重新唤起。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sleep</span>(<span class="params">delay</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> start = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line">  <span class="keyword">while</span> (<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>() - start &lt; delay) &#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">  <span class="title function_">sleep</span>(<span class="number">2000</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;222&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>();</span><br></pre></td></tr></table></figure>

<h3 id="26-实现正则切分千分位（10000-10-000）"><a href="#26-实现正则切分千分位（10000-10-000）" class="headerlink" title="26.实现正则切分千分位（10000 &#x3D;&gt; 10,000）"></a>26.实现正则切分千分位（10000 &#x3D;&gt; 10,000）</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//无小数点</span></span><br><span class="line"><span class="keyword">let</span> num1 = <span class="string">&quot;1321434322222&quot;</span>;</span><br><span class="line">num1.<span class="title function_">replace</span>(<span class="regexp">/(\d)(?=(\d&#123;3&#125;)+$)/g</span>, <span class="string">&quot;$1,&quot;</span>);</span><br><span class="line"><span class="comment">//有小数点</span></span><br><span class="line"><span class="keyword">let</span> num2 = <span class="string">&quot;342243242322.3432423&quot;</span>;</span><br><span class="line">num2.<span class="title function_">replace</span>(<span class="regexp">/(\d)(?=(\d&#123;3&#125;)+\.)/g</span>, <span class="string">&quot;$1,&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="27-对象数组去重"><a href="#27-对象数组去重" class="headerlink" title="27.对象数组去重"></a>27.对象数组去重</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">输入: [</span><br><span class="line">  &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">a</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">d</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">2</span> &#125;,</span><br><span class="line">];</span><br><span class="line">输出: [</span><br><span class="line">  &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">d</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">2</span> &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<ul>
<li><p>首先写一个函数把对象中的 key 排序，然后再转成字符串</p>
</li>
<li><p>遍历数组利用 Set 将转为字符串后的对象去重</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">objSort</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> newObj = &#123;&#125;;</span><br><span class="line">  <span class="comment">//遍历对象，并将key进行排序</span></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)</span><br><span class="line">    .<span class="title function_">sort</span>()</span><br><span class="line">    .<span class="title function_">map</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">      newObj[key] = obj[key];</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="comment">//将排序好的数组转成字符串</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(newObj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> str = <span class="title function_">objSort</span>(arr[i]);</span><br><span class="line">    set.<span class="title function_">add</span>(str);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//将数组中的字符串转回对象</span></span><br><span class="line">  arr = [...set].<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(item);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="28-解析-URL-Params-为对象"><a href="#28-解析-URL-Params-为对象" class="headerlink" title="28.解析 URL Params 为对象"></a>28.解析 URL Params 为对象</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> url =</span><br><span class="line">  <span class="string">&quot;http://www.domain.com/?user=anonymous&amp;id=123&amp;id=456&amp;city=%E5%8C%97%E4%BA%AC&amp;enabled&quot;</span>;</span><br><span class="line"><span class="title function_">parseParam</span>(url);</span><br><span class="line"><span class="comment">/* 结果</span></span><br><span class="line"><span class="comment">&#123; user: &#x27;anonymous&#x27;,</span></span><br><span class="line"><span class="comment">  id: [ 123, 456 ], // 重复出现的 key 要组装成数组，能被转成数字的就转成数字类型</span></span><br><span class="line"><span class="comment">  city: &#x27;北京&#x27;, // 中文需解码</span></span><br><span class="line"><span class="comment">  enabled: true, // 未指定值得 key 约定为 true</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="29-模板引擎实现"><a href="#29-模板引擎实现" class="headerlink" title="29.模板引擎实现"></a>29.模板引擎实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> template = <span class="string">&quot;我是&#123;&#123;name&#125;&#125;，年龄&#123;&#123;age&#125;&#125;，性别&#123;&#123;sex&#125;&#125;&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;姓名&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">render</span>(template, data); <span class="comment">// 我是姓名，年龄18，性别undefined</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">template, data</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> reg = <span class="regexp">/\&#123;\&#123;(\w+)\&#125;\&#125;/</span>; <span class="comment">// 模板字符串正则</span></span><br><span class="line">  <span class="keyword">if</span> (reg.<span class="title function_">test</span>(template)) &#123;</span><br><span class="line">    <span class="comment">// 判断模板里是否有模板字符串</span></span><br><span class="line">    <span class="keyword">const</span> name = reg.<span class="title function_">exec</span>(template)[<span class="number">1</span>]; <span class="comment">// 查找当前模板里第一个模板字符串的字段</span></span><br><span class="line">    template = template.<span class="title function_">replace</span>(reg, data[name]); <span class="comment">// 将第一个模板字符串渲染</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">render</span>(template, data); <span class="comment">// 递归的渲染并返回渲染后的结构</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> template; <span class="comment">// 如果模板没有模板字符串直接返回</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="30-转化为驼峰命名"><a href="#30-转化为驼峰命名" class="headerlink" title="30.转化为驼峰命名"></a>30.转化为驼峰命名</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="string">&quot;get-element-by-id&quot;</span>;</span><br><span class="line"><span class="comment">// 转化为 getElementById</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="keyword">function</span> (<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> s.<span class="title function_">replace</span>(<span class="regexp">/-\w/g</span>, <span class="keyword">function</span> (<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x.<span class="title function_">slice</span>(<span class="number">1</span>).<span class="title function_">toUpperCase</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="31-查找字符串中出现最多的字符和个数"><a href="#31-查找字符串中出现最多的字符和个数" class="headerlink" title="31.查找字符串中出现最多的字符和个数"></a>31.查找字符串中出现最多的字符和个数</h3><ul>
<li>例: abbcccddddd -&gt; 字符最多的是 d，出现了 5 次</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;abcabcabcbbccccc&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> char = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使其按照一定的次序排列</span></span><br><span class="line">str = str.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">sort</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="comment">// &quot;aaabbbbbcccccccc&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义正则表达式</span></span><br><span class="line"><span class="keyword">let</span> re = <span class="regexp">/(\w)\1+/g</span>;</span><br><span class="line">str.<span class="title function_">replace</span>(re, <span class="function">(<span class="params">$0, $1</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (num &lt; $0.<span class="property">length</span>) &#123;</span><br><span class="line">    num = $0.<span class="property">length</span>;</span><br><span class="line">    char = $1;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`字符最多的是<span class="subst">$&#123;char&#125;</span>，出现了<span class="subst">$&#123;num&#125;</span>次`</span>);</span><br></pre></td></tr></table></figure>

<h3 id="32-图片懒加载"><a href="#32-图片懒加载" class="headerlink" title="32.图片懒加载"></a>32.图片懒加载</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> imgList = [...<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;img&quot;</span>)];</span><br><span class="line"><span class="keyword">let</span> length = imgList.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> imgLazyLoad = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> deleteIndexList = [];</span><br><span class="line">    imgList.<span class="title function_">forEach</span>(<span class="function">(<span class="params">img, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> rect = img.<span class="title function_">getBoundingClientRect</span>();</span><br><span class="line">      <span class="keyword">if</span> (rect.<span class="property">top</span> &lt; <span class="variable language_">window</span>.<span class="property">innerHeight</span>) &#123;</span><br><span class="line">        img.<span class="property">src</span> = img.<span class="property">dataset</span>.<span class="property">src</span>;</span><br><span class="line">        deleteIndexList.<span class="title function_">push</span>(index);</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">if</span> (count === length) &#123;</span><br><span class="line">          <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;scroll&quot;</span>, imgLazyLoad);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    imgList = imgList.<span class="title function_">filter</span>(<span class="function">(<span class="params">img, index</span>) =&gt;</span> !deleteIndexList.<span class="title function_">includes</span>(index));</span><br><span class="line">  &#125;)();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里最好加上防抖处理</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;scroll&quot;</span>, imgLazyLoad);</span><br></pre></td></tr></table></figure>

<p>转载链接：<a href="https://blog.csdn.net/lgno2/article/details/117236965">https://blog.csdn.net/lgno2/article/details/117236965</a></p>
]]></content>
  </entry>
  <entry>
    <title>56个JavaScript手写知识点</title>
    <url>/2022/01/05/%E9%9D%A2%E8%AF%95%E9%A2%98/%E9%9D%A2%E8%AF%95%E9%A2%982%EF%BC%9A56%E4%B8%AAJavaScript%E6%89%8B%E5%86%99%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<h2 id="面试常考"><a href="#面试常考" class="headerlink" title="面试常考"></a>面试常考</h2><h3 id="1、实现原生的-AJAX-请求"><a href="#1、实现原生的-AJAX-请求" class="headerlink" title="1、实现原生的 AJAX 请求"></a>1、实现原生的 AJAX 请求</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ajax = &#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params">url, fn</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, url, <span class="literal">true</span>); <span class="comment">// 第三个参数异步与否</span></span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="title function_">fn</span>(xhr.<span class="property">responeText</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    xhr.<span class="title function_">send</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">post</span>(<span class="params">url, data, fn</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&quot;POST&quot;</span>, url, <span class="literal">true</span>);</span><br><span class="line">    xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="title function_">fn</span>(xhr.<span class="property">responeText</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    xhr.<span class="title function_">send</span>(data);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="2、手写-new-的过程"><a href="#2、手写-new-的过程" class="headerlink" title="2、手写 new 的过程"></a>2、手写 new 的过程</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myNew</span>(<span class="params">fn, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  obj.<span class="property">__proto__</span> = fn.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line"></span><br><span class="line">  fn.<span class="title function_">apply</span>(obj, args);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、instanceof-关键字"><a href="#3、instanceof-关键字" class="headerlink" title="3、instanceof 关键字"></a>3、instanceof 关键字</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">instanceOf</span>(<span class="params">father, child</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> fp = father.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">  <span class="keyword">var</span> cp = child.<span class="property">__proto__</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (cp) &#123;</span><br><span class="line">    <span class="keyword">if</span> (cp === fp) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cp = cp.<span class="property">__proto__</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、实现防抖函数"><a href="#4、实现防抖函数" class="headerlink" title="4、实现防抖函数"></a>4、实现防抖函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, delay = <span class="number">500</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args); <span class="comment">// 改变this指向为调用debounce所指的对象</span></span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5、实现节流函数"><a href="#5、实现节流函数" class="headerlink" title="5、实现节流函数"></a>5、实现节流函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, delay = <span class="number">200</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> flag = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!flag) <span class="keyword">return</span>;</span><br><span class="line">    flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">const</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">      flag = <span class="literal">true</span>;</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6、实现数组去重"><a href="#6、实现数组去重" class="headerlink" title="6、实现数组去重"></a>6、实现数组去重</h3><blockquote>
<p>题目描述：实现一个数组的去重</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种：Map记录</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">quchong1</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> newArr = [];</span><br><span class="line">  arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!pre[next]) &#123;</span><br><span class="line">      pre[next] = <span class="number">1</span>;</span><br><span class="line">      newArr.<span class="title function_">push</span>(next);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">  &#125;, &#123;&#125;);</span><br><span class="line">  <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种：Set去重</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">quchong2</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7、用-setTimeout-实现-setInterval"><a href="#7、用-setTimeout-实现-setInterval" class="headerlink" title="7、用 setTimeout 实现 setInterval"></a>7、用 setTimeout 实现 setInterval</h3><blockquote>
<p>题目描述：setinterval 用来实现循环定时调用 可能会存在一定的问题 能用 settimeout 解决吗</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mySetTimout</span>(<span class="params">fn, delay</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">interval</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">fn</span>();</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(interval, delay);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="built_in">setTimeout</span>(interval, delay);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">cancel</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> &#123; cancel &#125; = <span class="title function_">mySetTimout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">888</span>), <span class="number">1000</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">cancel</span>();</span><br><span class="line">&#125;, <span class="number">4000</span>);</span><br></pre></td></tr></table></figure>

<h3 id="8、用-setInterval-实现-setTimeout"><a href="#8、用-setInterval-实现-setTimeout" class="headerlink" title="8、用 setInterval 实现 setTimeout"></a>8、用 setInterval 实现 setTimeout</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mySetInterval</span>(<span class="params">fn, delay</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">fn</span>();</span><br><span class="line">    <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">  &#125;, delay);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="title function_">mySetInterval</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">888</span>), <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<h3 id="9、实现一个-compose-函数"><a href="#9、实现一个-compose-函数" class="headerlink" title="9、实现一个 compose 函数"></a>9、实现一个 compose 函数</h3><blockquote>
<p>题目说明：实现以下效果</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn3</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn4</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a = <span class="title function_">compose</span>(fn1, fn2, fn3, fn4);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">a</span>(<span class="number">1</span>)); <span class="comment">// 1+2+3+4=11</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>实现如下：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">compose</span>(<span class="params">...fn</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (fn.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span> <span class="function">(<span class="params">num</span>) =&gt;</span> num;</span><br><span class="line">  <span class="keyword">if</span> (fn.<span class="property">length</span> === <span class="number">1</span>) <span class="keyword">return</span> fn[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">return</span> fn.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">next</span>(<span class="title function_">pre</span>(num));</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="10、实现一个科里化函数"><a href="#10、实现一个科里化函数" class="headerlink" title="10、实现一个科里化函数"></a>10、实现一个科里化函数</h3><blockquote>
<p>题目要求：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">a, b, c</span>) =&gt; a + b + c;</span><br><span class="line"><span class="keyword">const</span> a = <span class="title function_">currying</span>(add, <span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">a</span>(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 1 + 2 + 3=6</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>实现如下：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">currying</span>(<span class="params">fn, ...args1</span>) &#123;</span><br><span class="line">  <span class="comment">// 获取fn参数有几个</span></span><br><span class="line">  <span class="keyword">const</span> length = fn.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">let</span> allArgs = [...args1];</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">res</span> = (<span class="params">...arg2</span>) =&gt; &#123;</span><br><span class="line">    allArgs = [...allArgs, ...arg2];</span><br><span class="line">    <span class="comment">// 长度相等就返回执行结果</span></span><br><span class="line">    <span class="keyword">if</span> (allArgs.<span class="property">length</span> === length) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">fn</span>(...allArgs);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 不相等继续返回函数</span></span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试：</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">a, b, c</span>) =&gt; a + b + c;</span><br><span class="line"><span class="keyword">const</span> a = <span class="title function_">currying</span>(add, <span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">a</span>(<span class="number">2</span>, <span class="number">3</span>));</span><br></pre></td></tr></table></figure>

<h3 id="11、实现一个-LRU-缓存函数"><a href="#11、实现一个-LRU-缓存函数" class="headerlink" title="11、实现一个 LRU 缓存函数"></a>11、实现一个 LRU 缓存函数</h3><blockquote>
<p>题目说明：</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/img_convert/fdeeab178b5b6be82eaecfde762cf6c8.png" alt="LRU缓存函数"></p>
<blockquote>
<p>实现如下：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LRUCache</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">size</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span> = size;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cache</span> = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">get</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> hasKey = <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">has</span>(key);</span><br><span class="line">    <span class="keyword">if</span> (hasKey) &#123;</span><br><span class="line">      <span class="keyword">const</span> val = <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">get</span>(key);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">delete</span>(key);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">set</span>(key, val);</span><br><span class="line">      <span class="keyword">return</span> val;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">put</span>(<span class="params">key, val</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> hasKey = <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">has</span>(key);</span><br><span class="line">    <span class="keyword">if</span> (hasKey) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">delete</span>(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">set</span>(key, val);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">cache</span>.<span class="property">size</span> &gt; <span class="variable language_">this</span>.<span class="property">size</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">delete</span>(<span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">keys</span>().<span class="title function_">next</span>().<span class="property">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="12、简单实现-发布订阅模式"><a href="#12、简单实现-发布订阅模式" class="headerlink" title="12、简单实现 发布订阅模式"></a>12、简单实现 发布订阅模式</h3><blockquote>
<p>题目描述:实现一个发布订阅模式拥有 on emit once off 方法</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EventEmitter</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cache</span> = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">on</span>(<span class="params">name, fn</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> tasks = <span class="variable language_">this</span>.<span class="property">cache</span>[name];</span><br><span class="line">    <span class="keyword">if</span> (tasks) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cache</span>[name].<span class="title function_">push</span>(fn);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cache</span>[name] = [fn];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">off</span>(<span class="params">name, fn</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> tasks = <span class="variable language_">this</span>.<span class="property">cache</span>[name];</span><br><span class="line">    <span class="keyword">if</span> (task) &#123;</span><br><span class="line">      <span class="keyword">const</span> index = tasks.<span class="title function_">findIndex</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item === fn);</span><br><span class="line">      <span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">cache</span>[name].<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">emit</span>(<span class="params">name, once = <span class="literal">false</span>, ...args</span>) &#123;</span><br><span class="line">    <span class="comment">// 复制一份。防止回调里继续on，导致死循环</span></span><br><span class="line">    <span class="keyword">const</span> tasks = <span class="variable language_">this</span>.<span class="property">cache</span>[name].<span class="title function_">slice</span>();</span><br><span class="line">    <span class="keyword">if</span> (tasks) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> fn <span class="keyword">of</span> tasks) &#123;</span><br><span class="line">        <span class="title function_">fn</span>(...args);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (once) &#123;</span><br><span class="line">      <span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">cache</span>[name];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">once</span>(<span class="params">name, ...args</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">emit</span>(name, <span class="literal">true</span>, ...args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="13、实现-JSON-parse"><a href="#13、实现-JSON-parse" class="headerlink" title="13、实现 JSON.parse"></a>13、实现 JSON.parse</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">parse</span>(<span class="params">json</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">eval</span>(<span class="string">&quot;(&quot;</span> + json + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="14、将-DOM-转化成树结构对象"><a href="#14、将-DOM-转化成树结构对象" class="headerlink" title="14、将 DOM 转化成树结构对象"></a>14、将 DOM 转化成树结构对象</h3><blockquote>
<p>题目描述：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">将上方的<span class="variable constant_">DOM</span>转化为下面的树结构对象</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">tag</span>: <span class="string">&#x27;DIV&#x27;</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">        &#123; <span class="attr">tag</span>: <span class="string">&#x27;SPAN&#x27;</span>, <span class="attr">children</span>: [] &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">tag</span>: <span class="string">&#x27;UL&#x27;</span>,</span><br><span class="line">            <span class="attr">children</span>: [</span><br><span class="line">                &#123; <span class="attr">tag</span>: <span class="string">&#x27;LI&#x27;</span>, <span class="attr">children</span>: [] &#125;,</span><br><span class="line">                &#123; <span class="attr">tag</span>: <span class="string">&#x27;LI&#x27;</span>, <span class="attr">children</span>: [] &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>实现如下：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">dom2tree</span>(<span class="params">dom</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line">  obj.<span class="property">tag</span> = dom.<span class="property">tagName</span>;</span><br><span class="line">  obj.<span class="property">children</span> = [];</span><br><span class="line">  dom.<span class="property">childNodes</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">child</span>) =&gt;</span> obj.<span class="property">children</span>.<span class="title function_">push</span>(<span class="title function_">dom2tree</span>(child)));</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="15、将树结构转换为-DOM"><a href="#15、将树结构转换为-DOM" class="headerlink" title="15、将树结构转换为 DOM"></a>15、将树结构转换为 DOM</h3><blockquote>
<p>题目描述：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">tag</span>: <span class="string">&#x27;DIV&#x27;</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">        &#123; <span class="attr">tag</span>: <span class="string">&#x27;SPAN&#x27;</span>, <span class="attr">children</span>: [] &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">tag</span>: <span class="string">&#x27;UL&#x27;</span>,</span><br><span class="line">            <span class="attr">children</span>: [</span><br><span class="line">                &#123; <span class="attr">tag</span>: <span class="string">&#x27;LI&#x27;</span>, <span class="attr">children</span>: [] &#125;,</span><br><span class="line">                &#123; <span class="attr">tag</span>: <span class="string">&#x27;LI&#x27;</span>, <span class="attr">children</span>: [] &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">将上方的树结构对象转化为下面的<span class="variable constant_">DOM</span></span><br><span class="line"></span><br><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>实现如下：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 真正的渲染函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_render</span>(<span class="params">vnode</span>) &#123;</span><br><span class="line">  <span class="comment">// 如果是数字类型转化为字符串</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> vnode === <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">    vnode = <span class="title class_">String</span>(vnode);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 字符串类型直接就是文本节点</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> vnode === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(vnode);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 普通DOM</span></span><br><span class="line">  <span class="keyword">const</span> dom = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(vnode.<span class="property">tag</span>);</span><br><span class="line">  <span class="keyword">if</span> (vnode.<span class="property">attrs</span>) &#123;</span><br><span class="line">    <span class="comment">// 遍历属性</span></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(vnode.<span class="property">attrs</span>).<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> value = vnode.<span class="property">attrs</span>[key];</span><br><span class="line">      dom.<span class="title function_">setAttribute</span>(key, value);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 子数组进行递归操作</span></span><br><span class="line">  vnode.<span class="property">children</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">child</span>) =&gt;</span> dom.<span class="title function_">appendChild</span>(<span class="title function_">_render</span>(child)));</span><br><span class="line">  <span class="keyword">return</span> dom;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="16、判断一个对象有环引用"><a href="#16、判断一个对象有环引用" class="headerlink" title="16、判断一个对象有环引用"></a>16、判断一个对象有环引用</h3><blockquote>
<p>题目描述：验证一个对象有无环引用</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: &#123;</span><br><span class="line">    <span class="attr">c</span>: [<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="property">a</span>.<span class="property">c</span>.<span class="property">d</span> = obj;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">cycleDetector</span>(obj)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>实现思路：用一个数组存储每一个遍历过的对象，下次找到数组中存在，则说明环引用</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">cycleDetector</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> arr = [obj];</span><br><span class="line">  <span class="keyword">let</span> flag = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">cycle</span>(<span class="params">o</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(o);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> keys) &#123;</span><br><span class="line">      <span class="keyword">const</span> temp = o[key];</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> temp === <span class="string">&quot;object&quot;</span> &amp;&amp; temp !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr.<span class="title function_">indexOf</span>(temp) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">          flag = <span class="literal">true</span>;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        arr.<span class="title function_">push</span>(temp);</span><br><span class="line">        <span class="title function_">cycle</span>(temp);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">cycle</span>(obj);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="17、计算一个对象的层数"><a href="#17、计算一个对象的层数" class="headerlink" title="17、计算一个对象的层数"></a>17、计算一个对象的层数</h3><blockquote>
<p>题目描述：给你一个对象，统计一下它的层数</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: &#123; <span class="attr">b</span>: [<span class="number">1</span>] &#125;,</span><br><span class="line">  <span class="attr">c</span>: &#123; <span class="attr">d</span>: &#123; <span class="attr">e</span>: &#123; <span class="attr">f</span>: <span class="number">1</span> &#125; &#125; &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">loopGetLevel</span>(obj)); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>实现如下:</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">loopGetLevel</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> res = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">computedLevel</span>(<span class="params">obj, level</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> level = level ? level : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> obj[key] === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">          <span class="title function_">computedLevel</span>(obj[key], level + <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          res = level + <span class="number">1</span> &gt; res ? level + <span class="number">1</span> : res;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res = level &gt; res ? level : res;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">computedLevel</span>(obj);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="18、对象的扁平化"><a href="#18、对象的扁平化" class="headerlink" title="18、对象的扁平化"></a>18、对象的扁平化</h3><blockquote>
<p>题目描述：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: &#123;</span><br><span class="line">         <span class="attr">b</span>: <span class="number">1</span>,</span><br><span class="line">         <span class="attr">c</span>: <span class="number">2</span>,</span><br><span class="line">         <span class="attr">d</span>: &#123;<span class="attr">e</span>: <span class="number">5</span>&#125;</span><br><span class="line">     &#125;,</span><br><span class="line">  <span class="attr">b</span>: [<span class="number">1</span>, <span class="number">3</span>, &#123;<span class="attr">a</span>: <span class="number">2</span>, <span class="attr">b</span>: <span class="number">3</span>&#125;],</span><br><span class="line">  <span class="attr">c</span>: <span class="number">3</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="title function_">flatten</span>(obj) 结果返回如下</span><br><span class="line"> <span class="comment">// &#123;</span></span><br><span class="line"> <span class="comment">//  &#x27;a.b&#x27;: 1,</span></span><br><span class="line"> <span class="comment">//  &#x27;a.c&#x27;: 2,</span></span><br><span class="line"> <span class="comment">//  &#x27;a.d.e&#x27;: 5,</span></span><br><span class="line"> <span class="comment">//  &#x27;b[0]&#x27;: 1,</span></span><br><span class="line"> <span class="comment">//  &#x27;b[1]&#x27;: 3,</span></span><br><span class="line"> <span class="comment">//  &#x27;b[2].a&#x27;: 2,</span></span><br><span class="line"> <span class="comment">//  &#x27;b[2].b&#x27;: 3</span></span><br><span class="line"> <span class="comment">//   c: 3</span></span><br><span class="line"> <span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>实现如下：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">isObject</span> = (<span class="params">val</span>) =&gt; <span class="keyword">typeof</span> val === <span class="string">&quot;object&quot;</span> &amp;&amp; val !== <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatten</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">isObject</span>(obj)) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">const</span> res = &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">dfs</span> = (<span class="params">cur, prefix</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isObject</span>(cur)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(cur)) &#123;</span><br><span class="line">        cur.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">dfs</span>(item, <span class="string">`<span class="subst">$&#123;prefix&#125;</span>[<span class="subst">$&#123;index&#125;</span>]`</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> cur) &#123;</span><br><span class="line">          <span class="title function_">dfs</span>(cur[key], <span class="string">`<span class="subst">$&#123;prefix&#125;</span><span class="subst">$&#123;prefix ? <span class="string">&quot;.&quot;</span> : <span class="string">&quot;&quot;</span>&#125;</span><span class="subst">$&#123;key&#125;</span>`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res[prefix] = cur;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title function_">dfs</span>(obj, <span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">flatten</span>(obj));</span><br></pre></td></tr></table></figure>

<h3 id="19、实现-a-1-a-2-a-3-为-true"><a href="#19、实现-a-1-a-2-a-3-为-true" class="headerlink" title="19、实现(a &#x3D;&#x3D; 1 &amp;&amp; a &#x3D;&#x3D; 2 &amp;&amp; a &#x3D;&#x3D; 3)为 true"></a>19、实现(a &#x3D;&#x3D; 1 &amp;&amp; a &#x3D;&#x3D; 2 &amp;&amp; a &#x3D;&#x3D; 3)为 true</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种方法</span></span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  <span class="attr">i</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">toString</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a.<span class="property">i</span>++;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a == <span class="number">1</span> &amp;&amp; a == <span class="number">2</span> &amp;&amp; a == <span class="number">3</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种方法</span></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">a.<span class="property">join</span> = a.<span class="property">shift</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a == <span class="number">1</span> &amp;&amp; a == <span class="number">2</span> &amp;&amp; a == <span class="number">3</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三种方法</span></span><br><span class="line"><span class="keyword">var</span> val = <span class="number">0</span>;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">window</span>, <span class="string">&quot;a&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> ++val;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a == <span class="number">1</span> &amp;&amp; a == <span class="number">2</span> &amp;&amp; a == <span class="number">3</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="20、实现限制并发的-Promise-调度器"><a href="#20、实现限制并发的-Promise-调度器" class="headerlink" title="20、实现限制并发的 Promise 调度器"></a>20、实现限制并发的 Promise 调度器</h3><blockquote>
<p>题目描述：JS 实现一个带并发限制的异步调度器 Scheduler，保证同时运行的任务最多有两个</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">addTask</span>(<span class="number">1000</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line"><span class="title function_">addTask</span>(<span class="number">500</span>,<span class="string">&quot;2&quot;</span>);</span><br><span class="line"><span class="title function_">addTask</span>(<span class="number">300</span>,<span class="string">&quot;3&quot;</span>);</span><br><span class="line"><span class="title function_">addTask</span>(<span class="number">400</span>,<span class="string">&quot;4&quot;</span>);</span><br><span class="line">的输出顺序是：<span class="number">2</span> <span class="number">3</span> <span class="number">1</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line">整个的完整执行流程：</span><br><span class="line"></span><br><span class="line">一开始<span class="number">1</span>、<span class="number">2</span>两个任务开始执行</span><br><span class="line">500ms时，<span class="number">2</span>任务执行完毕，输出<span class="number">2</span>，任务<span class="number">3</span>开始执行</span><br><span class="line">800ms时，<span class="number">3</span>任务执行完毕，输出<span class="number">3</span>，任务<span class="number">4</span>开始执行</span><br><span class="line">1000ms时，<span class="number">1</span>任务执行完毕，输出<span class="number">1</span>，此时只剩下<span class="number">4</span>任务在执行</span><br><span class="line">1200ms时，<span class="number">4</span>任务执行完毕，输出<span class="number">4</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>实现如下：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Scheduler</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">limit</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">queue</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">limit</span> = limit;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span> = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">add</span>(<span class="params">time, order</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">promiseCreator</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(order);</span><br><span class="line">          <span class="title function_">resolve</span>();</span><br><span class="line">        &#125;, time);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">push</span>(promiseCreator);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">taskStart</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">limit</span>; i++) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">request</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">request</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">queue</span>.<span class="property">length</span> || <span class="variable language_">this</span>.<span class="property">count</span> &gt;= <span class="variable language_">this</span>.<span class="property">limit</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">queue</span></span><br><span class="line">      .<span class="title function_">shift</span>()()</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">count</span>--;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">request</span>();</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> scheduler = <span class="keyword">new</span> <span class="title class_">Scheduler</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">addTask</span> = (<span class="params">time, order</span>) =&gt; &#123;</span><br><span class="line">  scheduler.<span class="title function_">add</span>(time, order);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">addTask</span>(<span class="number">1000</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line"><span class="title function_">addTask</span>(<span class="number">500</span>, <span class="string">&quot;2&quot;</span>);</span><br><span class="line"><span class="title function_">addTask</span>(<span class="number">300</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line"><span class="title function_">addTask</span>(<span class="number">400</span>, <span class="string">&quot;4&quot;</span>);</span><br><span class="line">scheduler.<span class="title function_">taskStart</span>();</span><br></pre></td></tr></table></figure>

<h3 id="21、实现-lazyMan-函数"><a href="#21、实现-lazyMan-函数" class="headerlink" title="21、实现 lazyMan 函数"></a>21、实现 lazyMan 函数</h3><blockquote>
<p>题目描述：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">实现一个<span class="title class_">LazyMan</span>，可以按照以下方式调用:</span><br><span class="line"><span class="title class_">LazyMan</span>(“<span class="title class_">Hank</span>”)输出:</span><br><span class="line"><span class="title class_">Hi</span>! <span class="title class_">This</span> is <span class="title class_">Hank</span>!</span><br><span class="line"></span><br><span class="line"><span class="title class_">LazyMan</span>(“<span class="title class_">Hank</span>”).<span class="title function_">sleep</span>(<span class="number">10</span>).<span class="title function_">eat</span>(“dinner”)输出</span><br><span class="line"><span class="title class_">Hi</span>! <span class="title class_">This</span> is <span class="title class_">Hank</span>!</span><br><span class="line"><span class="comment">//等待10秒..</span></span><br><span class="line"><span class="title class_">Wake</span> up after <span class="number">10</span></span><br><span class="line"><span class="title class_">Eat</span> dinner~</span><br><span class="line"></span><br><span class="line"><span class="title class_">LazyMan</span>(“<span class="title class_">Hank</span>”).<span class="title function_">eat</span>(“dinner”).<span class="title function_">eat</span>(“supper”)输出</span><br><span class="line"><span class="title class_">Hi</span> <span class="title class_">This</span> is <span class="title class_">Hank</span>!</span><br><span class="line"><span class="title class_">Eat</span> dinner~</span><br><span class="line"><span class="title class_">Eat</span> supper~</span><br><span class="line"></span><br><span class="line"><span class="title class_">LazyMan</span>(“<span class="title class_">Hank</span>”).<span class="title function_">eat</span>(“supper”).<span class="title function_">sleepFirst</span>(<span class="number">5</span>)输出</span><br><span class="line"><span class="comment">//等待5秒</span></span><br><span class="line"><span class="title class_">Wake</span> up after <span class="number">5</span></span><br><span class="line"><span class="title class_">Hi</span> <span class="title class_">This</span> is <span class="title class_">Hank</span>!</span><br><span class="line"><span class="title class_">Eat</span> supper</span><br></pre></td></tr></table></figure>

<blockquote>
<p>实现如下：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">_LazyMan</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">tasks</span> = [];</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">task</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hi! This is <span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">next</span>();</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">tasks</span>.<span class="title function_">push</span>(task);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">next</span>();</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">next</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> task = <span class="variable language_">this</span>.<span class="property">tasks</span>.<span class="title function_">shift</span>();</span><br><span class="line">    task &amp;&amp; <span class="title function_">task</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sleep</span>(<span class="params">time</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">sleepWrapper</span>(time, <span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sleepFirst</span>(<span class="params">time</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">sleepWrapper</span>(time, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sleepWrapper</span>(<span class="params">time, first</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">task</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Wake up after <span class="subst">$&#123;time&#125;</span>`</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">next</span>();</span><br><span class="line">      &#125;, time * <span class="number">1000</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (first) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">tasks</span>.<span class="title function_">unshift</span>(task);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">tasks</span>.<span class="title function_">push</span>(task);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">eat</span>(<span class="params">food</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">task</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Eat <span class="subst">$&#123;food&#125;</span>`</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">next</span>();</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">tasks</span>.<span class="title function_">push</span>(task);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">lazyMan</span> = (<span class="params">name</span>) =&gt; <span class="keyword">new</span> <span class="title function_">_LazyMan</span>(name);</span><br><span class="line"></span><br><span class="line"><span class="title function_">lazyMan</span>(<span class="string">&quot;Hank&quot;</span>).<span class="title function_">sleep</span>(<span class="number">1</span>).<span class="title function_">eat</span>(<span class="string">&quot;dinner&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">lazyMan</span>(<span class="string">&quot;Hank&quot;</span>).<span class="title function_">eat</span>(<span class="string">&quot;dinner&quot;</span>).<span class="title function_">eat</span>(<span class="string">&quot;supper&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">lazyMan</span>(<span class="string">&quot;Hank&quot;</span>).<span class="title function_">eat</span>(<span class="string">&quot;supper&quot;</span>).<span class="title function_">sleepFirst</span>(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>

<h3 id="22、实现-add-函数"><a href="#22、实现-add-函数" class="headerlink" title="22、实现 add 函数"></a>22、实现 add 函数</h3><blockquote>
<p>题目描述：实现一个 add 方法 使计算结果能够满足如下预期：</p>
<ul>
<li>add(1)(2)(3)()&#x3D;6</li>
<li>add(1,2,3)(4)()&#x3D;10</li>
</ul>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">...args1</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> allArgs = [...args1];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">...args2</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!args2.<span class="property">length</span>) <span class="keyword">return</span> fn.<span class="title function_">toString</span>();</span><br><span class="line">    allArgs = [...allArgs, ...args2];</span><br><span class="line">    <span class="keyword">return</span> fn;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fn.<span class="property">toString</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> allArgs.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, next</span>) =&gt;</span> pre + next);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> fn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>)(<span class="number">3</span>)());</span><br></pre></td></tr></table></figure>

<h3 id="23、实现一个合格的深拷贝"><a href="#23、实现一个合格的深拷贝" class="headerlink" title="23、实现一个合格的深拷贝"></a>23、实现一个合格的深拷贝</h3><p>推荐看这篇：<a href="https://juejin.cn/post/7017991655009566728">深拷贝有这 5 个段位，你只是青铜段位？还想涨薪？</a></p>
<h3 id="24、实现-Promise"><a href="#24、实现-Promise" class="headerlink" title="24、实现 Promise"></a>24、实现 Promise</h3><p>推荐看这篇：<a href="https://juejin.cn/post/6994594642280857630">看了就会，手写 Promise 原理，最通俗易懂的版本！！！</a></p>
<h3 id="25、实现-async-await"><a href="#25、实现-async-await" class="headerlink" title="25、实现 async&#x2F;await"></a>25、实现 async&#x2F;await</h3><p>推荐看这篇：<a href="https://juejin.cn/post/7007031572238958629">7 张图，20 分钟就能搞定的 async&#x2F;await 原理！为什么要拖那么久？</a></p>
<h2 id="Array-篇"><a href="#Array-篇" class="headerlink" title="Array 篇"></a>Array 篇</h2><h3 id="26、forEach"><a href="#26、forEach" class="headerlink" title="26、forEach"></a>26、forEach</h3><p>参数代表含义</p>
<ul>
<li>item：遍历项</li>
<li>index：遍历项的索引</li>
<li>arr：数组本身</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sx_forEach</span> = <span class="keyword">function</span> (<span class="params">callback</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="title function_">callback</span>(<span class="variable language_">this</span>[i], i, <span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">players.<span class="title function_">sx_forEach</span>(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item, index);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// &#123; name: &#x27;科比&#x27;, num: 24 &#125; 0</span></span><br><span class="line"><span class="comment">// &#123; name: &#x27;詹姆斯&#x27;, num: 23 &#125; 1</span></span><br><span class="line"><span class="comment">// &#123; name: &#x27;保罗&#x27;, num: 3 &#125; 2</span></span><br><span class="line"><span class="comment">// &#123; name: &#x27;威少&#x27;, num: 0 &#125; 3</span></span><br><span class="line"><span class="comment">// &#123; name: &#x27;杜兰特&#x27;, num: 35 &#125; 4</span></span><br></pre></td></tr></table></figure>

<h3 id="27、map"><a href="#27、map" class="headerlink" title="27、map"></a>27、map</h3><p>参数代表含义</p>
<ul>
<li>item：遍历项</li>
<li>index：遍历项的索引</li>
<li>arr：数组本身</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sx_map</span> = <span class="keyword">function</span> (<span class="params">callback</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    res.<span class="title function_">push</span>(<span class="title function_">callback</span>(<span class="variable language_">this</span>[i], i, <span class="variable language_">this</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">  players.<span class="title function_">sx_map</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> <span class="string">`<span class="subst">$&#123;item.name&#125;</span>--<span class="subst">$&#123;item.num&#125;</span>--<span class="subst">$&#123;index&#125;</span>`</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">// [ &#x27;科比--24--0&#x27;, &#x27;詹姆斯--23--1&#x27;, &#x27;保罗--3--2&#x27;, &#x27;威少--0--3&#x27;, &#x27;杜兰特--35--4&#x27; ]</span></span><br></pre></td></tr></table></figure>

<h3 id="28、filter"><a href="#28、filter" class="headerlink" title="28、filter"></a>28、filter</h3><p>参数代表含义</p>
<ul>
<li>item：遍历项</li>
<li>index：遍历项的索引</li>
<li>arr：数组本身</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sx_filter</span> = <span class="keyword">function</span> (<span class="params">callback</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="title function_">callback</span>(<span class="variable language_">this</span>[i], i, <span class="variable language_">this</span>) &amp;&amp; res.<span class="title function_">push</span>(<span class="variable language_">this</span>[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(players.<span class="title function_">sx_filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">num</span> &gt;= <span class="number">23</span>));</span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//     &#123; name: &#x27;科比&#x27;, num: 24 &#125;,</span></span><br><span class="line"><span class="comment">//     &#123; name: &#x27;詹姆斯&#x27;, num: 23 &#125;,</span></span><br><span class="line"><span class="comment">//     &#123; name: &#x27;杜兰特&#x27;, num: 35 &#125;</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></table></figure>

<h3 id="29、every"><a href="#29、every" class="headerlink" title="29、every"></a>29、every</h3><p>参数代表含义</p>
<ul>
<li>item：遍历项</li>
<li>index：遍历项的索引</li>
<li>arr：数组本身</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sx_every</span> = <span class="keyword">function</span> (<span class="params">callback</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> flag = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    flag = <span class="title function_">callback</span>(<span class="variable language_">this</span>[i], i, <span class="variable language_">this</span>);</span><br><span class="line">    <span class="keyword">if</span> (!flag) <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> flag;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(players.<span class="title function_">sx_every</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">num</span> &gt;= <span class="number">23</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(players.<span class="title function_">sx_every</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">num</span> &gt;= <span class="number">0</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="30、some"><a href="#30、some" class="headerlink" title="30、some"></a>30、some</h3><p>参数代表含义</p>
<ul>
<li>item：遍历项</li>
<li>index：遍历项的索引</li>
<li>arr：数组本身</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sx_some</span> = <span class="keyword">function</span> (<span class="params">callback</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> flag = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    flag = <span class="title function_">callback</span>(<span class="variable language_">this</span>[i], i, <span class="variable language_">this</span>);</span><br><span class="line">    <span class="keyword">if</span> (flag) <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> flag;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(players.<span class="title function_">sx_some</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">num</span> &gt;= <span class="number">23</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(players.<span class="title function_">sx_some</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">num</span> &gt;= <span class="number">50</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h3 id="31、reduce"><a href="#31、reduce" class="headerlink" title="31、reduce"></a>31、reduce</h3><p>参数代表含义</p>
<ul>
<li>pre：前一项</li>
<li>next：下一项</li>
<li>index：当前索引</li>
<li>arr：数组本身</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sx_reduce</span> = <span class="keyword">function</span> (<span class="params">callback, initValue</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> start = <span class="number">0</span>,</span><br><span class="line">    pre;</span><br><span class="line">  <span class="keyword">if</span> (initValue) &#123;</span><br><span class="line">    pre = initValue;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    pre = <span class="variable language_">this</span>[<span class="number">0</span>];</span><br><span class="line">    start = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt; <span class="variable language_">this</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    pre = <span class="title function_">callback</span>(pre, <span class="variable language_">this</span>[i], i, <span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> pre;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算所有num相加</span></span><br><span class="line"><span class="keyword">const</span> sum = players.<span class="title function_">sx_reduce</span>(<span class="function">(<span class="params">pre, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> pre + next.<span class="property">num</span>;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum); <span class="comment">// 85</span></span><br></pre></td></tr></table></figure>

<h3 id="32、findIndex"><a href="#32、findIndex" class="headerlink" title="32、findIndex"></a>32、findIndex</h3><p>参数代表含义</p>
<ul>
<li>item：遍历项</li>
<li>index：遍历项的索引</li>
<li>arr：数组本身</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sx_findIndex</span> = <span class="keyword">function</span> (<span class="params">callback</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">callback</span>(<span class="variable language_">this</span>[i], i, <span class="variable language_">this</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(players.<span class="title function_">sx_findIndex</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">name</span> === <span class="string">&quot;科比&quot;</span>)); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(players.<span class="title function_">sx_findIndex</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">name</span> === <span class="string">&quot;安东尼&quot;</span>)); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure>

<h3 id="33、find"><a href="#33、find" class="headerlink" title="33、find"></a>33、find</h3><p>参数代表含义</p>
<ul>
<li>item：遍历项</li>
<li>index：遍历项的索引</li>
<li>arr：数组本身</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sx_find</span> = <span class="keyword">function</span> (<span class="params">callback</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">callback</span>(<span class="variable language_">this</span>[i], i, <span class="variable language_">this</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(players.<span class="title function_">sx_find</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">name</span> === <span class="string">&quot;科比&quot;</span>)); <span class="comment">// &#123; name: &#x27;科比&#x27;, num: 24 &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(players.<span class="title function_">sx_find</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">name</span> === <span class="string">&quot;安东尼&quot;</span>)); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<h3 id="34、fill"><a href="#34、fill" class="headerlink" title="34、fill"></a>34、fill</h3><p>用处：填充数组</p>
<p>参数代表含义</p>
<ul>
<li>initValue：填充的值</li>
<li>start：开始填充索引，默认 0</li>
<li>end：结束填充索引，默认 length</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sx_fill</span> = <span class="keyword">function</span> (<span class="params">value, start = <span class="number">0</span>, end</span>) &#123;</span><br><span class="line">  end = end || <span class="variable language_">this</span>.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt; end; i++) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[i] = value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(players.<span class="title function_">sx_fill</span>(<span class="string">&quot;林三心&quot;</span>, <span class="number">1</span>, <span class="number">3</span>));</span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//     &#123; name: &#x27;科比&#x27;, num: 24 &#125;,</span></span><br><span class="line"><span class="comment">//     &#x27;林三心&#x27;,</span></span><br><span class="line"><span class="comment">//     &#x27;林三心&#x27;,</span></span><br><span class="line"><span class="comment">//     &#x27;林三心&#x27;,</span></span><br><span class="line"><span class="comment">//     &#123; name: &#x27;杜兰特&#x27;, num: 35 &#125;</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></table></figure>

<h3 id="35、includes"><a href="#35、includes" class="headerlink" title="35、includes"></a>35、includes</h3><blockquote>
<p>用处：查找元素，查到返回 true，反之返回 false，可查找 NaN</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sx_includes</span> = <span class="keyword">function</span> (<span class="params">value, start = <span class="number">0</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (start &lt; <span class="number">0</span>) start = <span class="variable language_">this</span>.<span class="property">length</span> + start;</span><br><span class="line">  <span class="keyword">const</span> <span class="built_in">isNaN</span> = <span class="title class_">Number</span>.<span class="built_in">isNaN</span>(value);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt; <span class="variable language_">this</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>[i] === value || <span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="variable language_">this</span>[i]) === <span class="built_in">isNaN</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">sx_includes</span>(<span class="number">2</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="title class_">NaN</span>].<span class="title function_">sx_includes</span>(<span class="title class_">NaN</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">sx_includes</span>(<span class="number">1</span>, <span class="number">1</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h3 id="36、join"><a href="#36、join" class="headerlink" title="36、join"></a>36、join</h3><blockquote>
<p>用处：将数组用分隔符拼成字符串，分隔符默认为 ‘,’</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sx_join</span> = <span class="keyword">function</span> (<span class="params">s = <span class="string">&quot;,&quot;</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    str = i === <span class="number">0</span> ? <span class="string">`<span class="subst">$&#123;str&#125;</span><span class="subst">$&#123;<span class="variable language_">this</span>[i]&#125;</span>`</span> : <span class="string">`<span class="subst">$&#123;str&#125;</span><span class="subst">$&#123;s&#125;</span><span class="subst">$&#123;<span class="variable language_">this</span>[i]&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">sx_join</span>()); <span class="comment">// 1,2,3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">sx_join</span>(<span class="string">&quot;*&quot;</span>)); <span class="comment">// 1*2*3</span></span><br></pre></td></tr></table></figure>

<h3 id="37、flat"><a href="#37、flat" class="headerlink" title="37、flat"></a>37、flat</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sx_flat</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> arr = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">while</span> (arr.<span class="title function_">some</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> <span class="title class_">Array</span>.<span class="title function_">isArray</span>(item))) &#123;</span><br><span class="line">    arr = [].<span class="title function_">concat</span>(...arr);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> testArr = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]], [<span class="number">8</span>, <span class="number">9</span>]];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(testArr.<span class="title function_">sx_flat</span>());</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5, 8, 9]</span></span><br></pre></td></tr></table></figure>

<h3 id="38、splice"><a href="#38、splice" class="headerlink" title="38、splice"></a>38、splice</h3><p>难点</p>
<ul>
<li>截取长度和替换长度的比较，不同情况</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sx_splice</span> = <span class="keyword">function</span> (<span class="params">start, length, ...values</span>) &#123;</span><br><span class="line">  length = start + length &gt; <span class="variable language_">this</span>.<span class="property">length</span> - <span class="number">1</span> ? <span class="variable language_">this</span>.<span class="property">length</span> - start : length;</span><br><span class="line">  <span class="keyword">const</span> res = [],</span><br><span class="line">    tempArr = [...<span class="variable language_">this</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt; start + values.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[i] = values[i - start];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (values.<span class="property">length</span> &lt; length) &#123;</span><br><span class="line">    <span class="keyword">const</span> cha = length - values.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = start + values.<span class="property">length</span>; i &lt; tempArr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="variable language_">this</span>[i] = tempArr[i + cha];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">length</span> = <span class="variable language_">this</span>.<span class="property">length</span> - cha;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (values.<span class="property">length</span> &gt; length) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = start + length; i &lt; tempArr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">push</span>(tempArr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt; start + length; i++) &#123;</span><br><span class="line">    res.<span class="title function_">push</span>(tempArr[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Object-篇"><a href="#Object-篇" class="headerlink" title="Object 篇"></a>Object 篇</h2><p>定义一个测试对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;林三心&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">22</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="39、entries"><a href="#39、entries" class="headerlink" title="39、entries"></a>39、entries</h3><blockquote>
<p>用处：将对象转成键值对数组</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sx_entries</span> = <span class="keyword">function</span> (<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    obj.<span class="title function_">hasOwnProperty</span>(key) &amp;&amp; res.<span class="title function_">push</span>([key, obj[key]]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">sx_entries</span>(obj));</span><br><span class="line"><span class="comment">// [ [ &#x27;name&#x27;, &#x27;林三心&#x27; ], [ &#x27;age&#x27;, 22 ], [ &#x27;gender&#x27;, &#x27;男&#x27; ] ]</span></span><br></pre></td></tr></table></figure>

<h3 id="40、fromEntries"><a href="#40、fromEntries" class="headerlink" title="40、fromEntries"></a>40、fromEntries</h3><blockquote>
<p>用处：跟 entries 相反，将键值对数组转成对象</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sx_fromEntries</span> = <span class="keyword">function</span> (<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> [key, value] = arr[i];</span><br><span class="line">    obj[key] = value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">sx_fromEntries</span>([</span><br><span class="line">    [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;林三心&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;age&quot;</span>, <span class="number">22</span>],</span><br><span class="line">    [<span class="string">&quot;gender&quot;</span>, <span class="string">&quot;男&quot;</span>],</span><br><span class="line">  ])</span><br><span class="line">);</span><br><span class="line"><span class="comment">// &#123; name: &#x27;林三心&#x27;, age: 22, gender: &#x27;男&#x27; &#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="41、keys"><a href="#41、keys" class="headerlink" title="41、keys"></a>41、keys</h3><blockquote>
<p>用处：将对象的 key 转成一个数组合集</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sx_keys</span> = <span class="keyword">function</span> (<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> keys = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    obj.<span class="title function_">hasOwnProperty</span>(key) &amp;&amp; res.<span class="title function_">push</span>(key);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> keys;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(obj));</span><br><span class="line"><span class="comment">// [ &#x27;name&#x27;, &#x27;age&#x27;, &#x27;gender&#x27; ]</span></span><br></pre></td></tr></table></figure>

<h3 id="42、values"><a href="#42、values" class="headerlink" title="42、values"></a>42、values</h3><blockquote>
<p>用处：将对象的所有值转成数组合集</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sx_values</span> = <span class="keyword">function</span> (<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> values = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    obj.<span class="title function_">hasOwnProperty</span>(key) &amp;&amp; values.<span class="title function_">push</span>(obj[key]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> values;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">sx_values</span>(obj));</span><br><span class="line"><span class="comment">// [ &#x27;林三心&#x27;, 22, &#x27;男&#x27; ]</span></span><br></pre></td></tr></table></figure>

<h3 id="43、instanceOf"><a href="#43、instanceOf" class="headerlink" title="43、instanceOf"></a>43、instanceOf</h3><blockquote>
<p>用处：A instanceOf B，判断 A 是否经过 B 的原型链</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">instanceOf</span>(<span class="params">father, child</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> fp = father.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">  <span class="keyword">var</span> cp = child.<span class="property">__proto__</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (cp) &#123;</span><br><span class="line">    <span class="keyword">if</span> (cp === fp) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cp = cp.<span class="property">__proto__</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> sx = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;林三心&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">instanceOf</span>(<span class="title class_">Person</span>, sx)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">instanceOf</span>(<span class="title class_">Person</span>, sx2)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h3 id="44、is"><a href="#44、is" class="headerlink" title="44、is"></a>44、is</h3><blockquote>
<p>用处：Object.is(a, b)，判断 a 是否等于 b</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sx_is</span> = <span class="keyword">function</span> (<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (x === y) &#123;</span><br><span class="line">    <span class="comment">// 防止 -0 和 +0</span></span><br><span class="line">    <span class="keyword">return</span> x !== <span class="number">0</span> || <span class="number">1</span> / x === <span class="number">1</span> / y;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 防止NaN</span></span><br><span class="line">  <span class="keyword">return</span> x !== x &amp;&amp; y !== y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = &#123; <span class="attr">name</span>: <span class="string">&quot;林三心&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> b = a;</span><br><span class="line"><span class="keyword">const</span> c = &#123; <span class="attr">name</span>: <span class="string">&quot;林三心&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">sx_is</span>(a, b)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">sx_is</span>(a, c)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h3 id="45、Object-assign"><a href="#45、Object-assign" class="headerlink" title="45、Object.assign"></a>45、Object.assign</h3><p>难点</p>
<ul>
<li>assign 接收多个对象，并将多个对象合成一个对象</li>
<li>这些对象如果有重名属性，以后来的对象属性值为准</li>
<li>assign 返回一个对象，这个对象 &#x3D;&#x3D;&#x3D; 第一个对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sx_assign</span> = <span class="keyword">function</span> (<span class="params">target, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (target === <span class="literal">null</span> || target === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;Cannot convert undefined or null to object&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  target = <span class="title class_">Object</span>(target);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> nextObj <span class="keyword">of</span> args) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> nextObj) &#123;</span><br><span class="line">      nextObj.<span class="title function_">hasOwnProperty</span>(key) &amp;&amp; (target[key] = nextObj[key]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> target;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> testa = &#123; <span class="attr">name</span>: <span class="string">&quot;林三心&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> testb = &#123; <span class="attr">name</span>: <span class="string">&quot;sunshine_lin&quot;</span>, <span class="attr">age</span>: <span class="number">22</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> testc = &#123; <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">gender</span>: <span class="string">&quot;男&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> testd = <span class="title class_">Object</span>.<span class="title function_">sx_assign</span>(testa, testb, testc);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(testd); <span class="comment">// &#123; name: &#x27;sunshine_lin&#x27;, age: 18, gender: &#x27;男&#x27; &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(testa === testd); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="Function-篇"><a href="#Function-篇" class="headerlink" title="Function 篇"></a>Function 篇</h2><h3 id="46、call"><a href="#46、call" class="headerlink" title="46、call"></a>46、call</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sx_call</span> = <span class="keyword">function</span> (<span class="params">obj, ...args</span>) &#123;</span><br><span class="line">  obj = obj || <span class="variable language_">window</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Symbol是唯一的，防止重名key</span></span><br><span class="line">  <span class="keyword">const</span> fn = <span class="title class_">Symbol</span>();</span><br><span class="line">  obj[fn] = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 执行，返回执行值</span></span><br><span class="line">  <span class="keyword">return</span> obj[fn](...args);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> testobj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;林三心&quot;</span>,</span><br><span class="line">  <span class="title function_">testFn</span>(<span class="params">age</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span><span class="subst">$&#123;age&#125;</span>岁了`</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> testobj2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;sunshine_lin&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">testobj.<span class="property">testFn</span>.<span class="title function_">sx_call</span>(testobj2, <span class="number">22</span>); <span class="comment">// sunshine_lin22岁了</span></span><br></pre></td></tr></table></figure>

<h3 id="47、apply"><a href="#47、apply" class="headerlink" title="47、apply"></a>47、apply</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sx_apply</span> = <span class="keyword">function</span> (<span class="params">obj, args</span>) &#123;</span><br><span class="line">  obj = obj || <span class="variable language_">window</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Symbol是唯一的，防止重名key</span></span><br><span class="line">  <span class="keyword">const</span> fn = <span class="title class_">Symbol</span>();</span><br><span class="line">  obj[fn] = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 执行，返回执行值</span></span><br><span class="line">  <span class="keyword">return</span> obj[fn](...args);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> testobj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;林三心&quot;</span>,</span><br><span class="line">  <span class="title function_">testFn</span>(<span class="params">age</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span><span class="subst">$&#123;age&#125;</span>岁了`</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> testobj2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;sunshine_lin&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">testobj.<span class="property">testFn</span>.<span class="title function_">sx_apply</span>(testobj2, [<span class="number">22</span>]); <span class="comment">// sunshine_lin22岁了</span></span><br></pre></td></tr></table></figure>

<h3 id="48、Function-prototype-bind"><a href="#48、Function-prototype-bind" class="headerlink" title="48、Function.prototype.bind"></a>48、Function.prototype.bind</h3><p>难点：</p>
<ul>
<li>bind 是返回一个函数，而不是执行结果</li>
<li>bind 返回的函数，拿来当做构造函数，该怎么处理</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sx_bind</span> = <span class="keyword">function</span> (<span class="params">obj, ...args</span>) &#123;</span><br><span class="line">  obj = obj || <span class="variable language_">window</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Symbol是唯一的，防止重名key</span></span><br><span class="line">  <span class="keyword">const</span> fn = <span class="title class_">Symbol</span>();</span><br><span class="line">  obj[fn] = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">const</span> _this = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">function</span> (<span class="params">...innerArgs</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>, _this);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span> <span class="keyword">instanceof</span> _this) &#123;</span><br><span class="line">      <span class="variable language_">this</span>[fn] = _this;</span><br><span class="line">      <span class="variable language_">this</span>[fn](...[...args, ...innerArgs]);</span><br><span class="line">      <span class="keyword">delete</span> <span class="variable language_">this</span>[fn];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      obj[fn](...[...args, ...innerArgs]);</span><br><span class="line">      <span class="keyword">delete</span> obj[fn];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  res.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="variable language_">this</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="String-篇"><a href="#String-篇" class="headerlink" title="String 篇"></a>String 篇</h2><h3 id="49、slice"><a href="#49、slice" class="headerlink" title="49、slice"></a>49、slice</h3><p>参数代表含义</p>
<ul>
<li>start：开始截取的字符索引(包含此字符)</li>
<li>end：结束截取的字符索引(不包含此字符)</li>
</ul>
<p>注意点</p>
<ul>
<li>start &gt; end：返回空字符串</li>
<li>start &lt; 0：start &#x3D; 数组长度 + start</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sx_slice</span> = <span class="keyword">function</span> (<span class="params">start = <span class="number">0</span>, end</span>) &#123;</span><br><span class="line">  start = start &lt; <span class="number">0</span> ? <span class="variable language_">this</span>.<span class="property">length</span> + start : start;</span><br><span class="line">  end = !end &amp;&amp; end !== <span class="number">0</span> ? <span class="variable language_">this</span>.<span class="property">length</span> : end;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (start &gt;= end) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt; end; i++) &#123;</span><br><span class="line">    str += <span class="variable language_">this</span>[i];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">sx_slice</span>(<span class="number">2</span>)); <span class="comment">// nshine_lin</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">sx_slice</span>(-<span class="number">2</span>)); <span class="comment">// in</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">sx_slice</span>(-<span class="number">9</span>, <span class="number">10</span>)); <span class="comment">// shine_l</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">sx_slice</span>(<span class="number">5</span>, <span class="number">1</span>)); <span class="comment">// &#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="50、substr"><a href="#50、substr" class="headerlink" title="50、substr"></a>50、substr</h3><p>参数代表含义</p>
<ul>
<li>start：开始截取的字符索引(包含此字符)</li>
<li>length：截取的长度</li>
</ul>
<p>注意点</p>
<ul>
<li>start &lt; 0：start &#x3D; 数组长度 + start</li>
<li>length 超出所能截取范围，需要做处理</li>
<li>length &lt; 0：返回空字符串</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sx_substr</span> = <span class="keyword">function</span> (<span class="params">start = <span class="number">0</span>, length</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (length &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  start = start &lt; <span class="number">0</span> ? <span class="variable language_">this</span>.<span class="property">length</span> + start : start;</span><br><span class="line">  length =</span><br><span class="line">    (!length &amp;&amp; length !== <span class="number">0</span>) || length &gt; <span class="variable language_">this</span>.<span class="property">length</span> - start</span><br><span class="line">      ? <span class="variable language_">this</span>.<span class="property">length</span></span><br><span class="line">      : start + length;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt; length; i++) &#123;</span><br><span class="line">    str += <span class="variable language_">this</span>[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">sx_substr</span>(<span class="number">3</span>)); <span class="comment">// shine_lin</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">sx_substr</span>(<span class="number">3</span>, <span class="number">3</span>)); <span class="comment">// shi</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">sx_substr</span>(<span class="number">5</span>, <span class="number">300</span>)); <span class="comment">// ine_lin</span></span><br></pre></td></tr></table></figure>

<h3 id="51、substring"><a href="#51、substring" class="headerlink" title="51、substring"></a>51、substring</h3><p>功能与 slice 大致相同</p>
<p>区别之处</p>
<ul>
<li>start &gt; end：互换值</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sx_sunstring</span> = <span class="keyword">function</span> (<span class="params">start = <span class="number">0</span>, end</span>) &#123;</span><br><span class="line">  start = start &lt; <span class="number">0</span> ? <span class="variable language_">this</span>.<span class="property">length</span> + start : start;</span><br><span class="line">  end = !end &amp;&amp; end !== <span class="number">0</span> ? <span class="variable language_">this</span>.<span class="property">length</span> : end;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (start &gt;= end) [start, end] = [end, start];</span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt; end; i++) &#123;</span><br><span class="line">    str += <span class="variable language_">this</span>[i];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">sx_sunstring</span>(<span class="number">2</span>)); <span class="comment">// nshine_lin</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">sx_sunstring</span>(-<span class="number">2</span>)); <span class="comment">// in</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">sx_sunstring</span>(-<span class="number">9</span>, <span class="number">10</span>)); <span class="comment">// shine_l</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">sx_sunstring</span>(<span class="number">5</span>, <span class="number">1</span>)); <span class="comment">// unsh</span></span><br></pre></td></tr></table></figure>

<h2 id="Promise-篇"><a href="#Promise-篇" class="headerlink" title="Promise 篇"></a>Promise 篇</h2><h3 id="52、all"><a href="#52、all" class="headerlink" title="52、all"></a>52、all</h3><ul>
<li>接收一个 Promise 数组，数组中如有非 Promise 项，则此项当做成功</li>
<li>如果所有 Promise 都成功，则返回成功结果数组</li>
<li>如果有一个 Promise 失败，则返回这个失败结果</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">all</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">addData</span> = (<span class="params">index, value</span>) =&gt; &#123;</span><br><span class="line">      result[index] = value;</span><br><span class="line">      count++;</span><br><span class="line">      <span class="keyword">if</span> (count === promises.<span class="property">length</span>) <span class="title function_">resolve</span>(result);</span><br><span class="line">    &#125;;</span><br><span class="line">    promises.<span class="title function_">forEach</span>(<span class="function">(<span class="params">promise, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (promise <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>) &#123;</span><br><span class="line">        promise.<span class="title function_">then</span>(</span><br><span class="line">          <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">addData</span>(index, res);</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function">(<span class="params">err</span>) =&gt;</span> <span class="title function_">reject</span>(err)</span><br><span class="line">        );</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">addData</span>(index, promise);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="53、race"><a href="#53、race" class="headerlink" title="53、race"></a>53、race</h3><ul>
<li>接收一个 Promise 数组，数组中如有非 Promise 项，则此项当做成功</li>
<li>哪个 Promise 最快得到结果，就返回那个结果，无论成功失败</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">race</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    promises.<span class="title function_">forEach</span>(<span class="function">(<span class="params">promise</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (promise <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>) &#123;</span><br><span class="line">        promise.<span class="title function_">then</span>(</span><br><span class="line">          <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(res);</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(err);</span><br><span class="line">          &#125;</span><br><span class="line">        );</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(promise);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="54、allSettled"><a href="#54、allSettled" class="headerlink" title="54、allSettled"></a>54、allSettled</h3><ul>
<li>接收一个 Promise 数组，数组中如有非 Promise 项，则此项当做成功</li>
<li>把每一个 Promise 的结果，集合成数组，返回</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">allSettled</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> res = [];</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">addData</span> = (<span class="params">status, value, i</span>) =&gt; &#123;</span><br><span class="line">      res[i] = &#123;</span><br><span class="line">        status,</span><br><span class="line">        value,</span><br><span class="line">      &#125;;</span><br><span class="line">      count++;</span><br><span class="line">      <span class="keyword">if</span> (count === promises.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(res);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    promises.<span class="title function_">forEach</span>(<span class="function">(<span class="params">promise, i</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (promise <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>) &#123;</span><br><span class="line">        promise.<span class="title function_">then</span>(</span><br><span class="line">          <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">addData</span>(<span class="string">&quot;fulfilled&quot;</span>, res, i);</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">addData</span>(<span class="string">&quot;rejected&quot;</span>, err, i);</span><br><span class="line">          &#125;</span><br><span class="line">        );</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">addData</span>(<span class="string">&quot;fulfilled&quot;</span>, promise, i);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="55、any"><a href="#55、any" class="headerlink" title="55、any"></a>55、any</h3><p>any 与 all 相反</p>
<ul>
<li>接收一个 Promise 数组，数组中如有非 Promise 项，则此项当做成功</li>
<li>如果有一个 Promise 成功，则返回这个成功结果</li>
<li>如果所有 Promise 都失败，则报错</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">function</span> <span class="title function_">any</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">            promises.<span class="title function_">forEach</span>(<span class="function">(<span class="params">promise</span>) =&gt;</span> &#123;</span><br><span class="line">                promise.<span class="title function_">then</span>(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="title function_">resolve</span>(val)</span><br><span class="line">                &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                    count++</span><br><span class="line">                    <span class="keyword">if</span> (count === promises.<span class="property">length</span>) &#123;</span><br><span class="line">                        <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">AggregateError</span>(<span class="string">&#x27;All promises were rejected&#x27;</span>))</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="56、finally"><a href="#56、finally" class="headerlink" title="56、finally"></a>56、finally</h3><ul>
<li>接收一个回调函数，但无参数接收</li>
<li>无论成功失败状态，都会执行 finally</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">finally</span> = <span class="keyword">function</span> (<span class="params">callback</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(</span><br><span class="line">    <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">callback</span>();</span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">callback</span>();</span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>转载文档：<a href="https://blog.csdn.net/weixin_43857188/article/details/121127879">https://blog.csdn.net/weixin_43857188/article/details/121127879</a></p>
]]></content>
  </entry>
  <entry>
    <title>面试题3：前端入门编程题</title>
    <url>/2022/01/06/%E9%9D%A2%E8%AF%95%E9%A2%98/%E9%9D%A2%E8%AF%95%E9%A2%983%EF%BC%9A%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8%E7%BC%96%E7%A8%8B%E9%A2%98/</url>
    <content><![CDATA[<h3 id="一、作用域应用的场景："><a href="#一、作用域应用的场景：" class="headerlink" title="一、作用域应用的场景："></a>一、作用域应用的场景：</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; bind &#125; = <span class="built_in">require</span>(<span class="string">&quot;bluebird&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.函数作为参数被传递</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">print</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="number">200</span>;</span><br><span class="line">  <span class="title function_">fn</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">print</span>(fn); <span class="comment">// 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.函数作为返回值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">create</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn = <span class="title function_">create</span>();</span><br><span class="line"><span class="keyword">const</span> a = <span class="number">200</span>;</span><br><span class="line"><span class="title function_">fn</span>(); <span class="comment">// 100</span></span><br></pre></td></tr></table></figure>

<h3 id="手写-call-函数"><a href="#手写-call-函数" class="headerlink" title="手写 call 函数"></a>手写 call 函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">luckyCall</span> = <span class="keyword">function</span> (<span class="params">ctx, ...args</span>) &#123;</span><br><span class="line">  <span class="comment">//确保新增的fn属性是唯一的，防止将this原有的方法覆盖</span></span><br><span class="line">  <span class="keyword">let</span> fn = <span class="title class_">Symbol</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1.将方法挂在到我们传入的上下文ctx上</span></span><br><span class="line">  ctx[fn] = <span class="variable language_">this</span>; <span class="comment">//这个this会作为调用function的实例，也就是show方法的实例</span></span><br><span class="line">  <span class="comment">//ctx就是&#123;name:&#x27;luckyCall&#x27;&#125;  //this就是show函数  //ctx.fn是在实例上新定义一个属性，赋值了this，也就是值赋值了show函数</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.将挂在以后的方法调用，完成了this的替换，将参数传入到show函数</span></span><br><span class="line">  ctx[fn](...args);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3.将我们添加的属性删除</span></span><br><span class="line">  <span class="keyword">delete</span> ctx[fn];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">show</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>); <span class="comment">//&#x27;luckyCall&#x27;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(args); <span class="comment">//[&quot;luckyCall1&quot;, &quot;luckyCall2&quot;, &quot;luckyCall3&quot;]</span></span><br><span class="line">&#125;</span><br><span class="line">show.<span class="title function_">luckyCall</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;luckyCall&quot;</span> &#125;, <span class="string">&quot;luckyCall1&quot;</span>, <span class="string">&quot;luckyCall2&quot;</span>, <span class="string">&quot;luckyCall3&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="手写-apply-函数"><a href="#手写-apply-函数" class="headerlink" title="手写 apply 函数"></a>手写 apply 函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">luckyApply</span> = <span class="keyword">function</span> (<span class="params">ctx, args = []</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (args &amp;&amp; !(args <span class="keyword">instanceof</span> <span class="title class_">Array</span>)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">&quot;luckyApply只接收数组作为参数&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> fn = <span class="title class_">Symbol</span>(<span class="number">1</span>);</span><br><span class="line">  ctx[fn] = <span class="variable language_">this</span>;</span><br><span class="line">  ctx[fn](args);</span><br><span class="line">  <span class="keyword">delete</span> ctx[fn];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">show</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>); <span class="comment">//&#x27;luckyCall&#x27;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(args); <span class="comment">//[&quot;luckyCall1&quot;, &quot;luckyCall2&quot;, &quot;luckyCall3&quot;]</span></span><br><span class="line">&#125;</span><br><span class="line">show.<span class="title function_">luckyApply</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;luckyApply&quot;</span> &#125;, [</span><br><span class="line">  <span class="string">&quot;luckyApply1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;luckyApply2&quot;</span>,</span><br><span class="line">  <span class="string">&quot;luckyApply3&quot;</span>,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<h3 id="手写-bind-函数-1"><a href="#手写-bind-函数-1" class="headerlink" title="手写 bind 函数 1:"></a>手写 bind 函数 1:</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">luckyBind</span> = <span class="keyword">function</span> (<span class="params">ctx, ...args1</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> fn = <span class="title class_">Symbol</span>(<span class="number">1</span>);</span><br><span class="line">    ctx[fn] = <span class="variable language_">this</span>; <span class="comment">//箭头函数的this就是上级作用域的this</span></span><br><span class="line">    <span class="keyword">let</span> res = ctx[fn](...args1.<span class="title function_">concat</span>(args2)); <span class="comment">//返回show</span></span><br><span class="line">    <span class="keyword">delete</span> ctx[fn];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">show</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>); <span class="comment">//&#x27;luckyBind&#x27;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(args); <span class="comment">//[&quot;luckyBind1&quot;, &quot;luckyBind2&quot;, &quot;luckyBind3&quot;, &quot;luckyBind4&quot;]</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;this is show&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">  show.<span class="title function_">luckyBind</span>(</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;luckyBind&quot;</span> &#125;,</span><br><span class="line">    <span class="string">&quot;luckyBind1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;luckyBind2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;luckyBind3&quot;</span></span><br><span class="line">  )(<span class="string">&quot;luckyBind4&quot;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="手写-bind-函数-2"><a href="#手写-bind-函数-2" class="headerlink" title="手写 bind 函数 2:"></a>手写 bind 函数 2:</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bind1</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> args = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">  <span class="keyword">const</span> ctx = args.<span class="title function_">shift</span>();</span><br><span class="line">  <span class="keyword">const</span> self = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> self.<span class="title function_">apply</span>(ctx, args);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c, <span class="variable language_">this</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;haha&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fn1.<span class="title function_">bind1</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;zhangsan&quot;</span> &#125;, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)());</span><br></pre></td></tr></table></figure>

<h3 id="三、简单的-cache-工具"><a href="#三、简单的-cache-工具" class="headerlink" title="三、简单的 cache 工具"></a>三、简单的 cache 工具</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 闭包隐藏数据，只提供 API</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createCache</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> data = &#123;&#125;; <span class="comment">// 闭包中的数据，被隐藏，不被外界访问</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">key, val</span>) &#123;</span><br><span class="line">      data[key] = val;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params">key</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> data[key];</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// data.b = 200    //报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c = <span class="title function_">createCache</span>();</span><br><span class="line">c.<span class="title function_">set</span>(<span class="string">&quot;a&quot;</span>, <span class="number">100</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c.<span class="title function_">get</span>(<span class="string">&quot;a&quot;</span>)); <span class="comment">//100</span></span><br></pre></td></tr></table></figure>

<h3 id="四、手写-Promise-加载一张图片"><a href="#四、手写-Promise-加载一张图片" class="headerlink" title="四、手写 Promise 加载一张图片"></a>四、手写 Promise 加载一张图片</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">loadImg</span>(<span class="params">src</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> img = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">    img.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(img);</span><br><span class="line">    &#125;;</span><br><span class="line">    img.<span class="property">onerror</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;图片加载错误&quot;</span>));</span><br><span class="line">    &#125;;</span><br><span class="line">    img.<span class="property">src</span> = src;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> url1 = <span class="string">&quot;https://img.mukewang.com/5a9fc8070001a82402060220-140-140.jpg&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> url2 = <span class="string">&quot;https://img3.mukewang.com/5a9fc8070001a82402060220-100-100.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">loadImg</span>(url1)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">img</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(img.<span class="property">width</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">loadImg</span>(url2);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">img2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(img2.<span class="property">height</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="五、手写一个简易的-jQuery，考虑插件和扩展性"><a href="#五、手写一个简易的-jQuery，考虑插件和扩展性" class="headerlink" title="五、手写一个简易的 jQuery，考虑插件和扩展性"></a>五、手写一个简易的 jQuery，考虑插件和扩展性</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">jQuery</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">selector</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(selector);</span><br><span class="line">    <span class="keyword">const</span> length = result.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">      <span class="variable language_">this</span>[i] = result[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">length</span> = length;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">selector</span> = selector;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params">index</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>[index];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">each</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> elem = <span class="variable language_">this</span>[i];</span><br><span class="line">      <span class="title function_">fn</span>(elem);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">on</span>(<span class="params">type, fn</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">each</span>(<span class="function">(<span class="params">elem</span>) =&gt;</span> &#123;</span><br><span class="line">      elem.<span class="title function_">addEventListener</span>(type, fn, <span class="literal">false</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 扩展很多 DOM API</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插件</span></span><br><span class="line">jQuery.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">dialog</span> = <span class="keyword">function</span> (<span class="params">info</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(info);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// “造轮子”--复写机制</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myJQuery</span> <span class="keyword">extends</span> <span class="title class_ inherited__">jQuery</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">selector</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(selector);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 扩展自己的方法</span></span><br><span class="line">  <span class="title function_">addClass</span>(<span class="params">className</span>) &#123;&#125;</span><br><span class="line">  <span class="title function_">style</span>(<span class="params">data</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const $p = new jQuery(&#x27;p&#x27;)</span></span><br><span class="line"><span class="comment">// $p.get(1)</span></span><br><span class="line"><span class="comment">// $p.each((elem) =&gt; console.log(elem.nodeName))</span></span><br><span class="line"><span class="comment">// $p.on(&#x27;click&#x27;, () =&gt; alert(&#x27;clicked&#x27;))</span></span><br><span class="line"><span class="comment">// $p.dialog(&#x27;abc&#x27;)</span></span><br></pre></td></tr></table></figure>

<h3 id="六、封装-ajax-请求"><a href="#六、封装-ajax-请求" class="headerlink" title="六、封装 ajax 请求"></a>六、封装 ajax 请求</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 封装ajax请求</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ajax</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, url, <span class="literal">true</span>);</span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">          <span class="comment">//http协议的状态码</span></span><br><span class="line">          <span class="title function_">resolve</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (xhr.<span class="property">status</span> === <span class="number">404</span> || xhr.<span class="property">status</span> === <span class="number">500</span>) &#123;</span><br><span class="line">          <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;404 not found&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    xhr.<span class="title function_">send</span>(<span class="literal">null</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> url = <span class="string">&quot;/data/test.json&quot;</span>;</span><br><span class="line"><span class="title function_">ajax</span>(url)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err));</span><br></pre></td></tr></table></figure>

<h3 id="七、通用的事件绑定函数"><a href="#七、通用的事件绑定函数" class="headerlink" title="七、通用的事件绑定函数"></a>七、通用的事件绑定函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// function bindEvent(elem, type, fn) &#123;</span></span><br><span class="line"><span class="comment">//     elem.addEventListener(type, fn)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bindEvent</span>(<span class="params">elem, type, selector, fn</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (fn == <span class="literal">null</span>) &#123;</span><br><span class="line">    fn = selector;</span><br><span class="line">    selector = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  elem.<span class="title function_">addEventListener</span>(type, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> target = event.<span class="property">target</span>;</span><br><span class="line">    <span class="keyword">if</span> (selector) &#123;</span><br><span class="line">      <span class="comment">// 代理绑定</span></span><br><span class="line">      <span class="keyword">if</span> (target.<span class="title function_">matches</span>(selector)) &#123;</span><br><span class="line">        <span class="comment">//matches用于判断当前元素是否符合css选择器</span></span><br><span class="line">        fn.<span class="title function_">call</span>(target, event);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 普通绑定</span></span><br><span class="line">      fn.<span class="title function_">call</span>(target, event);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通事件绑定</span></span><br><span class="line"><span class="keyword">const</span> btn1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn1&quot;</span>);</span><br><span class="line"><span class="title function_">bindEvent</span>(btn1, <span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="comment">//注意：这里如果使用箭头函数，里面的this会指向window，不是我们当前想要的点击元素，所以改用成function形式</span></span><br><span class="line">  <span class="comment">// console.log(event.target) // 获取触发的元素</span></span><br><span class="line">  event.<span class="title function_">preventDefault</span>(); <span class="comment">// 阻止默认行为</span></span><br><span class="line">  <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">innerHTML</span>); <span class="comment">//如果上面非要用箭头函数，这里就改写成：alert(btn1.innerHTML)</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理绑定</span></span><br><span class="line"><span class="keyword">const</span> div3 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div3&quot;</span>);</span><br><span class="line"><span class="comment">// bindEvent(div3, &#x27;click&#x27;, &#x27;a&#x27;, function (event) &#123;</span></span><br><span class="line"><span class="comment">//     event.preventDefault()</span></span><br><span class="line"><span class="comment">//     const target = event.target</span></span><br><span class="line"><span class="comment">//     if(terget.nodeName === &#x27;A&#x27;)&#123;</span></span><br><span class="line"><span class="comment">//         alert(this.innerHTML)</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">bindEvent</span>(div3, <span class="string">&quot;click&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  event.<span class="title function_">preventDefault</span>();</span><br><span class="line">  <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">innerHTML</span>); <span class="comment">//如果上面非要用箭头函数，这里就改写成：alert(event.target.innerHTML)</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="八、手写深拷贝"><a href="#八、手写深拷贝" class="headerlink" title="八、手写深拷贝"></a>八、手写深拷贝</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">  <span class="attr">address</span>: &#123;</span><br><span class="line">    <span class="attr">city</span>: <span class="string">&quot;beijing&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">arr</span>: [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj2 = <span class="title function_">deepClone</span>(obj1);</span><br><span class="line">obj2.<span class="property">address</span>.<span class="property">city</span> = <span class="string">&quot;shanghai&quot;</span>;</span><br><span class="line">obj2.<span class="property">arr</span>[<span class="number">0</span>] = <span class="string">&quot;a1&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">address</span>.<span class="property">city</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">arr</span>[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 深拷贝函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; obj 要拷贝的对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">obj = &#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&quot;object&quot;</span> || obj == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// obj 是 null ，或者不是对象和数组，直接返回</span></span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化返回结果</span></span><br><span class="line">  <span class="keyword">let</span> result;</span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">    result = [];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    result = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="comment">// 保证 key 不是原型的属性</span></span><br><span class="line">    <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">      <span class="comment">// 递归调用！！！</span></span><br><span class="line">      result[key] = <span class="title function_">deepClone</span>(obj[key]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回结果</span></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="九、防抖"><a href="#九、防抖" class="headerlink" title="九、防抖"></a>九、防抖</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, delay = <span class="number">300</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">      timer = <span class="literal">null</span>;</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> input1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;input1&quot;</span>);</span><br><span class="line">input1.<span class="title function_">addEventListener</span>(</span><br><span class="line">  <span class="string">&quot;keyup&quot;</span>,</span><br><span class="line">  <span class="title function_">debounce</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(inpu1.<span class="property">val</span>);</span><br><span class="line">  &#125;, <span class="number">500</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="十、节流"><a href="#十、节流" class="headerlink" title="十、节流"></a>十、节流</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, delay</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    timer = <span class="title function_">serTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">      timer = <span class="literal">null</span>;</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">div1.<span class="title function_">addEventListener</span>(</span><br><span class="line">  <span class="string">&quot;drag&quot;</span>,</span><br><span class="line">  <span class="title function_">throttle</span>(<span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">offsetx</span>, e.<span class="property">offsety</span>);</span><br><span class="line">  &#125;, <span class="number">300</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="十二、手写深度比较，模拟-lodash-isEqual"><a href="#十二、手写深度比较，模拟-lodash-isEqual" class="headerlink" title="十二、手写深度比较，模拟 lodash.isEqual"></a>十二、手写深度比较，模拟 lodash.isEqual</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断是否是对象或数组</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isObject</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> obj === <span class="string">&quot;object&quot;</span> &amp;&amp; obj !== <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 全相等（深度比较）</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isEqual</span>(<span class="params">obj1, obj2</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">isObject</span>(obj1) || !<span class="title function_">isObject</span>(obj2)) &#123;</span><br><span class="line">    <span class="comment">// 值类型（注意，参与 equal 的一般不会是函数）</span></span><br><span class="line">    <span class="keyword">return</span> obj1 === obj2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (obj1 === obj2) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 两个都是引用类型，两个都是对象或数组，而且不相等</span></span><br><span class="line">  <span class="comment">// 1. 先取出 obj1 和 obj2 的 keys ，比较个数</span></span><br><span class="line">  <span class="keyword">const</span> obj1Keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj1);</span><br><span class="line">  <span class="keyword">const</span> obj2Keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj2);</span><br><span class="line">  <span class="keyword">if</span> (obj1Keys.<span class="property">length</span> !== obj2Keys.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 2. 以 obj1 为基准，和 obj2 一次递归比较，for...in适用于对象，也适用于数组</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj1) &#123;</span><br><span class="line">    <span class="comment">// 比较当前 key 的 val ---- 递归！！！</span></span><br><span class="line">    <span class="keyword">const</span> res = <span class="title function_">isEqual</span>(obj1[key], obj2[key]);</span><br><span class="line">    <span class="keyword">if</span> (!res) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 3. 全相等</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">b</span>: &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">200</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">b</span>: &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">200</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// console.log( obj1 === obj2 ) //false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isEqual</span>(obj1, obj2)); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isEqual</span>(arr1, arr2));</span><br></pre></td></tr></table></figure>

<h3 id="十三、数组去重"><a href="#十三、数组去重" class="headerlink" title="十三、数组去重"></a>十三、数组去重</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.传统方式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = [];</span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="title function_">indexOf</span>(item) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      res.<span class="title function_">push</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 Set （无序，不能重复）</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>(arr);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(set); <span class="comment">//&#123;30, 10, 20, 40&#125;</span></span><br><span class="line">  <span class="keyword">return</span> [...set];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res = <span class="title function_">unique</span>([<span class="number">30</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">10</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br></pre></td></tr></table></figure>

<h3 id="十四、使用-Promise-实现每隔-1-秒输出-1-2-3"><a href="#十四、使用-Promise-实现每隔-1-秒输出-1-2-3" class="headerlink" title="十四、使用 Promise 实现每隔 1 秒输出 1,2,3"></a>十四、使用 Promise 实现每隔 1 秒输出 1,2,3</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 【这道题比较简单的一种做法是可以用Promise配合着reduce不停的在promise后面叠加.then，请看下面的代码：】</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="variable language_">console</span>.<span class="title function_">log</span>(b));</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="title class_">Promise</span>.<span class="title function_">resolve</span>());</span><br></pre></td></tr></table></figure>

<h3 id="十五、使用-Promise-实现红绿灯交替重复亮"><a href="#十五、使用-Promise-实现红绿灯交替重复亮" class="headerlink" title="十五、使用 Promise 实现红绿灯交替重复亮"></a>十五、使用 Promise 实现红绿灯交替重复亮</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 【红灯3秒亮一次，黄灯2秒亮一次，绿灯1秒亮一次；如何让三个灯不断交替重复亮灯？（用Promise实现）三个亮灯函数已经存在：】</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">red</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;red&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">green</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;green&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">yellow</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;yellow&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> light = <span class="keyword">function</span> (<span class="params">timer, cb</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">cb</span>();</span><br><span class="line">      <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;, timer);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> step = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">light</span>(<span class="number">3000</span>, red);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">light</span>(<span class="number">2000</span>, green);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">light</span>(<span class="number">1000</span>, yellow);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">step</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">step</span>();</span><br></pre></td></tr></table></figure>

<h3 id="十六、实现-mergePromise-函数"><a href="#十六、实现-mergePromise-函数" class="headerlink" title="十六、实现 mergePromise 函数"></a>十六、实现 mergePromise 函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">time</span> = (<span class="params">timer</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;, timer);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ajax1</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">  <span class="title function_">time</span>(<span class="number">2000</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ajax2</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">  <span class="title function_">time</span>(<span class="number">1000</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ajax3</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">  <span class="title function_">time</span>(<span class="number">1000</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mergePromise</span>(<span class="params">ajaxArray</span>) &#123;</span><br><span class="line">  <span class="comment">//【实现过程】</span></span><br><span class="line">  <span class="comment">// 存放每个ajax的结果</span></span><br><span class="line">  <span class="keyword">const</span> data = [];</span><br><span class="line">  <span class="keyword">let</span> promise = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>();</span><br><span class="line">  ajaxArray.<span class="title function_">forEach</span>(<span class="function">(<span class="params">ajax</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 第一次的then为了用来调用ajax</span></span><br><span class="line">    <span class="comment">// 第二次的then是为了获取ajax的结果</span></span><br><span class="line">    promise = promise.<span class="title function_">then</span>(ajax).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      data.<span class="title function_">push</span>(res);</span><br><span class="line">      <span class="keyword">return</span> data; <span class="comment">// 把每次的结果返回</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 最后得到的promise它的值就是data</span></span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">mergePromise</span>([ajax1, ajax2, ajax3]).<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;done&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data); <span class="comment">// data 为 [1, 2, 3]</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要求分别输出</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// done</span></span><br><span class="line"><span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>

<h3 id="十七、手写数组-flatern，考虑多层级【数组扁平化】"><a href="#十七、手写数组-flatern，考虑多层级【数组扁平化】" class="headerlink" title="十七、手写数组 flatern，考虑多层级【数组扁平化】"></a>十七、手写数组 flatern，考虑多层级【数组扁平化】</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>];</span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">concat</span>.<span class="title function_">apply</span>([], arr); <span class="comment">//[1,2,3,4,5]</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">concat</span>.<span class="title function_">call</span>([], <span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>); <span class="comment">//[1,2,3,4,5]</span></span><br><span class="line"><span class="keyword">let</span> a = [];</span><br><span class="line">a.<span class="title function_">concat</span>(<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>); <span class="comment">//[1,2,3,4,5]</span></span><br><span class="line">a.<span class="title function_">concat</span>(<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">6</span>, <span class="number">7</span>]], <span class="number">5</span>); <span class="comment">//[1,2,3,4,Array(2),5]  -- concat只能拍平一层</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组扁平化：</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flat</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="comment">// 验证 arr 中，还有没有深层数组 [1, 2, [3, 4]]</span></span><br><span class="line">  <span class="keyword">const</span> isDeep = arr.<span class="title function_">some</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item <span class="keyword">instanceof</span> <span class="title class_">Array</span>);</span><br><span class="line">  <span class="keyword">if</span> (!isDeep) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr; <span class="comment">// 已经是 flatern [1, 2, 3, 4]</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> res = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">concat</span>.<span class="title function_">apply</span>([], arr);</span><br><span class="line">  <span class="comment">// 相当于Array.prototype.concat.call([], 1, 2, [3, 4],5)</span></span><br><span class="line">  <span class="comment">// 相当于[].concat(1, 2, [3, 4],5)</span></span><br><span class="line">  <span class="comment">// 都只能扁平化一层，需要执行递归</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">flat</span>(res); <span class="comment">// 递归</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res = <span class="title function_">flat</span>([<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">10</span>, <span class="number">20</span>, [<span class="number">100</span>, <span class="number">200</span>]]], <span class="number">5</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br></pre></td></tr></table></figure>

<h3 id="十八、将-url-参数解析为-JS-对象"><a href="#十八、将-url-参数解析为-JS-对象" class="headerlink" title="十八、将 url 参数解析为 JS 对象"></a>十八、将 url 参数解析为 JS 对象</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.传统方式，分析search</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">queryToObj</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> search = location.<span class="property">search</span>.<span class="title function_">substr</span>(<span class="number">1</span>); <span class="comment">//去掉前面的&#x27;?&#x27;</span></span><br><span class="line">  search.<span class="title function_">split</span>(<span class="string">&quot;&amp;&quot;</span>).<span class="title function_">forEach</span>(<span class="function">(<span class="params">paramStr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> arr = paramStr.<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> key = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">const</span> val = arr[<span class="number">1</span>];</span><br><span class="line">    res[key] = val;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.使用URLSearchParams</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">queryToObj</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> pList = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(location.<span class="property">search</span>);</span><br><span class="line">  pList.<span class="title function_">forEach</span>(<span class="function">(<span class="params">val, key</span>) =&gt;</span> &#123;</span><br><span class="line">    res[key] = val;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="二十、手写字符串-trim-方法，保证浏览器兼容性"><a href="#二十、手写字符串-trim-方法，保证浏览器兼容性" class="headerlink" title="二十、手写字符串 trim 方法，保证浏览器兼容性"></a>二十、手写字符串 trim 方法，保证浏览器兼容性</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">trim</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//原型、this、正则表达式</span></span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">replace</span>(<span class="regexp">/^\s+/</span>, <span class="string">&quot;&quot;</span>).<span class="title function_">replace</span>(<span class="regexp">/\s+$/</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="二十一、如何获取多个数字中的最大值"><a href="#二十一、如何获取多个数字中的最大值" class="headerlink" title="二十一、如何获取多个数字中的最大值"></a>二十一、如何获取多个数字中的最大值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">max</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> nums = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>); <span class="comment">//类数组变为数组</span></span><br><span class="line">  <span class="keyword">let</span> max = <span class="number">0</span>;</span><br><span class="line">  nums.<span class="title function_">forEach</span>(<span class="function">(<span class="params">element</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (element &gt; max) &#123;</span><br><span class="line">      max = element;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者：</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">10</span>, <span class="number">30</span>, <span class="number">20</span>, <span class="number">40</span>);</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>面试题4：前端入门编程题2</title>
    <url>/2022/01/06/%E9%9D%A2%E8%AF%95%E9%A2%98/%E9%9D%A2%E8%AF%95%E9%A2%984%EF%BC%9A%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8%E7%BC%96%E7%A8%8B%E9%A2%982/</url>
    <content><![CDATA[<h3 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">用 JavaScript 实现斐波那契数列函数,返回第 n 个斐波那契数。 f(1) = 1, f(2) = 1 等</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fibonacci</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fibonacci</span>(n - <span class="number">1</span>) + <span class="title function_">fibonacci</span>(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">统计字符串中每个字符的出现频率，返回一个 Object，key 为统计字符，value 为出现频率</span><br><span class="line"></span><br><span class="line">1. 不限制 key 的顺序</span><br><span class="line">2. 输入的字符串参数不会为空</span><br><span class="line">3. 忽略空白字符</span><br><span class="line"></span><br><span class="line">输入：<span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">输出：&#123;h: 1, e: 1, l: 3, o: 2, w: 1, r: 1, d: 1&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">count</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">  <span class="keyword">let</span> b = str</span><br><span class="line">    .<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    .<span class="title function_">filter</span>(<span class="function">(<span class="params">s</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> s !== <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">map</span>(<span class="function">(<span class="params">s, i</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!obj.<span class="title function_">hasOwnProperty</span>(s)) &#123;</span><br><span class="line">        obj[s] = <span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        obj[s] += <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">count</span>(<span class="string">&quot;hello world&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">计算给定数组 arr 中所有元素的总和</span><br><span class="line">输入描述:数组中的元素均为 Number 类型</span><br><span class="line"></span><br><span class="line">输入：[ 1, 2, 3, 4 ]</span><br><span class="line">输出：10</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="built_in">sum</span>(arr) &#123;</span><br><span class="line">    <span class="built_in">return</span> arr.reduce((prev, curr) =&gt; &#123;</span><br><span class="line">        return prev + curr;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">sum(readline())</span><br></pre></td></tr></table></figure>

<h3 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">删除数组 arr 最后一个元素。不要直接修改数组 arr，结果返回新的数组</span><br><span class="line"></span><br><span class="line">输入：[1, 2, 3, 4]</span><br><span class="line">输出：[1, 2, 3]</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">truncate</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> t = arr.<span class="title function_">slice</span>();</span><br><span class="line">  t.<span class="title function_">pop</span>();</span><br><span class="line">  <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">truncate</span>(<span class="title function_">readline</span>());</span><br></pre></td></tr></table></figure>

<h3 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">在数组 arr 开头添加元素 item。不要直接修改数组 arr，结果返回新的数组</span><br><span class="line"></span><br><span class="line">输入：[1, 2, 3, 4], 10</span><br><span class="line">输出：[10, 1, 2, 3, 4]</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">prepend</span>(<span class="params">arr, item</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> t = arr.<span class="title function_">slice</span>();</span><br><span class="line">  t.<span class="title function_">unshift</span>(item);</span><br><span class="line">  <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">prepend</span>(<span class="title function_">readline</span>());</span><br></pre></td></tr></table></figure>

<h3 id="6"><a href="#6" class="headerlink" title="6."></a>6.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 统计数组 arr 中值等于 item 的元素出现的次数</span><br><span class="line"> *</span><br><span class="line"> * 输入：[1, 2, 4, 4, 3, 4, 3], 4</span><br><span class="line"> * 输出：3</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">count</span>(<span class="params">arr, item</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">  arr.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (s === item) &#123;</span><br><span class="line">      i += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">count</span>(<span class="title function_">readline</span>());</span><br><span class="line"><span class="comment">// ----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//filter()--&gt;利用指定的函数确定是否在返回的数组中包含某一项</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">count</span>(<span class="params">arr, item</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> count = arr.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a === item; <span class="comment">//返回true的项组成的数组</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> count.<span class="property">length</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//map()--&gt;对数组中的每一项进行给定函数，</span></span><br><span class="line"><span class="comment">//返回每次函数条用的结果组成的数组；</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">count</span>(<span class="params">arr, item</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">  arr.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (a === item) &#123;</span><br><span class="line">      count++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//for循环</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">count</span>(<span class="params">arr, item</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] === item) &#123;</span><br><span class="line">      count++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//reduce()--&gt;从数组的第一项开始，逐个遍历到最后；</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">count</span>(<span class="params">arr, item</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> count = arr.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">prev, curr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> curr === item ? prev + <span class="number">1</span> : prev;</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//forEach()--&gt;对数组中的每一项运行传入的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">count</span>(<span class="params">arr, item</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">    a === item ? count++ : <span class="number">0</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7"><a href="#7" class="headerlink" title="7."></a>7.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 合并数组 arr1 和数组 arr2。不要直接修改数组 arr，结果返回新的数组</span><br><span class="line"> *</span><br><span class="line"> * 输入：[1, 2, 3, 4], [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, 1]</span><br><span class="line"> * 输出：[1, 2, 3, 4, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, 1]</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">concat</span>(<span class="params">arr1, arr2</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">assign</span>([...arr1, ...arr2]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">concat</span>(<span class="title function_">readline</span>());</span><br></pre></td></tr></table></figure>

<h3 id="8"><a href="#8" class="headerlink" title="8."></a>8.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 求 a 和 b 相乘的值，a 和 b 可能是小数，需要注意结果的精度问题</span><br><span class="line"> *</span><br><span class="line"> * 输入：3, 0.0001</span><br><span class="line"> * 输出：0.0003</span><br><span class="line"> *</span><br><span class="line"> * stringObject.indexOf(searchvalue,fromindex)</span><br><span class="line"> * 该方法将从头到尾地检索字符串 stringObject，看它是否含有子串 searchvalue。开始检索的位置在字符串的 fromindex 处或字符串的开头（没有指定 fromindex 时）。如果找到一个 searchvalue，则返回 searchvalue 的第一次出现的位置。stringObject 中的字符位置是从 0 开始的。</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> f1 = <span class="number">1</span>,</span><br><span class="line">    f2 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (a.<span class="title function_">toString</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;.&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">    f1 = a.<span class="title function_">toString</span>().<span class="property">length</span> - a.<span class="title function_">toString</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">    f1 = <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">10</span>, f1);</span><br><span class="line">    a = a * f1;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (b.<span class="title function_">toString</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;.&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">    f2 = b.<span class="title function_">toString</span>().<span class="property">length</span> - b.<span class="title function_">toString</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">    f2 = <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">10</span>, f2);</span><br><span class="line">    b = b * f2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (a * b) / f1 / f2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">multiply</span>(<span class="title function_">readline</span>());</span><br></pre></td></tr></table></figure>

<h3 id="9"><a href="#9" class="headerlink" title="9."></a>9.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 将函数 fn 的执行上下文改为 obj，返回 fn 执行后的值</span><br><span class="line"> *</span><br><span class="line"> * 输入：</span><br><span class="line">    alterContext(<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        <span class="built_in">return</span> this.greeting + <span class="string">&#x27;, &#x27;</span> + this.name + <span class="string">&#x27;!&#x27;</span>;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        name: <span class="string">&#x27;Rebecca&#x27;</span>,</span><br><span class="line">        greeting: <span class="string">&#x27;Yo&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    输出：</span><br><span class="line">    Yo, Rebecca!</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">alterContext</span>(<span class="params">fn, obj</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> fn.<span class="title function_">call</span>(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="10"><a href="#10" class="headerlink" title="10."></a>10.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 给定一个构造函数 constructor，请完成 alterObjects 方法，将 constructor 的所有实例的 greeting 属性指向给定的 greeting 变量。</span><br><span class="line"> *</span><br><span class="line"> * 输出：</span><br><span class="line">    var C = <span class="keyword">function</span>(name) &#123;this.name = name; <span class="built_in">return</span> this;&#125;;</span><br><span class="line">    var obj1 = new C(<span class="string">&#x27;Rebecca&#x27;</span>);</span><br><span class="line">    alterObjects(C, <span class="string">&#x27;What\&#x27;</span>s up<span class="string">&#x27;); obj1.greeting;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    输出：</span></span><br><span class="line"><span class="string">    What&#x27;</span>s up</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">alterObjects</span>(<span class="params">constructor, greeting</span>) &#123;</span><br><span class="line">  constructor.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">greeting</span> = greeting;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> C = <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> <span class="title function_">C</span>(<span class="string">&quot;Rebecca&quot;</span>);</span><br><span class="line"><span class="title function_">alterObjects</span>(C, <span class="string">&quot;What&#x27;s up&quot;</span>);</span><br><span class="line">obj1.<span class="property">greeting</span>;</span><br></pre></td></tr></table></figure>

<h3 id="11"><a href="#11" class="headerlink" title="11."></a>11.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 给定字符串 str，检查其是否包含数字，包含返回 <span class="literal">true</span>，否则返回 <span class="literal">false</span></span><br><span class="line"> *</span><br><span class="line"> * 输入：<span class="string">&#x27;abc123&#x27;</span></span><br><span class="line"> * 输出：<span class="literal">true</span></span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">containsNumber</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> bool = <span class="literal">false</span>;</span><br><span class="line">  str.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title class_">Number</span>(s) == i) &#123;</span><br><span class="line">        bool = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> bool;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法2：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// var b = /\d/;</span></span><br><span class="line"><span class="comment">// return b.test(str);</span></span><br></pre></td></tr></table></figure>

<h3 id="13"><a href="#13" class="headerlink" title="13."></a>13.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 删除数组 arr 第一个元素。不要直接修改数组 arr，结果返回新的数组</span><br><span class="line"> *</span><br><span class="line"> * 输入：[1, 2, 3, 4]</span><br><span class="line"> * 输出：[2, 3, 4]</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">curtail</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = arr.<span class="title function_">slice</span>();</span><br><span class="line">  a.<span class="title function_">shift</span>();</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="14"><a href="#14" class="headerlink" title="14."></a>14.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 给定字符串 str，检查其是否以元音字母结尾</span><br><span class="line"> * 1、元音字母包括 a，e，i，o，u，以及对应的大写</span><br><span class="line"> * 2、包含返回 <span class="literal">true</span>，否则返回 <span class="literal">false</span></span><br><span class="line"> *</span><br><span class="line"> * 输入：<span class="string">&#x27;gorilla&#x27;</span></span><br><span class="line"> * 输出：<span class="literal">true</span></span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">endsWithVowel</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;i&quot;</span>, <span class="string">&quot;o&quot;</span>, <span class="string">&quot;u&quot;</span>].<span class="title function_">indexOf</span>(str.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">pop</span>().<span class="title function_">toLowerCase</span>()) !== -<span class="number">1</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法2:</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">endsWithVowel</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> reg = <span class="regexp">/(a|o|e|i|u)$/gi</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> reg.<span class="title function_">test</span>(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="15"><a href="#15" class="headerlink" title="15."></a>15.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 为数组 arr 中的每个元素求二次方。不要直接修改数组 arr，结果返回新的数组</span><br><span class="line"> *</span><br><span class="line"> * 输入：[1, 2, 3, 4]</span><br><span class="line"> * 输出：[1, 4, 9, 16]</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">square</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> s * s;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="16"><a href="#16" class="headerlink" title="16."></a>16.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 在数组 arr 中，查找值与 item 相等的元素出现的所有位置</span><br><span class="line"> *</span><br><span class="line"> * 输入：[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>] <span class="string">&#x27;a&#x27;</span></span><br><span class="line"> * 输出：[0, 6]</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">findAllOccurrences</span>(<span class="params">arr, target</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> a = [];</span><br><span class="line">  arr.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">item, index</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (item == target) &#123;</span><br><span class="line">      a.<span class="title function_">push</span>(index);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="17"><a href="#17" class="headerlink" title="17."></a>17.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 给定字符串 str，检查其是否包含连续重复的字母（a-zA-Z），包含返回 <span class="literal">true</span>，否则返回 <span class="literal">false</span></span><br><span class="line"> *</span><br><span class="line"> * 输入：<span class="string">&#x27;rattler&#x27;</span></span><br><span class="line"> * 输出：<span class="literal">true</span></span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">containsRepeatingLetter</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="regexp">/([a-zA-Z])\1/</span>.<span class="title function_">test</span>(str); <span class="comment">//\1表示重复正则第一个圆括号内匹配到的内容;</span></span><br><span class="line">  <span class="comment">//\2表示重复正则第二个圆括号内匹配到的内容;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="18"><a href="#18" class="headerlink" title="18."></a>18.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 给定二进制字符串，将其换算成对应的十进制数字</span><br><span class="line"> *</span><br><span class="line"> * 输入：<span class="string">&#x27;11000000&#x27;</span></span><br><span class="line"> * 输出：192</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">base10</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">parseInt</span>(str, <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="19"><a href="#19" class="headerlink" title="19."></a>19.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 返回参数 a 和 b 的逻辑且运算结果</span><br><span class="line"> *</span><br><span class="line"> * 输入：<span class="literal">false</span>, <span class="literal">true</span></span><br><span class="line"> * 输出：<span class="literal">false</span></span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">and</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a &amp;&amp; b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="20"><a href="#20" class="headerlink" title="20."></a>20.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 返回参数 a 和 b 的逻辑或运算结果</span><br><span class="line"> *</span><br><span class="line"> * 输入：<span class="literal">false</span>, <span class="literal">true</span></span><br><span class="line"> * 输出：<span class="literal">true</span></span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">or</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a || b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="21"><a href="#21" class="headerlink" title="21."></a>21.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 柯里化</span><br><span class="line">已知 fn 为一个预定义函数，实现函数 curryIt，调用之后满足如下条件：</span><br><span class="line">1、返回一个函数 a，a 的 length 属性值为 1（即显式声明 a 接收一个参数）</span><br><span class="line">2、调用 a 之后，返回一个函数 b, b 的 length 属性值为 1</span><br><span class="line">3、调用 b 之后，返回一个函数 c, c 的 length 属性值为 1</span><br><span class="line">4、调用 c 之后，返回的结果与调用 fn 的返回值一致</span><br><span class="line">5、fn 的参数依次为函数 a, b, c 的调用参数</span><br><span class="line"></span><br><span class="line">输入：var fn = <span class="keyword">function</span> (a, b, c) &#123;<span class="built_in">return</span> a + b + c&#125;; curryIt(fn)(1)(2)(3);</span><br><span class="line">输出：6</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">curryIt</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> length = fn.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">var</span> args = [];</span><br><span class="line">  <span class="keyword">var</span> result = <span class="keyword">function</span> (<span class="params">arg</span>) &#123;</span><br><span class="line">    args.<span class="title function_">push</span>(arg);</span><br><span class="line">    length--;</span><br><span class="line">    <span class="keyword">if</span> (length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="22"><a href="#22" class="headerlink" title="22."></a>22.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 函数 useArguments 可以接收 1 个及以上的参数。请实现函数 useArguments，返回所有调用参数相加后的结果。本题的测试参数全部为 Number 类型，不需考虑参数转换。</span><br><span class="line"> *</span><br><span class="line"> * 输入：1, 2, 3, 4</span><br><span class="line"> * 输出：10</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">useArguments</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> arr = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">prev, curr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> prev + curr;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="23"><a href="#23" class="headerlink" title="23."></a>23.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">已知函数 fn 执行需要 3 个参数。请实现函数 partial，调用之后满足如下条件：</span><br><span class="line">1、返回一个函数 result，该函数接受一个参数</span><br><span class="line">2、执行 result(str3) ，返回的结果与 fn(str1, str2, str3) 一致</span><br><span class="line"></span><br><span class="line">输入：var sayIt = <span class="keyword">function</span>(greeting, name, punctuation) &#123;     <span class="built_in">return</span> greeting + <span class="string">&#x27;, &#x27;</span> + name + (punctuation || <span class="string">&#x27;!&#x27;</span>); &#125;;  partial(sayIt, <span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;Ellie&#x27;</span>)(<span class="string">&#x27;!!!&#x27;</span>);</span><br><span class="line">输出：Hello, Ellie!!!</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">partial</span>(<span class="params">fn, str1, str2</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">result</span>(<span class="params">str3</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> fn.<span class="title function_">call</span>(<span class="variable language_">this</span>, str1, str2, str3);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="24"><a href="#24" class="headerlink" title="24."></a>24.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 将函数 fn 的执行上下文改为 obj 对象</span><br><span class="line"> *</span><br><span class="line"> * 输入：<span class="function"><span class="title">function</span></span> () &#123;<span class="built_in">return</span> this.greeting + <span class="string">&#x27;, &#x27;</span> + this.name + <span class="string">&#x27;!!!&#x27;</span>;&#125;, &#123;greeting: <span class="string">&#x27;Hello&#x27;</span>, name: <span class="string">&#x27;Rebecca&#x27;</span>&#125;</span><br><span class="line"> * 输出：Hello, Rebecca!!!</span><br><span class="line"> *</span><br><span class="line"> * 在JavaScript中，函数是一种对象，其上下文是可以变化的，对应的，函数内的this也是可以变化的，函数可以作为一个对象的方法，也可以同时作为另一个对象的方法，</span><br><span class="line"> * 可以通过Function对象中的call或者apply方法来修改函数的上下文，函数中的this指针将被替换为call或者apply的第一个参数。</span><br><span class="line"> * 将函数 fn 的执行上下文改为 obj 对象，只需要将obj作为call或者apply的第一个参数传入即可。</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">speak</span>(<span class="params">fn, obj</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> fn.<span class="title function_">call</span>(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="25"><a href="#25" class="headerlink" title="25."></a>25.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 将数组 arr 中的元素作为调用函数 fn 的参数</span><br><span class="line"> *</span><br><span class="line"> * 输入：<span class="keyword">function</span> (greeting, name, punctuation) &#123;<span class="built_in">return</span> greeting + <span class="string">&#x27;, &#x27;</span> + name + (punctuation || <span class="string">&#x27;!&#x27;</span>);&#125;, [<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;Ellie&#x27;</span>, <span class="string">&#x27;!&#x27;</span>]</span><br><span class="line"> * 输出：Hello, Ellie!</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">argsAsArray</span>(<span class="params">fn, arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="26"><a href="#26" class="headerlink" title="26."></a>26.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 判断 val1 和 val2 是否完全等同</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isObject</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> obj === <span class="string">&quot;object&quot;</span> &amp;&amp; obj == <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">identity</span>(<span class="params">val1, val2</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">isObject</span>(val1) || !<span class="title function_">isObject</span>(val2)) &#123;</span><br><span class="line">    <span class="keyword">return</span> val1 === val2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (val1 === val2) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> val1) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="title function_">isObject</span>(val1[k], <span class="title function_">val2</span>(key));</span><br><span class="line">    <span class="keyword">if</span> (!res) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="27"><a href="#27" class="headerlink" title="27."></a>27.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 修改 js 代码中 parseInt 的调用方式，使之通过全部测试用例</span><br><span class="line"> *</span><br><span class="line"> * 输入：<span class="string">&#x27;12&#x27;</span></span><br><span class="line"> * 输出：12</span><br><span class="line"> *</span><br><span class="line"> * 输入：<span class="string">&#x27;12px&#x27;</span></span><br><span class="line"> * 输出：12</span><br><span class="line"> *</span><br><span class="line"> * 输入：<span class="string">&#x27;0x12&#x27;</span></span><br><span class="line"> * 输出：0</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">parse2Int</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">parseInt</span>(num, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="28"><a href="#28" class="headerlink" title="28."></a>28.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 查找两个节点的最近的一个共同父节点，可以包括节点自身</span><br><span class="line"> *</span><br><span class="line"> * 输入描述：oNode1 和 oNode2 在同一文档中，且不会为相同的节点</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">commonParentNode</span>(<span class="params">oNode1, oNode2</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (oNode1.<span class="title function_">contains</span>(oNode2)) &#123;</span><br><span class="line">    <span class="keyword">return</span> oNode1;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">commonParentNode</span>(oNode1.<span class="property">parentNode</span>, oNode2);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="29"><a href="#29" class="headerlink" title="29."></a>29.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 根据包名，在指定空间中创建对象</span><br><span class="line"> *</span><br><span class="line"> * 输入：namespace(&#123;a: &#123;<span class="built_in">test</span>: 1, b: 2&#125;&#125;, <span class="string">&#x27;a.b.c.d&#x27;</span>)</span><br><span class="line"> * 输出：&#123;a: &#123;<span class="built_in">test</span>: 1, b: &#123;c: &#123;d: &#123;&#125;&#125;&#125;&#125;&#125;</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">namespace</span>(<span class="params">oNamespace, sPackage</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> arr = sPackage.<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> tmp = oNamespace;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> arr) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] <span class="keyword">in</span> oNamespace) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> oNamespace[arr[i]] !== <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">        oNamespace[arr[i]] = &#123;&#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      oNamespace[arr[i]] = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    oNamespace = oNamespace[arr[i]];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="30"><a href="#30" class="headerlink" title="30."></a>30.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 封装函数 f，使 f 的 this 指向指定的对象</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bindThis</span>(<span class="params">f, oTarget</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> f.<span class="title function_">bind</span>(oTarget);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bindThis</span>(<span class="params">f, oTarget</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    f.<span class="title function_">call</span>(oTarget, <span class="variable language_">arguments</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="31"><a href="#31" class="headerlink" title="31."></a>31.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">获取 url 中的参数</span><br><span class="line">1. 指定参数名称，返回该参数的值 或者 空字符串</span><br><span class="line">2. 不指定参数名称，返回全部的参数对象 或者 &#123;&#125;</span><br><span class="line">3. 如果存在多个同名参数，则返回数组</span><br><span class="line"></span><br><span class="line">输入：http://www.nowcoder.com?key=1&amp;key=2&amp;key=3&amp;<span class="built_in">test</span>=4<span class="comment">#hehe key</span></span><br><span class="line">输出：[1, 2, 3]</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回的是字符串 -- 错误❌</span></span><br><span class="line"><span class="comment">function getUrlParam(sUrl, sKey) &#123;</span></span><br><span class="line"><span class="comment">    var params = sUrl.split(&#x27;?&#x27;)[1].split(&#x27;#&#x27;)[0]</span></span><br><span class="line"><span class="comment">    var _url = new URLSearchParams(params);</span></span><br><span class="line"><span class="comment">    var obj = &#123;&#125;;</span></span><br><span class="line"><span class="comment">    for(let pair of _url.entries()) &#123;</span></span><br><span class="line"><span class="comment">        if(obj[pair[0]] === void 0)&#123;</span></span><br><span class="line"><span class="comment">            obj[pair[0]] = pair[1]</span></span><br><span class="line"><span class="comment">        &#125;else&#123;</span></span><br><span class="line"><span class="comment">            obj[pair[0]] = [].concat(obj[pair[0]],pair[1])</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">     &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    return sKey === void 0 ? obj : obj[sKey] || &#x27;&#x27;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getUrlParam</span>(<span class="params">sUrl, sKey</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> params = sUrl.<span class="title function_">split</span>(<span class="string">&quot;?&quot;</span>)[<span class="number">1</span>].<span class="title function_">split</span>(<span class="string">&quot;#&quot;</span>)[<span class="number">0</span>].<span class="title function_">split</span>(<span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">  params.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> [key, value] = item.<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (obj[key] === <span class="keyword">void</span> <span class="number">0</span>) &#123;</span><br><span class="line">      obj[key] = value;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      obj[key] = [].<span class="title function_">concat</span>(obj[key], value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> sKey === <span class="keyword">void</span> <span class="number">0</span> ? obj : obj[sKey] || <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="32"><a href="#32" class="headerlink" title="32."></a>32.</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 冒泡排序</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; n - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (a[j] &gt; a[j + <span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="keyword">let</span> temp = a[j];</span><br><span class="line">      a[j] = a[j + <span class="number">1</span>];</span><br><span class="line">      a[j + <span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>面试题5：前端简单编程题</title>
    <url>/2022/01/06/%E9%9D%A2%E8%AF%95%E9%A2%98/%E9%9D%A2%E8%AF%95%E9%A2%985%EF%BC%9A%E5%89%8D%E7%AB%AF%E7%AE%80%E5%8D%95%E7%BC%96%E7%A8%8B%E9%A2%98/</url>
    <content><![CDATA[<h3 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 输入一个int型的正整数，计算出该int型数据在内存中存储时1的个数。</span><br><span class="line"> *</span><br><span class="line"> * 输入描述： 输入一个整数（int类型）</span><br><span class="line"> * 输出描述： 这个数转换成2进制后，输出1的个数</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">parseInt</span>(num).<span class="title function_">toString</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="title function_">fn</span>(<span class="title function_">readline</span>())</span><br><span class="line">  .<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">  .<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">i</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">      count++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count);</span><br></pre></td></tr></table></figure>

<h3 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 有这样一道智力题：“某商店规定：三个空汽水瓶可以换一瓶汽水。小张手上有十个空汽水瓶，她最多可以换多少瓶汽水喝？”</span><br><span class="line">答案是5瓶，方法如下：先用9个空瓶子换3瓶汽水，喝掉3瓶满的，喝完以后4个空瓶子，用3个再换一瓶，喝掉这瓶满的，这时候剩2个空瓶子。</span><br><span class="line">然后你让老板先借给你一瓶汽水，喝掉这瓶满的，喝完以后用3个空瓶子换一瓶满的还给老板。如果小张手上有n个空汽水瓶，最多可以换多少瓶汽水喝？</span><br><span class="line"></span><br><span class="line">输入描述：输入文件最多包含10组测试数据，每个数据占一行，仅包含一个正整数n（1&lt;=n&lt;=100），表示小张手上的空汽水瓶数。n=0表示输入结束，你的程序不应当处理这一行。</span><br><span class="line">输出描述：对于每组测试数据，输出一行，表示最多可以喝的汽水瓶数。如果一瓶也喝不到，输出0。</span><br><span class="line"></span><br><span class="line">输入：</span><br><span class="line">3</span><br><span class="line">10</span><br><span class="line">81</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">1</span><br><span class="line">5</span><br><span class="line">40</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span> || n == <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (n &gt; <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fn</span>(n - <span class="number">2</span>) + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ((n = <span class="title function_">readline</span>())) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(n));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 斐波那契数列</span><br><span class="line"> * 有一只兔子，从出生后第3个月起每个月都生一只兔子，小兔子长到第三个月后每个月又生一只兔子，假如兔子都不死，问每个月的兔子总数为多少？</span><br><span class="line"> *</span><br><span class="line"> * 输入描述：输入int型表示month</span><br><span class="line"> * 输出描述：输出兔子总数int型</span><br><span class="line"> *</span><br><span class="line"> * 输入：9</span><br><span class="line"> * 输出：34</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">month</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (month == <span class="number">1</span> || month == <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fn</span>(month - <span class="number">1</span>) + <span class="title function_">fn</span>(month - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ((month = <span class="title function_">readline</span>())) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(month));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> *</span><br><span class="line">输入一个表达式（用字符串表示），求这个表达式的值。</span><br><span class="line">保证字符串中的有效字符包括[‘0’-‘9’],‘+’,‘-’, ‘*’,‘/’ ,‘(’， ‘)’,‘[’, ‘]’,‘&#123;’ ,‘&#125;’。且表达式一定合法。</span><br><span class="line"></span><br><span class="line">输入描述：输入一个算术表达式</span><br><span class="line">输出描述：得到计算结果</span><br><span class="line"></span><br><span class="line">输入：3+2*&#123;1+2*[-4/(8-6)+7]&#125;</span><br><span class="line">输出：25</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">eval</span>(<span class="title function_">readline</span>()));</span><br></pre></td></tr></table></figure>

<h3 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> *</span><br><span class="line">1       --------------   -1</span><br><span class="line"></span><br><span class="line">1  1  1      ---------------------      -1</span><br><span class="line"></span><br><span class="line">1  2  3  2  1     --------------  2</span><br><span class="line"></span><br><span class="line">1  3  6  7  6  3  1   -----------3</span><br><span class="line"></span><br><span class="line">1  4  10 16 19 16 10 4  1 ----------------2</span><br><span class="line"></span><br><span class="line">1  5  15 30 45 51 45 30 15 5 1   ----------4</span><br><span class="line"></span><br><span class="line">1  6  21 51 90 ... ----------------2</span><br><span class="line"></span><br><span class="line">1  7  28 ...   ----------3</span><br><span class="line"></span><br><span class="line">规律：</span><br><span class="line">//当n&lt;3时，没有偶数，输出-1；</span><br><span class="line">//当n为奇数时，第一个偶数位置在第二，输出2；</span><br><span class="line">//当n为偶数且能被4整除时，第一个偶数位置在第三，输出3；</span><br><span class="line">//当n为偶数但不能被4整除时，偶数位置在第四，输出4</span><br><span class="line"></span><br><span class="line">以上三角形的数阵，第一行只有一个数1，以下每行的每个数，是恰好是它上面的数，左上角数到右上角的数，3个数之和（如果不存在某个数，认为该数就是0）。</span><br><span class="line">求第n行第一个偶数出现的位置。如果没有偶数，则输出-1。例如输入3,则输出2，输入4则输出3。</span><br><span class="line"></span><br><span class="line">输入n(n &lt;= 1000000000)</span><br><span class="line">本题有多组输入数据，输入到文件末尾，请使用<span class="keyword">while</span>(cin&gt;&gt;)等方式读入</span><br><span class="line"></span><br><span class="line">输入描述：输入一个int整数</span><br><span class="line">输出描述：输出返回的int值</span><br><span class="line"></span><br><span class="line">输入：</span><br><span class="line">4</span><br><span class="line">2</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">3</span><br><span class="line">-1</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (num &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (num % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (num % <span class="number">4</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ((n = <span class="title function_">readline</span>())) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(n));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6"><a href="#6" class="headerlink" title="6."></a>6.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 完全数（Perfect number），又称完美数或完备数，是一些特殊的自然数。</span><br><span class="line">它所有的真因子（即除了自身以外的约数）的和（即因子函数），恰好等于它本身。</span><br><span class="line"></span><br><span class="line">例如：28，它有约数1、2、4、7、14、28，除去它本身28外，其余5个数相加，1+2+4+7+14=28。s</span><br><span class="line">输入n，请输出n以内(含n)完全数的个数。计算范围, 0 &lt; n &lt;= 500000</span><br><span class="line">本题输入含有多组样例。</span><br><span class="line"></span><br><span class="line">输入描述：输入一个数字n</span><br><span class="line">输出描述：输出不超过n的完全数的个数</span><br><span class="line"></span><br><span class="line">输入：</span><br><span class="line">1000</span><br><span class="line">7</span><br><span class="line">100</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">3</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isJoin</span>(<span class="params">val</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(val);</span><br><span class="line">  <span class="keyword">var</span> sum = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>; i &lt;= num; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (val % i === <span class="number">0</span>) &#123;</span><br><span class="line">      sum += i;</span><br><span class="line">      sum += val / i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i * i === val) &#123;</span><br><span class="line">      sum -= i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum === val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> arr = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isJoin</span>(i)) &#123;</span><br><span class="line">      arr.<span class="title function_">push</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="property">length</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ((n = <span class="title function_">readline</span>())) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(n));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7"><a href="#7" class="headerlink" title="7."></a>7.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> *</span><br><span class="line">任给一个数组，元素有20M，1T，300G之类的，其中1T=1000G，1G=1000M</span><br><span class="line">按从小到大输出结果</span><br><span class="line">例如：输入：3</span><br><span class="line">20M</span><br><span class="line">1T</span><br><span class="line">300G</span><br><span class="line">输出：</span><br><span class="line">20M</span><br><span class="line">300G</span><br><span class="line">1T</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getStorage</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> a = [];</span><br><span class="line">  arr.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> s = item.<span class="title function_">substr</span>(-<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">let</span> k = item.<span class="title function_">substr</span>(<span class="number">0</span>, item.<span class="property">length</span> - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="string">&quot;M&quot;</span>) &#123;</span><br><span class="line">      a.<span class="title function_">push</span>(k * <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s == <span class="string">&quot;G&quot;</span>) &#123;</span><br><span class="line">      a.<span class="title function_">push</span>(k * <span class="number">1000</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s == <span class="string">&quot;T&quot;</span>) &#123;</span><br><span class="line">      a.<span class="title function_">push</span>(k * <span class="number">1000000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  a.<span class="title function_">sort</span>(<span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">  <span class="keyword">var</span> b = a.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">param</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (param &lt; <span class="number">1000</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> param + <span class="string">&quot;M&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (param / <span class="number">1000</span> &lt; <span class="number">1000</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> param / <span class="number">1000</span> + <span class="string">&quot;G&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> param / <span class="number">1000000</span> + <span class="string">&quot;T&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getStorage</span>([<span class="string">&quot;50M&quot;</span>, <span class="string">&quot;399G&quot;</span>, <span class="string">&quot;20M&quot;</span>, <span class="string">&quot;1T&quot;</span>, <span class="string">&quot;300G&quot;</span>]);</span><br></pre></td></tr></table></figure>

<h3 id="8"><a href="#8" class="headerlink" title="8."></a>8.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">任给一个数组，其中只有一个元素是单独出现，其他是成对出现，输出单独的元素。</span><br><span class="line">例如： 输入： [2，2，1，1，4，4，7]</span><br><span class="line">输出：7</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> arr) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!obj.<span class="title function_">hasOwnProperty</span>(arr[i])) &#123;</span><br><span class="line">      obj[arr[i]] = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      obj[arr[i]] += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj[i] == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(a));</span><br></pre></td></tr></table></figure>

<h3 id="9"><a href="#9" class="headerlink" title="9."></a>9.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 给定一个只包含大写英文字母的字符串S，要求你给出对S重新排列的所有不相同的排列数。</span><br><span class="line">如：S为ABA，则不同的排列有ABA、AAB、BAA三种。</span><br><span class="line"></span><br><span class="line">解题思路</span><br><span class="line">先把每个字符当成唯一出现过一次，计算所有排列数；再统计重复出现的字母，除去每个字母的排列次数</span><br><span class="line"></span><br><span class="line">输入：ABCDEFGHHA</span><br><span class="line">输出：907200</span><br><span class="line"></span><br><span class="line">输入：ABA</span><br><span class="line">输出：3</span><br><span class="line"></span><br><span class="line">输入：A</span><br><span class="line">输出：1</span><br><span class="line"></span><br><span class="line">输入：AA</span><br><span class="line">输出：1</span><br><span class="line"></span><br><span class="line">输入：AAAAAA</span><br><span class="line">输出：1</span><br><span class="line"></span><br><span class="line">输入：AAAAAB</span><br><span class="line">输出：6</span><br><span class="line"></span><br><span class="line">输入：ABC</span><br><span class="line">输出：6</span><br><span class="line"></span><br><span class="line">输入：ABCD</span><br><span class="line">输出：24</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fn</span>(n - <span class="number">1</span>) * n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getJieCheng</span>(<span class="params">S</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> arr = S.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">  arr.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">param</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!obj.<span class="title function_">hasOwnProperty</span>(param)) &#123;</span><br><span class="line">      obj[param] = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      obj[param] += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    obj[i] = <span class="title function_">fn</span>(obj[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line">  <span class="keyword">var</span> sum = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj[i] !== <span class="number">1</span>) &#123;</span><br><span class="line">      sum *= obj[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(sum, <span class="title function_">fn</span>(S.<span class="property">length</span>));</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fn</span>(S.<span class="property">length</span>) / sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getJieCheng</span>(<span class="string">&quot;ABCDEFGHHA&quot;</span>); <span class="comment">//907200</span></span><br></pre></td></tr></table></figure>

<h3 id="9-1"><a href="#9-1" class="headerlink" title="9."></a>9.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 正整数A和正整数B 的最小公倍数是指 能被A和B整除的最小的正整数值，设计一个算法，求输入A和B的最小公倍数。</span><br><span class="line"> *</span><br><span class="line"> * 输入：5 7</span><br><span class="line"> * 输出：35</span><br><span class="line"> *</span><br><span class="line"> * 解题思路：最小公倍数=两数相乘/最大公约数</span><br><span class="line"> * 最大公约数可以通过辗转相除法来做</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (a &lt; b) &#123;</span><br><span class="line">    <span class="keyword">var</span> temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (a % b == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fn</span>(b, a % b);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getResult</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> arr = n.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> (arr[<span class="number">0</span>] * arr[<span class="number">1</span>]) / <span class="title function_">fn</span>(arr[<span class="number">0</span>], arr[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getResult</span>(<span class="title function_">readline</span>()));</span><br></pre></td></tr></table></figure>

<h3 id="10"><a href="#10" class="headerlink" title="10."></a>10.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">输入一个int型整数，按照从右向左的阅读顺序，返回一个不含重复数字的新的整数。</span><br><span class="line">保证输入的整数最后一位不是0。</span><br><span class="line"></span><br><span class="line">输入：输入一个int型整数</span><br><span class="line">输出：按照从右向左的阅读顺序，返回一个不含重复数字的新的整数</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> arr = n.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">reverse</span>();</span><br><span class="line">  <span class="keyword">var</span> temp = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> newArr = [];</span><br><span class="line">  arr.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!temp.<span class="title function_">hasOwnProperty</span>(value)) &#123;</span><br><span class="line">      temp[<span class="string">&quot;A_&quot;</span> + value] = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      temp[<span class="string">&quot;A_&quot;</span> + value] += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> temp) &#123;</span><br><span class="line">    newArr.<span class="title function_">push</span>(key.<span class="title function_">split</span>(<span class="string">&quot;_&quot;</span>)[<span class="number">1</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newArr.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(<span class="title function_">readline</span>()));</span><br></pre></td></tr></table></figure>

<h3 id="11"><a href="#11" class="headerlink" title="11."></a>11.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"></span><br><span class="line">说明：给定一个编码字符，按编码规则进行解码，输出字符串</span><br><span class="line">编码规则是count[letter]，将letter的内容count次输出， count是0或正整数，letter是区分大小写的纯字母</span><br><span class="line">示例：</span><br><span class="line">const s = <span class="string">&#x27;3[a]2[bc]&#x27;</span>; decodeString(s); // 返回<span class="string">&#x27;aaabcbc&#x27;</span></span><br><span class="line">const s = <span class="string">&#x27;3[a2[c]]&#x27;</span>; decodeString(s); // 返回<span class="string">&#x27;accaccacc&#x27;</span></span><br><span class="line">const s = <span class="string">&#x27;2[abc]3[cd]ef&#x27;</span>; decodeString(s); // 返回<span class="string">&#x27;abcabccdcdcdef&#x27;</span> */</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法1:</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">decodeString</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> arr = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> s = str[i];</span><br><span class="line">    <span class="keyword">if</span> (s !== <span class="string">&quot;]&quot;</span>) &#123;</span><br><span class="line">      arr.<span class="title function_">push</span>(s);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> count = [];</span><br><span class="line">      <span class="keyword">let</span> popStr = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="keyword">let</span> loopArr = [];</span><br><span class="line">      <span class="keyword">let</span> loopStr = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="keyword">while</span> ((popStr = arr.<span class="title function_">pop</span>()) !== <span class="string">&quot;[&quot;</span>) &#123;</span><br><span class="line">        loopArr.<span class="title function_">unshift</span>(popStr);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> (arr[arr.<span class="property">length</span> - <span class="number">1</span>] &gt;= <span class="number">0</span> &amp;&amp; arr[arr.<span class="property">length</span> - <span class="number">1</span>] &lt;= <span class="number">9</span>) &#123;</span><br><span class="line">        count.<span class="title function_">unshift</span>(arr.<span class="title function_">pop</span>());</span><br><span class="line">      &#125;</span><br><span class="line">      count = <span class="built_in">parseInt</span>(count.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>));</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; count; j++) &#123;</span><br><span class="line">        loopStr += loopArr.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      arr.<span class="title function_">push</span>(...loopStr.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法2:</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">compareVersion</span>(<span class="params">version1, version2</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> newVersion1 =</span><br><span class="line">    <span class="string">`<span class="subst">$&#123;version1&#125;</span>`</span>.<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>).<span class="property">length</span> &lt; <span class="number">3</span></span><br><span class="line">      ? <span class="string">`<span class="subst">$&#123;version1&#125;</span>`</span>.<span class="title function_">concat</span>(<span class="string">&quot;.0&quot;</span>)</span><br><span class="line">      : <span class="string">`<span class="subst">$&#123;version1&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">const</span> newVersion2 =</span><br><span class="line">    <span class="string">`<span class="subst">$&#123;version2&#125;</span>`</span>.<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>).<span class="property">length</span> &lt; <span class="number">3</span></span><br><span class="line">      ? <span class="string">`<span class="subst">$&#123;version2&#125;</span>`</span>.<span class="title function_">concat</span>(<span class="string">&quot;.0&quot;</span>)</span><br><span class="line">      : <span class="string">`<span class="subst">$&#123;version2&#125;</span>`</span>;</span><br><span class="line">  <span class="comment">//计算版本号大小,转化大小</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">toNum</span>(<span class="params">a</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> c = a.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> num_place = [<span class="string">&quot;&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;00&quot;</span>, <span class="string">&quot;000&quot;</span>, <span class="string">&quot;0000&quot;</span>],</span><br><span class="line">      r = num_place.<span class="title function_">reverse</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; c.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> len = c[i].<span class="property">length</span>;</span><br><span class="line">      c[i] = r[len] + c[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//检测版本号是否需要更新</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">checkPlugin</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> numA = <span class="title function_">toNum</span>(a);</span><br><span class="line">    <span class="keyword">const</span> numB = <span class="title function_">toNum</span>(b);</span><br><span class="line">    <span class="keyword">return</span> numA &gt; numB ? <span class="number">1</span> : numA &lt; numB ? -<span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">checkPlugin</span>(newVersion1, newVersion2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">compareVersion</span>(<span class="string">&quot;0.1&quot;</span>, <span class="string">&quot;1.1.1&quot;</span>); <span class="comment">// -1</span></span><br><span class="line"><span class="title function_">compareVersion</span>(<span class="string">&quot;13.37&quot;</span>, <span class="string">&quot;1.2 &quot;</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="title function_">compareVersion</span>(<span class="string">&quot;1.1&quot;</span>, <span class="string">&quot;1.1.0&quot;</span>); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>

<h3 id="12-数组比较"><a href="#12-数组比较" class="headerlink" title="12. 数组比较"></a>12. 数组比较</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">compareVersion</span>(<span class="params">version1, version2</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> arr1 = version1.<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> arr2 = version2.<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> len1 = arr1.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">let</span> len2 = arr2.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">let</span> length = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (len1 &lt;= len2) &#123;</span><br><span class="line">    length = len1;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    length = len2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 	如果两者一样长</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr1[i] &gt; arr2[i]) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr1[i] &lt; arr2[i]) &#123;</span><br><span class="line">      <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//   如果a的位数多，比较第三位起</span></span><br><span class="line">  <span class="keyword">if</span> (len1 &gt; len2) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = length; i &lt; len1; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr1[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (len1 &lt; len2) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = length; i &lt; len2; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr2[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//   全相等</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="阿里面试真题"><a href="#阿里面试真题" class="headerlink" title="阿里面试真题"></a>阿里面试真题</h2><h3 id="13-写出下面代码的运行结果"><a href="#13-写出下面代码的运行结果" class="headerlink" title="13.写出下面代码的运行结果"></a>13.写出下面代码的运行结果</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0,1,2   【同时输出】</span></span><br></pre></td></tr></table></figure>

<h3 id="14-写出下面代码的运行结果"><a href="#14-写出下面代码的运行结果" class="headerlink" title="14.写出下面代码的运行结果"></a>14.写出下面代码的运行结果</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">obj.<span class="property">x</span> = <span class="number">1</span>;</span><br><span class="line">obj.<span class="property">fn</span> = fn;</span><br><span class="line">obj.<span class="property">fn</span>.<span class="title function_">apply</span>(); <span class="comment">//0</span></span><br><span class="line">obj.<span class="property">fn</span>.<span class="title function_">apply</span>(obj); <span class="comment">//1</span></span><br></pre></td></tr></table></figure>

<h3 id="15-写出下面代码的运行结果"><a href="#15-写出下面代码的运行结果" class="headerlink" title="15.写出下面代码的运行结果"></a>15.写出下面代码的运行结果</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">val</span>: <span class="number">11</span>,</span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="property">val</span> = <span class="number">22</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">//&#123;val:22&#125;</span></span><br><span class="line">obj = <span class="number">4</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">//报错：Uncaught TypeError: Assignment to constant variable.</span></span><br></pre></td></tr></table></figure>

<h3 id="16-写出下面代码的运行结果"><a href="#16-写出下面代码的运行结果" class="headerlink" title="16.写出下面代码的运行结果"></a>16.写出下面代码的运行结果</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i++);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f1 = <span class="title class_">Foo</span>(),</span><br><span class="line">  f2 = <span class="title class_">Foo</span>();</span><br><span class="line"><span class="title function_">f1</span>(); <span class="comment">//0</span></span><br><span class="line"><span class="title function_">f1</span>(); <span class="comment">//1</span></span><br><span class="line"><span class="title function_">f2</span>(); <span class="comment">//0</span></span><br></pre></td></tr></table></figure>

<h3 id="16-合并两个升序数组"><a href="#16-合并两个升序数组" class="headerlink" title="16.合并两个升序数组"></a>16.合并两个升序数组</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">input: [1,3,5] [2,4,6]</span><br><span class="line">output: [1,2,3,4,5,6]</span><br><span class="line"></span><br><span class="line">input: [1,3,5, 6, 7] [2,4,6]</span><br><span class="line">output: [1,2,3,4,5,6, 6, 7]</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">args1, args2</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">concat</span>.<span class="title function_">apply</span>([], arg1);</span><br><span class="line">  <span class="keyword">let</span> res1 = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">concat</span>.<span class="title function_">apply</span>(res, arg2);</span><br><span class="line">  res1.<span class="title function_">sort</span>(<span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> res1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="17"><a href="#17" class="headerlink" title="17."></a>17.</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;test&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;hello&quot;</span>,</span><br><span class="line">    <span class="attr">say</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      name = <span class="string">&quot;wangwu&quot;</span>;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>); <span class="comment">// &#x27;hello&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">  person.<span class="title function_">say</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// window对象</span></span><br></pre></td></tr></table></figure>

<h3 id="18"><a href="#18" class="headerlink" title="18."></a>18.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">const a = [1, 2, 3, 4, 5];</span><br><span class="line">// 请实现 multiply 方法</span><br><span class="line">a.multiply();</span><br><span class="line">console.log(a); // 输出 [1, 2, 3, 4, 5, 1, 4, 9, 16, 25]</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">multiply</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">push</span>(...<span class="variable language_">this</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> v * v));</span><br><span class="line">&#125;;</span><br><span class="line">a.<span class="title function_">multiply</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br></pre></td></tr></table></figure>

<h3 id="19-写出下面代码的运行结果"><a href="#19-写出下面代码的运行结果" class="headerlink" title="19.写出下面代码的运行结果"></a>19.写出下面代码的运行结果</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">next</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">g</span>(<span class="params">next</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">h</span>(<span class="params">next</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>);</span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">compose</span>(<span class="params">...funcs</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">compose</span>(f, g, h)(); <span class="comment">// 输出 1,3,5,6,4,2</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>面试题6：前端中等编程题--无答案</title>
    <url>/2022/01/06/%E9%9D%A2%E8%AF%95%E9%A2%98/%E9%9D%A2%E8%AF%95%E9%A2%986%EF%BC%9A%E5%89%8D%E7%AB%AF%E4%B8%AD%E7%AD%89%E7%BC%96%E7%A8%8B%E9%A2%98--%E6%97%A0%E7%AD%94%E6%A1%88/</url>
    <content><![CDATA[<h3 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 给定一个正整数N代表火车数量，0&lt;N&lt;10，接下来输入火车入站的序列，一共N辆火车，每辆火车以数字1-9编号，火车站只有一个方向进出，同时停靠在火车站的列车中，只有后进站的出站了，先进站的才能出站。</span><br><span class="line">要求输出所有火车出站的方案，以字典序排序输出。</span><br><span class="line"></span><br><span class="line">输入描述：有多组测试用例，每一组第一行输入一个正整数N（0</span><br><span class="line">输出描述：输出以字典序从小到大排序的火车出站序列号，每个编号以空格隔开，每个输出序列换行，具体见sample。</span><br><span class="line"></span><br><span class="line">输入：</span><br><span class="line">3</span><br><span class="line">1 2 3</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">1 2 3</span><br><span class="line">1 3 2</span><br><span class="line">2 1 3</span><br><span class="line">2 3 1</span><br><span class="line">3 2 1</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">第一种方案：1进、1出、2进、2出、3进、3出</span><br><span class="line">第二种方案：1进、1出、2进、3进、3出、2出</span><br><span class="line">第三种方案：1进、2进、2出、1出、3进、3出</span><br><span class="line">第四种方案：1进、2进、2出、3进、3出、1出</span><br><span class="line">第五种方案：1进、2进、3进、3出、2出、1出</span><br><span class="line">请注意，[3,1,2]这个序列是不可能实现的。</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<h3 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> *</span><br><span class="line">现在IPV4下用一个32位无符号整数来表示，一般用点分方式来显示，点将IP地址分成4个部分，每个部分为8位，</span><br><span class="line">表示成一个无符号整数（因此不需要用正号出现），如10.137.17.1，是我们非常熟悉的IP地址，</span><br><span class="line">一个IP地址串中没有空格出现（因为要表示成一个32数字）。</span><br><span class="line">现在需要你用程序来判断IP是否合法。</span><br><span class="line">注意本题有多组样例输入。</span><br><span class="line"></span><br><span class="line">输入描述：输入一个ip地址，保证是xx.xx.xx.xx的形式（xx为整数）</span><br><span class="line">输出描述：返回判断的结果YES or NO</span><br><span class="line"></span><br><span class="line">输入：</span><br><span class="line">10.138.15.1</span><br><span class="line">255.0.0.255</span><br><span class="line">255.255.255.1000</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">YES</span><br><span class="line">YES</span><br><span class="line">NO</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<h3 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 明明想在学校中请一些同学一起做一项问卷调查，为了实验的客观性，他先用计算机生成了N个1到1000之间的随机整数（N≤1000），</span><br><span class="line"> * 对于其中重复的数字，只保留一个，把其余相同的数去掉，不同的数对应着不同的学生的学号。然后再把这些数从小到大排序，</span><br><span class="line"> * 按照排好的顺序去找同学做调查。请你协助明明完成“去重”与“排序”的工作(同一个测试用例里可能会有多组数据，希望大家能正确处理)。</span><br><span class="line">注：测试用例保证输入参数的正确性，答题者无需验证。测试用例不止一组。</span><br><span class="line">当没有新的输入时，说明输入结束。</span><br><span class="line"></span><br><span class="line">输入描述：注意：输入可能有多组数据。每组数据都包括多行，第一行先输入随机整数的个数N，接下来的N行再输入相应个数的整数。</span><br><span class="line">具体格式请看下面的<span class="string">&quot;示例&quot;</span>。</span><br><span class="line"></span><br><span class="line">输出描述：返回多行，处理后的结果</span><br><span class="line"></span><br><span class="line">输入：</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">2</span><br><span class="line">1</span><br><span class="line">11</span><br><span class="line">10</span><br><span class="line">20</span><br><span class="line">40</span><br><span class="line">32</span><br><span class="line">67</span><br><span class="line">40</span><br><span class="line">20</span><br><span class="line">89</span><br><span class="line">300</span><br><span class="line">400</span><br><span class="line">15</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">10</span><br><span class="line">15</span><br><span class="line">20</span><br><span class="line">32</span><br><span class="line">40</span><br><span class="line">67</span><br><span class="line">89</span><br><span class="line">300</span><br><span class="line">400</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">样例输入解释：</span><br><span class="line">样例有两组测试</span><br><span class="line">第一组是3个数字，分别是：2，2，1。</span><br><span class="line">第二组是11个数字，分别是：10，20，40，32，67，40，20，89，300，400，15。</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<h3 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 计算一个数字的立方根，不使用库函数。</span><br><span class="line">保留一位小数。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输入描述：待求解参数，为double类型（一个实数）</span><br><span class="line">输出描述：输入参数的立方根。保留一位小数。</span><br><span class="line"></span><br><span class="line">输入：216</span><br><span class="line">输出：6.0</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<h3 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> 功能:等差数列 2，5，8，11，14。。。。</span><br><span class="line">输入:正整数N &gt;0</span><br><span class="line">输出:求等差数列前N项和</span><br><span class="line">本题为多组输入，请使用<span class="keyword">while</span>(cin&gt;&gt;)等形式读取数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输入描述：输入一个正整数。</span><br><span class="line">输出描述：输出一个相加后的整数。</span><br><span class="line"></span><br><span class="line">输入：2</span><br><span class="line">输出：7</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<h3 id="6"><a href="#6" class="headerlink" title="6."></a>6.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 输出7有关数字的个数，包括7的倍数，</span><br><span class="line"> * 还有包含7的数字（如17，27，37...70，71，72，73...）的个数</span><br><span class="line"> * （一组测试用例里可能有多组数据，请注意处理）</span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> * 输入描述：一个正整数N。(N不大于30000)</span><br><span class="line"> * 输出描述：不大于N的与7有关的数字个数，例如输入20，与7有关的数字包括7,14,17.</span><br><span class="line"></span><br><span class="line">输入：</span><br><span class="line">20</span><br><span class="line">10</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">3</span><br><span class="line">1</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<h3 id="7"><a href="#7" class="headerlink" title="7."></a>7.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 分子为1的分数称为埃及分数。现输入一个真分数(分子比分母小的分数，叫做真分数)，请将该分数分解为埃及分数。如：8/11 = 1/2+1/5+1/55+1/110。</span><br><span class="line">注：真分数指分子小于分母的分数，分子和分母有可能gcd不为1！</span><br><span class="line">如有多个解，请输出任意一个。</span><br><span class="line">请注意本题含有多组样例输入！</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输入描述：输入一个真分数，String型</span><br><span class="line">输出描述：输出分解后的string</span><br><span class="line"></span><br><span class="line">输入：</span><br><span class="line">8/11</span><br><span class="line">2/4</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">1/2+1/5+1/55+1/110</span><br><span class="line">1/3+1/6</span><br><span class="line"></span><br><span class="line">描述：</span><br><span class="line">第二个样例直接输出1/2也是可以的</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<h3 id="8"><a href="#8" class="headerlink" title="8."></a>8.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"></span><br><span class="line">计算24点是一种扑克牌益智游戏，随机抽出4张扑克牌，通过加(+)，减(-)，乘(*), 除(/)四种运算法则计算得到整数24，本问题中，扑克牌通过如下字符或者字符串表示，其中，小写joker表示小王，大写JOKER表示大王：</span><br><span class="line"></span><br><span class="line">                   3 4 5 6 7 8 9 10 J Q K A 2 joker JOKER</span><br><span class="line"></span><br><span class="line">本程序要求实现：输入4张牌，输出一个算式，算式的结果为24点。</span><br><span class="line"></span><br><span class="line">详细说明：</span><br><span class="line">1.运算只考虑加减乘除运算，没有阶乘等特殊运算符号，友情提醒，整数除法要当心；</span><br><span class="line">2.牌面2~10对应的权值为2~10, J、Q、K、A权值分别为为11、12、13、1；</span><br><span class="line">3.输入4张牌为字符串形式，以一个空格隔开，首尾无空格；如果输入的4张牌中包含大小王，则输出字符串“ERROR”，表示无法运算；</span><br><span class="line">4.输出的算式格式为4张牌通过+ - * /四个运算符相连，中间无空格，4张牌出现顺序任意，只要结果正确；</span><br><span class="line">5.输出算式的运算顺序从左至右，不包含括号，如1+2+3*4的结果为24</span><br><span class="line">6.如果存在多种算式都能计算得出24，只需输出一种即可，如果无法得出24，则输出“NONE”表示无解。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输入描述：输入4张牌为字符串形式，以一个空格隔开，首尾无空格；</span><br><span class="line">输出描述：如果输入的4张牌中包含大小王，则输出字符串“ERROR”，表示无法运算；</span><br><span class="line"></span><br><span class="line">输入：A A A A</span><br><span class="line">输出：NONE</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>

<h3 id="9"><a href="#9" class="headerlink" title="9."></a>9.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 假设一个球从任意高度自由落下，每次落地后反跳回原高度的一半; 再落下, 求它在第5次落地时，共经历多少米?第5次反弹多高？</span><br><span class="line">最后的误差判断是小数点6位</span><br><span class="line"></span><br><span class="line">输入描述：输入起始高度，int型</span><br><span class="line">输出描述：分别输出第5次落地时，共经过多少米第5次反弹多高</span><br><span class="line"></span><br><span class="line">输入：1</span><br><span class="line">输出：</span><br><span class="line">2.875</span><br><span class="line">0.03125</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<h3 id="10"><a href="#10" class="headerlink" title="10."></a>10.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"></span><br><span class="line">子网掩码是用来判断任意两台计算机的IP地址是否属于同一子网络的根据。</span><br><span class="line">子网掩码与IP地址结构相同，是32位二进制数，其中网络号部分全为“1”和主机号部分全为“0”。利用子网掩码可以判断两台主机是否中同一子网中。</span><br><span class="line">若两台主机的IP地址分别与它们的子网掩码相“与”后的结果相同，则说明这两台主机在同一子网中。</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">I P 地址　 192.168.0.1</span><br><span class="line">子网掩码　 255.255.255.0</span><br><span class="line"></span><br><span class="line">转化为二进制进行运算：</span><br><span class="line"></span><br><span class="line">I P 地址　11010000.10101000.00000000.00000001</span><br><span class="line">子网掩码　11111111.11111111.11111111.00000000</span><br><span class="line"></span><br><span class="line">AND运算</span><br><span class="line">11000000.10101000.00000000.00000000</span><br><span class="line"></span><br><span class="line">转化为十进制后为：</span><br><span class="line">192.168.0.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">I P 地址　 192.168.0.254</span><br><span class="line">子网掩码　 255.255.255.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">转化为二进制进行运算：</span><br><span class="line"></span><br><span class="line">I P 地址　11010000.10101000.00000000.11111110</span><br><span class="line">子网掩码　11111111.11111111.11111111.00000000</span><br><span class="line"></span><br><span class="line">AND运算</span><br><span class="line">11000000.10101000.00000000.00000000</span><br><span class="line"></span><br><span class="line">转化为十进制后为：</span><br><span class="line">192.168.0.0</span><br><span class="line"></span><br><span class="line">通过以上对两台计算机IP地址与子网掩码的AND运算后，我们可以看到它运算结果是一样的。均为192.168.0.0，所以这二台计算机可视为是同一子网络。</span><br><span class="line"></span><br><span class="line">输入一个子网掩码以及两个ip地址，判断这两个ip地址是否是一个子网络。</span><br><span class="line">若IP地址或子网掩码格式非法则输出1，若IP1与IP2属于同一子网络输出0，若IP1与IP2不属于同一子网络输出2。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输入描述：输入子网掩码、两个ip地址</span><br><span class="line">输出描述：得到计算结果</span><br><span class="line"></span><br><span class="line">输入：</span><br><span class="line">255.255.255.0</span><br><span class="line">192.168.224.256</span><br><span class="line">192.168.10.4</span><br><span class="line">255.0.0.0</span><br><span class="line">193.194.202.15</span><br><span class="line">232.43.7.59</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<h3 id="11"><a href="#11" class="headerlink" title="11."></a>11.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">计算最少出列多少位同学，使得剩下的同学排成合唱队形</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line"></span><br><span class="line">N位同学站成一排，音乐老师要请其中的(N-K)位同学出列，使得剩下的K位同学排成合唱队形。</span><br><span class="line">合唱队形是指这样的一种队形：设K位同学从左到右依次编号为1，2…，K，他们的身高分别为T1，T2，…，TK，   则他们的身高满足存在i（1&lt;=i&lt;=K）使得T1&lt;T2&lt;......&lt;Ti-1&lt;Ti&gt;Ti+1&gt;......&gt;TK。</span><br><span class="line"></span><br><span class="line">你的任务是，已知所有N位同学的身高，计算最少需要几位同学出列，可以使得剩下的同学排成合唱队形。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注意不允许改变队列元素的先后顺序</span><br><span class="line">请注意处理多组输入输出！</span><br><span class="line"></span><br><span class="line">输入描述：整数N</span><br><span class="line">输出描述：最少需要几位同学出列</span><br><span class="line"></span><br><span class="line">输入：</span><br><span class="line">8</span><br><span class="line">186 186 150 200 160 130 197 200</span><br><span class="line">输出：</span><br><span class="line">4</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<h3 id="12"><a href="#12" class="headerlink" title="12."></a>12.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">题目描述：</span><br><span class="line"></span><br><span class="line">把m个同样的苹果放在n个同样的盘子里，允许有的盘子空着不放，问共有多少种不同的分法？（用K表示）5，1，1和1，5，1 是同一种分法。</span><br><span class="line"></span><br><span class="line">数据范围：0&lt;=m&lt;=10，1&lt;=n&lt;=10。</span><br><span class="line">本题含有多组样例输入。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输入描述：输入两个int整数</span><br><span class="line">输出描述：输出结果，int型</span><br><span class="line"></span><br><span class="line">输入：7 3</span><br><span class="line">输出：8</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<p>###13.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">输入int型数组，询问该数组能否分成两组，使得两组中各元素加起来的和相等，并且，所有5的倍数必须在其中一个组中，所有3的倍数在另一个组中（不包括5的倍数），能满足以上条件，输出<span class="literal">true</span>；不满足时输出<span class="literal">false</span>。</span><br><span class="line">本题含有多组样例输入。</span><br><span class="line"></span><br><span class="line">输入描述：第一行是数据个数，第二行是输入的数据</span><br><span class="line">输出描述：返回<span class="literal">true</span>或者<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">输入：</span><br><span class="line">4</span><br><span class="line">1 5 -5 1</span><br><span class="line">3</span><br><span class="line">3 5 8</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">第一个样例：</span><br><span class="line">第一组：5 -5 1</span><br><span class="line">第二组：1</span><br><span class="line">第二个样例：由于3和5不能放在同一组，所以不存在一种分法。</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<h3 id="14"><a href="#14" class="headerlink" title="14."></a>14.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">对字符串中的所有单词进行倒排。</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line"></span><br><span class="line">1、构成单词的字符只有26个大写或小写英文字母；</span><br><span class="line"></span><br><span class="line">2、非构成单词的字符均视为单词间隔符；</span><br><span class="line"></span><br><span class="line">3、要求倒排后的单词间隔符以一个空格表示；如果原字符串中相邻单词间有多个间隔符时，倒排转换后也只允许出现一个空格间隔符；</span><br><span class="line"></span><br><span class="line">4、每个单词最长20个字母；</span><br><span class="line"></span><br><span class="line">输入描述：输入一行以空格来分隔的句子</span><br><span class="line">输出描述：输出句子的逆序</span><br><span class="line"></span><br><span class="line">输入：I am a student</span><br><span class="line">输出：student a am I</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<h3 id="15"><a href="#15" class="headerlink" title="15."></a>15.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">题目描述</span><br><span class="line">若两个正整数的和为素数，则这两个正整数称之为“素数伴侣”，如2和5、6和13，它们能应用于通信加密。现在密码学会请你设计一个程序，从已有的N（N为偶数）个正整数中挑选出若干对组成“素数伴侣”，挑选方案多种多样，例如有4个正整数：2，5，6，13，如果将5和6分为一组中只能得到一组“素数伴侣”，而将2和5、6和13编组将得到两组“素数伴侣”，能组成“素数伴侣”最多的方案称为“最佳方案”，当然密码学会希望你寻找出“最佳方案”。</span><br><span class="line"></span><br><span class="line">输入:</span><br><span class="line"></span><br><span class="line">有一个正偶数N（N≤100），表示待挑选的自然数的个数。后面给出具体的数字，范围为[2,30000]。</span><br><span class="line"></span><br><span class="line">输出:</span><br><span class="line"></span><br><span class="line">输出一个整数K，表示你求得的“最佳方案”组成“素数伴侣”的对数。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输入说明：</span><br><span class="line">1 输入一个正偶数n</span><br><span class="line">2 输入n个整数</span><br><span class="line">注意：数据可能有多组</span><br><span class="line"></span><br><span class="line">输出说明：求得的“最佳方案”组成“素数伴侣”的对数。</span><br><span class="line"></span><br><span class="line">输入：</span><br><span class="line">4</span><br><span class="line">2 5 6 13</span><br><span class="line">2</span><br><span class="line">3 6</span><br><span class="line">输出：</span><br><span class="line">2</span><br><span class="line">0</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<h3 id="16"><a href="#16" class="headerlink" title="16."></a>16.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">功能:输入一个正整数，按照从小到大的顺序输出它的所有质因子（重复的也要列举）（如180的质因子为2 2 3 3 5 ）</span><br><span class="line"></span><br><span class="line">最后一个数后面也要有空格</span><br><span class="line"></span><br><span class="line">输入描述：输入一个long型整数</span><br><span class="line">输出描述：按照从小到大的顺序输出它的所有质数的因子，以空格隔开。最后一个数后面也要有空格。</span><br><span class="line"></span><br><span class="line">输入：180</span><br><span class="line">输出：2 2 3 3 5</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<h3 id="17"><a href="#17" class="headerlink" title="17."></a>17.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">定义一个二维数组N*M（其中2&lt;=N&lt;=10;2&lt;=M&lt;=10），如5 × 5数组下所示：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int maze[5][5] = &#123;</span><br><span class="line">0, 1, 0, 0, 0,</span><br><span class="line">0, 1, 0, 1, 0,</span><br><span class="line">0, 0, 0, 0, 0,</span><br><span class="line">0, 1, 1, 1, 0,</span><br><span class="line">0, 0, 0, 1, 0,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">它表示一个迷宫，其中的1表示墙壁，0表示可以走的路，只能横着走或竖着走，不能斜着走，要求编程序找出从左上角到右下角的最短路线。入口点为[0,0],既第一空格是可以走的路。</span><br><span class="line"></span><br><span class="line">本题含有多组数据。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输入描述：</span><br><span class="line">输入两个整数，分别表示二位数组的行数，列数。再输入相应的数组，其中的1表示墙壁，0表示可以走的路。数据保证有唯一解,不考虑有多解的情况，即迷宫只有一条通道。</span><br><span class="line"></span><br><span class="line">输出描述：</span><br><span class="line">左上角到右下角的最短路径，格式如样例所示。</span><br><span class="line"></span><br><span class="line">输入：</span><br><span class="line">5 5</span><br><span class="line">0 1 0 0 0</span><br><span class="line">0 1 0 1 0</span><br><span class="line">0 0 0 0 0</span><br><span class="line">0 1 1 1 0</span><br><span class="line">0 0 0 1 0</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">(0,0)</span><br><span class="line">(1,0)</span><br><span class="line">(2,0)</span><br><span class="line">(2,1)</span><br><span class="line">(2,2)</span><br><span class="line">(2,3)</span><br><span class="line">(2,4)</span><br><span class="line">(3,4)</span><br><span class="line">(4,4)</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<h3 id="18"><a href="#18" class="headerlink" title="18."></a>18.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> /**</span><br><span class="line">问题：现在有许多不同身高的机器人在一条直线上排队，按顺序站成一排，排头向前，并且机器人均朝向排头一个方向，每个机器人都有一双只能向正前方看的眼睛，不能往斜上或者斜下方向看；一般来说，如果前面有比自己高或者一样高的机器人，机器人可以看到它；举例子，有四个机器人，身高分别是6、5、3、4，身高为4的机器人往正前方看，只能看到身高为5的机器人；另有四个机器人，身高分别是4、5、6、7，这种情况，每个机器人往正前方看都看不到前面的机器人。现在的问题是，当很多机器人站成一排时，我们需要找出能被看到最多次数的机器人。</span><br><span class="line">输入：一个数组，从前到后各个机器人的身高</span><br><span class="line">输出：输出第一个被看到次数最多的机器人的身高</span><br><span class="line">输入描述：</span><br><span class="line">第一排表示多少个机器人</span><br><span class="line">第二排一个数组，从前到后各个机器人的身高；比如6 5 3 4</span><br><span class="line"></span><br><span class="line">输出描述：</span><br><span class="line">输出第一个被看到次数最多的机器人的身高</span><br><span class="line"></span><br><span class="line">输入：</span><br><span class="line">4</span><br><span class="line">6 5 3 4</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">5</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">5被3和4看到，记2次最多</span><br><span class="line">  */</span><br></pre></td></tr></table></figure>

<h3 id="19"><a href="#19" class="headerlink" title="19."></a>19.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> 输入一个字符串s，仅由英文小写字母组成，1&lt;=|s|&lt;=10000.</span><br><span class="line"> 请在s的所有子串中找到出现次数最多的子串，输出出现次数</span><br><span class="line"> 样例输入：aba</span><br><span class="line"> 样例输出：2</span><br><span class="line"> aba的所有子串为：a、b、a、ab、ba、aba</span><br><span class="line"></span><br><span class="line">分析：</span><br><span class="line">直接统计abcd…z中出现最多的即可</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<h3 id="20"><a href="#20" class="headerlink" title="20."></a>20.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">有一个xyz的立方体，要在这个立方体上砍k刀，每一刀可以看作是用一个平行于立方体某一面的平面切割立方体，且必须在坐标为整数的位置切割，如在x=0.5处用平面切割是非法的。</span><br><span class="line">问在切割k刀之后，最多可以把立方体切割成多少块。</span><br><span class="line">输入：</span><br><span class="line">输入仅包含一行，一行包含4个正整数x，y, z, k分别表示xyz的立方体和切割k刀。（1&lt;=x,y,z&lt;=10^6 , 0&lt;=k&lt;=10^9）</span><br><span class="line">输出：</span><br><span class="line">输出仅包含一个正整数，即至多切割成多少块。</span><br><span class="line"></span><br><span class="line">样例输入：</span><br><span class="line">2 2 2 3</span><br><span class="line">样例输出：</span><br><span class="line">8</span><br><span class="line">分析：</span><br><span class="line">设在x，y，z轴上分别切x1, y1, z1刀则问题转化为求max[(x1+1)(y1+1)(z1+1)]的值，限制条件为：x1+y1+z1=k; x1+1&lt;=x; y1+1&lt;=y; z1+1&lt;=z;即x+y+z-3&gt;=k。</span><br><span class="line">在数学上我们知道，在x1=y1=z1=k/3的时候，x1y1z1的值最大。所以我们的思路是让x1,y1,z1的值尽可能的接近</span><br><span class="line"></span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<h3 id="21"><a href="#21" class="headerlink" title="21."></a>21.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">题目描述：</span><br><span class="line">给一个包含n个整数的数组S，找到与给定目标整数最接近的三个整数，并且返回这三个整数的和。</span><br><span class="line"></span><br><span class="line">输入描述：</span><br><span class="line">第一个参数为给定的目标整数，后面跟随不定数量的整数数组。</span><br><span class="line"></span><br><span class="line">输出描述：</span><br><span class="line">输出与给定目标整数最接近的三个整数的和。</span><br><span class="line"></span><br><span class="line">示例1</span><br><span class="line">输入：</span><br><span class="line">3 2 7 11 15</span><br><span class="line">输出：</span><br><span class="line">20</span><br><span class="line">说明</span><br><span class="line">2+7+11=20</span><br><span class="line"></span><br><span class="line">示例2</span><br><span class="line">输入:</span><br><span class="line">1 -1 2 3 -4</span><br><span class="line">输出：</span><br><span class="line">4</span><br><span class="line">说明</span><br><span class="line">-1+2+3=4</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<h3 id="22"><a href="#22" class="headerlink" title="22."></a>22.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">题目描述：</span><br><span class="line">有M（数量100以内）个箱子，每个箱子里面装有若干个玩具球，已知第1个箱子玩具球的个数比第2个多2个，第2个箱子比第3个多3个，第3个箱子比第4个多7个，第4个箱子比第5个箱子多25个，第5个箱子比第6个多121个，以此类推，已知最后一个箱子有K个玩具球，请计算所有M个箱子的玩具球总数？</span><br><span class="line"></span><br><span class="line">输入描述：</span><br><span class="line">输入为2行，第一行为箱子数M，第二行为最后一箱玩具球个数，例如：</span><br><span class="line"></span><br><span class="line">10</span><br><span class="line">1</span><br><span class="line">输出描述：</span><br><span class="line">输出为1行，数字格式，例如</span><br><span class="line">3628854</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<h3 id="23"><a href="#23" class="headerlink" title="23."></a>23.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">输入一个字符串，字符串包含多个子串，每个子串之间用一个或多个“，”隔开，子串内容可能是纯数字串、纯英文单词或者英文字母、数字、符号混合的字符串（字符串长度100以内），统计这些子串中所有首位和末位数字之和大于8的纯数字串的个数（只有一位的纯数字串不做统计），要求时间复杂度小于等于O(n)。</span><br><span class="line"></span><br><span class="line">输入描述：</span><br><span class="line">输入为1行字符串，例如：</span><br><span class="line"></span><br><span class="line">hello,79,1.9,are,09,there</span><br><span class="line">1</span><br><span class="line">输出描述：</span><br><span class="line">输出为一个数，例如：</span><br><span class="line"></span><br><span class="line">2</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<h3 id="24"><a href="#24" class="headerlink" title="24."></a>24.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">22娘和33娘接到了小电视君的扭蛋任务：</span><br><span class="line">一共有两台扭蛋机，编号分别为扭蛋机2号和扭蛋机3号，22娘使用扭蛋机2号，33娘使用扭蛋机3号。</span><br><span class="line">扭蛋机都不需要投币，但有一项特殊能力：</span><br><span class="line">扭蛋机2号：如果塞x（x范围为&gt;=0正整数）个扭蛋进去，然后就可以扭到2x+1个</span><br><span class="line">扭蛋机3号：如果塞x（x范围为&gt;=0正整数）个扭蛋进去，然后就可以扭到2x+2个</span><br><span class="line">22娘和33娘手中没有扭蛋，需要你帮她们设计一个方案，两人“轮流扭”（谁先开始不限，扭到的蛋可以交给对方使用），用“最少”的次数，使她们能够最后恰好扭到N个交给小电视君。</span><br><span class="line"></span><br><span class="line">输入描述：输入一个正整数，表示小电视君需要的N个扭蛋。</span><br><span class="line">输出描述：输出一个字符串，每个字符表示扭蛋机，字符只能包含<span class="string">&quot;2&quot;</span>和<span class="string">&quot;3&quot;</span>。</span><br><span class="line"></span><br><span class="line">输入：</span><br><span class="line">10</span><br><span class="line">输出：</span><br><span class="line">233</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>面试题7：字符串数组对象的方法</title>
    <url>/2022/01/06/%E9%9D%A2%E8%AF%95%E9%A2%98/%E9%9D%A2%E8%AF%95%E9%A2%987%EF%BC%9A%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h3 id="1-字符串"><a href="#1-字符串" class="headerlink" title="1.字符串"></a>1.字符串</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;hello&quot;</span>.<span class="title function_">substring</span>(<span class="number">1</span>); <span class="comment">//ello -- 索引1到结束</span></span><br><span class="line"><span class="string">&quot;hello&quot;</span>.<span class="title function_">substring</span>(<span class="number">1</span>, <span class="number">3</span>); <span class="comment">//el -- 索引1到索引3（不包括3）</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;hello&quot;</span>.<span class="title function_">substr</span>(<span class="number">1</span>, <span class="number">3</span>); <span class="comment">//ell -- 索引1，截取3位</span></span><br><span class="line"><span class="string">&quot;hello&quot;</span>.<span class="title function_">substr</span>(<span class="number">1</span>, <span class="number">7</span>); <span class="comment">//ello -- 【超过长度】索引1，截取到末尾</span></span><br><span class="line"><span class="string">&quot;hello&quot;</span>.<span class="title function_">substr</span>(-<span class="number">3</span>, <span class="number">2</span>); <span class="comment">//ll -- 从倒数第三个字符开始起截取2个长度</span></span><br><span class="line"><span class="string">&quot;hello&quot;</span>.<span class="title function_">substr</span>(<span class="number">3</span>); <span class="comment">//lo -- 不带length参数，默认指代从start位置截取到字符串末尾</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;hello world!&quot;</span>.<span class="title function_">slice</span>(-<span class="number">3</span>); <span class="comment">//ld</span></span><br><span class="line"><span class="string">&quot;hello world!&quot;</span>.<span class="title function_">slice</span>(-<span class="number">3</span>, -<span class="number">1</span>); <span class="comment">//ld</span></span><br><span class="line"><span class="string">&quot;hello world!&quot;</span>.<span class="title function_">slice</span>(<span class="number">3</span>); <span class="comment">//&quot;lo world!&quot;</span></span><br><span class="line"><span class="string">&quot;hello world&quot;</span>.<span class="title function_">slice</span>(<span class="number">3</span>, <span class="number">7</span>); <span class="comment">//&quot;lo w&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">24</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="title function_">toString</span>()); <span class="comment">//&quot;24&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">24</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>(num)); <span class="comment">//&quot;24&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">24</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;&quot;</span> + num); <span class="comment">//&quot;24&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mystr = <span class="string">&quot;qi,wo,ji&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> arr1 = mystr.<span class="title function_">split</span>(<span class="string">&quot;,&quot;</span>); <span class="comment">//[&quot;qing&quot;,&quot;wo&quot;,&quot;ji&quot;];</span></span><br><span class="line"><span class="keyword">var</span> arr2 = mystr.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>); <span class="comment">//[&quot;q&quot;,&quot;i&quot;,&quot;w&quot;,&quot;o&quot;,&quot;j&quot;,&quot;i&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mystr = <span class="string">&quot;qi,wo,ji&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> arr1 = mystr.<span class="title function_">split</span>(<span class="string">&quot;,&quot;</span>, <span class="number">2</span>); <span class="comment">//[&quot;qi&quot;,&quot;wo&quot;] //返回2项</span></span><br><span class="line"><span class="keyword">var</span> arr2 = mystr.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>, <span class="number">5</span>); <span class="comment">//[&quot;q&quot;,&quot;i&quot;,&quot;w&quot;,&quot;o&quot;,&quot;j&quot;]  返回5项</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mystr = <span class="string">&quot;hellohelhehellollo&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> arr1 = mystr.<span class="title function_">replace</span>(<span class="string">&quot;he&quot;</span>, <span class="string">&quot; A &quot;</span>); <span class="comment">//&quot; A llohelhehellollo&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">&quot;nihaome&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">&quot;lixiaoqi&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> str3 = str1.<span class="title function_">replace</span>(str1.<span class="title function_">match</span>(<span class="string">&quot;hao&quot;</span>), str2.<span class="title function_">match</span>(<span class="string">&quot;lixi&quot;</span>));</span><br><span class="line"><span class="comment">//找到str1的hao，找到str2的lixi，用str2替换掉str1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str3);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">&quot;lixiaoqi nihaoya zaiganma&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">&quot;nihaoya&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> str3 = <span class="string">&quot;wobuzai&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> num1 = str1.<span class="title function_">search</span>(str2); <span class="comment">//返回的是第一个字符所在的位置</span></span><br><span class="line"><span class="keyword">var</span> num2 = str1.<span class="title function_">search</span>(str3); <span class="comment">//未检测到返回-1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num2);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;helloworld&quot;</span>.<span class="property">length</span>); <span class="comment">//10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// indexOf()，该Of() 方法对大小写敏感。返回字符串中一个子串第一处出现的索引（从左到右搜索）。如果没有匹配项，返回 -1 。</span></span><br><span class="line"><span class="keyword">var</span> mystr = <span class="string">&quot;Hello world!&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> index = mystr.<span class="title function_">indexOf</span>(<span class="string">&quot;llo&quot;</span>); <span class="comment">//2</span></span><br><span class="line"><span class="keyword">var</span> index1 = mystr.<span class="title function_">indexOf</span>(<span class="string">&quot;l&quot;</span>); <span class="comment">//2</span></span><br><span class="line"><span class="keyword">var</span> index2 = mystr.<span class="title function_">indexOf</span>(<span class="string">&quot;l&quot;</span>, <span class="number">3</span>); <span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello World!&quot;</span>.<span class="title function_">charAt</span>(<span class="number">7</span>)); <span class="comment">//&quot;o&quot;</span></span><br><span class="line"><span class="string">&quot;Hello World!&quot;</span>.<span class="title function_">charCodeAt</span>(<span class="number">7</span>); <span class="comment">//111 -- 查找对应位置的字符编码值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">&quot;lixiaoqi&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = str1.<span class="title function_">match</span>(<span class="string">&quot;iao&quot;</span>); <span class="comment">//检索字符串，返回的是字符</span></span><br><span class="line"><span class="keyword">var</span> str3 = str1.<span class="title function_">match</span>(<span class="string">&quot;lll&quot;</span>); <span class="comment">//没有指定的字符，返回的是null</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str2); <span class="comment">//&#x27;iao&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str3); <span class="comment">//null</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;Hello World!&quot;</span>.<span class="title function_">toLowerCase</span>(); <span class="comment">//&quot;hello world!&quot;</span></span><br><span class="line"><span class="string">&quot;Hello World!&quot;</span>.<span class="title function_">toUpperCase</span>(); <span class="comment">//&quot;HELLO WORLD!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;     hello world      &quot;</span>.<span class="title function_">trim</span>(); <span class="comment">//&quot;hello world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串去重</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;aahhgggsssjjj&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">removeRepeat</span>(<span class="params">msg</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = [];</span><br><span class="line">  <span class="keyword">var</span> arr = msg.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  arr.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (a.<span class="title function_">indexOf</span>(item) === -<span class="number">1</span>) &#123;</span><br><span class="line">      a.<span class="title function_">push</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> a.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">removeRepeat</span>(str));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断字符串中字符出现的次数</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;aacccbbeeeddd&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getCount</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> arr = str.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line">  arr.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">value, index</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value, index, obj.<span class="title function_">hasOwnProperty</span>(value));</span><br><span class="line">    <span class="keyword">if</span> (!obj.<span class="title function_">hasOwnProperty</span>(value)) &#123;</span><br><span class="line">      obj[value] = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      obj[value] += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key, obj[key]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getCount</span>(str);</span><br></pre></td></tr></table></figure>

<h2 id="2-数组"><a href="#2-数组" class="headerlink" title="2.数组"></a>2.数组</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="number">10</span>, <span class="number">30</span>, <span class="number">20</span>].<span class="title function_">sort</span>(<span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">&quot;yang&quot;</span>, <span class="string">&quot;yan&quot;</span>, <span class="string">&quot;fei&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">10</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>];</span><br><span class="line"><span class="keyword">var</span> arr3 = [<span class="string">&quot;wang&quot;</span>, <span class="number">54</span>];</span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">&quot;yangyanfei&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> result = arr1.<span class="title function_">concat</span>(arr2, str1, arr3); <span class="comment">//[&quot;yang&quot;, &quot;yan&quot;, &quot;fei&quot;, 10, 11, 2, 33, 44, 55, &quot;yangyanfei&quot;, &quot;wang&quot;, 54]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// iterable：一个具有可枚举属性并且可以迭代的对象。</span></span><br><span class="line"><span class="keyword">const</span> iterable = [<span class="string">&quot;mini&quot;</span>, <span class="string">&quot;mani&quot;</span>, <span class="string">&quot;mo&quot;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> value <span class="keyword">of</span> iterable) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;yang&quot;</span>, <span class="string">&quot;yan&quot;</span>, <span class="string">&quot;fei&quot;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">join</span>(<span class="string">&quot;-&quot;</span>)); <span class="comment">//&quot;yang-yan-fei&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">//[&quot;yang&quot;, &quot;yan&quot;, &quot;fei&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;yang&quot;</span>, <span class="string">&quot;yan&quot;</span>, <span class="string">&quot;fei&quot;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">pop</span>()); <span class="comment">//&quot;fei&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">//[&quot;yang&quot;, &quot;yan&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;yang&quot;</span>, <span class="string">&quot;yan&quot;</span>, <span class="string">&quot;fei&quot;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">push</span>(<span class="string">&quot;haha&quot;</span>)); <span class="comment">//4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">//[&quot;yang&quot;, &quot;yan&quot;, &quot;fei&quot;, &quot;haha&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;yang&quot;</span>, <span class="string">&quot;yan&quot;</span>, <span class="string">&quot;fei&quot;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">shift</span>()); <span class="comment">//yang</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">//[&quot;yang&quot;, &quot;yan&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;yang&quot;</span>, <span class="string">&quot;yan&quot;</span>, <span class="string">&quot;fei&quot;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">unshift</span>(<span class="string">&quot;hehe&quot;</span>)); <span class="comment">//4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">//[&quot;hehe&quot;, &quot;yang&quot;, &quot;yan&quot;, &quot;fei&quot;]</span></span><br><span class="line"></span><br><span class="line">[<span class="string">&quot;yang&quot;</span>, <span class="string">&quot;yan&quot;</span>, <span class="string">&quot;fei&quot;</span>, <span class="string">&quot;haha&quot;</span>].<span class="title function_">reverse</span>(); <span class="comment">//[&quot;haha&quot;, &quot;fei&quot;, &quot;yan&quot;, &quot;yang&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;yang&quot;</span>, <span class="string">&quot;yan&quot;</span>, <span class="string">&quot;fei&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> result = arr.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">//[&quot;yang&quot;, &quot;yan&quot;, &quot;fei&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">//[&quot;yang&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>];</span><br><span class="line"><span class="comment">// slice 纯函数</span></span><br><span class="line"><span class="keyword">const</span> arr1 = arr.<span class="title function_">slice</span>(); <span class="comment">//【什么也不传，浅拷贝一份数组】</span></span><br><span class="line"><span class="keyword">const</span> arr2 = arr.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">4</span>); <span class="comment">//[20,30,40]    slice(开始的索引，结束的索引【不包括结束索引】)</span></span><br><span class="line"><span class="keyword">const</span> arr3 = arr.<span class="title function_">slice</span>(<span class="number">2</span>); <span class="comment">//[30,40,50]   slice(开始的索引)【从开始的索引到结束为止】</span></span><br><span class="line"><span class="keyword">const</span> arr4 = arr.<span class="title function_">slice</span>(-<span class="number">2</span>); <span class="comment">//[40,50] slice(负数数值)【从末尾往前截取个数】</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// splice 非纯函数</span></span><br><span class="line"><span class="keyword">const</span> spliceRes = arr.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>); <span class="comment">//【开始的索引位置，剪接的长度，要插入的新元素】</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(spliceRes, arr); <span class="comment">//[20,30],[10,&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,40,50]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> spliceRes1 = arr.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">//只想剪接，不插入数值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(spliceRes1, arr); <span class="comment">//[20,30],[10,40,50]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> spliceRes2 = arr.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>); <span class="comment">//不剪接，只插入数值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(spliceRes2, arr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// ES3的判断方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> arr); <span class="comment">// object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">toString</span>()); <span class="comment">// 3,4,5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr <span class="keyword">instanceof</span> <span class="title class_">Array</span>); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// arr.includes() 判断数中是否包含给定的值</span></span><br><span class="line"><span class="comment">// ps:与indexOf()的区别：</span></span><br><span class="line"><span class="comment">// 1 indexOf()返回的是数值，而includes()返回的是布尔值</span></span><br><span class="line"><span class="comment">// 2 indexOf() 不能判断NaN，返回为-1 ，includes()则可以判断</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> arr1 = arr.<span class="title function_">includes</span>(<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1); <span class="comment">// ture</span></span><br><span class="line"><span class="keyword">let</span> arr2 = arr.<span class="title function_">includes</span>(<span class="number">9</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2); <span class="comment">// false</span></span><br><span class="line"><span class="keyword">let</span> arr3 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="title class_">NaN</span>].<span class="title function_">includes</span>(<span class="title class_">NaN</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr3); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// arr.keys() 遍历数组的键名</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = arr.<span class="title function_">keys</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> arr2) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key); <span class="comment">// 0,1,2,3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="number">1</span>: <span class="number">2</span>, <span class="number">2</span>: <span class="number">2</span>, <span class="number">4</span>: <span class="number">2</span>, <span class="number">7</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i, obj[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1 2</span></span><br><span class="line"><span class="comment"> * 2 2</span></span><br><span class="line"><span class="comment"> * 4 2</span></span><br><span class="line"><span class="comment"> * 7 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// arr.values() 遍历数组键值</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> arr1 = arr.<span class="title function_">values</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> val <span class="keyword">of</span> arr1) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(val); <span class="comment">// 1,2,3,4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// arr.entries() 遍历数组的键名和键值</span></span><br><span class="line"><span class="comment">// entries() 方法返回迭代数组。</span></span><br><span class="line"><span class="comment">// 迭代数组中每个值 前一个是索引值作为 key， 数组后一个值作为 value。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> arr1 = arr.<span class="title function_">entries</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> e <span class="keyword">of</span> arr1) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e); <span class="comment">// [0,1] [1,2] [2,3] [3,4]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-对象"><a href="#3-对象" class="headerlink" title="3.对象"></a>3.对象</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断对象为空：</span></span><br><span class="line"><span class="comment">// 方法一：</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">judgeObj</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> a <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">alert</span>(<span class="string">&quot;非空对象&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">alert</span>(<span class="string">&quot;空对象&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二：</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(c) == <span class="string">&quot;&#123;&#125;&quot;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;空对象&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法三：</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="property">length</span> == <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;空对象&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;非空对象&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-遍历"><a href="#4-遍历" class="headerlink" title="4.遍历"></a>4.遍历</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// reduce</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">  arr.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">v1, v2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> v1 + v2;</span><br><span class="line">  &#125;)</span><br><span class="line">); <span class="comment">// 21</span></span><br><span class="line"><span class="comment">//开始是1+2 = 3，之后3+3 =6，之后6+4 =10，之后</span></span><br><span class="line"><span class="comment">//10+5 =15，最后15+6 =21</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">  arr.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">v1, v2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> v1 - v2;</span><br><span class="line">  &#125;, <span class="number">100</span>)</span><br><span class="line">); <span class="comment">// 79</span></span><br><span class="line"><span class="comment">//开始的时候100-1=99，之后99-2=97，之后97-3=94，之后</span></span><br><span class="line"><span class="comment">//94-4=90，之后90-5=85，最后85-6=79</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 普通的for循环</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// 这里的i是代表数组的下标</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// 0, 1, 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 优化版的for循环</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.<span class="property">length</span>; i &lt; len; i++) &#123;</span><br><span class="line">  <span class="comment">// 这里的i是代表数组的下标</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// 0, 1, 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. for...of...遍历(这种遍历支持ES6)</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">1、 这是最简洁、最直接的遍历数组元素的语法</span></span><br><span class="line"><span class="comment">2、 这个方法避开了for-in循环的所有缺陷</span></span><br><span class="line"><span class="comment">3、 与forEach()不同的是，它可以正确响应break、continue和return语句</span></span><br><span class="line"><span class="comment">4、性能要好于forin，但仍然比不上普通for循环</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  <span class="comment">// item代表数组里面的元素</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item); <span class="comment">// 1, 2, 3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4. forEach()</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这种遍历便捷还是挺便捷的，看起来优雅，对目标数组的操作很人性化，要元素给元素，要下标给下标，</span></span><br><span class="line"><span class="comment">但是当某种情况你想中断遍历的时候，你就会感觉它就像鸡肋，食之无味，弃之可惜。</span></span><br><span class="line"><span class="comment">由于foreach是Array型自带的，对于一些非这种类型的，无法直接使用(如NodeList)，</span></span><br><span class="line"><span class="comment">所以才有了这个变种，使用这个变种可以让类似的数组拥有foreach功能。而且forEach的性能也会比普通的for循环弱。</span></span><br><span class="line"><span class="comment">又下面的例子我们可以看到，我们常用的return false是可以终止代码继续往下执行的，但是在forEach遍历中，</span></span><br><span class="line"><span class="comment">并没有终止循环，所以在用forEach的时候，要考虑使用场景了。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// item为arr的元素，index为下标，arr原数组</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item); <span class="comment">// 1, 2, 3</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(index); <span class="comment">// 0, 1, 2</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [1, 2, 3]</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// forEach():对数组的每个元素执行一次提供的函数。</span></span><br><span class="line"><span class="keyword">var</span> array1 = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line">array1.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">element</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(element);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * a</span></span><br><span class="line"><span class="comment"> * b</span></span><br><span class="line"><span class="comment"> * c</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">queryToObj</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> pList = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(<span class="string">&quot;?tpId=2&amp;tqId=10851&amp;rp=1&quot;</span>);</span><br><span class="line">  pList.<span class="title function_">forEach</span>(<span class="function">(<span class="params">val, key</span>) =&gt;</span> &#123;</span><br><span class="line">    res[key] = val;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">queryToObj</span>(); <span class="comment">//&#123;tpId: &quot;2&quot;, tqId: &quot;10851&quot;, rp: &quot;1&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.some()</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">some作为一个用来检测数组是否满足一些条件的函数存在，同样是可以用作遍历的函数签名同forEach，有区别的是当任一callback返回值匹配为true则会直接返回true，如果所有的callback匹配均为false，则返回false。</span></span><br><span class="line"><span class="comment">some() 方法会依次执行数组的每个元素：</span></span><br><span class="line"><span class="comment">如果有一个元素满足条件，则表达式返回true , 剩余的元素不会再执行检测。</span></span><br><span class="line"><span class="comment">如果没有满足条件的元素，则返回false。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.<span class="title function_">some</span>(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// item为数组中的元素，index为下标，arr为目标数组</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item); <span class="comment">// 1, 2, 3</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(index); <span class="comment">// 0, 1, 2</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [1, 2, 3]</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">6</span>, <span class="number">8</span>, -<span class="number">2</span>, -<span class="number">5</span>, <span class="number">7</span>, -<span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> isPositive = arr.<span class="title function_">some</span>(<span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(isPositive); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. every()</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">every() 方法用于检测数组所有元素是否都符合指定条件（通过函数提供）。</span></span><br><span class="line"><span class="comment">every() 方法使用指定函数检测数组中的所有元素：</span></span><br><span class="line"><span class="comment">如果数组中检测到有一个元素不满足，则整个表达式返回 false ，且剩余的元素不会再进行检测。</span></span><br><span class="line"><span class="comment">如果所有元素都满足条件，则返回 true。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.<span class="title function_">every</span>(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// item为数组中的元素，index为下标，arr为目标数组</span></span><br><span class="line">  <span class="keyword">return</span> item &gt; <span class="number">0</span>; <span class="comment">// true</span></span><br><span class="line">  <span class="keyword">return</span> index == <span class="number">0</span>; <span class="comment">// false</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">6</span>, <span class="number">8</span>, -<span class="number">2</span>, -<span class="number">5</span>, <span class="number">7</span>, -<span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> isPositive = arr.<span class="title function_">every</span>(<span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(isPositive); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 7. for...in...遍历</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">for...in更多是用来遍历对象，很少用来遍历数组， 不过 item 对应与数组的 key值，建议不要用该方法来遍历数组，</span></span><br><span class="line"><span class="comment">因为它的效率是最低的。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> item <span class="keyword">in</span> arr) &#123;</span><br><span class="line">  <span class="comment">// item遍历数组时为数组的下标，遍历对象时为对象的key值</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item); <span class="comment">// 0, 1, 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 8. filter()</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">ES5-filter(function(element))</span></span><br><span class="line"><span class="comment">返回数组的一个子集，回调函数用于逻辑判断是否返回，返回true则把当前元素加到返回数组中，false则不加</span></span><br><span class="line"><span class="comment">新数组只包含返回true的值，索引确实的不包括，原数组保持不变。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">6</span>, <span class="number">8</span>, -<span class="number">2</span>, -<span class="number">5</span>, <span class="number">7</span>, -<span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> positiverArr = arr.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(positiverArr); <span class="comment">// [1, 6, 8, 7]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [1, 6, 8, -2, -5, 7, -4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// item为数组当前的元素</span></span><br><span class="line">  <span class="keyword">return</span> item &gt; <span class="number">1</span>; <span class="comment">// [2, 3]</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 9. map()</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * map() 方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。</span></span><br><span class="line"><span class="comment">　　map() 方法按照原始数组元素顺序依次处理元素。</span></span><br><span class="line"><span class="comment">　　这种方式也是用的比较广泛的，虽然用起来比较优雅，但实际效率还比不上foreach</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// item为数组的元素</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item); <span class="comment">// 1, 2, 3</span></span><br><span class="line">  <span class="keyword">return</span> item * <span class="number">2</span>; <span class="comment">// 返回一个处理过的新数组[2, 4, 6]</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对数组的每一项运行给定的函数，返回没戏函数调用的结果组成的数组</span></span><br><span class="line"><span class="keyword">var</span> array1 = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>];</span><br><span class="line"><span class="keyword">const</span> map1 = array1.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">param, index</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(param, index);</span><br><span class="line">  <span class="keyword">return</span> param * <span class="number">2</span>;</span><br><span class="line">&#125;); <span class="comment">//对数组的每项*2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map1);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">1 0</span></span><br><span class="line"><span class="comment">4 1</span></span><br><span class="line"><span class="comment">9 2</span></span><br><span class="line"><span class="comment">16 3</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">[2,8,18,32]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>面试题8：工作中遇到的50个Javascript的基础知识点</title>
    <url>/2022/01/16/%E9%9D%A2%E8%AF%95%E9%A2%98/%E9%9D%A2%E8%AF%95%E9%A2%988%EF%BC%9A%E5%B7%A5%E4%BD%9C%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%8450%E4%B8%AAJavascript%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<h2 id="50-个基础知识点"><a href="#50-个基础知识点" class="headerlink" title="50 个基础知识点"></a>50 个基础知识点</h2><h3 id="1、JavaScript-有几种数据类型？"><a href="#1、JavaScript-有几种数据类型？" class="headerlink" title="1、JavaScript 有几种数据类型？"></a>1、JavaScript 有几种数据类型？</h3><ul>
<li>number：数字类型</li>
<li>string：字符串类型</li>
<li>boolean：布尔值类型</li>
<li>undefined：未定义类型</li>
<li>null：空值类型</li>
<li>object：对象类型</li>
<li>symbol：symbol 类型</li>
<li>bigint：大数字类型</li>
</ul>
<h3 id="2、JavaScript-最大安全数字与最小安全数字？"><a href="#2、JavaScript-最大安全数字与最小安全数字？" class="headerlink" title="2、JavaScript 最大安全数字与最小安全数字？"></a>2、JavaScript 最大安全数字与最小安全数字？</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MAX_SAFE_INTEGER</span>);</span><br><span class="line"><span class="comment">// 9007199254740991</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MIN_SAFE_INTEGER</span>);</span><br><span class="line"><span class="comment">// -9007199254740991</span></span><br></pre></td></tr></table></figure>

<h3 id="3、深拷贝与浅拷贝的区别？"><a href="#3、深拷贝与浅拷贝的区别？" class="headerlink" title="3、深拷贝与浅拷贝的区别？"></a>3、深拷贝与浅拷贝的区别？</h3><ul>
<li><p>深拷贝层层拷贝，浅拷贝只拷贝第一层，深层只是引用</p>
</li>
<li><p>在深拷贝中，新对象中的更改不会影响原始对象，而在浅拷贝中，新对象中的更改，原始对象中也会跟着改。</p>
</li>
<li><p>在深拷贝中，原始对象不与新对象共享相同的属性，而在浅拷贝中，它们具有相同的属性。</p>
</li>
</ul>
<h3 id="4、闭包是什么？"><a href="#4、闭包是什么？" class="headerlink" title="4、闭包是什么？"></a>4、闭包是什么？</h3><p>闭包是一个能读取其他函数内部变量的函数</p>
<p>优点：使外部能访问到局部的东西<br>缺点：使用不当容易造成内存泄漏的问题</p>
<p>例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这是个闭包</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> ++num;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> b = <span class="title function_">a</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">b</span>()); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">b</span>()); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<h3 id="5、原型链是什么呀？详细点！"><a href="#5、原型链是什么呀？详细点！" class="headerlink" title="5、原型链是什么呀？详细点！"></a>5、原型链是什么呀？详细点！</h3><p><a href="https://juejin.cn/post/7007416743215759373">掘金讲「原型链」，讲的最好最通俗易懂的</a></p>
<h3 id="6、什么是变量提升？函数提升？"><a href="#6、什么是变量提升？函数提升？" class="headerlink" title="6、什么是变量提升？函数提升？"></a>6、什么是变量提升？函数提升？</h3><p>变量提升</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;Sunshine_Lin&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> age = <span class="number">23</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// undefined 不会报错</span></span><br></pre></td></tr></table></figure>

<p>函数提升</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fun); <span class="comment">// function fun() &#123;&#125;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fun2</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fun2); <span class="comment">// undefined 不会报错</span></span><br></pre></td></tr></table></figure>

<p>函数提升优先级 &gt; 变量提升优先级</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fun); <span class="comment">// function fun() &#123;&#125;</span></span><br><span class="line"><span class="keyword">var</span> fun = <span class="string">&quot;Sunshie_Lin&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fun); <span class="comment">// &#x27;Sunshie_Lin&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="7、isNaN-与-Number-isNaN-的区别？"><a href="#7、isNaN-与-Number-isNaN-的区别？" class="headerlink" title="7、isNaN 与 Number.isNaN 的区别？"></a>7、isNaN 与 Number.isNaN 的区别？</h3><ul>
<li>isNaN：除了判断 NaN 为 true，还会把不能转成数字的判断为 true，例如’xxx’</li>
<li>Number.isNaN：只有判断 NaN 时为 true，其余情况都为 false</li>
</ul>
<h3 id="8、解决遍历对象时，把原型上的属性遍历出来了咋办？"><a href="#8、解决遍历对象时，把原型上的属性遍历出来了咋办？" class="headerlink" title="8、解决遍历对象时，把原型上的属性遍历出来了咋办？"></a>8、解决遍历对象时，把原型上的属性遍历出来了咋办？</h3><p>使用<code>hasOwnProperty</code>判断</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="number">23</span>;</span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Sunshine_lin&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> person) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key);</span><br><span class="line">&#125; <span class="comment">// name age</span></span><br><span class="line"><span class="comment">// 使用 hasOwnProperty</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> person) &#123;</span><br><span class="line">  person.<span class="title function_">hasOwnProperty</span>(key) &amp;&amp; <span class="variable language_">console</span>.<span class="title function_">log</span>(key);</span><br><span class="line">&#125; <span class="comment">// name</span></span><br></pre></td></tr></table></figure>

<h3 id="9、valueOf-与-toString"><a href="#9、valueOf-与-toString" class="headerlink" title="9、valueOf 与 toString"></a>9、valueOf 与 toString</h3><ul>
<li><p>1、valueOf 偏向于运算，toString 偏向于显示</p>
</li>
<li><p>2、对象转换时，优先调用 toString</p>
</li>
<li><p>3、强转字符串优先调用 toString，强转数字优先调用 valueOf</p>
</li>
<li><p>4、正常情况下，优先调用 toString</p>
</li>
<li><p>5、运算操作符情况下优先调用 valueOf</p>
</li>
</ul>
<p>调用 valueOf</p>
<table>
<thead>
<tr>
<th>调用者</th>
<th>返回值</th>
<th>返回值类型</th>
</tr>
</thead>
<tbody><tr>
<td>Array</td>
<td>数组本身</td>
<td>Array</td>
</tr>
<tr>
<td>Boolean</td>
<td>布尔值</td>
<td>Boolean</td>
</tr>
<tr>
<td>Date</td>
<td>毫秒数</td>
<td>Number</td>
</tr>
<tr>
<td>Function</td>
<td>函数本身</td>
<td>Function</td>
</tr>
<tr>
<td>Number</td>
<td>数字值</td>
<td>Number</td>
</tr>
<tr>
<td>Object</td>
<td>对象本身</td>
<td>Object</td>
</tr>
<tr>
<td>String</td>
<td>字符串</td>
<td>String</td>
</tr>
</tbody></table>
<p>调用 toString</p>
<table>
<thead>
<tr>
<th>调用者</th>
<th>返回值</th>
<th>返回值类型</th>
</tr>
</thead>
<tbody><tr>
<td>Array</td>
<td>数组转字符串，相当于 Array.join()</td>
<td>String</td>
</tr>
<tr>
<td>Boolean</td>
<td>转字符串’true’、‘false’</td>
<td>String</td>
</tr>
<tr>
<td>Date</td>
<td>字符串日期，如’Fri Dec 23 2016 11:24:47 GMT+0800 (中国标准时间)’</td>
<td>String</td>
</tr>
<tr>
<td>Number</td>
<td>数字字符串</td>
<td>String</td>
</tr>
<tr>
<td>Object</td>
<td>‘[object Object]’</td>
<td>String</td>
</tr>
<tr>
<td>String</td>
<td>字符串</td>
<td>String</td>
</tr>
</tbody></table>
<h3 id="10、JavaScript-变量在内存中具体存储形式？"><a href="#10、JavaScript-变量在内存中具体存储形式？" class="headerlink" title="10、JavaScript 变量在内存中具体存储形式？"></a>10、JavaScript 变量在内存中具体存储形式？</h3><ul>
<li><p>基本数据类型：存在栈内存里</p>
</li>
<li><p>引用数据类型：指针存栈内存，指向堆内存中一块地址，内容存在堆内存中</p>
</li>
<li><p>也有说法说其实 JavaScript 所有数据都存堆内存中，我也比较赞同这种说法</p>
</li>
</ul>
<h3 id="11、讲一讲-JavaScript-的装箱和拆箱？"><a href="#11、讲一讲-JavaScript-的装箱和拆箱？" class="headerlink" title="11、讲一讲 JavaScript 的装箱和拆箱？"></a>11、讲一讲 JavaScript 的装箱和拆箱？</h3><p><strong>装箱：把基本数据类型转化为对应的引用数据类型的操作</strong></p>
<p>看以下代码，s1 只是一个基本数据类型，他是怎么能调用 indexOf 的呢？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s1 = <span class="string">&quot;Sunshine_Lin&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> index = s1.<span class="title function_">indexOf</span>(<span class="string">&quot;_&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure>

<p>原来是 JavaScript 内部进行了装箱操作</p>
<ul>
<li>1、创建 String 类型的一个实例；</li>
<li>2、在实例上调用指定的方法；</li>
<li>3、销毁这个实例；</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> temp = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Sunshine_Lin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> index = temp.<span class="title function_">indexOf</span>(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">temp = <span class="literal">null</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure>

<p><strong>拆箱：将引用数据类型转化为对应的基本数据类型的操作</strong></p>
<p>通过 valueOf 或者 toString 方法实现拆箱操作</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> objNum = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">123</span>);</span><br><span class="line"><span class="keyword">var</span> objStr = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> objNum); <span class="comment">//object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> objStr); <span class="comment">//object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> objNum.<span class="title function_">valueOf</span>()); <span class="comment">//number</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> objStr.<span class="title function_">valueOf</span>()); <span class="comment">//string</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> objNum.<span class="title function_">toString</span>()); <span class="comment">// string</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> objStr.<span class="title function_">toString</span>()); <span class="comment">// string</span></span><br></pre></td></tr></table></figure>

<h3 id="12、null-和-undefined-的异同点有哪些？"><a href="#12、null-和-undefined-的异同点有哪些？" class="headerlink" title="12、null 和 undefined 的异同点有哪些？"></a>12、null 和 undefined 的异同点有哪些？</h3><p>相同点</p>
<ul>
<li>都是空变量</li>
<li>都是假值，转布尔值都是 false</li>
<li>null &#x3D;&#x3D; undefined 为 true</li>
</ul>
<p>不同点</p>
<ul>
<li>typeof 判断 null 为 object，判断 undefined 为 undefined</li>
<li>null 转数字为 0，undefined 转数字为 NaN</li>
<li>null 是一个对象未初始化，undefined 是初始化了，但未定义赋值</li>
<li>null &#x3D;&#x3D;&#x3D; undefined 为 false</li>
</ul>
<h3 id="13、如何判断数据类型？"><a href="#13、如何判断数据类型？" class="headerlink" title="13、如何判断数据类型？"></a>13、如何判断数据类型？</h3><ul>
<li>typeof xxx：能判断出 number，string，undefined，boolean，object，function（null 是 object）</li>
<li>Object.prototype.toString.call(xxx)：能判断出大部分类型</li>
<li>Array.isArray(xxx)：判断是否为数组</li>
</ul>
<h3 id="14、为什么-typeof-null-是-object？"><a href="#14、为什么-typeof-null-是-object？" class="headerlink" title="14、为什么 typeof null 是 object？"></a>14、为什么 typeof null 是 object？</h3><p>不同的数据类型在底层都是通过二进制表示的，二进制前三位为 000 则会被判断为 object 类型，而 null 底层的二进制全都是 0，那前三位肯定也是 000，所以被判断为 object</p>
<h3 id="15、-与-的区别？"><a href="#15、-与-的区别？" class="headerlink" title="15、&#x3D;&#x3D; 与 &#x3D;&#x3D;&#x3D; 的区别？"></a>15、&#x3D;&#x3D; 与 &#x3D;&#x3D;&#x3D; 的区别？</h3><ul>
<li>&#x3D;&#x3D;：在比较过程中会存在隐式转换</li>
<li>&#x3D;&#x3D;&#x3D;：需要类型相同，值相同，才能为 true</li>
</ul>
<h3 id="16、JavaScript-的隐式转换规则？"><a href="#16、JavaScript-的隐式转换规则？" class="headerlink" title="16、JavaScript 的隐式转换规则？"></a>16、JavaScript 的隐式转换规则？</h3><ul>
<li><p>1、转成 string 类型： +（字符串连接符）</p>
</li>
<li><p>2、转成 number 类型：++&#x2F;–(自增自减运算符) + - * &#x2F; %(算术运算符) &gt; &lt; &gt;&#x3D; &lt;&#x3D; &#x3D;&#x3D; !&#x3D; &#x3D;&#x3D;&#x3D; !&#x3D;&#x3D;&#x3D; (关系运算符)</p>
</li>
<li><p>3、转成 boolean 类型：!（逻辑非运算符)</p>
</li>
</ul>
<h3 id="17、双等号左右两边的转换规则？"><a href="#17、双等号左右两边的转换规则？" class="headerlink" title="17、双等号左右两边的转换规则？"></a>17、双等号左右两边的转换规则？</h3><ul>
<li><p>1、null &#x3D;&#x3D; undefined 为 true</p>
</li>
<li><p>2、如果有一个操作数是布尔值，则在比较相等性之前先将其转换为数值——false 转换为 0，而 true 转换为 1；</p>
</li>
<li><p>3、如果一个操作数是字符串，另一个操作数是数值，在比较相等性之前先将字符串转换为数值</p>
</li>
<li><p>4、如果一个操作数是对象，另一个操作数不是，则调用对象的 toString()方法，用得到的基本类型值按照前面的规则进行比较</p>
</li>
</ul>
<h3 id="18、undefined-undefined-为什么是-false-？"><a href="#18、undefined-undefined-为什么是-false-？" class="headerlink" title="18、undefined &gt;&#x3D; undefined 为什么是 false ？"></a>18、undefined &gt;&#x3D; undefined 为什么是 false ？</h3><p>按照隐式转换规则，可转换成 NaN &gt;&#x3D; NaN，NaN 不等于 NaN，也不大于，所以是 false</p>
<h3 id="19、null-null-为什么是-true？"><a href="#19、null-null-为什么是-true？" class="headerlink" title="19、null &gt;&#x3D; null 为什么是 true？"></a>19、null &gt;&#x3D; null 为什么是 true？</h3><p>按照隐式转换规则，可转换成 0 &gt;&#x3D; 0，0 等于 0，所以是 true</p>
<h3 id="20、-为什么是-true-？"><a href="#20、-为什么是-true-？" class="headerlink" title="20、[] &#x3D;&#x3D; ![] 为什么是 true ？"></a>20、[] &#x3D;&#x3D; ![] 为什么是 true ？</h3><p>按照双等号左右两边的转换规则</p>
<ul>
<li>1、! 优先级高于 &#x3D;&#x3D;，[]不是假值，所以先转换成 [] &#x3D;&#x3D; false</li>
<li>2、右边为布尔值，false 先转数字 0，所以可转换为[] &#x3D;&#x3D; 0</li>
<li>3、左边为对象，[]调用 toString 转为 ‘’，转换为’’ &#x3D;&#x3D; 0</li>
<li>4、左边为字符串，’’转换为 0，最终为 0 &#x3D;&#x3D; 0</li>
</ul>
<h3 id="21、0-1-0-2-0-3，对吗？"><a href="#21、0-1-0-2-0-3，对吗？" class="headerlink" title="21、0.1 + 0.2 &#x3D;&#x3D;&#x3D; 0.3，对吗？"></a>21、0.1 + 0.2 &#x3D;&#x3D;&#x3D; 0.3，对吗？</h3><p>不对，JavaScript 的计算存在精度丢失问题</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0.1</span> + <span class="number">0.2</span> === <span class="number">0.3</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>原因：JavaScript 中小数是浮点数，需转二进制进行运算，有些小数无法用二进制表示，所以只能取近似值，所以造成误差</p>
<p>解决方法：</p>
<ul>
<li>先变成整数运算，然后再变回小数</li>
<li>toFixed() 性能不好，不推荐</li>
</ul>
<h3 id="22、什么是匿名函数？"><a href="#22、什么是匿名函数？" class="headerlink" title="22、什么是匿名函数？"></a>22、什么是匿名函数？</h3><p>匿名函数：就是没有函数名的函数，如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(x + y);</span><br><span class="line">&#125;)(<span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<p>这里创建了一个匿名函数(在第一个括号内)，第二个括号用于调用该匿名函数，并传入参数。</p>
<h3 id="23、绑定点击事件有几种方式？"><a href="#23、绑定点击事件有几种方式？" class="headerlink" title="23、绑定点击事件有几种方式？"></a>23、绑定点击事件有几种方式？</h3><p>三种</p>
<ul>
<li>xxx.onclick &#x3D; function (){}</li>
<li><xxx onclick=""></xxx></li>
<li>xxx.addEventListence(‘click’, function(){}, false)</li>
</ul>
<h3 id="24、addEventListence-的第三个参数是干嘛的？"><a href="#24、addEventListence-的第三个参数是干嘛的？" class="headerlink" title="24、addEventListence 的第三个参数是干嘛的？"></a>24、addEventListence 的第三个参数是干嘛的？</h3><p>第三个变量传一个布尔值，需不需要阻止冒泡，默认是 false，不阻止冒泡</p>
<h3 id="25、函数声明和函数表达式的区别？"><a href="#25、函数声明和函数表达式的区别？" class="headerlink" title="25、函数声明和函数表达式的区别？"></a>25、函数声明和函数表达式的区别？</h3><ul>
<li>函数声明：享受函数提升</li>
<li>函数表达式：归类于变量声明，享受变量提升</li>
<li>函数提升优先级 &gt; 变量提升优先级</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fun); <span class="comment">// fun () &#123;&#125;</span></span><br><span class="line"><span class="comment">// 函数表达式</span></span><br><span class="line"><span class="keyword">var</span> fun = <span class="keyword">function</span> (<span class="params">name</span>) &#123;&#125;;</span><br><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fun); <span class="comment">// fun (name) &#123;&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="26、JavaScript-的事件流模型有哪些？"><a href="#26、JavaScript-的事件流模型有哪些？" class="headerlink" title="26、JavaScript 的事件流模型有哪些？"></a>26、JavaScript 的事件流模型有哪些？</h3><ul>
<li>事件冒泡：由最具体的元素接收，并往上传播</li>
<li>事件捕获：由最不具体的元素接收，并往下传播</li>
<li>DOM 事件流：事件捕获 -&gt; 目标阶段 -&gt; 事件冒泡</li>
</ul>
<h3 id="27、Ajax、Axios、Fetch-有啥区别？"><a href="#27、Ajax、Axios、Fetch-有啥区别？" class="headerlink" title="27、Ajax、Axios、Fetch 有啥区别？"></a>27、Ajax、Axios、Fetch 有啥区别？</h3><ul>
<li><p>Ajax：是对 XMLHttpRequest 对象（XHR）的封装</p>
</li>
<li><p>Axios：是基于 Promise 对 XHR 对象的封装</p>
</li>
<li><p>Fetch：是 window 的一个方法，也是基于 Promise，但是与 XHR 无关，不支持 IE</p>
</li>
</ul>
<h3 id="28、load、-document-ready、DOMContentLoaded-的区别？"><a href="#28、load、-document-ready、DOMContentLoaded-的区别？" class="headerlink" title="28、load、$(document).ready、DOMContentLoaded 的区别？"></a>28、load、$(document).ready、DOMContentLoaded 的区别？</h3><p>DOM 文档加载的步骤为：</p>
<ul>
<li>1、解析 HTML 结构。</li>
<li>2、加载外部脚本和样式表文件。</li>
<li>3、解析并执行脚本代码。</li>
<li>4、DOM 树构建完成。&#x2F;&#x2F; DOMContentLoaded 触发、$(document).ready 触发</li>
<li>5、加载图片等外部文件。</li>
<li>6、页面加载完毕。&#x2F;&#x2F; load 触发</li>
</ul>
<h3 id="29、如何阻止事件冒泡？"><a href="#29、如何阻止事件冒泡？" class="headerlink" title="29、如何阻止事件冒泡？"></a>29、如何阻止事件冒泡？</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">stopBubble</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">stopPropagation</span>) &#123;</span><br><span class="line">    e.<span class="title function_">stopPropagation</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">event</span>.<span class="property">cancelBubble</span> = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="30、如何阻止事件默认行为？"><a href="#30、如何阻止事件默认行为？" class="headerlink" title="30、如何阻止事件默认行为？"></a>30、如何阻止事件默认行为？</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">stopDefault</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">preventDefault</span>) &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">event</span>.<span class="property">returnValue</span> = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="31、什么是事件委托？"><a href="#31、什么是事件委托？" class="headerlink" title="31、什么是事件委托？"></a>31、什么是事件委托？</h3><p>当所有子元素都需要绑定相同的事件的时候，可以把事件绑定在父元素上，这就是事件委托，优点有：</p>
<ul>
<li>绑定在父元素上只需要绑定一次，节省性能</li>
<li>子元素不需要每个都去绑定同一事件</li>
<li>如果后续又有新的子元素添加，会由于事件委托的原因，自动接收到父元素的事件监听</li>
</ul>
<h3 id="32、如何实现数组去重？"><a href="#32、如何实现数组去重？" class="headerlink" title="32、如何实现数组去重？"></a>32、如何实现数组去重？</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 Map 去重</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">quchong1</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> newArr = [];</span><br><span class="line">  arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!pre.<span class="title function_">get</span>(next)) &#123;</span><br><span class="line">      pre.<span class="title function_">set</span>(next, <span class="number">1</span>);</span><br><span class="line">      newArr.<span class="title function_">push</span>(next);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">  &#125;, <span class="keyword">new</span> <span class="title class_">Map</span>());</span><br><span class="line">  <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 Set 去重</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">quchong</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="33、Set-与-Array-的区别是什么？"><a href="#33、Set-与-Array-的区别是什么？" class="headerlink" title="33、Set 与 Array 的区别是什么？"></a>33、Set 与 Array 的区别是什么？</h3><p>建议看阮一峰老师的文章：<a href="https://es6.ruanyifeng.com/#docs/set-map">Set 和 Map 数据结构</a></p>
<h3 id="34、Map-与-Object-的区别是什么？"><a href="#34、Map-与-Object-的区别是什么？" class="headerlink" title="34、Map 与 Object 的区别是什么？"></a>34、Map 与 Object 的区别是什么？</h3><p>建议看阮一峰老师的文章：<a href="https://es6.ruanyifeng.com/#docs/set-map">Set 和 Map 数据结构</a></p>
<h3 id="35、NaN-是什么？有什么特点？"><a href="#35、NaN-是什么？有什么特点？" class="headerlink" title="35、NaN 是什么？有什么特点？"></a>35、NaN 是什么？有什么特点？</h3><ul>
<li>NaN 不等于自身，也就是 NaN &#x3D;&#x3D;&#x3D; NaN 为 false</li>
<li>NaN 为假值，转布尔值为 false</li>
<li>NaN 本质是一个 number，typeof NaN &#x3D;&#x3D;&#x3D; number</li>
</ul>
<h3 id="36、处理异步的方法有哪些？"><a href="#36、处理异步的方法有哪些？" class="headerlink" title="36、处理异步的方法有哪些？"></a>36、处理异步的方法有哪些？</h3><ul>
<li>回调函数</li>
<li>promise</li>
<li>事件监听</li>
<li>发布订阅</li>
<li>async await</li>
</ul>
<h3 id="37、JavaScript-继承方式有几种？"><a href="#37、JavaScript-继承方式有几种？" class="headerlink" title="37、JavaScript 继承方式有几种？"></a>37、JavaScript 继承方式有几种？</h3><p>前置工作</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个动物类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="comment">// 属性</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name || <span class="string">&quot;Animal&quot;</span>;</span><br><span class="line">  <span class="comment">// 实例方法</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sleep</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;正在睡觉！&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 原型方法</span></span><br><span class="line"><span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eat</span> = <span class="keyword">function</span> (<span class="params">food</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;正在吃：&quot;</span> + food);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="1、原型链继承"><a href="#1、原型链继承" class="headerlink" title="1、原型链继承"></a>1、原型链继承</h4><p>核心：将父类的实例作为子类的原型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Cat</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="title class_">Cat</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line"><span class="title class_">Cat</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&quot;cat&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat.<span class="property">name</span>); <span class="comment">// cat</span></span><br><span class="line">cat.<span class="title function_">eat</span>(<span class="string">&quot;fish&quot;</span>); <span class="comment">// cat正在吃：fish</span></span><br><span class="line">cat.<span class="title function_">sleep</span>(); <span class="comment">// cat正在睡觉！</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat <span class="keyword">instanceof</span> <span class="title class_">Animal</span>); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat <span class="keyword">instanceof</span> <span class="title class_">Cat</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p>优点：</p>
<ul>
<li>1、非常纯粹的继承关系，实例是子类的实例，也是父类的实例</li>
<li>2、父类新增原型方法&#x2F;属性，子类都能访问到</li>
<li>3、简单，易于实现</li>
</ul>
<p>缺点：</p>
<ul>
<li>1、要想为子类新增属性和方法，必须要在 new Animal()这样的语句之后执行，不能放构造器中</li>
<li>2、来自原型对象的所有属性被所有实例共享</li>
<li>3、创建子实例时，无法向父类构造函数传参</li>
<li>4、不支持多继承</li>
</ul>
<h4 id="2、构造继承"><a href="#2、构造继承" class="headerlink" title="2、构造继承"></a>2、构造继承</h4><p>核心：使用父类的构造器来增强子类实例，等于是复制父类的实例属性给子类（没用到原型）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Cat</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="title class_">Animal</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name || <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat.<span class="property">name</span>); <span class="comment">// Tom</span></span><br><span class="line">cat.<span class="title function_">sleep</span>(); <span class="comment">// Tom正在睡觉！</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat <span class="keyword">instanceof</span> <span class="title class_">Animal</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat <span class="keyword">instanceof</span> <span class="title class_">Cat</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>优点：</p>
<ul>
<li>1、解决了原型链继承中，子类实例共享父类引用属性的问题</li>
<li>2、创建子类实例时，可以向父类传递参数</li>
<li>3、可以实现多继承(call 多个父类对象)</li>
</ul>
<p>缺点：</p>
<ul>
<li>1、实例并不是父类的实例，知识子类的实例</li>
<li>2、是能继承父类的实例属性和方法，不能继承原型属性&#x2F;方法</li>
<li>3、无法实现函数复用，每个子类都有父类实例函数的副本，影响性能</li>
</ul>
<h4 id="3、实例继承"><a href="#3、实例继承" class="headerlink" title="3、实例继承"></a>3、实例继承</h4><p>核心：为父类实例添加新特性，作为子类实例返回</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Cat</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> instance = <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line">  instance.<span class="property">name</span> = name || <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat.<span class="property">name</span>); <span class="comment">// Tom</span></span><br><span class="line">cat.<span class="title function_">sleep</span>(); <span class="comment">// Tom正在睡觉！</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat <span class="keyword">instanceof</span> <span class="title class_">Animal</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat <span class="keyword">instanceof</span> <span class="title class_">Cat</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>优点：</p>
<ul>
<li>1、不限制调用方式，不管是 new 子类()还是子类()，返回的对象具有相同效果</li>
</ul>
<p>缺点：</p>
<ul>
<li>1、实例是父类的实例，不是子类的实例</li>
<li>2、不支持多继承</li>
</ul>
<h4 id="4、拷贝继承"><a href="#4、拷贝继承" class="headerlink" title="4、拷贝继承"></a>4、拷贝继承</h4><p>核心：就一个一个拷贝</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Cat</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> animal = <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> animal) &#123;</span><br><span class="line">    <span class="title class_">Cat</span>.<span class="property"><span class="keyword">prototype</span></span>[p] = animal[p];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name || <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat.<span class="property">name</span>); <span class="comment">// Tom</span></span><br><span class="line">cat.<span class="title function_">sleep</span>(); <span class="comment">// Tom正在睡觉！</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat <span class="keyword">instanceof</span> <span class="title class_">Animal</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat <span class="keyword">instanceof</span> <span class="title class_">Cat</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>优点：</p>
<ul>
<li>1、支持多继承</li>
</ul>
<p>缺点：</p>
<ul>
<li>1、效率低，内存占用高（因为要拷贝父类的属性）</li>
<li>2、无法获取父类不可枚举方法（不可枚举方法，不能使用 for in 访问到）</li>
</ul>
<h4 id="5、组合继承"><a href="#5、组合继承" class="headerlink" title="5、组合继承"></a>5、组合继承</h4><p>核心：通过父类构造，继承父类的属性并保留传参的有点，然后通过将父类实例作为子类原型，实现函数复用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Cat</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="title class_">Animal</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name || <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Cat</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line"></span><br><span class="line"><span class="title class_">Cat</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Cat</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat.<span class="property">name</span>); <span class="comment">// Tom</span></span><br><span class="line">cat.<span class="title function_">sleep</span>(); <span class="comment">// Tom正在睡觉！</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat <span class="keyword">instanceof</span> <span class="title class_">Animal</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat <span class="keyword">instanceof</span> <span class="title class_">Cat</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>优点：</p>
<ul>
<li>1、弥补了构造继承的缺陷，可以继承实例属性&#x2F;方法，也可继承原型属性&#x2F;方法</li>
<li>2、既是子类的实例，也是父类的实例</li>
<li>3、不存在引用属性共享问题</li>
<li>4、可传参</li>
<li>5、函数可复用</li>
</ul>
<p>缺点：</p>
<ul>
<li>1、调用了两次父类构造函数，生成了两份实例（子类实例将子类原型上的那份屏蔽了）</li>
</ul>
<h4 id="6、寄生组合继承"><a href="#6、寄生组合继承" class="headerlink" title="6、寄生组合继承"></a>6、寄生组合继承</h4><p>核心：通过寄生方式，砍掉父类的实例属性，这样，在调用两次父类的构造时，就不会初始化两次实例方法&#x2F;属性，避免继承组合的缺点</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Cat</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="title class_">Animal</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name || <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建一个没有实例方法的类</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Super</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="title class_">Super</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line"><span class="comment">//将实例作为子类的原型</span></span><br><span class="line"><span class="title class_">Cat</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Super</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test Code</span></span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat.<span class="property">name</span>); <span class="comment">// Tom</span></span><br><span class="line">cat.<span class="title function_">sleep</span>(); <span class="comment">// Tom正在睡觉！</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat <span class="keyword">instanceof</span> <span class="title class_">Animal</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat <span class="keyword">instanceof</span> <span class="title class_">Cat</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p>优点：</p>
<ul>
<li>1、堪称完美</li>
</ul>
<p>缺点：</p>
<ul>
<li>1、实现复杂</li>
</ul>
<h3 id="38、创建一个对象的方式有哪几种？"><a href="#38、创建一个对象的方式有哪几种？" class="headerlink" title="38、创建一个对象的方式有哪几种？"></a>38、创建一个对象的方式有哪几种？</h3><ul>
<li>1.new Object 创建</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&quot;Sunshine_Lin&quot;</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>2.字面量创建</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;Sunshin_Lin&quot;</span> &#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>3.工厂模式创建</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createObj</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">  obj.<span class="property">name</span> = name;</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj = <span class="title function_">createObj</span>(<span class="string">&quot;Sunshine_Lin&quot;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>4.构造函数创建</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Sunshine_Lin&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="39、this-指向的四种情况？"><a href="#39、this-指向的四种情况？" class="headerlink" title="39、this 指向的四种情况？"></a>39、this 指向的四种情况？</h3><ul>
<li>1、new 操作符创建实例</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// this指向当前person实例对象</span></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Sunshine_Lin&quot;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>2、指向 window</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(); <span class="comment">// 浏览器window，node里global</span></span><br></pre></td></tr></table></figure>

<ul>
<li>3、对象调用方法</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;</span><br><span class="line">  <span class="attr">fn</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">target.<span class="title function_">fn</span>(); <span class="comment">// target</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这种就是改变了this了</span></span><br><span class="line"><span class="keyword">const</span> fn = target.<span class="property">fn</span>;</span><br><span class="line"><span class="title function_">fn</span>(); <span class="comment">// 浏览器window，node里global</span></span><br></pre></td></tr></table></figure>

<ul>
<li>4、call、apply、bind 改变 this</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;林三心&quot;</span>,</span><br><span class="line">  <span class="attr">sayName</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Sunshin_Lin&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 改变sayName的this指向obj2</span></span><br><span class="line">obj1.<span class="property">sayName</span>.<span class="title function_">call</span>(obj2); <span class="comment">// Sunshin_Lin</span></span><br><span class="line"><span class="comment">// 改变sayName的this指向obj2</span></span><br><span class="line">obj1.<span class="property">sayName</span>.<span class="title function_">apply</span>(obj2); <span class="comment">// Sunshin_Lin</span></span><br><span class="line"><span class="comment">// 改变sayName的this指向obj2</span></span><br><span class="line"><span class="keyword">const</span> fn = obj1.<span class="property">sayName</span>.<span class="title function_">bind</span>(obj2);</span><br><span class="line"><span class="title function_">fn</span>(); <span class="comment">// Sunshin_Lin</span></span><br></pre></td></tr></table></figure>

<h3 id="40、数组的常用方法有哪些？"><a href="#40、数组的常用方法有哪些？" class="headerlink" title="40、数组的常用方法有哪些？"></a>40、数组的常用方法有哪些？</h3><table>
<thead>
<tr>
<th>方法</th>
<th>作用</th>
<th>是否影响原数组</th>
</tr>
</thead>
<tbody><tr>
<td>push</td>
<td>在数组后添加元素，返回数组长度</td>
<td>y</td>
</tr>
<tr>
<td>pop</td>
<td>删除数组最后一项，返回被删除项</td>
<td>y</td>
</tr>
<tr>
<td>shift</td>
<td>删除数组第一项，并返回数组</td>
<td>y</td>
</tr>
<tr>
<td>unshift</td>
<td>数组开头添加元素，返回添加的元素</td>
<td>y</td>
</tr>
<tr>
<td>reserve</td>
<td>反转一个数组，返回修改后的数组</td>
<td>y</td>
</tr>
<tr>
<td>sort</td>
<td>排序一个数组，返回修改后的数组</td>
<td>y</td>
</tr>
<tr>
<td>splice</td>
<td>截取数组，返回被截取的区间</td>
<td>y</td>
</tr>
<tr>
<td>join</td>
<td>arr.join(x)将 arr 数组元素连接成字符串并返回这个字符串</td>
<td>n</td>
</tr>
<tr>
<td>concat</td>
<td>arr1.concat(arr2, arr3) 连接数组</td>
<td>n</td>
</tr>
<tr>
<td>map</td>
<td>操作数组每一项并返回一个新数组</td>
<td>n</td>
</tr>
<tr>
<td>forEach</td>
<td>遍历数组，没有返回值</td>
<td>n</td>
</tr>
<tr>
<td>filter</td>
<td>对数组所有项进行判断，返回符合规则的新数组</td>
<td>n</td>
</tr>
<tr>
<td>every</td>
<td>数组每一项都符合规则才返回 true</td>
<td>n</td>
</tr>
<tr>
<td>some</td>
<td>数组有符合规则的一项就返回 true</td>
<td>n</td>
</tr>
<tr>
<td>reduce</td>
<td>接收上一个 return 和数组的下一项</td>
<td>n</td>
</tr>
<tr>
<td>flat</td>
<td>数组扁平化</td>
<td>n</td>
</tr>
<tr>
<td>slice</td>
<td>截取数组，返回被截取的区间</td>
<td>n</td>
</tr>
</tbody></table>
<h3 id="41、Math-的常用方法有哪些？"><a href="#41、Math-的常用方法有哪些？" class="headerlink" title="41、Math 的常用方法有哪些？"></a>41、Math 的常用方法有哪些？</h3><table>
<thead>
<tr>
<th>方法</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>Math.max(arr)</td>
<td>取 arr 中的最大值</td>
</tr>
<tr>
<td>Math.min(arr)</td>
<td>取 arr 中的最小值</td>
</tr>
<tr>
<td>Math.ceil(小数)</td>
<td>小数向上取整</td>
</tr>
<tr>
<td>Math.floor(小数)</td>
<td>小数向下取整</td>
</tr>
<tr>
<td>Math.round(小数)</td>
<td>小数四舍五入</td>
</tr>
<tr>
<td>Math.sqrt(num)</td>
<td>对 num 进行开方</td>
</tr>
<tr>
<td>Math.pow(num, m)</td>
<td>对 num 取 m 次幂</td>
</tr>
<tr>
<td>Math.random() * num</td>
<td>取 0-num 的随机数</td>
</tr>
</tbody></table>
<h3 id="42、哪些因素导致内存泄漏？如何解决？"><a href="#42、哪些因素导致内存泄漏？如何解决？" class="headerlink" title="42、哪些因素导致内存泄漏？如何解决？"></a>42、哪些因素导致内存泄漏？如何解决？</h3><p>请看我这篇文章<a href="https://juejin.cn/post/6996828267068014600">哪是大神？只是用他人七夕约会时间，整理「JS 避免内存泄漏」罢了</a></p>
<h3 id="43、讲讲-JavaScript-的垃圾回收机制"><a href="#43、讲讲-JavaScript-的垃圾回收机制" class="headerlink" title="43、讲讲 JavaScript 的垃圾回收机制"></a>43、讲讲 JavaScript 的垃圾回收机制</h3><p>看我这篇文章：<a href="https://juejin.cn/post/6995706341041897486">赠你 13 张图，助你 20 分钟打败了「V8 垃圾回收机制」</a></p>
<h3 id="44、JS-中有哪些不同类型的弹出框？"><a href="#44、JS-中有哪些不同类型的弹出框？" class="headerlink" title="44、JS 中有哪些不同类型的弹出框？"></a>44、JS 中有哪些不同类型的弹出框？</h3><p>在 JS 中有三种类型的弹出框可用，分别是：</p>
<ul>
<li><p>Alert</p>
</li>
<li><p>Confirm</p>
</li>
<li><p>Prompt</p>
</li>
</ul>
<h3 id="45-如何将-JS-日期转换为-ISO-标准"><a href="#45-如何将-JS-日期转换为-ISO-标准" class="headerlink" title="45. 如何将 JS 日期转换为 ISO 标准"></a>45. 如何将 JS 日期转换为 ISO 标准</h3><p>toISOString() 方法用于将 js 日期转换为 ISO 标准。 它使用 ISO 标准将 js Date 对象转换为字符串。如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="keyword">var</span> n = date.<span class="title function_">toISOString</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line"><span class="comment">// YYYY-MM-DDTHH:mm:ss.sssZ</span></span><br></pre></td></tr></table></figure>

<h3 id="46、如何在-JS-中编码和解码-URL"><a href="#46、如何在-JS-中编码和解码-URL" class="headerlink" title="46、如何在 JS 中编码和解码 URL"></a>46、如何在 JS 中编码和解码 URL</h3><p>encodeURI() 函数用于在 JS 中对 URL 进行编码。它将 url 字符串作为参数并返回编码的字符串。</p>
<p>注意： encodeURI()不会编码类似这样字符： &#x2F; ? : @ &amp; &#x3D; + $ #，如果需要编码这些字符，请使用 encodeURIComponent()。 用法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> uri = <span class="string">&quot;my profile.php?name=sammer&amp;occupation=pāntiNG&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> encoded_uri = <span class="built_in">encodeURI</span>(uri);</span><br></pre></td></tr></table></figure>

<p>decodeURI() 函数用于解码 js 中的 URL。它将编码的 url 字符串作为参数并返回已解码的字符串，用法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> uri = <span class="string">&quot;my profile.php?name=sammer&amp;occupation=pāntiNG&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> encoded_uri = <span class="built_in">encodeURI</span>(uri);</span><br><span class="line"><span class="built_in">decodeURI</span>(encoded_uri);</span><br></pre></td></tr></table></figure>

<h3 id="47、什么是-BOM？有哪些-api？"><a href="#47、什么是-BOM？有哪些-api？" class="headerlink" title="47、什么是 BOM？有哪些 api？"></a>47、什么是 BOM？有哪些 api？</h3><p>BOM 就是 browser object model，浏览器对象模型</p>
<table>
<thead>
<tr>
<th>api</th>
<th>作用</th>
<th>代表方法或属性</th>
</tr>
</thead>
<tbody><tr>
<td>window.history</td>
<td>操纵浏览器的记录</td>
<td>history.back()</td>
</tr>
<tr>
<td>history.go(-1)</td>
<td></td>
<td></td>
</tr>
<tr>
<td>window.innerHeight</td>
<td>获取浏览器窗口的高度</td>
<td></td>
</tr>
<tr>
<td>window.innerWidth</td>
<td>获取浏览器窗口的宽度</td>
<td></td>
</tr>
<tr>
<td>window.location</td>
<td>操作刷新按钮和地址栏</td>
<td>location.host：获取域名和端口；location.hostname：获取主机名；location.port：获取端口号；location.pathname：获取 url 的路径；location.search：获取?开始的部分；location.href：获取整个 url；location.hash：获取#开始的部分；location.origin：获取当前域名；location.navigator：获取当前浏览器信息</td>
</tr>
</tbody></table>
<h3 id="48、BOM-和-DOM-的关系"><a href="#48、BOM-和-DOM-的关系" class="headerlink" title="48、BOM 和 DOM 的关系"></a>48、BOM 和 DOM 的关系</h3><p>BOM 全称 Browser Object Model，即浏览器对象模型，主要处理浏览器窗口和框架。</p>
<p>DOM 全称 Document Object Model，即文档对象模型，是 HTML 和 XML 的应用程序接口（API），遵循 W3C 的标准，所有浏览器公共遵守的标准。</p>
<p>JS 是通过访问 BOM（Browser Object Model）对象来访问、控制、修改客户端(浏览器)，由于 BOM 的 window 包含了 document，window 对象的属性和方法是直接可以使用而且被感知的，因此可以直接使用 window 对象的 document 属性，通过 document 属性就可以访问、检索、修改 XHTML 文档内容与结构。因为 document 对象又是 DOM 的根节点。</p>
<p>可以说，BOM 包含了 DOM(对象)，浏览器提供出来给予访问的是 BOM 对象，从 BOM 对象再访问到 DOM 对象，从而 js 可以操作浏览器以及浏览器读取到的文档。</p>
<h3 id="49、JS-中的-substr-和-substring-函数有什么区别"><a href="#49、JS-中的-substr-和-substring-函数有什么区别" class="headerlink" title="49、JS 中的 substr()和 substring()函数有什么区别"></a>49、JS 中的 substr()和 substring()函数有什么区别</h3><p>substr() 函数的形式为 substr(startIndex,length)。 它从 startIndex 返回子字符串并返回’length’个字符数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">s.<span class="title function_">substr</span>(<span class="number">1</span>, <span class="number">4</span>) == <span class="string">&quot;ello&quot;</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>substring() 函数的形式为 substring(startIndex,endIndex)。 它返回从 startIndex 到 endIndex - 1 的子字符串。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">s.<span class="title function_">substring</span>(<span class="number">1</span>, <span class="number">4</span>) == <span class="string">&quot;ell&quot;</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="50、解释一下-“use-strict”"><a href="#50、解释一下-“use-strict”" class="headerlink" title="50、解释一下 “use strict” ?"></a>50、解释一下 “use strict” ?</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">“use strict”是<span class="title class_">Es5</span>中引入的js指令。 使用“use strict”指令的目的是强制执行严格模式下的代码。 在严格模式下，咱们不能在不声明变量的情况下使用变量。 早期版本的js忽略了“use strict”。</span><br></pre></td></tr></table></figure>

<p>原文链接：<br><a href="https://blog.csdn.net/weixin_43857188/article/details/121088336">https://blog.csdn.net/weixin_43857188/article/details/121088336</a></p>
]]></content>
  </entry>
  <entry>
    <title>面试题9：前端校招面试题</title>
    <url>/2022/01/17/%E9%9D%A2%E8%AF%95%E9%A2%98/%E9%9D%A2%E8%AF%95%E9%A2%989%EF%BC%9A%E5%89%8D%E7%AB%AF%E6%A0%A1%E6%8B%9B%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<h3 id="HTTP："><a href="#HTTP：" class="headerlink" title="HTTP："></a>HTTP：</h3><h4 id="1-高德一面-一个-tcp-连接能发几个-http-请求？"><a href="#1-高德一面-一个-tcp-连接能发几个-http-请求？" class="headerlink" title="1.[高德一面] 一个 tcp 连接能发几个 http 请求？"></a>1.[高德一面] 一个 tcp 连接能发几个 http 请求？</h4><p><strong>答案</strong>：</p>
<ul>
<li><p>如果是 HTTP 1.0 版本协议，一般情况下，不支持长连接，因此在每次请求发送完毕之后，TCP 连接即会断开，因此一个 TCP 发送一个 HTTP 请求，但是有一种情况可以将一条 TCP 连接保持在活跃状态，那就是通过 Connection 和 Keep-Alive 首部，在请求头带上 Connection: Keep-Alive ，并且可以通过 Keep-Alive 通用首部中指定的，用逗号分隔的选项调节 keep-alive 的行为，如果客户端和服务端都支持，那么其实也可以发送多条，不过此方式也有限制，可以关注《HTTP 权威指南》4.5.5 节对于 Keep-Alive 连接的限制和规则；</p>
</li>
<li><p>而如果是 HTTP 1.1 版本协议，支持了长连接，因此只要 TCP 连接不断开，便可以一直发送 HTTP 请求，持续不断，没有上限；</p>
</li>
<li><p>同样，如果是 HTTP 2.0 版本协议，支持多用复用，一个 TCP 连接是可以并发多个 HTTP 请求的，同样也是支持长连接，因此只要不断开 TCP 的连接，HTTP 请求数也是可以没有上限地持续发送.</p>
</li>
</ul>
<hr>
<blockquote>
<p>HTTP&#x2F;1.0 :一个 tcp 连接只能发一个 http 请求。每次服务端返回响应后 TCP 连接会断开。<br>HTTP&#x2F;1.1: 默认开启 Connection: keep-alive，一个 TCP 连接可以发多个 http 请求，但是多个请求是串行执行。（注意区别 TCP 的 keep-alive）<br>HTTP&#x2F;2: 引入了多路复用技术 和二进制分帧，同个域名下的请求只需要占用一个 TCP 连接，请求和响应是并行执行。(详细请看：[<a href="https://developer.51cto.com/art/201910/604255.htm]">https://developer.51cto.com/art/201910/604255.htm]</a>)</p>
</blockquote>
<h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><h4 id="1-未知-如何判断-0-1-0-2-与-0-3-相等？"><a href="#1-未知-如何判断-0-1-0-2-与-0-3-相等？" class="headerlink" title="1.[未知] 如何判断 0.1 + 0.2 与 0.3 相等？"></a>1.[未知] 如何判断 0.1 + 0.2 与 0.3 相等？</h4><p><strong>答案</strong>：<br>作为一道面试题，我觉得重要的是要讲出一点其他人一般不会答出来的深度。像这道题，可以从原理和解决方案两个地方作为答题点，最好在编一个案例。大致讲自己遇到过这个问题，于是很好奇深入研究了一下，发现是浮点数精度导致……原理怎样怎样……然后又看了业界的库的源码，然后怎样怎样解决。</p>
<p>关于原理，专门写了一篇文章 <a href="mqyqingfeng/Blog#155">JavaScript 深入之浮点数精度</a> 来解释，实际回答的时候，我觉得答出来</p>
<p>非是 ECMAScript 独有<br>IEEE754 标准中 64 位的储存格式，比如 11 位存偏移值<br>其中涉及的三次精度丢失<br>就已经 OK 了。</p>
<p>再讲解决方案，这个可以直接搜索到，各种方案都了解一下，比较一下优劣，还可以参考业界的一些库的实现，比如 math.js，不过相关的我并没有看过，后面我会研究一下。</p>
<p>如果还有精力的话，可以从加法再拓展讲讲超出安全值的数字的计算问题。</p>
<p>所以我觉得一能回答出底层实现，二能回答出多种解决方案的优劣，三能拓展讲出 bignum 的问题，就是一个非常完美的回答了。</p>
<h4 id="2-字节跳动-common-js-和-es6-中模块引入的区别？"><a href="#2-字节跳动-common-js-和-es6-中模块引入的区别？" class="headerlink" title="2.[字节跳动] common.js 和 es6 中模块引入的区别？"></a>2.[字节跳动] common.js 和 es6 中模块引入的区别？</h4><p>common.js：</p>
<p>require()生成一个对象，只会加载一次，会被缓存，这个对象是 module.exports 属性的一个拷贝。模块内部的变化相互不反映。可以实现条件加载</p>
<p>在服务端运行时同步阻塞加载，在浏览器中需要提前编译打包</p>
<p>esm</p>
<p>编译时加载，代码静态解析阶段就会生成，所以不能实现条件加载（使用 import()函数可以实现）</p>
<p>模块输出的是一个引用，并且不会缓存值，模块内部的变化会相互反应</p>
<hr>
<p><strong>答案</strong>：CommonJs 是一种模块规范，最初被应用于 node.js，成为 nodejs 的模块规范。运行在浏览器端的 js 由于也缺少类似的规范，在 es6 出来之前，前端也实现了一套相同的模块规范(例如:AMD)，用来对前端模块进行管理。自 es6 起，引入了一套新的 es6 module 规范，在语言标准的层面上实现了模块功能，而且实现得相当简单，有望成为浏览器和服务器通用的模块解决方案。但目前浏览器对 ES6 Module 兼容还不太好，我们平时在 webpack 中使用的 export&amp;import，会经过 babel 转换为 CommonJS 规范。在使用上的差别主要有：<br>（1）CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。<br>（2）CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。<br>（3）CommonJs 是单个值导出，ES6 Module 可以导出多个<br>（4）CommonJs 是动态语法可以写在判断里，ES6 Module 静态语法只能写在顶层<br>（5）CommonJs 的 this 是当前模块，ES6 Module 的 this 是 undefined</p>
<h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><h4 id="1-未知-cookie、token-和-session-的区别"><a href="#1-未知-cookie、token-和-session-的区别" class="headerlink" title="1.[未知] cookie、token 和 session 的区别"></a>1.[未知] cookie、token 和 session 的区别</h4><p>这道题绝对不是你回答的点越多就越好。这道题考察的是你对浏览器缓存知识的理解程度，所以你应该回答的是 Cookie、 Session、Token 的产生背景、原理、有什么问题，在回答这个的基础上把差别讲出来。把这些东西答出本质，再加点装逼的东西，再故意拓展讲到你准备的其他内容才是答好这道题的关键，而要理解好这些东西，其实一两天就够了。关于 Cookie，最近还发生了 Chrome80 屏蔽第三方 Cookie 的事件，如果真的问到这个问题，讲到这件事情妥妥的加分项，前提是你对这件事情也有比较深入的了解。关于 Cookie 和这件事情 我写了<a href="mqyqingfeng/Blog#157">这篇文章</a> 可以看一下。</p>
<hr>
<p>三者通常都用于用户的身份校验。</p>
<blockquote>
<p>session<br>服务端生成,存储于服务端的内存中,长时间不使用会过期,服务端会通过 session 判断请求是否来自同一个客户端</p>
</blockquote>
<blockquote>
<p>cookie<br>一般也由服务端生成,存储在客户端,每次请求都会自动附上这个值</p>
</blockquote>
<p>请求同域下的静态资源也会附上,会损耗资源</p>
<blockquote>
<p>token<br>服务端生成,服务端可以不做存储,也可以做存储</p>
</blockquote>
<p><strong>不做存储</strong><br>在 token 中加入用户身份识别信息,过期时间,时间戳等等内容,然后进行过加密传输给客户端,<br>需要身份校验的接口,服务端就判断请求头是是否附带有 token,如果有取出来解密然后执行后续操作</p>
<p><strong>做存储</strong><br>生成一段不重复的加密字符串 token 作为 key,然后存放在服务端(通常是用 redis,服务端重启也不会丢失用户的登录状态)使用 key-value 形式,value 是用户信息,然后将 token(key)发给客户端</p>
<h4 id="2-头条-如何选择图片格式，例如-png、webp"><a href="#2-头条-如何选择图片格式，例如-png、webp" class="headerlink" title="2.[头条] 如何选择图片格式，例如 png、webp"></a>2.[头条] 如何选择图片格式，例如 png、webp</h4><p>常用图片格式</p>
<ul>
<li>png</li>
<li>jpg</li>
<li>svg</li>
<li>base64</li>
<li>webp</li>
</ul>
<h5 id="1-png"><a href="#1-png" class="headerlink" title="1.png"></a>1.png</h5><p>优点</p>
<ul>
<li>无损压缩</li>
<li>质量高</li>
<li>支持透明</li>
</ul>
<p>缺点</p>
<ul>
<li>体积大</li>
</ul>
<p>适用场景</p>
<ul>
<li>呈现小的 Logo、颜色简单且对比强烈的图片或背景等</li>
</ul>
<h5 id="2-jpg"><a href="#2-jpg" class="headerlink" title="2.jpg"></a>2.jpg</h5><p>优点</p>
<ul>
<li>体积小:图片体积压缩至原有体积的 50% 以下时，JPG 仍然可以保持住 60% 的品质</li>
<li>加载快</li>
</ul>
<p>缺点</p>
<ul>
<li>不支持透明</li>
<li>有损压缩</li>
<li>处理线条感较强、颜色对比强烈的图像时，图片模糊会很明显</li>
</ul>
<p>适用场景</p>
<ul>
<li>背景图</li>
<li>大图轮播广告</li>
</ul>
<h5 id="3-svg"><a href="#3-svg" class="headerlink" title="3.svg"></a>3.svg</h5><p>优点</p>
<ul>
<li>体积小</li>
<li>可无限放大而不失真(矢量图)</li>
<li>兼容性好</li>
<li>可压缩性强</li>
</ul>
<p>缺点</p>
<ul>
<li>渲染成本比较高</li>
<li>可编程(有一定的学习成本)</li>
</ul>
<p>使用场景</p>
<ul>
<li>一些小 logo</li>
<li>可自由放缩的 logo(做贴图应用的场景)</li>
</ul>
<h5 id="4-base64"><a href="#4-base64" class="headerlink" title="4.base64"></a>4.base64</h5><p>优点</p>
<ul>
<li><p>文本文件</p>
</li>
<li><p>缺点</p>
</li>
<li><p>Base64 编码后，图片大小会膨胀为原文件的 4&#x2F;3</p>
</li>
</ul>
<p>使用场景</p>
<ul>
<li>实际尺寸很小（不超过 2kb 的）</li>
<li>图片的更新频率非常低</li>
<li>图片无法以雪碧图的形式与其它小图结合</li>
</ul>
<h5 id="5-WebP"><a href="#5-WebP" class="headerlink" title="5.WebP"></a>5.WebP</h5><p>优点</p>
<ul>
<li>支持透明</li>
<li>支持动图</li>
<li>与 PNG 相比，WebP 无损图像的尺寸缩小了 26％。</li>
</ul>
<p>缺点</p>
<ul>
<li>兼容性非常差</li>
<li>编码同样质量的 WebP 文件会占用更多的计算资源</li>
</ul>
<p>使用场景</p>
<ul>
<li>首先考虑浏览器兼容性^_^</li>
<li>考虑产品面向用户群体-.-</li>
</ul>
<h4 id="3-未知-首屏和白屏时间如何计算"><a href="#3-未知-首屏和白屏时间如何计算" class="headerlink" title="3.[未知] 首屏和白屏时间如何计算"></a>3.[未知] 首屏和白屏时间如何计算</h4><h5 id="1-首屏时间"><a href="#1-首屏时间" class="headerlink" title="1. 首屏时间"></a>1. 首屏时间</h5><h6 id="1-1-参考阿里-ARMS"><a href="#1-1-参考阿里-ARMS" class="headerlink" title="1.1 参考阿里 ARMS"></a>1.1 参考阿里 ARMS</h6><p>使用 ARMS 的计算方法，将可见 dom 元素数量增长最快的时间点作为首屏时间。</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/44933789?spm=a2c4g.11186623.2.15.2a995c7cUZ0pZh">FMP 技术方案</a></li>
<li><a href="https://github.com/iyjhabc/first-meaningful-paint/blob/master/src/index.js">计算方式</a></li>
</ul>
<h6 id="1-2-参考腾讯-Aegis"><a href="#1-2-参考腾讯-Aegis" class="headerlink" title="1.2 参考腾讯 Aegis"></a>1.2 参考腾讯 Aegis</h6><p>利用 MutationObserver 接口，监听 document 对象的节点变化。</p>
<p>检查这些变化的节点是否显示在首屏中，若这些节点在首屏中，那当前的时间点即为首屏渲染时间。但是还有首屏内图片的加载时间需要考虑，遍历 performance.getEntries() 拿到的所有图片实体对象，根据图片的初始加载时间和加载完成时间去更新首屏渲染时间。</p>
<p>这种方式相比第一种计算性能小一些。</p>
<p><a href="https://github.com/Cainankun/first-screen-rendering-time/blob/master/index.js">计算方式</a></p>
<hr>
<blockquote>
<p>使用 performance 对象</p>
</blockquote>
<p>随便打开一个页面在开发工具中实验</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> timing = <span class="variable language_">window</span>.<span class="property">performance</span>.<span class="property">timing</span>;</span><br></pre></td></tr></table></figure>

<p><img src="https://camo.githubusercontent.com/30e83a7b5d7482846a244040209f0f30183e686f08f39568ad9ed36c013fba17/687474703a2f2f696d672e63646e2e737567617261742e746f702f6d64496d672f4d5455344d7a67784d6a67324e546b784d773d3d353833383132383635393133" alt="图片"></p>
<p>贴一张网图</p>
<p><img src="https://camo.githubusercontent.com/48661699e18b1b606495c94d393f71c11b77d29261a7f41c6890bc862579e4fd/687474703a2f2f696d672e63646e2e737567617261742e746f702f6d64496d672f4d5455344d7a67784d6a6b324d7a49334e673d3d353833383132393633323736" alt="图片"></p>
<p><strong>白屏时间</strong></p>
<p><code>timing.responseEnd – timing.fetchStart</code></p>
<p><strong>首屏时间(完全加载?)</strong></p>
<p><code>timing.loadEventStart – timing.fetchStart</code></p>
<hr>
<p><strong>答案</strong>：首屏时间的计算，可以由 Native Webview 提供的类似 onload 的方法实现，在 ios 下对应的是 webViewDidFinishLoad，在 android 下对应的是 onPageFinished 事件。</p>
<p>白屏的定义有多种。可以认为“没有任何内容”是白屏，可以认为“网络或服务异常”是白屏，可以认为“数据加载中”是白屏，可以认为“图片加载不出来”是白屏。场景不同，白屏的计算方式就不相同。<br>方法 1：当页面的元素数小于 x 时，则认为页面白屏。比如“没有任何内容”，可以获取页面的 DOM 节点数，判断 DOM 节点数少于某个阈值 X，则认为白屏。<br>方法 2：当页面出现业务定义的错误码时，则认为是白屏。比如“网络或服务异常”。<br>方法 3：当页面出现业务定义的特征值时，则认为是白屏。比如“数据加载中”。</p>
<h5 id="2-白屏时间"><a href="#2-白屏时间" class="headerlink" title="2. 白屏时间"></a>2. 白屏时间</h5><p>计算方式：</p>
<p>domContentLoadEventEnd - fetchStart。<br>FCP。首次内容绘制，跟白屏时间相关的指标。支持 Chromium, Firefox,Safari 浏览器。参考<a href="https://github.com/GoogleChrome/web-vitals">谷歌的计算方式</a>计算</p>
<h3 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h3><h4 id="1-未知-小程序和-H5-有什么区别？"><a href="#1-未知-小程序和-H5-有什么区别？" class="headerlink" title="1.[未知] 小程序和 H5 有什么区别？"></a>1.[未知] 小程序和 H5 有什么区别？</h4><h5 id="小程序-1"><a href="#小程序-1" class="headerlink" title="小程序"></a>小程序</h5><p><strong>答案</strong>：<br>渲染方式与 H5 不同，小程序一般是通过 Native 原生渲染的，但是小程序同时也支持 web 渲染，如果使用 web 渲染的方式，我们需要初始化一个 WebView 组件，然后在 WebView 中加载 H5 页面；<br>所以当我们开发一个小程序时，通常会使用 hybrid 的方式，即会根据具体情况选择部分功能用小程序原生的代码来开发，部分功能通过 WebView 加载 H5 页面来实现。Native 与 Web 渲染混合使用，以实现项目的最优解；</p>
<p>这里值得注意的是，小程序下，native 方式通常情况下性能要优于 web 方式。</p>
<p>小程序特有的双线程设计。 H5 下我们所有资源通常都会打到一个 bundle.js 文件里（不考虑分包加载），而小程序编译后的结果会有两个 bundle，index.js 封装的是小程序项目的 view 层，以及 index.worker.js 封装的是项目的业务逻辑，在运行时，会有两条线程来分别处理这两个 bundle，一个是主渲染线程，它负责加载并渲染 index.js 里的内容，另外一个是 Service Worker 线 程，它负责执行 index.worker.js 里封装的业务逻辑，这里面会有很多对底层 api 调用。</p>
<p>————</p>
<ul>
<li>运行于特定的移动软件平台(Wechat&#x2F;支付宝&#x2F;字节跳动&#x2F;QQ&#x2F;快应用)</li>
<li>不同平台小程序之间语法上与 API 又有些许差异</li>
<li>如果不使用第三方的开发框架,每个平台都需要单独学习一些东西(有一定的学习成本)</li>
<li>对于用户来说需要先下载一个平台才能使用</li>
<li>没有 H5 的 API 丰富,某些功能实现还受一定的限制</li>
<li>发布自己的小程序需要审核</li>
</ul>
<h5 id="H5"><a href="#H5" class="headerlink" title="H5"></a>H5</h5><ul>
<li>需要考虑各大浏览器兼容性问题</li>
<li>不需要审核,可随时更新</li>
<li>没有特定的推送,推广渠道</li>
</ul>
<hr>
<p>• 渲染方式与 h5 不同，小程序一般是通过 Native 原生渲染的，但是小程序同时也支持 web 渲染，如果使用 web 渲染的方式，我们需要初始化一个 webview 组件，然后在 webview 中加载 h5 页面；</p>
<p>所以当我们开发一个小程序时，通常会使用 hybrid 的方式，即会根据具体情况选择部分功能用小程序原生的代码来开发，部分功能通过 webview 加载 h5 页面来实现。Native 与 Web 渲染混合使用，以实现项目的最优解；</p>
<p>这里值得注意的是，小程序下，native 方式通常情况下性能要优于 web 方式。</p>
<p>• 小程序特有的双线程设计。h5 下我们所有资源通常都会打到一个 bundle.js 文件里（不考虑分包加载），而小程序编译后的结果会有两个 bundle，index.js 封装的是小程序项目的 view 层，以及 index.worker.js 封装的是项目的业务逻辑，在运行时，会有两条线程来分别处理这两个 bundle，一个是主渲染线程，它负责加载并渲染 index.js 里的内容，另外一个是 Service Worker 线程，它负责执行 index.worker.js 里封装的业务逻辑，这里面会有很多对底层 api 调用。</p>
<h3 id="移动端开发"><a href="#移动端开发" class="headerlink" title="移动端开发"></a>移动端开发</h3><h4 id="1-蚂蚁金服二面-移动端开发相对于-pc-端开发有什么需要注意的？-正在答题中"><a href="#1-蚂蚁金服二面-移动端开发相对于-pc-端开发有什么需要注意的？-正在答题中" class="headerlink" title="1.[蚂蚁金服二面] 移动端开发相对于 pc 端开发有什么需要注意的？(正在答题中)"></a>1.[蚂蚁金服二面] 移动端开发相对于 pc 端开发有什么需要注意的？(正在答题中)</h4><h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><h4 id="1-腾讯一面-Virtual-Dom-的优势在哪里？"><a href="#1-腾讯一面-Virtual-Dom-的优势在哪里？" class="headerlink" title="1.[腾讯一面] Virtual Dom 的优势在哪里？"></a>1.[腾讯一面] Virtual Dom 的优势在哪里？</h4><p><strong>答案</strong>：「Virtual Dom 的优势」其实这道题目面试官更想听到的答案不是上来就说「直接操作&#x2F;频繁操作 DOM 的性能差」，如果 DOM 操作的性能如此不堪，那么 jQuery 也不至于活到今天。所以面试官更想听到 VDOM 想解决的问题以及为什么频繁的 DOM 操作会性能差。</p>
<p>首先我们需要知道：</p>
<p>DOM 引擎、JS 引擎 相互独立，但又工作在同一线程（主线程）<br>JS 代码调用 DOM API 必须 挂起 JS 引擎、转换传入参数数据、激活 DOM 引擎，DOM 重绘后再转换可能有的返回值，最后激活 JS 引擎并继续执行若有频繁的 DOM API 调用，且浏览器厂商不做“批量处理”优化，<br>引擎间切换的单位代价将迅速积累若其中有强制重绘的 DOM API 调用，重新计算布局、重新绘制图像会引起更大的性能消耗。<br>其次是 VDOM 和真实 DOM 的区别和优化：</p>
<p>虚拟 DOM 不会立马进行排版与重绘操作<br>虚拟 DOM 进行频繁修改，然后一次性比较并修改真实 DOM 中需要改的部分，最后在真实 DOM 中进行排版与重绘，减少过多 DOM 节点排版与重绘损耗<br>虚拟 DOM 有效降低大面积真实 DOM 的重绘与排版，因为最终与真实 DOM 比较差异，可以只渲染局部</p>
<hr>
<p>以前也常认为是虚拟 DOM 会比原生快，后来在知乎上看到这篇文章：<a href="https://www.zhihu.com/question/31809713">https://www.zhihu.com/question/31809713</a><br>才明白虚拟 DOM 的目的是为了能 声明式、基于状态驱动 UI 的开发，除此之外，它还可以渲染除 DOM 以外的 backend，比如 ReactNative</p>
<h3 id="V8"><a href="#V8" class="headerlink" title="V8"></a>V8</h3><h4 id="1-腾讯二面-了解-v8-引擎吗，一段-js-代码如何执行的"><a href="#1-腾讯二面-了解-v8-引擎吗，一段-js-代码如何执行的" class="headerlink" title="1.[腾讯二面] 了解 v8 引擎吗，一段 js 代码如何执行的"></a>1.[腾讯二面] 了解 v8 引擎吗，一段 js 代码如何执行的</h4><p><strong>答案</strong>：<br>在执行一段代码时，JS 引擎会首先创建一个执行栈</p>
<p>然后 JS 引擎会创建一个全局执行上下文，并 push 到执行栈中, 这个过程 JS 引擎会为这段代码中所有变量分配内存并赋一个初始值（undefined），在创建完成后，JS 引擎会进入执行阶段，这个过程 JS 引擎会逐行的执行代码，即为之前分配好内存的变量逐个赋值(真实值)。</p>
<p>如果这段代码中存在 function 的声明和调用，那么 JS 引擎会创建一个函数执行上下文，并 push 到执行栈中，其创建和执行过程跟全局执行上下文一样。但有特殊情况，即当函数中存在对其它函数的调用时，JS 引擎会在父函数执行的过程中，将子函数的全局执行上下文 push 到执行栈，这也是为什么子函数能够访问到父函数内所声明的变量。</p>
<p>还有一种特殊情况是，在子函数执行的过程中，父函数已经 return 了，这种情况下，JS 引擎会将父函数的上下文从执行栈中移除，与此同时，JS 引擎会为还在执行的子函数上下文创建一个闭包，这个闭包里保存了父函数内声明的变量及其赋值，子函数仍然能够在其上下文中访问并使用这边变量&#x2F;常量。当子函数执行完毕，JS 引擎才会将子函数的上下文及闭包一并从执行栈中移除。</p>
<p>最后，JS 引擎是单线程的，那么它是如何处理高并发的呢？即当代码中存在异步调用时 JS 是如何执行的。比如 setTimeout 或 fetch 请求都是 non-blocking 的，当异步调用代码触发时，JS 引擎会将需要异步执行的代码移出调用栈，直到等待到返回结果，JS 引擎会立即将与之对应的回调函数 push 进任务队列中等待被调用，当调用(执行)栈中已经没有需要被执行的代码时，JS 引擎会立刻将任务队列中的回调函数逐个 push 进调用栈并执行。这个过程我们也称之为事件循环。</p>
<p>附言：需要更深入的了解 JS 引擎，必须理解几个概念，执行上下文，闭包，作用域，作用域链，以及事件循环。建议去网上多看看相关文章，这里推荐一篇非常精彩的博客，对于 JS 引擎的执行做了图形化的说明，更加便于理解。</p>
<p><a href="https://tylermcginnis.com/ultimate-guide-to-execution-contexts-hoisting-scopes-and-closures-in-javascript/?spm=ata.13261165.0.0.2d8e16798YR8lw">https://tylermcginnis.com/ultimate-guide-to-execution-contexts-hoisting-scopes-and-closures-in-javascript/?spm=ata.13261165.0.0.2d8e16798YR8lw</a></p>
<h3 id="浅谈-Event-Loop："><a href="#浅谈-Event-Loop：" class="headerlink" title="浅谈 Event Loop："></a>浅谈 Event Loop：</h3><p>js 是一门单线程的语言，它是通过事件循环机制实现（Event Loop）异步任务和多线程的。事件循环有三部分组成：</p>
<ul>
<li>调用栈(call Stack)</li>
<li>消息队列(Message Queue)</li>
<li>微任务队列(Microtack Queue)</li>
</ul>
<p>1、普通函数执行时先放入调用栈中按顺序执行并立即释放。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;22&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;11&quot;</span>);</span><br><span class="line">  <span class="title function_">foo1</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;33&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印顺序是：11 22 33</span></span><br></pre></td></tr></table></figure>

<p>2、异步函数（setTimeout，setInteval，xhr…）执行时放入消息队列中，执行完调用栈中的任务后执行。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;00&quot;</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;11&quot;</span>);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;22&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;33&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;44&quot;</span>);</span><br><span class="line"><span class="comment">// 打印顺序是：00 11 33 44 22</span></span><br></pre></td></tr></table></figure>

<p>3、promise，async，await 创建的函数先放入到微任务队列中，调用栈清空后立即被执行。</p>
<p>综合上面所讲的分析下这些代码。先不看答案自己尝试做一下。</p>
<p>第一阶段，执行调用栈。new 一个 promise 的时候里面的代码立即会执行，所以先输出{1}，接着运行函数 foo2 ，将 setTimeout 放到消息队列中，执行函数 foo 并输出{2}，往后执行输出{3}，之后将 p.then 放进微任务队列中继续执行函数，输出{4}，结束函数 foo2 执行并销毁。</p>
<p>第二阶段，微任务队列的消息放入调用栈执行，里面第一个任务是第一个 then 所以输出{5}，之后执行第二个 then 输出{6}，这时微任务队列清空。</p>
<p>第三阶段，消息队列的内容放入调用栈执行，输出{7} 并清空带哦用栈。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是promise，new的时候执行哦&quot;</span>); <span class="comment">// &#123;1&#125;</span></span><br><span class="line">  <span class="title function_">resolve</span>(<span class="number">555</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>); <span class="comment">// &#123;2&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是定时器哦&quot;</span>); <span class="comment">// &#123;7&#125;</span></span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">  <span class="title function_">foo</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">444</span>); <span class="comment">// &#123;3&#125;</span></span><br><span class="line">  p.<span class="title function_">then</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(resolve); <span class="comment">// &#123;5&#125;</span></span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">666</span>); <span class="comment">// &#123;6&#125;</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo2运行结束&quot;</span>); <span class="comment">// &#123;4&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo2</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出👇</span></span><br><span class="line"><span class="comment">// 我是promise，new的时候执行哦</span></span><br><span class="line"><span class="comment">// 222</span></span><br><span class="line"><span class="comment">// foo2运行结束</span></span><br><span class="line"><span class="comment">// 555</span></span><br><span class="line"><span class="comment">// 666</span></span><br><span class="line"><span class="comment">// 我是定时器哦</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
</search>
